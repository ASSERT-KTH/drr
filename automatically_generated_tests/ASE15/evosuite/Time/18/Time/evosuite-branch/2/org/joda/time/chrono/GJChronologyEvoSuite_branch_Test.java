/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:41 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class GJChronologyEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-433);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      int int1 = 2815;
      YearMonth yearMonth1 = yearMonth0.minusYears(int1);
      assertEquals(2, yearMonth1.size());
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth1);
      assertFalse(int0 == int1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(int1 == int0);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
      
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth1);
      assertEquals(1, years0.size());
      assertEquals(2, yearMonth1.size());
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals(2, yearMonth0.size());
      assertNotNull(years0);
      assertFalse(int0 == int1);
      assertFalse(yearMonth1.equals((Object)yearMonth0));
      assertFalse(int1 == int0);
      assertFalse(yearMonth0.equals((Object)yearMonth1));
      assertNotSame(yearMonth1, yearMonth0);
      assertNotSame(yearMonth0, yearMonth1);
  }

  //@Test
  public void test01()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "GJ";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(gJChronology0);
      
      int int0 = 60;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      long long0 = gJChronology0.add((ReadablePeriod) period0, (long) int0, int0);
      assertEquals(125572510803660L, long0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  //@Test
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) gJChronology0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 11;
      Months months0 = Months.months(int0);
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int1 = 352831696;
      Months months1 = months0.plus(int1);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertNotNull(months1);
      assertFalse(int0 == int1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      assertFalse(int1 == int0);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) months1);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-927876790425525000L), dateMidnight1.getMillis());
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertNotNull(dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(int0 == int1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      assertFalse(int1 == int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
  }

  @Test
  public void test03()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Months months0 = Months.TEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      long long0 = (-12219292800019L);
      int int0 = (-1073);
      long long1 = gJChronology0.add((ReadablePeriod) months0, long0, int0);
      assertEquals((-40437014400019L), long1);
      assertEquals(1, months0.size());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  //@Test
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 2147483647L;
      Duration duration0 = Duration.standardMinutes(long0);
      assertEquals(128849018820000L, duration0.getMillis());
      assertNotNull(duration0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateMidnight0);
      assertEquals(128849018820000L, duration0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(period0);
  }

  //@Test
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = (-1545);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1545,MONTH=-1545,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1545,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1545,HOUR_OF_DAY=-1545,MINUTE=-1545,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1545,MONTH=-1545,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1545,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1545,HOUR_OF_DAY=-1545,MINUTE=-1545,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(date0);
      
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1545,MONTH=-1545,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1545,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1545,HOUR_OF_DAY=-1545,MINUTE=-1545,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTime((ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-12219292725000L), dateTime0.getMillis());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-1545,MONTH=-1545,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1545,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1545,HOUR_OF_DAY=-1545,MINUTE=-1545,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(dateTime0);
  }

  //@Test
  public void test06()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      int int0 = 1269;
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try {
        long long0 = gJChronology0.set((ReadablePartial) localDate0, (long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfMonth is not supported
         //
      }
  }

  //@Test
  public void test07()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) gJChronology0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.minuteOfDay, cachedDateTimeZone0, assembledChronology_Fields0.halfdays, assembledChronology_Fields0.eras, assembledChronology_Fields0.halfdays);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = (-82L);
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(long0);
      assertEquals("59", string0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(string0);
  }

  //@Test
  public void test08()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "GJ";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(gJChronology0);
      
      String string1 = gJChronology0.toString();
      assertEquals("GJChronology[Europe/London,cutover=2014-02-14]", string1);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-433);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int1 = 1;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) int0, int1);
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertNotNull(gJChronology0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[-433:00,cutover=1969-12-31T23:59:59.567Z,mdfw=1]", string0);
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertEquals("GJChronology[UTC]", string0);
      assertNotNull(string0);
  }

  //@Test
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-1);
      int int1 = 3;
      int int2 = 29;
      LocalDate localDate0 = new LocalDate(int0, int1, int2, (Chronology) gJChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertEquals((-62159788725000L), dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(dateMidnight0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  //@Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) gJChronology0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateMidnight dateMidnight1 = localDate0.toDateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertEquals((-3600000L), dateMidnight1.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(dateMidnight1);
      assertTrue(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(dateMidnight0.equals((Object)dateMidnight1));
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
  }

  @Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 1112;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1112 for hourOfDay must be in the range [0,23]
         //
      }
  }

  //@Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      YearMonth yearMonth0 = new YearMonth((Chronology) gJChronology0);
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(2, yearMonth0.size());
      assertEquals(1391212800000L, interval0.getStartMillis());
      assertEquals(1393632000000L, interval0.getEndMillis());
      assertNotNull(interval0);
  }

  @Test
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-713);
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -713 for millisOfDay must be in the range [0,86400000]
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertNotNull(gJChronology1);
      assertSame(gJChronology1, gJChronology0);
      assertSame(gJChronology0, gJChronology1);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-433);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -433
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "FkwR+\\DI)36n\"0[q/zL";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      long long0 = (-12219292800000L);
      int int0 = (-2189);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -2189
         //
      }
  }

  //@Test
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(mutablePeriod0);
      
      long long0 = 631L;
      long long1 = (-2143L);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, long0, long1);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(intArray0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-2), (-774)}, intArray0);
  }

  //@Test
  public void test20()  throws Throwable  {
      int int0 = (-433);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      YearMonthDay yearMonthDay0 = dateMidnight0.toYearMonthDay();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.plusYears(int0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay1);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertNotNull(strictChronology0);
      
      YearMonthDay yearMonthDay2 = yearMonthDay1.withChronologyRetainFields((Chronology) strictChronology0);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay2.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-433:00", fixedDateTimeZone0.toString());
      assertEquals("-433:00", fixedDateTimeZone0.getID());
      assertNotNull(yearMonthDay2);
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay1, yearMonthDay2);
      assertNotSame(yearMonthDay2, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay2);
  }

  @Test
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-97);
      long long0 = gJChronology0.julianToGregorianByWeekyear(int0);
      assertEquals((-1209600097L), long0);
  }

  //@Test
  public void test23()  throws Throwable  {
      int int0 = (-33);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-33:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-33:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTimeISO();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-12219292800000L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertEquals("-33:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-33:00", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-12219292800000L), mutableDateTime0.getMillis());
      assertNotNull(gJChronology0);
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertEquals(1392368400000L, dateMidnight0.getMillis());
      assertEquals("-33:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-33:00", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-12219292800000L), mutableDateTime0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int0);
      assertEquals(1392368400000L, dateMidnight0.getMillis());
      assertEquals("-33:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-33:00", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-63173055600000L), dateMidnight1.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-12219292800000L), mutableDateTime0.getMillis());
      assertNotNull(dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  //@Test
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      assertEquals(302621037, int0);
  }

  //@Test
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 2445;
      long long0 = lenientChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
      assertEquals(21636768347445L, long0);
  }

  @Test
  public void test26()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  @Test
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 0;
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0, (Chronology) gJChronology0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      int int1 = (-2043);
      TimeOfDay timeOfDay1 = timeOfDay0.plusSeconds(int1);
      assertEquals(4, timeOfDay1.size());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay1);
      assertFalse(timeOfDay1.equals((Object)timeOfDay0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(timeOfDay0.equals((Object)timeOfDay1));
      assertNotSame(timeOfDay1, timeOfDay0);
      assertNotSame(timeOfDay0, timeOfDay1);
  }
}
