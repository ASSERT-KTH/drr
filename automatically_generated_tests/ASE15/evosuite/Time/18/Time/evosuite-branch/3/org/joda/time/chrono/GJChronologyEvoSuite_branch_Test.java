/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:09:26 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class GJChronologyEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      long long0 = 1195L;
      int int0 = (-171);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) gJChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int1 = skipUndoDateTimeField0.getLeapAmount(long0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      long long1 = skipUndoDateTimeField0.addWrapField((long) int0, int1);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(32054399829L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      
      int int0 = (-171);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      
      long long0 = skipUndoDateTimeField0.getDifferenceAsLong((long) int0, (long) int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0L, long0);
  }

  @Test
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      
      int int0 = (-1891);
      int int1 = 7;
      mutablePeriod0.setPeriod(int0, int1, int1, int1, int1, int0, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long1 = gJChronology0.add((ReadablePeriod) mutablePeriod0, (long) int0, int1);
      assertEquals((-417533123872128L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  //@Test
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int0 = 0;
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) int0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields((Chronology) buddhistChronology0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(yearMonthDay1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      
      Interval interval0 = yearMonthDay1.toInterval();
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(interval0);
      assertEquals((-17134675125000L), interval0.getStartMillis());
      assertEquals((-17134588725000L), interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      
      Period period0 = interval0.toPeriod();
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotNull(period0);
      assertEquals((-17134675125000L), interval0.getStartMillis());
      assertEquals((-17134588725000L), interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, yearMonthDay1.size());
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
  }

  @Test
  public void test04() {}
//   @Test
//   public void test04()  throws Throwable  {
//       GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//       assertNotNull(gJChronology0);
//       
//       YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
//       assertNotNull(yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       
//       int int0 = 1495;
//       YearMonthDay yearMonthDay1 = yearMonthDay0.plusYears(int0);
//       assertNotSame(yearMonthDay1, yearMonthDay0);
//       assertNotSame(yearMonthDay0, yearMonthDay1);
//       assertNotNull(yearMonthDay1);
//       assertEquals(3, yearMonthDay1.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
//       
//       LocalDate localDate0 = yearMonthDay0.toLocalDate();
//       assertNotSame(yearMonthDay0, yearMonthDay1);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
//       
//       PeriodType periodType0 = null;
//       Period period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) yearMonthDay1, periodType0);
//       assertNotSame(yearMonthDay1, yearMonthDay0);
//       assertNotSame(yearMonthDay0, yearMonthDay1);
//       assertNotNull(period0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay1.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
//       
//       YearMonthDay yearMonthDay2 = yearMonthDay0.minus((ReadablePeriod) period0);
//       assertNotSame(yearMonthDay1, yearMonthDay0);
//       assertNotSame(yearMonthDay1, yearMonthDay2);
//       assertNotSame(yearMonthDay0, yearMonthDay2);
//       assertNotSame(yearMonthDay0, yearMonthDay1);
//       assertNotSame(yearMonthDay2, yearMonthDay1);
//       assertNotSame(yearMonthDay2, yearMonthDay0);
//       assertNotNull(yearMonthDay2);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, yearMonthDay1.size());
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, yearMonthDay2.size());
//       assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
//       assertFalse(yearMonthDay1.equals((Object)yearMonthDay2));
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
//       assertFalse(yearMonthDay2.equals((Object)yearMonthDay1));
//       assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
//   }

  //@Test
  public void test05()  throws Throwable  {
      int int0 = (-2556);
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Years years0 = Years.THREE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      long long0 = (-12219292800000L);
      int[] intArray0 = gJChronology0.get((ReadablePeriod) years0, long0, (long) int0);
      assertNotNull(intArray0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1, years0.size());
      assertArrayEquals(new int[] {387}, intArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = (-171);
      long long0 = ethiopicChronology0.getYearMonthDayMillis(int0, int0, int0);
      assertEquals((-67782700800000L), long0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) gJChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      long long1 = skipUndoDateTimeField0.roundHalfCeiling(long0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals((-67784428800000L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test07()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      long long0 = 1195L;
      int int0 = 28181250;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      
      long long1 = skipUndoDateTimeField0.roundHalfCeiling(long0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals((-259200000L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      String string0 = skipUndoDateTimeField0.getAsText(readablePartial0, int0, locale0);
      assertNotNull(string0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("28181250", string0);
      
      long long2 = skipUndoDateTimeField0.set(long1, string0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals(889252186579200000L, long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
  }

  @Test
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = (-171);
      long long0 = ethiopicChronology0.getYearMonthDayMillis(int0, int0, int0);
      assertEquals((-67782700800000L), long0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = skipUndoDateTimeField0.getAsText(readablePartial0, int0, locale0);
      assertNotNull(string0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("-171", string0);
      
      long long1 = skipUndoDateTimeField0.set(long0, string0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals((-67561948800000L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 1073741823L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) gJChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 93;
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      LocalDate localDate0 = localDateTime1.toLocalDate();
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      LocalDate localDate1 = localDate0.withCenturyOfEra(int0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(3, localDate1.size());
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDate1.equals((Object)localDate0));
  }

  @Test
  public void test10()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      
      long long0 = 1195L;
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      
      String string0 = skipUndoDateTimeField0.getAsShortText(long0);
      assertNotNull(string0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("1970", string0);
  }

  @Test
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      int int0 = (-171);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      
      String string0 = skipUndoDateTimeField0.getAsText((long) int0);
      assertNotNull(string0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("1970", string0);
  }

  @Test
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      
      int int0 = (-171);
      long long0 = ethiopicChronology0.getYearMonthDayMillis(int0, int0, int0);
      assertEquals((-67782700800000L), long0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      
      String string0 = skipUndoDateTimeField0.getAsText(long0);
      assertNotNull(string0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals("-178", string0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 17;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+17:17", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+17:17", fixedDateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((long) int0);
      assertNotNull(dateTime0);
      assertEquals(17L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals(17L, dateTime0.getMillis());
      assertEquals("+17:17", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+17:17", fixedDateTimeZone0.toString());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals(17L, dateTime0.getMillis());
      assertEquals("+17:17", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+17:17", fixedDateTimeZone0.toString());
      assertEquals("GJChronology[+17:17,cutover=1970-01-01T00:00:00.017Z]", string0);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((long) int0);
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) dateTime0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0L, dateTime0.getMillis());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals("GJChronology[UTC,cutover=1970-01-01]", string0);
  }

  //@Test
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London]", string0);
  }

  //@Test
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Interval interval0 = yearMonthDay0.toInterval();
      assertNotNull(interval0);
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = (-1887);
      int int1 = 2;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(int0, int1, int0, int0, int1, int0, int0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1887 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 12;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int1 = 0;
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int1, int0, int0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
      }
  }

  //@Test
  public void test19()  throws Throwable  {
      int int0 = 12;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
      assertEquals((-61758762392988L), long0);
  }

  //@Test
  public void test20()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.getMinimumDaysInFirstWeek();
      assertEquals(4, int0);
      
      long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0);
      assertEquals((-62033039924996L), long0);
  }

  @Test
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotNull(gJChronology1);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
  }

  //@Test
  public void test22()  throws Throwable  {
      byte byte0 = (byte)0;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (long) byte0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 0
         //
      }
  }

  //@Test
  public void test23()  throws Throwable  {
      int int0 = (-1878);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GMT", zoneInfo0.getID());
      
      long long0 = (-12219292800000L);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1878
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0);
      assertNotNull(mutablePeriod0);
      
      int int0 = (-1891);
      mutablePeriod0.setPeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      long long1 = gJChronology0.add((ReadablePeriod) mutablePeriod0, long0, int0);
      assertEquals(124732304155116881L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       GJChronology gJChronology0 = GJChronology.getInstanceUTC();
//       assertNotNull(gJChronology0);
//       
//       YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) gJChronology0);
//       assertNotNull(yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       
//       int int0 = (-190);
//       YearMonthDay yearMonthDay1 = yearMonthDay0.plusDays(int0);
//       assertNotSame(yearMonthDay0, yearMonthDay1);
//       assertNotSame(yearMonthDay1, yearMonthDay0);
//       assertNotNull(yearMonthDay1);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, yearMonthDay1.size());
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
//       assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
//       
//       LocalDate localDate0 = yearMonthDay1.toLocalDate();
//       assertNotSame(yearMonthDay0, yearMonthDay1);
//       assertNotSame(yearMonthDay1, yearMonthDay0);
//       assertNotNull(localDate0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, yearMonthDay1.size());
//       assertEquals(3, localDate0.size());
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
//       assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
//       
//       PeriodType periodType0 = null;
//       Period period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) yearMonthDay0, periodType0);
//       assertNotSame(yearMonthDay0, yearMonthDay1);
//       assertNotSame(yearMonthDay1, yearMonthDay0);
//       assertNotNull(period0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(3, yearMonthDay1.size());
//       assertEquals(3, localDate0.size());
//       assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
//       assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
//   }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 4;
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (long) int0, int0);
      assertNotNull(gJChronology0);
      
      String string0 = "";
      boolean boolean0 = gJChronology0.equals((Object) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = (-171);
      long long0 = ethiopicChronology0.getYearMonthDayMillis(int0, int0, int0);
      assertEquals((-67782700800000L), long0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      long long1 = skipUndoDateTimeField0.getDifferenceAsLong(long0, (long) int0);
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals((-2148L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      
      long long0 = 1195L;
      int int0 = (-171);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      long long1 = skipUndoDateTimeField0.roundHalfCeiling(long0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals((-259200000L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      
      String string0 = skipUndoDateTimeField0.getAsText(readablePartial0, int0, locale0);
      assertNotNull(string0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("-171", string0);
      
      long long2 = skipUndoDateTimeField0.set(long1, string0);
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals((-67532227200000L), long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
  }

  //@Test
  public void test29()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = gJChronology0.hashCode();
      assertEquals(302621037, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = (-171);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      ReadablePartial readablePartial0 = null;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      
      String string0 = skipUndoDateTimeField0.getAsShortText(readablePartial0, int0, locale0);
      assertNotNull(string0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("-171", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekyear();
      assertNotNull(dateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, dateTimeField0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals("weekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyear", skipUndoDateTimeField0.getName());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(-292269054, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        int int0 = skipUndoDateTimeField0.getMaximumValue(readablePartial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      int int0 = 11;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) mutableDateTime0);
      assertNotNull(gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MonthDay monthDay0 = new MonthDay((Object) mutableDateTime0, (Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      MonthDay monthDay1 = monthDay0.withMonthOfYear(int0);
      assertNotSame(monthDay1, monthDay0);
      assertNotSame(monthDay0, monthDay1);
      assertNotNull(monthDay1);
      assertEquals(2, monthDay1.size());
      assertEquals(2, monthDay0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertFalse(monthDay1.equals((Object)monthDay0));
      assertFalse(monthDay0.equals((Object)monthDay1));
  }

  @Test
  public void test33()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      gJChronology0.assemble(assembledChronology_Fields0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test34()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(strictChronology0);
  }
}
