/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:04 GMT 2014
 */

package org.joda.time.tz;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.PushbackReader;
import java.io.Reader;
import java.util.HashMap;
import java.util.Map;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.ZoneInfoCompiler;
import org.junit.runner.RunWith;

 
public class ZoneInfoCompilerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "1O 2<Pg";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      assertNotNull(stringTokenizer0);
      assertEquals(7, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // O
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[1];
      char char0 = '!';
      charArray0[0] = char0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      
      PushbackReader pushbackReader0 = new PushbackReader((Reader) charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(false, pushbackReader0.markSupported());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pushbackReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(false, pushbackReader0.markSupported());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      
      zoneInfoCompiler0.parseDataFile((BufferedReader) lineNumberReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(1, lineNumberReader0.getLineNumber());
      assertEquals(false, pushbackReader0.markSupported());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(false, charArrayReader0.ready());
  }

  @Test
  public void test02()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[1];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      
      PushbackReader pushbackReader0 = new PushbackReader((Reader) charArrayReader0);
      assertNotNull(pushbackReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(false, pushbackReader0.markSupported());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) pushbackReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(false, pushbackReader0.markSupported());
      
      zoneInfoCompiler0.parseDataFile((BufferedReader) lineNumberReader0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, lineNumberReader0.getLineNumber());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(false, charArrayReader0.ready());
      assertEquals(false, pushbackReader0.markSupported());
  }

  @Test
  public void test03()  throws Throwable  {
      char char0 = 'z';
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      String string0 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertNotNull(string0);
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours((int) char0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+122:00", fixedDateTimeZone0.getID());
      assertEquals("+122:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = ZoneInfoCompiler.test(string0, fixedDateTimeZone0);
      assertTrue(boolean0);
      assertEquals("+122:00", fixedDateTimeZone0.getID());
      assertEquals("+122:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "UTC";
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      boolean boolean0 = ZoneInfoCompiler.test(string0, fixedDateTimeZone0);
      assertTrue(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      char char0 = 'z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertEquals('u', char1);
  }

  @Test
  public void test06()  throws Throwable  {
      char char0 = 'm';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('w', char1);
      
      char char2 = ZoneInfoCompiler.parseZoneChar(char1);
      assertFalse(char2 == char0);
      assertTrue(char2 == char1);
      assertFalse(char1 == char0);
      assertTrue(char1 == char2);
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
      assertEquals('w', char2);
  }

  @Test
  public void test07()  throws Throwable  {
      char char0 = 'Z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertEquals('u', char1);
      
      char char2 = ZoneInfoCompiler.parseZoneChar(char1);
      assertFalse(char0 == char1);
      assertFalse(char0 == char2);
      assertTrue(char1 == char2);
      assertFalse(char1 == char0);
      assertFalse(char2 == char0);
      assertTrue(char2 == char1);
      assertEquals('u', char2);
  }

  @Test
  public void test08()  throws Throwable  {
      char char0 = 's';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertTrue(char0 == char1);
      assertTrue(char1 == char0);
      assertEquals('s', char1);
  }

  @Test
  public void test09()  throws Throwable  {
      char char0 = 'g';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('u', char1);
  }

  @Test
  public void test10()  throws Throwable  {
      char char0 = 'U';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('u', char1);
  }

  @Test
  public void test11()  throws Throwable  {
      char char0 = 'S';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertEquals('s', char1);
  }

  @Test
  public void test12()  throws Throwable  {
      char char0 = 'G';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertEquals('u', char1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "-5=n1([N&F";
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals((-18000000), int0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-";
      String string1 = ZoneInfoCompiler.parseOptional(string0);
      assertNull(string1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      String string1 = ZoneInfoCompiler.parseOptional(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "only";
      int int0 = 85;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(85, int1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "max";
      int int0 = 7;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "maximum";
      int int0 = 51;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "min";
      int int0 = Integer.MIN_VALUE;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(Integer.MIN_VALUE, int1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "1OX2'PB'g";
      int int0 = 7;
      // Undeclared exception!
      try {
        int int1 = ZoneInfoCompiler.parseYear(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"1ox2'pb'g\"
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, dataOutputStream0.size());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      String string0 = "...\n";
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertNull(dateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{...\n=UTC}", hashMap0.toString());
      
      String string1 = "DayOfMonth: ";
      assertNotSame(string1, string0);
      
      DateTimeZone dateTimeZone1 = hashMap0.put(string1, (DateTimeZone) fixedDateTimeZone0);
      assertNull(dateTimeZone1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(2, hashMap0.size());
      assertEquals("{...\n=UTC, DayOfMonth: =UTC}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      
      // Undeclared exception!
      try {
        ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/SaveMillis: 0lastO");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      String string0 = "lastO";
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      String string1 = "SaveMillis: ";
      assertNotSame(string1, string0);
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string0);
      assertNotNull(mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      File[] fileArray0 = null;
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile0, fileArray0);
      assertNotNull(map0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "9tN8PgNE^G1";
      LenientChronology lenientChronology0 = (LenientChronology)ZoneInfoCompiler.getLenientISOChronology();
      assertNotNull(lenientChronology0);
      
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals(32400000, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear1);
      assertSame(zoneInfoCompiler_DateTimeOfYear1, zoneInfoCompiler_DateTimeOfYear0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 7;
      String string0 = "3";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      zoneInfoCompiler_DateTimeOfYear0.addCutover(dateTimeZoneBuilder0, int0);
      assertEquals(0, stringTokenizer0.countTokens());
  }

  @Test
  public void test26()  throws Throwable  {
      char char0 = 'z';
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      String string0 = ")>&13P!^&#O,wH.(gN7";
      zoneInfoCompiler_DateTimeOfYear0.addRecurring(dateTimeZoneBuilder0, string0, (int) char0, (int) char0, (int) char0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0);
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      String string1 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string1);
      assertEquals(0, stringTokenizer0.countTokens());
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "UTC";
      // Undeclared exception!
      try {
        int int0 = ZoneInfoCompiler.parseDayOfWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"UTC\" for dayOfWeek is not supported
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "13OX2'PB'g";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      assertNotNull(stringTokenizer0);
      assertEquals(10, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // O
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      OutputStream outputStream0 = null;
      DataOutputStream dataOutputStream0 = new DataOutputStream(outputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, dataOutputStream0.size());
      
      boolean boolean0 = ZoneInfoCompiler.verbose();
      assertFalse(boolean0);
      
      String string0 = null;
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      String string1 = "dayOfMonth";
      int int0 = (-3251);
      int int1 = 0;
      char char0 = '/';
      int int2 = (-2407);
      boolean boolean1 = false;
      assertTrue(boolean1 == boolean0);
      
      int int3 = (-2304);
      DateTimeZoneBuilder dateTimeZoneBuilder1 = dateTimeZoneBuilder0.addRecurringSavings(string1, int0, int1, int0, char0, (int) char0, int0, int2, boolean1, int3);
      assertNotNull(dateTimeZoneBuilder1);
      assertTrue(boolean1 == boolean0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      
      DateTimeZoneBuilder dateTimeZoneBuilder2 = dateTimeZoneBuilder1.setFixedSavings(string0, int2);
      assertNotNull(dateTimeZoneBuilder2);
      assertTrue(boolean1 == boolean0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      
      String string2 = "vE1cV)TYSmk`f#@W$";
      assertNotSame(string2, string1);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateTimeZoneBuilder2.toDateTimeZone(string2, boolean0);
      assertNotNull(fixedDateTimeZone0);
      assertTrue(boolean1 == boolean0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(boolean0 == boolean1);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder2, dateTimeZoneBuilder1);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder0);
      assertSame(dateTimeZoneBuilder1, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder2);
      assertSame(dateTimeZoneBuilder0, dateTimeZoneBuilder1);
      assertEquals("vE1cV)TYSmk`f#@W$", fixedDateTimeZone0.toString());
      assertEquals("vE1cV)TYSmk`f#@W$", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }
}
