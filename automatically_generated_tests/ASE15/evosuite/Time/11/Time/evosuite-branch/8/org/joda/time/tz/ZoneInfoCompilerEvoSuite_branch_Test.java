/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:01:14 GMT 2014
 */

package org.joda.time.tz;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.CharArrayReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.LineNumberReader;
import java.io.OutputStream;
import java.io.Reader;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.ZoneInfoCompiler;
import org.junit.runner.RunWith;

 
public class ZoneInfoCompilerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "8";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      assertEquals(0, stringTokenizer0.countTokens());
  }

  @Test
  public void test01()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      //  // Unstable assertion: assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      String string0 = "Rule";
      String string1 = zoneInfoCompiler_DateTimeOfYear0.toString();
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      MockFile mockFile0 = (MockFile)MockFile.createTempFile(string1, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotNull(mockFile0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      MockPrintStream mockPrintStream0 = new MockPrintStream((File) mockFile0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotNull(mockPrintStream0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = null;
      Object[] objectArray0 = new Object[9];
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.format(locale0, string0, objectArray0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertSame(mockPrintStream1, mockPrintStream0);
      //  // Unstable assertion: assertSame(mockPrintStream0, mockPrintStream1);
      //  // Unstable assertion: assertNotNull(mockPrintStream1);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      //  // Unstable assertion: assertNotNull(zoneInfoCompiler0);
      
      File[] fileArray0 = new File[4];
      fileArray0[0] = (File) mockFile0;
      //  // Unstable assertion: assertNotNull(fileArray0[0]);
      //  // Unstable assertion: assertEquals(4L, fileArray0[0].length());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].exists());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canExecute());
      //  // Unstable assertion: assertEquals("/tmp/MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n0MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", fileArray0[0].toString());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getTotalSpace());
      //  // Unstable assertion: assertEquals(1392409281320L, fileArray0[0].lastModified());
      //  // Unstable assertion: assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n0MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", fileArray0[0].getName());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].createNewFile());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canWrite());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].setReadOnly());
      //  // Unstable assertion: assertEquals("/tmp", fileArray0[0].getParent());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isDirectory());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getUsableSpace());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].isAbsolute());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].isFile());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].mkdir());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isHidden());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getFreeSpace());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].canRead());
      
      // Undeclared exception!
      try {
        Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile0, fileArray0);
       //  fail("Expecting exception: NoSuchElementException");
       // Unstable assertion
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "8F";
      String string1 = "O$2itfI\\Up1*V7W";
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      MockFile mockFile0 = new MockFile(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotNull(mockFile0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      //  // Unstable assertion: assertNotNull(zoneInfoCompiler0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/scratch/ac1gf/Time/11/8/run_evosuite.pl_12475_1418316641/8F/O$2itfI\\Up1*V7W");
      String string2 = " != ";
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string2);
      //  // Unstable assertion: assertNotSame(string2, string1);
      //  // Unstable assertion: assertNotSame(string2, string0);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertFalse(string2.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string2.equals((Object)string0));
      
      File[] fileArray0 = new File[2];
      fileArray0[0] = (File) mockFile0;
      //  // Unstable assertion: assertNotNull(fileArray0[0]);
      //  // Unstable assertion: assertEquals(false, fileArray0[0].mkdir());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getFreeSpace());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getTotalSpace());
      //  // Unstable assertion: assertEquals(4L, fileArray0[0].length());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].exists());
      //  // Unstable assertion: assertEquals("8F/O$2itfI\\Up1*V7W", fileArray0[0].toString());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isDirectory());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].createNewFile());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canWrite());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].canRead());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isHidden());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canExecute());
      //  // Unstable assertion: assertEquals("8F", fileArray0[0].getParent());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].setReadOnly());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isAbsolute());
      //  // Unstable assertion: assertEquals("O$2itfI\\Up1*V7W", fileArray0[0].getName());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].isFile());
      //  // Unstable assertion: assertEquals(1392409281320L, fileArray0[0].lastModified());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getUsableSpace());
      
      // Undeclared exception!
      try {
        Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile0, fileArray0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[4];
      char char0 = 'Z';
      charArray0[0] = char0;
      char char1 = '#';
      charArray0[2] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertArrayEquals(new char[] {'Z', '\u0000', '#', '\u0000'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0, (int) charArray0[0]);
      assertNotNull(lineNumberReader0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(true, lineNumberReader0.markSupported());
      assertArrayEquals(new char[] {'Z', '\u0000', '#', '\u0000'}, charArray0);
      
      zoneInfoCompiler0.parseDataFile((BufferedReader) lineNumberReader0);
      assertEquals(false, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(1, lineNumberReader0.getLineNumber());
      assertEquals(true, lineNumberReader0.markSupported());
      assertArrayEquals(new char[] {'Z', '\u0000', '#', '\u0000'}, charArray0);
  }

  @Test
  public void test04()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[7];
      char char0 = '#';
      charArray0[1] = char0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0, (int) charArray0[1]);
      assertNotNull(lineNumberReader0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      zoneInfoCompiler0.parseDataFile((BufferedReader) lineNumberReader0);
      assertEquals(false, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(1, lineNumberReader0.getLineNumber());
      assertArrayEquals(new char[] {'\u0000', '#', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test05()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[4];
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) charArrayReader0);
      assertNotNull(bufferedReader0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, bufferedReader0.markSupported());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(false, charArrayReader0.ready());
      assertEquals(true, bufferedReader0.markSupported());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test06()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      File file0 = null;
      File[] fileArray0 = null;
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile(file0, fileArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test07()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      String string0 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis((int) charArray0[0]);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = ZoneInfoCompiler.test(string0, fixedDateTimeZone0);
      assertTrue(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "org.joda.time.LocalDate$Property";
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      boolean boolean0 = false;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateTimeZoneBuilder0.toDateTimeZone(string0, boolean0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("org.joda.time.LocalDate$Property", fixedDateTimeZone0.toString());
      assertEquals("org.joda.time.LocalDate$Property", fixedDateTimeZone0.getID());
      
      boolean boolean1 = ZoneInfoCompiler.test(string0, fixedDateTimeZone0);
      assertTrue(boolean1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("org.joda.time.LocalDate$Property", fixedDateTimeZone0.toString());
      assertEquals("org.joda.time.LocalDate$Property", fixedDateTimeZone0.getID());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test09()  throws Throwable  {
      char char0 = 'z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test10()  throws Throwable  {
      char char0 = 'X';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('w', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      
      char char2 = ZoneInfoCompiler.parseZoneChar(char1);
      assertEquals('w', char2);
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertTrue(char1 == char2);
      assertFalse(char2 == char0);
      assertTrue(char2 == char1);
  }

  @Test
  public void test11()  throws Throwable  {
      char char0 = 'u';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertTrue(char0 == char1);
      assertTrue(char1 == char0);
  }

  @Test
  public void test12()  throws Throwable  {
      char char0 = 'S';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('s', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      
      char char2 = ZoneInfoCompiler.parseZoneChar(char1);
      assertEquals('s', char2);
      assertFalse(char2 == char0);
      assertTrue(char2 == char1);
      assertTrue(char1 == char2);
      assertFalse(char1 == char0);
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
  }

  @Test
  public void test13()  throws Throwable  {
      char char0 = 'g';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test14()  throws Throwable  {
      char char0 = 'Z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test15()  throws Throwable  {
      char char0 = 'W';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('w', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
  }

  @Test
  public void test16()  throws Throwable  {
      char char0 = 'U';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
  }

  @Test
  public void test17()  throws Throwable  {
      char char0 = 'G';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertEquals('u', char1);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "1";
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals(3600000, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "%/ED6LbN[g1$";
      // Undeclared exception!
      try {
        int int0 = ZoneInfoCompiler.parseTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // %/ED6LbN[g1$
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "-";
      String string1 = ZoneInfoCompiler.parseOptional(string0);
      assertNull(string1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "-D";
      String string1 = ZoneInfoCompiler.parseOptional(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("-D", string1);
      assertNotNull(string1);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 690562340;
      String string0 = "only";
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(690562340, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "o";
      int int0 = (-1287);
      // Undeclared exception!
      try {
        int int1 = ZoneInfoCompiler.parseYear(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"o\"
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "maximum";
      int int0 = 0;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "max";
      int int0 = (-19);
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "Vpy4U%";
      OutputStream outputStream0 = null;
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(outputStream0);
      assertNotNull(bufferedOutputStream0);
      
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) bufferedOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, dataOutputStream0.size());
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string1 = "8F";
      assertNotSame(string1, string0);
      
      int int0 = 47;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+47:47", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+47:47", fixedDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertNotSame(string0, string1);
      assertNull(dateTimeZone0);
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{Vpy4U%=+47:47}", hashMap0.toString());
      assertEquals("+47:47", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+47:47", fixedDateTimeZone0.getID());
      assertFalse(string0.equals((Object)string1));
      
      DateTimeZone dateTimeZone1 = hashMap0.put(string1, (DateTimeZone) fixedDateTimeZone0);
      assertNotSame(string1, string0);
      assertNull(dateTimeZone1);
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{8F=+47:47, Vpy4U%=+47:47}", hashMap0.toString());
      assertEquals("+47:47", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+47:47", fixedDateTimeZone0.getID());
      assertFalse(string1.equals((Object)string0));
      
      ZoneInfoCompiler.writeZoneInfoMap(dataOutputStream0, hashMap0);
      assertEquals(2, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{8F=+47:47, Vpy4U%=+47:47}", hashMap0.toString());
      assertEquals(32, dataOutputStream0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "-8F";
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals((-28800000), int0);
      
      LenientChronology lenientChronology0 = (LenientChronology)ZoneInfoCompiler.getLenientISOChronology();
      assertNotNull(lenientChronology0);
  }

  @Test
  public void test28()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
      assertSame(zoneInfoCompiler_DateTimeOfYear1, zoneInfoCompiler_DateTimeOfYear0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear1);
  }

  @Test
  public void test29()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      int int0 = (-1423);
      zoneInfoCompiler_DateTimeOfYear0.addCutover(dateTimeZoneBuilder0, int0);
  }

  @Test
  public void test30()  throws Throwable  {
      char char0 = 'z';
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      String string0 = null;
      zoneInfoCompiler_DateTimeOfYear0.addRecurring(dateTimeZoneBuilder0, string0, (int) char0, (int) char0, (int) char0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "G-aVn";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      String string1 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string1);
      assertNotNull(string1);
      assertEquals(0, stringTokenizer0.countTokens());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test32()  throws Throwable  {
      boolean boolean0 = ZoneInfoCompiler.verbose();
      assertFalse(boolean0);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "8";
      // Undeclared exception!
      try {
        int int0 = ZoneInfoCompiler.parseDayOfWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"8\" for dayOfWeek is not supported
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "2wSWd8VQD-+oK*r6";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      assertNotNull(stringTokenizer0);
      assertEquals(17, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // w
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      ThreadLocal<Boolean> threadLocal0 = ZoneInfoCompiler.cVerbose;
      //  // Unstable assertion: assertNotNull(threadLocal0);
      
      Boolean boolean0 = threadLocal0.get();
      //  // Unstable assertion: assertFalse(boolean0);
      
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      //  // Unstable assertion: assertNotNull(zoneInfoCompiler0);
      
      String string0 = "%/ED6LbN[g1$";
      MockFile mockFile0 = new MockFile(string0);
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      File[] fileArray0 = new File[1];
      MockFile mockFile1 = (MockFile)MockFile.createTempFile(string0, string0, (File) mockFile0);
      //  // Unstable assertion: assertNotSame(mockFile0, mockFile1);
      //  // Unstable assertion: assertNotSame(mockFile1, mockFile0);
      //  // Unstable assertion: assertNotNull(mockFile1);
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)mockFile1));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)mockFile0));
      
      fileArray0[0] = (File) mockFile1;
      //  // Unstable assertion: assertNotNull(fileArray0[0]);
      //  // Unstable assertion: assertEquals(true, fileArray0[0].exists());
      //  // Unstable assertion: assertEquals("/scratch/ac1gf/Time/11/8/run_evosuite.pl_12475_1418316641/%/ED6LbN[g1$/%/ED6LbN[g1$0%/ED6LbN[g1$", fileArray0[0].toString());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].length());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].canRead());
      //  // Unstable assertion: assertEquals("/scratch/ac1gf/Time/11/8/run_evosuite.pl_12475_1418316641/%/ED6LbN[g1$/%/ED6LbN[g1$0%", fileArray0[0].getParent());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getFreeSpace());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].isFile());
      //  // Unstable assertion: assertEquals("ED6LbN[g1$", fileArray0[0].getName());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getUsableSpace());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canWrite());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canExecute());
      //  // Unstable assertion: assertEquals(1392409281320L, fileArray0[0].lastModified());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].setReadOnly());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isDirectory());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].isAbsolute());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].mkdir());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getTotalSpace());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].createNewFile());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isHidden());
      
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile0, fileArray0);
      //  // Unstable assertion: assertNotSame(mockFile0, mockFile1);
      //  // Unstable assertion: assertNotNull(map0);
      //  // Unstable assertion: assertEquals(0, map0.size());
      //  // Unstable assertion: assertEquals(true, map0.isEmpty());
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)mockFile1));
  }
}
