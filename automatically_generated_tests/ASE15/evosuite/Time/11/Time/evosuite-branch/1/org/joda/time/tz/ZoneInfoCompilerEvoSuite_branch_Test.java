/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:22 GMT 2014
 */

package org.joda.time.tz;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.CharArrayReader;
import java.io.File;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.LineNumberReader;
import java.io.Reader;
import java.io.StringBufferInputStream;
import java.util.Map;
import java.util.StringTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DateTimeZoneBuilder;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.ZoneInfoCompiler;
import org.junit.runner.RunWith;

 
public class ZoneInfoCompilerEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "8YEo\"MM\\3P1Au^1te\"";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      assertNotNull(stringTokenizer0);
      assertEquals(18, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = null;
      try {
        zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Y
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "";
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0);
      assertNotNull(stringTokenizer0);
      assertEquals(0, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      assertEquals(0, stringTokenizer0.countTokens());
  }

  @Test
  public void test02()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[1];
      char char0 = '!';
      charArray0[0] = char0;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(0, lineNumberReader0.getLineNumber());
      
      zoneInfoCompiler0.parseDataFile((BufferedReader) lineNumberReader0);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertEquals(false, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(1, lineNumberReader0.getLineNumber());
  }

  @Test
  public void test03()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      byte[] byteArray0 = new byte[4];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) byteArrayInputStream0);
      assertNotNull(inputStreamReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(false, inputStreamReader0.markSupported());
      
      BufferedReader bufferedReader0 = new BufferedReader((Reader) inputStreamReader0);
      assertNotNull(bufferedReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(true, bufferedReader0.markSupported());
      assertEquals(false, inputStreamReader0.markSupported());
      
      zoneInfoCompiler0.parseDataFile(bufferedReader0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(true, byteArrayInputStream0.markSupported());
      assertEquals(true, bufferedReader0.markSupported());
      assertEquals(false, inputStreamReader0.markSupported());
  }

  @Test
  public void test04()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      String string0 = "nXT#=veeqIi\"xD\\";
      StringBufferInputStream stringBufferInputStream0 = new StringBufferInputStream(string0);
      assertNotNull(stringBufferInputStream0);
      assertEquals(false, stringBufferInputStream0.markSupported());
      assertEquals(16, stringBufferInputStream0.available());
      
      InputStreamReader inputStreamReader0 = new InputStreamReader((InputStream) stringBufferInputStream0);
      assertNotNull(inputStreamReader0);
      assertEquals(false, inputStreamReader0.markSupported());
      assertEquals(false, stringBufferInputStream0.markSupported());
      assertEquals(16, stringBufferInputStream0.available());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) inputStreamReader0);
      assertNotNull(lineNumberReader0);
      assertEquals(false, inputStreamReader0.markSupported());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(false, stringBufferInputStream0.markSupported());
      assertEquals(16, stringBufferInputStream0.available());
      
      zoneInfoCompiler0.parseDataFile((BufferedReader) lineNumberReader0);
      assertEquals(false, inputStreamReader0.markSupported());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(1, lineNumberReader0.getLineNumber());
      assertEquals(false, stringBufferInputStream0.markSupported());
      assertEquals(0, stringBufferInputStream0.available());
  }

  @Test
  public void test05()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      //  // Unstable assertion: assertNotNull(zoneInfoCompiler0);
      
      String string0 = "nXT#=veeqIi\"xD\\";
      MockFile mockFile0 = new MockFile(string0, string0);
      //  // Unstable assertion: assertNotNull(mockFile0);
      
      MockFile mockFile1 = (MockFile)MockFile.createTempFile(string0, string0, (File) mockFile0);
      //  // Unstable assertion: assertNotSame(mockFile0, mockFile1);
      //  // Unstable assertion: assertNotSame(mockFile1, mockFile0);
      //  // Unstable assertion: assertNotNull(mockFile1);
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)mockFile1));
      //  // Unstable assertion: assertFalse(mockFile1.equals((Object)mockFile0));
      
      File[] fileArray0 = new File[1];
      fileArray0[0] = (File) mockFile1;
      //  // Unstable assertion: assertNotNull(fileArray0[0]);
      //  // Unstable assertion: assertEquals("/scratch/ac1gf/Time/11/1/run_evosuite.pl_31646_1418312212/nXT#=veeqIi\"xD\\/nXT#=veeqIi\"xD\\/nXT#=veeqIi\"xD\\0nXT#=veeqIi\"xD\\", fileArray0[0].toString());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canWrite());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].isFile());
      //  // Unstable assertion: assertEquals("/scratch/ac1gf/Time/11/1/run_evosuite.pl_31646_1418312212/nXT#=veeqIi\"xD\\/nXT#=veeqIi\"xD\\", fileArray0[0].getParent());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].mkdir());
      //  // Unstable assertion: assertEquals(1392409281320L, fileArray0[0].lastModified());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isDirectory());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getUsableSpace());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].isAbsolute());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].createNewFile());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].exists());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getFreeSpace());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].canExecute());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].setReadOnly());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].length());
      //  // Unstable assertion: assertEquals(false, fileArray0[0].isHidden());
      //  // Unstable assertion: assertEquals(true, fileArray0[0].canRead());
      //  // Unstable assertion: assertEquals(0L, fileArray0[0].getTotalSpace());
      //  // Unstable assertion: assertEquals("nXT#=veeqIi\"xD\\0nXT#=veeqIi\"xD\\", fileArray0[0].getName());
      
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile0, fileArray0);
      //  // Unstable assertion: assertNotSame(mockFile0, mockFile1);
      //  // Unstable assertion: assertNotNull(map0);
      //  // Unstable assertion: assertFalse(mockFile0.equals((Object)mockFile1));
      //  // Unstable assertion: assertEquals(0, map0.size());
      //  // Unstable assertion: assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test06()  throws Throwable  {
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      String string0 = "nXT#=veeqIi\"xD\\";
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      File[] fileArray0 = null;
      Map<String, DateTimeZone> map0 = zoneInfoCompiler0.compile((File) mockFile0, fileArray0);
      assertNotNull(map0);
      assertEquals(0, map0.size());
      assertEquals(true, map0.isEmpty());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "Pacific/Honolulu";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Pacific/Honolulu", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Pacific/Honolulu", cachedDateTimeZone0.toString());
      
      boolean boolean0 = ZoneInfoCompiler.test(string0, cachedDateTimeZone0);
      assertEquals("Pacific/Honolulu", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Pacific/Honolulu", cachedDateTimeZone0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "9";
      int int0 = (-22);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.022", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.022", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = ZoneInfoCompiler.test(string0, fixedDateTimeZone0);
      assertEquals("-00:00:00.022", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.022", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      String string0 = cachedDateTimeZone0.getID();
      assertNotNull(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", string0);
      
      boolean boolean0 = ZoneInfoCompiler.test(string0, cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      char char0 = 'w';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertTrue(char0 == char1);
      assertTrue(char1 == char0);
      assertEquals('w', char1);
  }

  @Test
  public void test11()  throws Throwable  {
      char char0 = 'z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('u', char1);
      
      char char2 = ZoneInfoCompiler.parseZoneChar(char1);
      assertTrue(char2 == char1);
      assertFalse(char2 == char0);
      assertFalse(char1 == char0);
      assertTrue(char1 == char2);
      assertFalse(char0 == char2);
      assertFalse(char0 == char1);
      assertEquals('u', char2);
  }

  @Test
  public void test12()  throws Throwable  {
      char char0 = 's';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertTrue(char0 == char1);
      assertTrue(char1 == char0);
      assertEquals('s', char1);
  }

  @Test
  public void test13()  throws Throwable  {
      char char0 = 'g';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertEquals('u', char1);
  }

  @Test
  public void test14()  throws Throwable  {
      char char0 = 'Z';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('u', char1);
  }

  @Test
  public void test15()  throws Throwable  {
      char char0 = 'W';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('w', char1);
  }

  @Test
  public void test16()  throws Throwable  {
      char char0 = 'S';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('s', char1);
  }

  @Test
  public void test17()  throws Throwable  {
      char char0 = 'G';
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('u', char1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "fBp0wram^_c";
      // Undeclared exception!
      try {
        int int0 = ZoneInfoCompiler.parseTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fBp0wram^_c
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "-00:00:00.027";
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals((-27), int0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "-";
      String string1 = ZoneInfoCompiler.parseOptional(string0);
      assertNull(string1);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "y";
      String string1 = ZoneInfoCompiler.parseOptional(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("y", string1);
  }

  @Test
  public void test22()  throws Throwable  {
      char char0 = 'W';
      String string0 = "max";
      int int0 = ZoneInfoCompiler.parseYear(string0, char0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 83;
      String string0 = "maximum";
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "min";
      int int0 = 12;
      int int1 = ZoneInfoCompiler.parseYear(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MIN_VALUE, int1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "-*L";
      int int0 = 10125000;
      // Undeclared exception!
      try {
        int int1 = ZoneInfoCompiler.parseYear(string0, int0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-*l\"
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "4Wm,E?P";
      int int0 = ZoneInfoCompiler.parseTime(string0);
      assertEquals(14400000, int0);
      
      LenientChronology lenientChronology0 = (LenientChronology)ZoneInfoCompiler.getLenientISOChronology();
      assertNotNull(lenientChronology0);
  }

  @Test
  public void test27()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = ZoneInfoCompiler.getStartOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear1 = ZoneInfoCompiler.getStartOfYear();
      assertSame(zoneInfoCompiler_DateTimeOfYear1, zoneInfoCompiler_DateTimeOfYear0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear1);
  }

  @Test
  public void test28()  throws Throwable  {
      char char0 = '.';
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      char char1 = ZoneInfoCompiler.parseZoneChar(char0);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals('w', char1);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = new DateTimeZoneBuilder();
      assertNotNull(dateTimeZoneBuilder0);
      
      zoneInfoCompiler_DateTimeOfYear0.addCutover(dateTimeZoneBuilder0, (int) char1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
  }

  @Test
  public void test29()  throws Throwable  {
      char char0 = '7';
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      DateTimeZoneBuilder dateTimeZoneBuilder0 = null;
      String string0 = "";
      // Undeclared exception!
      try {
        zoneInfoCompiler_DateTimeOfYear0.addRecurring(dateTimeZoneBuilder0, string0, (int) char0, (int) char0, (int) char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      String string0 = zoneInfoCompiler_DateTimeOfYear0.toString();
      assertNotNull(string0);
      assertEquals("MonthOfYear: 1\nDayOfMonth: 1\nDayOfWeek: 0\nAdvanceDayOfWeek: false\nMillisOfDay: 0\nZoneChar: w\n", string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "-00:00:00.027";
      // Undeclared exception!
      try {
        int int0 = ZoneInfoCompiler.parseDayOfWeek(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"-00:00:00.027\" for dayOfWeek is not supported
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "1";
      boolean boolean0 = true;
      StringTokenizer stringTokenizer0 = new StringTokenizer(string0, string0, boolean0);
      assertNotNull(stringTokenizer0);
      assertEquals(1, stringTokenizer0.countTokens());
      
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear(stringTokenizer0);
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      assertEquals(0, stringTokenizer0.countTokens());
  }

  @Test
  public void test33()  throws Throwable  {
      ZoneInfoCompiler.DateTimeOfYear zoneInfoCompiler_DateTimeOfYear0 = new ZoneInfoCompiler.DateTimeOfYear();
      assertNotNull(zoneInfoCompiler_DateTimeOfYear0);
      
      int int0 = 90;
      char char0 = 'y';
      boolean boolean0 = ZoneInfoCompiler.verbose();
      assertFalse(boolean0);
      
      ZoneInfoCompiler zoneInfoCompiler0 = new ZoneInfoCompiler();
      assertNotNull(zoneInfoCompiler0);
      
      char[] charArray0 = new char[1];
      char char1 = 'l';
      charArray0[0] = char1;
      CharArrayReader charArrayReader0 = new CharArrayReader(charArray0);
      assertNotNull(charArrayReader0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
      
      LineNumberReader lineNumberReader0 = new LineNumberReader((Reader) charArrayReader0);
      assertNotNull(lineNumberReader0);
      assertArrayEquals(new char[] {'l'}, charArray0);
      assertEquals(0, lineNumberReader0.getLineNumber());
      assertEquals(true, lineNumberReader0.markSupported());
      assertEquals(true, charArrayReader0.ready());
      assertEquals(true, charArrayReader0.markSupported());
  }
}
