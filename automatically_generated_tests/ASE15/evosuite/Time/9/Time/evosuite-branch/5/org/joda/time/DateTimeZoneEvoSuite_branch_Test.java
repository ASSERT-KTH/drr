/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:42 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 0L;
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(57722400000L, long1);
      
      long long2 = cachedDateTimeZone0.nextTransition(long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(69818400000L, long2);
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(boolean0);
      
      long long3 = cachedDateTimeZone0.adjustOffset(long1, boolean0);
      assertFalse(long0 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long1 == long3);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long3);
      assertFalse(long2 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(57718800000L, long3);
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = (-267L);
      int int0 = (-860);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = true;
      long long1 = fixedDateTimeZone0.adjustOffset(long0, boolean0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-267L), long1);
  }

  @Test
  public void test02()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-1L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(57722400000L, long1);
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertTrue(boolean0);
      
      long long2 = cachedDateTimeZone0.adjustOffset(long1, boolean0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(57722400000L, long2);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-7);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 2000;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sun May 15 17:53:20 GMT 4072", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Sun May 15 17:53:20 GMT 4072", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Sun May 15 17:53:20 GMT 4072", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-7);
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 1127;
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) int0, chronology0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = null;
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateTime dateTime0 = timeOfDay0.toDateTimeToday(dateTimeZone0);
      assertEquals(1392336001127L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(dateTime0);
      
      Instant instant0 = dateTime0.toInstant();
      assertEquals(1392336001127L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392336001127L, instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(1392336001127L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336001127L, instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (long) int0);
      assertEquals(1392336001127L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392336001127L, instant0.getMillis());
      assertEquals((-3598873L), long0);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = (-267L);
      int int0 = (-860);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = true;
      long long1 = fixedDateTimeZone0.convertLocalToUTC(long0, boolean0, (long) int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals(593L, long1);
      
      boolean boolean1 = fixedDateTimeZone0.isStandardOffset(long0);
      assertTrue(boolean1 == boolean0);
      assertFalse(long0 == long1);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertTrue(boolean1);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long2 = cachedDateTimeZone0.convertLocalToUTC(long1, boolean1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(boolean1 == boolean0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals((-3599407L), long2);
  }

  @Test
  public void test08()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 9223372036854775781L;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-1L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(57722400000L, long1);
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3600000, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 41;
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-60873119925000L), dateMidnight1.getMillis());
      assertNotNull(dateMidnight1);
      
      DateMidnight dateMidnight2 = dateMidnight1.plusDays(int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-60869577525000L), dateMidnight2.getMillis());
      assertEquals((-60873119925000L), dateMidnight1.getMillis());
      assertNotNull(dateMidnight2);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = (-860);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ReadableInstant readableInstant0 = null;
      int int1 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals((-860), int1);
  }

  @Test
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertNotNull(dateTime0);
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = (-2925L);
      String string0 = "-00:00:00.884";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.884", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.884", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      String string1 = fixedDateTimeZone0.getName(long0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.884", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.884", fixedDateTimeZone0.toString());
      assertNotNull(string1);
      assertEquals("-00:00:00.884", string1);
  }

  @Test
  public void test14()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 2000;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getName((long) int0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("\u82F1\u570B\u590F\u4EE4\u6642\u9593", string0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "GMT";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = 0L;
      String string1 = fixedDateTimeZone0.getShortName(long0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
      assertNotNull(string1);
      assertEquals("+00:00", string1);
  }

  @Test
  public void test16()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      int int0 = fixedDateTimeZone0.hashCode();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(84356, int0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("UTC", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "-00:00:00.884";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("-00:00:00.884", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.884", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("-00:00:00.884", fixedDateTimeZone1.getID());
      assertEquals("-00:00:00.884", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "X1cyinV9%kA@-";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test19()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test21()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-23);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-23:00", fixedDateTimeZone0.getID());
      assertEquals("-23:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone0.toTimeZone();
      assertEquals("GMT-23:00", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-23:00", fixedDateTimeZone0.getID());
      assertEquals("-23:00", fixedDateTimeZone0.toString());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals("GMT-23:00", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-23:00", fixedDateTimeZone0.getID());
      assertEquals("-23:00", fixedDateTimeZone0.toString());
      assertEquals("-23:00", fixedDateTimeZone1.toString());
      assertEquals("-23:00", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test24()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "GMT+";
      zoneInfo0.setID(string0);
      assertEquals("GMT+", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"+\"
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-860);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(-860, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.860,offset=-860,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("-00:00:00.860", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id '-00:00:00.860' is not recognised
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-7);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getNameKey((long) int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(string0);
      assertEquals("UTC", string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 86400000;
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: 86400000
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-86400000);
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Millis out of range: -86400000
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 37;
      int int1 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("+01:37", fixedDateTimeZone0.getID());
      assertEquals("+01:37", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-23);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -23
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 1127;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: 1127
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = (-9);
      int int1 = (-2014);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -2014
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = 245;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 245
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 1000;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:01", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertEquals("+00:00:01", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01", fixedDateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("+00:00:01", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("+00:00:01", fixedDateTimeZone1.getID());
      assertEquals("+00:00:01", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:01", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test36()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getID();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(string0);
      assertEquals("UTC", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = (-860);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("-00:00:00.860", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.860", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertEquals("Europe/London", zoneInfo0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(zoneInfo0);
//   }

  @Test
  public void test41()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(false, set0.isEmpty());
      assertEquals(578, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-2104);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:02.104", fixedDateTimeZone0.getID());
      assertEquals("-00:00:02.104", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:02.104", fixedDateTimeZone0.getID());
      assertEquals("-00:00:02.104", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      assertEquals("-00:00:02.104", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      assertNotNull(zoneInfoProvider0);
  }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(cachedDateTimeZone0);
//       
//       Object object0 = cachedDateTimeZone0.writeReplace();
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(object0);
//   }
}
