/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:19:00 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = true;
      long long0 = fixedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  //@Test
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 20L;
      boolean boolean0 = false;
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(20L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test02()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      byte byte0 = (byte) (-112);
      LocalDateTime localDateTime0 = new LocalDateTime((long) byte0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-4);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(boolean0);
      
      int int1 = fixedDateTimeZone0.getStandardOffset((long) int0);
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-4), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) int1, boolean0);
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, long0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "America/Anchorage";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = 9223372036854775807L;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "America/Anchorage";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775797L);
      boolean boolean0 = false;
      long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals((-9223372036825975797L), long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "America/Anchorage";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      boolean boolean0 = true;
      long long0 = (-9223372036854775783L);
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition: -292275055-05-16T16:47:04.217 (America/Anchorage)
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotNull(buddhistChronology0);
      
      int int0 = 13;
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime(int0, int0, int0, int0, int0, int0, int0, (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 13 for monthOfYear must be in the range [1,12]
         //
      }
  }

  //@Test
  public void test08()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Chronology chronology0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, chronology0);
      assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "SST";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("SST", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("SST", zoneInfo0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(false, dateTimeZone0.isFixed());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-650);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime1);
      assertEquals("SST", zoneInfo0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(false, dateTimeZone0.isFixed());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertFalse(boolean0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "SST";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("SST", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("SST", zoneInfo0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(false, dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = dateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("SST", zoneInfo0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(false, dateTimeZone0.isFixed());
      assertFalse(boolean0);
  }

  //@Test
  public void test11()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(boolean0);
  }

  //@Test
  public void test12()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      int int0 = 1419;
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(boolean0);
  }

  //@Test
  public void test13()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) gJChronology0, readableDateTime0, readableDateTime0);
      assertNotNull(limitChronology0);
      
      DateTime dateTime0 = limitChronology0.getUpperLimit();
      assertNull(dateTime0);
      
      int int0 = cachedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(0, int0);
  }

  //@Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(cachedDateTimeZone0);
      
      int int1 = cachedDateTimeZone0.getOffset((ReadableInstant) mutableDateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(3600000, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test15() {}
//   @Test
//   public void test15()  throws Throwable  {
//       long long0 = (-9223372036854775808L);
//       Chronology chronology0 = null;
//       MutableDateTime mutableDateTime0 = new MutableDateTime(long0, chronology0);
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertNotNull(mutableDateTime0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       long long1 = 1464L;
//       String string0 = cachedDateTimeZone0.getName(long1);
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(string0);
//       assertEquals("Britische Sommerzeit", string0);
//       assertFalse(long0 == long1);
//       assertFalse(long1 == long0);
//   }

  @Test
  public void test16()  throws Throwable  {
      int int0 = (-866);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.866", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.866", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertEquals("-00:00:00.866", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.866", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(string0);
      assertEquals("-00:00:00.866", string0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      assertEquals("UTC", string0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 423;
      String string0 = "0";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("java.util.SimpleTimeZone[id=0,offset=423,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(423, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("java.util.SimpleTimeZone[id=0,offset=423,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(423, simpleTimeZone0.getRawOffset());
      assertNotNull(fixedDateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("java.util.SimpleTimeZone[id=0,offset=423,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("0", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(423, simpleTimeZone0.getRawOffset());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test19()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test21()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = (-19);
      String string0 = "GMT-\u683C\u6797\u5A01\u6CBB\u65F6\u95F4";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(-19, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("GMT-\u683C\u6797\u5A01\u6CBB\u65F6\u95F4", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=GMT-\u683C\u6797\u5A01\u6CBB\u65F6\u95F4,offset=-19,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-\u683C\u6797\u5A01\u6CBB\u65F6\u95F4\" is malformed at \"\u683C\u6797\u5A01\u6CBB\u65F6\u95F4\"
         //
      }
  }

  //@Test
  public void test23()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Europe/London' is not recognised
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "SST";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("SST", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string1 = "N";
      assertNotSame(string1, string0);
      
      zoneInfo0.setID(string1);
      assertEquals("N", zoneInfo0.getID());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals("N", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+11:00", fixedDateTimeZone0.toString());
      assertEquals("+11:00", fixedDateTimeZone0.getID());
      assertNotSame(string0, string1);
      assertNotNull(fixedDateTimeZone0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test25()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(strictChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)strictChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 58;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("+58:58", fixedDateTimeZone0.toString());
      assertEquals("+58:58", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-5007);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -5007
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 73;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 73
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-4);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      int int1 = fixedDateTimeZone0.getStandardOffset((long) int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals((-4), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getName((long) int1, locale0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(string0);
      assertEquals("-00:00:00.004", string0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone1.getID());
      assertEquals("-00:00:00.004", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.004", fixedDateTimeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "UTC";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
  }

  //@Test
  public void test32()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       String string0 = "SST";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("SST", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
//       assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
//       assertEquals(false, dateTimeZone0.isFixed());
//       assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
//       assertEquals("SST", zoneInfo0.getID());
//       assertNotNull(dateTimeZone0);
//       
//       LocalDateTime localDateTime0 = new LocalDateTime();
//       assertEquals(4, localDateTime0.size());
//       assertNotNull(localDateTime0);
//       
//       int int0 = (-650);
//       DateTimeZone dateTimeZone1 = null;
//       long long0 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) int0);
//       assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
//       assertEquals(false, dateTimeZone0.isFixed());
//       assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
//       assertEquals("SST", zoneInfo0.getID());
//       assertEquals(35999350L, long0);
//   }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       long long0 = (-9223372036854775808L);
//       Chronology chronology0 = null;
//       MutableDateTime mutableDateTime0 = new MutableDateTime(long0, chronology0);
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertNotNull(mutableDateTime0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertNotNull(cachedDateTimeZone0);
//       
//       String string0 = cachedDateTimeZone0.getName(long0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertNotNull(string0);
//       assertEquals("-00:01:15", string0);
//   }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getName((long) int0, locale0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(string0);
      assertEquals("+00:00:00.001", string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("+00:00:00.001", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertEquals(false, set0.isEmpty());
//       assertEquals(567, set0.size());
//       assertNotNull(set0);
//   }

  @Test
  public void test39()  throws Throwable  {
      int int0 = (-650);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
      }
  }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       GJChronology gJChronology0 = GJChronology.getInstance();
//       assertNotNull(gJChronology0);
//       
//       LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
//       assertNotNull(lenientChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(cachedDateTimeZone0);
//       
//       String string0 = cachedDateTimeZone0.toString();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(string0);
//       assertEquals("Europe/London", string0);
//   }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test
  public void test42()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
  }

  @Test
  public void test43() {}
//   @Test
//   public void test43()  throws Throwable  {
//       long long0 = (-9223372036854775808L);
//       Chronology chronology0 = null;
//       MutableDateTime mutableDateTime0 = new MutableDateTime(long0, chronology0);
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertNotNull(mutableDateTime0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertNotNull(cachedDateTimeZone0);
//       
//       String string0 = cachedDateTimeZone0.getShortName(long0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals((-9223372036854775808L), mutableDateTime0.getMillis());
//       assertNotNull(string0);
//       assertEquals("-00:01:15", string0);
//   }

  @Test
  public void test44() {}
//   @Test
//   public void test44()  throws Throwable  {
//       int int0 = 0;
//       MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0);
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(0L, mutableDateTime0.getMillis());
//       assertNotNull(mutableDateTime0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(0L, mutableDateTime0.getMillis());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       Object object0 = cachedDateTimeZone0.writeReplace();
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(0L, mutableDateTime0.getMillis());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(object0);
//   }
}
