/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:02:37 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class MutableDateTimeEvoSuite_branch_Test   {

  //@Test
  public void test00()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.property(dateTimeFieldType0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("clockhourOfHalfday", mutableDateTime_Property0.getName());
      assertEquals(0L, instant0.getMillis());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime_Property0);
  }

  //@Test
  public void test02()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      mutableDateTime0.setDate((ReadableInstant) dateMidnight0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  //@Test
  public void test03()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      ReadableInstant readableInstant0 = null;
      mutableDateTime0.setDate(readableInstant0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-150);
      mutableDateTime0.addMillis(int0);
      assertEquals((-150L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test
  public void test05()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      int int0 = mutableDateTime_Property0.getMinimumValueOverall();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
      assertEquals(0, int0);
      
      mutableDateTime0.addMillis(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
  }

  //@Test
  public void test06()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 3;
      mutableDateTime0.addSeconds(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409284320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test07()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      mutableDateTime0.addSeconds(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test08()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-4072);
      mutableDateTime0.addMinutes(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392164961320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test09()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      int int0 = mutableDateTime_Property0.getLeapAmount();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(0, int0);
      
      mutableDateTime0.addMinutes(int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
  }

  //@Test
  public void test10()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      int int0 = mutableDateTime_Property0.get();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertEquals(45, int0);
      
      mutableDateTime0.addHours(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392571281320L, mutableDateTime0.getMillis());
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-4L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-4L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      mutableDateTime0.addHours(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-4L), mutableDateTime0.getMillis());
  }

  //@Test
  public void test12()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-296);
      mutableDateTime0.addDays(int0);
      assertEquals(1366834881320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test13()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      mutableDateTime0.addDays(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = (-2604L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) buddhistChronology0);
      assertEquals((-2604L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 317351865;
      mutableDateTime0.addWeeks(int0);
      assertEquals(191934407951997396L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test15()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      mutableDateTime0.addWeeks(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      mutableDateTime0.addMonths(int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1405365681320L, mutableDateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  //@Test
  public void test17()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekyear();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      int int0 = mutableDateTime_Property0.getLeapAmount();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
      assertEquals(0, int0);
      
      mutableDateTime0.addMonths(int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("weekyear", mutableDateTime_Property0.getName());
  }

  //@Test
  public void test18()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      mutableDateTime0.addWeekyears(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1550262081320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test
  public void test19()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      mutableDateTime0.addWeekyears(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test20()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) ethiopicChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-296);
      mutableDateTime0.addYears(int0);
      assertEquals((-7948640318680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test21()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      mutableDateTime0.addYears(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test22()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = 62;
      mutableDateTime0.add(durationFieldType0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281382L, mutableDateTime0.getMillis());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 277L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(277L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = mutableDateTime0.getEra();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(277L, mutableDateTime0.getMillis());
      assertEquals(1, int0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        mutableDateTime0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  //@Test
  public void test24()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfCentury();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      int int0 = mutableDateTime_Property0.getMinimumValueOverall();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
      assertEquals(0, int0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      mutableDateTime0.add(durationFieldType0, int0);
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("yearOfCentury", mutableDateTime_Property0.getName());
  }

  //@Test
  public void test25()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((Chronology) islamicChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 5;
      // Undeclared exception!
      try {
        mutableDateTime0.set(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  //@Test
  public void test26()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-2625);
      // Undeclared exception!
      try {
        mutableDateTime0.set(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2625 for yearOfEra must be in the range [1,292278993]
         //
      }
  }

  //@Test
  public void test27()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      mutableDateTime0.setZoneRetainFields((DateTimeZone) cachedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  //@Test
  public void test28()  throws Throwable  {
      long long0 = (-2814L);
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      GregorianChronology gregorianChronology1 = (GregorianChronology)gregorianChronology0.withUTC();
      assertNotNull(gregorianChronology1);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0, (Chronology) gregorianChronology1);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-90000000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      
      DateTime dateTime0 = dateMidnight0.toDateTime();
      assertEquals((-90000000L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-90000000L), dateMidnight0.getMillis());
      assertNotNull(dateTime0);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) gregorianChronology1);
      assertEquals((-90000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-90000000L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-90000000L), dateMidnight0.getMillis());
      assertNotNull(mutableDateTime0);
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
      
      mutableDateTime0.setZone(dateTimeZone0);
      assertEquals((-90000000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-90000000L), dateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-90000000L), dateMidnight0.getMillis());
      assertFalse(gregorianChronology0.equals((Object)gregorianChronology1));
      assertFalse(gregorianChronology1.equals((Object)gregorianChronology0));
      assertNotSame(gregorianChronology0, gregorianChronology1);
      assertNotSame(gregorianChronology1, gregorianChronology0);
  }

  //@Test
  public void test29()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(mutableDateTime0);
      
      mutableDateTime0.setZone((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  //@Test
  public void test30()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      mutableDateTime0.add((ReadablePeriod) period0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  //@Test
  public void test31()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      ReadableDuration readableDuration0 = null;
      mutableDateTime0.add(readableDuration0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(copticChronology0);
      
      DateTimeField dateTimeField0 = copticChronology0.era();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("era", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      // Undeclared exception!
      try {
        mutableDateTime0.setRounding(dateTimeField0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
      }
  }

  //@Test
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) gJChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      MutableDateTime mutableDateTime0 = dateTime0.toMutableDateTime((Chronology) gJChronology0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      int int0 = 3;
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392422400000L, mutableDateTime0.getMillis());
      assertEquals(3, mutableDateTime0.getRoundingMode());
      assertEquals("dayOfWeek", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
  }

  //@Test
  public void test34()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      SkipDateTimeField skipDateTimeField0 = (SkipDateTimeField)julianChronology0.year();
      assertEquals(-292269055, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("year", skipDateTimeField0.getName());
      assertNotNull(skipDateTimeField0);
      
      mutableDateTime0.setRounding((DateTimeField) skipDateTimeField0, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(-292269055, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("year", skipDateTimeField0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test35()  throws Throwable  {
      long long0 = (-3207L);
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertEquals(4, localDateTime0.size());
      assertNotNull(iSOChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(mutableDateTime0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.clockhourOfDay();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("clockhourOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      int int0 = 393;
      // Undeclared exception!
      try {
        mutableDateTime0.setRounding(dateTimeField0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: 393
         //
      }
  }

  //@Test
  public void test36()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-3252);
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeField dateTimeField0 = iSOChronology0.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      // Undeclared exception!
      try {
        mutableDateTime0.setRounding(dateTimeField0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal rounding mode: -3252
         //
      }
  }

  //@Test
  public void test37()  throws Throwable  {
      long long0 = 23L;
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, (Chronology) gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(23L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = mutableDateTime0.getMinuteOfDay();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(23L, mutableDateTime0.getMillis());
      assertEquals(60, int0);
      
      DateTimeField dateTimeField0 = mutableDateTime0.getRoundingField();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(23L, mutableDateTime0.getMillis());
      assertNull(dateTimeField0);
      
      mutableDateTime0.setRounding(dateTimeField0, int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(23L, mutableDateTime0.getMillis());
  }

  @Test
  public void test38()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  //@Test
  public void test40()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      mutableDateTime0.setTime(int0, int0, int0, int0);
      assertEquals(1392354305005L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test41()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      String string0 = mutableDateTime0.toString();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      assertEquals("2014-02-14T20:21:21.320Z", string0);
  }

  //@Test
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTimeISO();
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfDay();
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("minuteOfDay", mutableDateTime_Property0.getName());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(mutableDateTime_Property0);
  }

  @Test
  public void test43()  throws Throwable  {
      long long0 = 0L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      mutableDateTime0.setMillisOfSecond(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test44()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfSecond();
      assertEquals("millisOfSecond", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime_Property0);
  }

  //@Test
  public void test45()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      mutableDateTime0.setDayOfYear(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1388953281320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test46()  throws Throwable  {
      Object object0 = null;
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(object0, dateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 3;
      mutableDateTime0.setMonthOfYear(int0);
      assertEquals(1394828481320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test47()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(mutableDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = mutableDateTime0.get(dateTimeFieldType0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(2014, int0);
      
      // Undeclared exception!
      try {
        mutableDateTime0.setDateTime(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2014 for hourOfDay must be in the range [0,23]
         //
      }
  }

  //@Test
  public void test48()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      mutableDateTime0.setZoneRetainFields((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test49()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfYear();
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime_Property0);
      
      int int0 = mutableDateTime_Property0.get();
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(45, int0);
      
      mutableDateTime0.setSecondOfDay(int0);
      assertEquals("dayOfYear", mutableDateTime_Property0.getName());
      assertEquals(1392336045320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test50()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      mutableDateTime0.setHourOfDay(int0);
      assertEquals(1392355281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test51()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-3252);
      mutableDateTime0.setYear(int0);
      assertEquals((-164786585843680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test52()  throws Throwable  {
      long long0 = (-2814L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.year();
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("year", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
  }

  //@Test
  public void test53()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5379;
      // Undeclared exception!
      try {
        mutableDateTime0.setMinuteOfHour(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 5379 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  //@Test
  public void test54()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((Chronology) islamicChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.copy();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertNotSame(mutableDateTime0, mutableDateTime1);
      assertNotSame(mutableDateTime1, mutableDateTime0);
  }

  //@Test
  public void test55()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 3;
      mutableDateTime0.setDayOfWeek(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392236481320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test56()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.era();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("era", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
  }

  @Test
  public void test57()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals(0L, instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      int int0 = (-150);
      // Undeclared exception!
      try {
        mutableDateTime0.setMillisOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -150 for millisOfDay must be in the range [0,86399999]
         //
      }
  }

  //@Test
  public void test58()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 3;
      mutableDateTime0.setWeekOfWeekyear(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1389990081320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test59()  throws Throwable  {
      int int0 = 3;
      MutableDateTime mutableDateTime0 = new MutableDateTime(int0, int0, int0, int0, int0, int0, int0);
      assertEquals((-62067243341997L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
  }

  @Test
  public void test60()  throws Throwable  {
      long long0 = 0L;
      Instant instant0 = new Instant(long0);
      assertEquals(0L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Object) instant0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
  }

  //@Test
  public void test61()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      long long0 = (-4280L);
      Duration duration0 = Duration.standardSeconds(long0);
      assertEquals((-4280000L), duration0.getMillis());
      assertNotNull(duration0);
      
      mutableDateTime0.add((ReadableDuration) duration0);
      assertEquals((-4280000L), duration0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392405001320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test62()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.weekOfWeekyear();
      assertEquals("weekOfWeekyear", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime_Property0);
  }

  //@Test
  public void test63()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = mutableDateTime0.getCenturyOfEra();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(20, int0);
      
      mutableDateTime0.setMinuteOfDay(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392337221320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test64()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 3;
      mutableDateTime0.setDayOfMonth(int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1391458881320L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test65()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(mutableDateTime0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      SkipDateTimeField skipDateTimeField0 = (SkipDateTimeField)julianChronology0.year();
      assertEquals("year", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-292269055, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertNotNull(skipDateTimeField0);
      
      mutableDateTime0.setRounding((DateTimeField) skipDateTimeField0);
      assertEquals(1389657600000L, mutableDateTime0.getMillis());
      assertEquals(1, mutableDateTime0.getRoundingMode());
      assertEquals("year", skipDateTimeField0.getName());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(-292269055, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test
  public void test66()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      mutableDateTime0.setSecondOfMinute(int0);
      assertEquals(1392409260320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test67()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) julianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      DateTime dateTime0 = DateTime.now((Chronology) zonedChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      mutableDateTime0.setMillis((ReadableInstant) dateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  //@Test
  public void test68()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.monthOfYear();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("monthOfYear", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
  }

  //@Test
  public void test69()  throws Throwable  {
      long long0 = (-2814L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = mutableDateTime0.getRoundingMode();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertEquals(0, int0);
      
      mutableDateTime0.setWeekyear(int0);
      assertEquals((-62166783527814L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  //@Test
  public void test70()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime0.toMutableDateTime();
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime1);
      assertTrue(mutableDateTime1.equals((Object)mutableDateTime0));
      assertTrue(mutableDateTime0.equals((Object)mutableDateTime1));
      assertNotSame(mutableDateTime1, mutableDateTime0);
      assertNotSame(mutableDateTime0, mutableDateTime1);
  }

  //@Test
  public void test71()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.minuteOfHour();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("minuteOfHour", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
  }

  //@Test
  public void test72()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      mutableDateTime0.setDate(int0, int0, int0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-61998579443680L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  //@Test
  public void test73()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) julianChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.yearOfEra();
      assertEquals("yearOfEra", mutableDateTime_Property0.getName());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime_Property0);
  }

  //@Test
  public void test74()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTimeISO();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      ReadablePeriod readablePeriod0 = null;
      mutableDateTime0.add(readablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
  }

  //@Test
  public void test75()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      mutableDateTime0.setTime((ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test76()  throws Throwable  {
      String string0 = "Az<\\W,P0M!+r]p)Et";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = MutableDateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Az<\\W,P0M!+r]p)Et\"
         //
      }
  }

  //@Test
  public void test77()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 5;
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.add((long) int0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(17170863681320L, mutableDateTime0.getMillis());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
      assertEquals(17170863681320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  @Test
  public void test78()  throws Throwable  {
      long long0 = 0L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      assertEquals("dayOfMonth", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime_Property0);
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,31]
         //
      }
  }

  //@Test
  public void test79()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTimeISO();
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfWeek();
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(mutableDateTime_Property0);
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableDateTime_Property0.getChronology();
      assertEquals("dayOfWeek", mutableDateTime_Property0.getName());
      assertEquals(1392336000000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(iSOChronology0);
  }

  //@Test
  public void test80()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("secondOfDay", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundFloor();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281000L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281000L, mutableDateTime1.getMillis());
      assertEquals("secondOfDay", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  //@Test
  public void test81()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertEquals("millisOfDay", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfFloor();
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals("millisOfDay", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  @Test
  public void test82()  throws Throwable  {
      long long0 = (-4L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals((-4L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfMinute();
      assertEquals("secondOfMinute", mutableDateTime_Property0.getName());
      assertEquals((-4L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime_Property0);
      
      String string0 = "CE";
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime1 = mutableDateTime_Property0.set(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"CE\" for secondOfMinute is not supported
         //
      }
  }

  @Test
  public void test83()  throws Throwable  {
      long long0 = 0L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      int int0 = 0;
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.dayOfMonth();
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("dayOfMonth", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.addWrapField(int0);
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("dayOfMonth", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
      assertSame(mutableDateTime0, mutableDateTime1);
  }

  //@Test
  public void test84()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.secondOfDay();
      assertEquals("secondOfDay", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfEven();
      assertEquals("secondOfDay", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281000L, mutableDateTime1.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  @Test
  public void test85()  throws Throwable  {
      long long0 = (-2814L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertEquals("hourOfDay", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundCeiling();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals("hourOfDay", mutableDateTime_Property0.getName());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  //@Test
  public void test86()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.centuryOfEra();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.getMutableDateTime();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("centuryOfEra", mutableDateTime_Property0.getName());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  @Test
  public void test87()  throws Throwable  {
      long long0 = (-2814L);
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.hourOfDay();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-2814L), mutableDateTime0.getMillis());
      assertEquals("hourOfDay", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.roundHalfCeiling();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals(0L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("hourOfDay", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }

  //@Test
  public void test88()  throws Throwable  {
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime.Property mutableDateTime_Property0 = mutableDateTime0.millisOfDay();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("millisOfDay", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime_Property0);
      
      int int0 = mutableDateTime_Property0.getDifference((ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("millisOfDay", mutableDateTime_Property0.getName());
      assertEquals(0, int0);
      
      MutableDateTime mutableDateTime1 = mutableDateTime_Property0.add(int0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime1.getMillis());
      assertEquals(0, mutableDateTime1.getRoundingMode());
      assertEquals("millisOfDay", mutableDateTime_Property0.getName());
      assertNotNull(mutableDateTime1);
      assertSame(mutableDateTime0, mutableDateTime1);
      assertSame(mutableDateTime1, mutableDateTime0);
  }
}
