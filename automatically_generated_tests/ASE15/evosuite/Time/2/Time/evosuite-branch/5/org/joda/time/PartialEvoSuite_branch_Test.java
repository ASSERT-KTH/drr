/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:17 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = "";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals(0, partial0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      
      String string0 = "&R,lHt7.";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("--44", string0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("[year=2014, monthOfYear=2, dayOfMonth=14, millisOfDay=73281320]", string0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      Locale locale0 = null;
      String string1 = partial0.toString(string0, locale0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals(0, partial0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, partial0.size());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(1, partial0.size());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertNull(chronology0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfMinute", dateTimeFieldTypeArray0[0].toString());
      
      int[] intArray0 = new int[3];
      Partial partial1 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(6, partial1.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(boolean0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(6, partial1.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      int int0 = 23;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertFalse(boolean0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 0;
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      System.setCurrentTimeMillis((long) int0);
      ReadableInstant readableInstant0 = null;
      boolean boolean0 = partial0.isMatch(readableInstant0);
      assertTrue(boolean0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, partial0.size());
      assertEquals(2, yearMonth0.size());
      
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      int int0 = 788;
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) months0, int0);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(2, partial1.size());
      assertEquals(2, partial0.size());
      assertEquals(1, months0.size());
      assertEquals(2, yearMonth0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Months months0 = Months.MAX_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) months0, int0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(1, months0.size());
      assertEquals(0, partial1.size());
  }

  @Test
  public void test14()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      int int0 = 61;
      Partial partial1 = partial0.withPeriodAdded(readablePeriod0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(4, partial1.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(4, partial0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[17];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], int0);
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      
      int int1 = 1752;
      Partial partial2 = partial1.withFieldAddWrapped(durationFieldType0, int1);
      assertNotNull(partial2);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial0.equals((Object)partial2));
      assertFalse(partial2.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(1, partial2.size());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals(1, partial1.size());
  }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Hours hours0 = Hours.hoursBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      assertNotNull(hours0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, hours0.size());
      
      DurationFieldType durationFieldType0 = hours0.getFieldType(int0);
      assertNotNull(durationFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, hours0.size());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals(1, hours0.size());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
  }

  @Test
  public void test18()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      
      int int0 = (-2481);
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial1.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int1 = partial_Property0.getMaximumValueOverall();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(23, int1);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int1 = partial_Property0.getMaximumValueOverall();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(23, int1);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int0 == int1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = (-29L);
      MonthDay monthDay0 = new MonthDay(long0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 119;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 119 for clockhourOfDay must not be larger than 24
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = (-2687);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2687 for era must not be smaller than 0
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 61;
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      
      Chronology chronology0 = null;
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(2, partial1.size());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) islamicChronology0);
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
  }

  @Test
  public void test29()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("secondOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType1.getName());
      assertEquals("secondOfMinute", dateTimeFieldType1.toString());
      
      int int0 = 23;
      Partial partial0 = new Partial(dateTimeFieldType1, int0);
      assertNotNull(partial0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType1.getName());
      assertEquals("secondOfMinute", dateTimeFieldType1.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], int0);
      assertNotNull(partial1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("secondOfMinute", dateTimeFieldType1.getName());
      assertEquals("secondOfMinute", dateTimeFieldType1.toString());
      assertEquals(1, partial0.size());
      assertEquals(2, partial1.size());
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.year();
      assertNotNull(dateTimeField0);
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      int int0 = (-2445);
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) gJChronology0, dateTimeField0, int0);
      assertNotNull(skipUndoDateTimeField0);
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("year", skipUndoDateTimeField0.getName());
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("year", skipUndoDateTimeField0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("year", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(false, skipUndoDateTimeField0.isLenient());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(1, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("year", skipUndoDateTimeField0.getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year and year
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[1].getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[1].toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[2].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[2].getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[3].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[3].getName());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[4].getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[4].toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[5].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[5].getName());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[6].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[6].getName());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[7].getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[7].toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[8].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[8].getName());
      
      int[] intArray0 = new int[9];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: hourOfHalfday and hourOfHalfday
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("centuryOfEra", dateTimeFieldType1.getName());
      assertEquals("centuryOfEra", dateTimeFieldType1.toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: hourOfDay < centuryOfEra
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      int[] intArray0 = new int[9];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[9];
      DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Days days0 = Days.FIVE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Partial partial1 = partial0.minus((ReadablePeriod) days0);
      assertNotNull(partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, days0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      Days days0 = Days.FIVE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Partial partial1 = partial0.plus((ReadablePeriod) days0);
      assertNotNull(partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals(1, days0.size());
  }

  @Test
  public void test42()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(5, partial1.size());
      assertEquals(4, partial0.size());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(4, timeOfDay0.size());
      
      Partial.Property partial_Property0 = partial1.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(5, partial1.size());
      assertEquals(4, partial0.size());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial2 = partial_Property0.addToCopy(int0);
      assertNotNull(partial2);
      assertTrue(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial2));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial2.equals((Object)partial0));
      assertTrue(partial2.equals((Object)partial1));
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial2);
      assertNotSame(partial0, partial1);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertEquals(5, partial1.size());
      assertEquals(4, partial0.size());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(4, timeOfDay0.size());
      assertEquals(5, partial2.size());
  }

  @Test
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string0 = partial_Property0.getAsText();
      assertNotNull(string0);
      assertEquals("0", string0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotNull(partial1);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
  }

  @Test
  public void test45()  throws Throwable  {
      Partial partial0 = null;
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      int int1 = partial0.compareTo((ReadablePartial) partial0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int1);
      assertNotNull(partial_Property0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, partial0.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      String string0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for weekOfWeekyear is not supported
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      int int1 = partial0.compareTo((ReadablePartial) partial0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int1);
      assertNotNull(partial_Property0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.getPartial();
      assertNotNull(partial1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test48()  throws Throwable  {
      Partial partial0 = null;
      int int0 = (-2829);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
