/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:13:31 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Calendar;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.ReadablePartial;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimeParserBucket;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeFormatterBuilderEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = (-2026);
      String string0 = "$~QT,g})?^}";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Integer integer0 = Integer.valueOf(int0);
      assertEquals((-2026), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) ethiopicChronology0, locale0, integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try {
        int int1 = dateTimeFormatterBuilder_Composite0.parseInto(dateTimeParserBucket0, string0, (int) integer0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      int int0 = dateTimeFormatterBuilder_Composite0.estimateParsedLength();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, int0);
      
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(stringWriter0);
      
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo((Writer) stringWriter0, (ReadablePartial) localDate0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      int int0 = 0;
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      char char0 = 'N';
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      PipedReader pipedReader0 = new PipedReader();
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedWriter0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Composite0.printTo((Writer) pipedWriter0, (long) int0, (Chronology) ethiopicChronology0, (int) char0, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test003()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      long long0 = 0L;
      int int0 = 287;
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int1 = 0;
      Integer integer0 = new Integer(int1);
      assertEquals(0, (int)integer0);
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) iSOChronology0, locale0, integer0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      
      String string0 = "Zulu";
      int int2 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, string0, (int) integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int1));
  }

  @Test
  public void test004()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      long long0 = 0L;
      int int0 = 0;
      String string0 = "\\m}vC+v";
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0, dateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      String string1 = mutableDateTime0.toString();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("1970-01-01T01:00:00.000+01:00", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Integer integer0 = new Integer(int0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) copticChronology0, locale0, integer0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = dateTimeFormatterBuilder_TimeZoneId0.parseInto(dateTimeParserBucket0, string1, (int) integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
  }

  @Test
  public void test005()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int0 = 1000;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) buddhistChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("Europe/London", charArrayWriter0.toString());
      assertEquals(13, charArrayWriter0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
  }

  @Test
  public void test006()  throws Throwable  {
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      long long0 = 0L;
      int int0 = 0;
      String string0 = "m}<#+v";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals("m}<#+v", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(22, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TimeZoneId0.printTo(stringBuffer0, long0, (Chronology) copticChronology0, int0, dateTimeZone0, locale0);
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("m}<#+v", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(22, stringBuffer0.capacity());
  }

  @Test
  public void test007()  throws Throwable  {
      int int0 = 2;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      String string0 = "%ZJ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{%ZJ=UTC}", hashMap0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(dateTimeZone0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{%ZJ=UTC}", hashMap0.toString());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      int int1 = dateTimeFormatterBuilder_TimeZoneName0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{%ZJ=UTC}", hashMap0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals((-3), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test008()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 1328;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int0, int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneShortName((Map<String, DateTimeZone>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test009()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int0 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) buddhistChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(20, charArrayWriter0.size());
      assertEquals("Britische Sommerzeit", charArrayWriter0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
  }

  @Test
  public void test010()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 1328;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int0, int0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.appendTimeZoneShortName();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test011()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 1328;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int0, int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneName((Map<String, DateTimeZone>) hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "j\"r";
      boolean boolean0 = true;
      int int0 = 3;
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string1 = "<tUOgj}V\\6PZ";
      assertNotSame(string1, string0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string1);
      assertNotSame(string1, string0);
      assertNull(dateTimeZone0);
      assertFalse(string1.equals((Object)string0));
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      assertNotSame(string1, string0);
      assertNotNull(buddhistChronology0);
      assertFalse(string1.equals((Object)string0));
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotSame(string0, string1);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertFalse(string0.equals((Object)string1));
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotSame(string0, string1);
      assertNotNull(locale0);
      assertFalse(string0.equals((Object)string1));
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) dateTimeFormatterBuilder_Fraction0.iMaxDigits, (Chronology) buddhistChronology0, locale0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, string1, int0);
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-4), int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test013()  throws Throwable  {
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[19];
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 168;
      boolean boolean0 = true;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(int0, boolean0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = (DateTimeFormatterBuilder.TwoDigitYear)dateTimeFormatterBuilder1.toParser();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      assertEquals(4, dateTimeParserArray0[0].estimateParsedLength());
      assertNotNull(dateTimeParserArray0[0]);
      
      dateTimeParserArray0[1] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      assertEquals(4, dateTimeParserArray0[1].estimateParsedLength());
      assertNotNull(dateTimeParserArray0[1]);
      
      dateTimeParserArray0[2] = (DateTimeParser) dateTimeFormatterBuilder_TwoDigitYear0;
      assertEquals(4, dateTimeParserArray0[2].estimateParsedLength());
      assertNotNull(dateTimeParserArray0[2]);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      dateTimeParserArray0[3] = (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0;
      assertEquals(168, dateTimeParserArray0[3].estimateParsedLength());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeParserArray0[3]);
      
      String string0 = "(A";
      String string1 = "";
      assertNotSame(string1, string0);
      
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string1, boolean0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      dateTimeParserArray0[4] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneOffset0;
      assertEquals(13, dateTimeParserArray0[4].estimateParsedLength());
      assertNotNull(dateTimeParserArray0[4]);
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotSame(string0, string1);
      assertNotNull(locale0);
      assertFalse(string0.equals((Object)string1));
      
      Integer integer0 = new Integer(int0);
      assertEquals(168, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0, integer0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotSame(string0, string1);
      assertNotNull(dateTimeParserBucket0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotSame(string0, string1);
      assertEquals(168, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
  }

  @Test
  public void test014()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int0 = 1000;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      String string0 = null;
      boolean boolean0 = true;
      int int1 = 99;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int1, int1);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertFalse(int1 == int0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) buddhistChronology0, int1, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(13, charArrayWriter0.size());
      assertEquals("+00:00:00.099", charArrayWriter0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test015()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int0 = 1000;
      int int1 = 0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      String string0 = null;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      assertFalse(int0 == int1);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) buddhistChronology0, int1, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(10, charArrayWriter0.size());
      assertEquals("+000000000", charArrayWriter0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "en";
      boolean boolean0 = false;
      int int0 = 1074;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(18, stringBuffer0.capacity());
      assertEquals("en", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, (long) int0, (Chronology) ethiopicChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(18, stringBuffer0.capacity());
      assertEquals("en+000001074", stringBuffer0.toString());
      assertEquals(12, stringBuffer0.length());
  }

  @Test
  public void test017()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      String string0 = mutableDateTime0.toString();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertNotNull(string0);
      assertEquals("1970-01-01T00:00:00.000Z", string0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      int int0 = 168;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.estimateParsedLength();
      assertEquals(13, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test019()  throws Throwable  {
      boolean boolean0 = false;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 5144;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfDay(int0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      
      String string0 = "W-SUhC0$.]Iz";
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = (DateTimeFormatterBuilder.Composite)dateTimeFormatterBuilder0.toParser();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder_Composite0);
  }

  @Test
  public void test020()  throws Throwable  {
      int int0 = 2985;
      boolean boolean0 = true;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int1 = 738;
      String string0 = "US/CentralhC0$.]Iz";
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneOffset(string0, boolean0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = 0;
      String string0 = ",Q_t(=?Rw2uP$7yw";
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = null;
      try {
        dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      long long0 = 0L;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int1 = 3;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) copticChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(dateTimeParserBucket0);
      
      String string0 = "h7q^A1Z[\"Y;";
      int int2 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals((-4), int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test023()  throws Throwable  {
      long long0 = 0L;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      String string0 = "m}<#+v";
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int1 = 3;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket(long0, (Chronology) copticChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(dateTimeParserBucket0);
      
      int int2 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals((-4), int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test024()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      int int0 = 1000;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, int0);
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = offsetDateTimeField0.getType();
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      String string0 = "aqCq2SSzFt}+H5";
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      Integer integer0 = new Integer(int0);
      assertEquals(1000, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0, integer0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertNotNull(dateTimeParserBucket0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = dateTimeFormatterBuilder_Fraction0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals((-1001), int1);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test025()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1194);
      int int1 = 22;
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int1);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Writer writer0 = null;
      long long0 = 100000000000006L;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(gregorianChronology0);
      
      String string0 = "US/ArizonahC0$.]Iz";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("us/arizonahc0$.]iz_US/ARIZONAHC0$.]IZ", locale0.toString());
      assertEquals("US/ARIZONAHC0$.]IZ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("us/arizonahc0$.]iz", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Fraction0.printTo(writer0, long0, (Chronology) gregorianChronology0, int1, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 6;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(6L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertNotNull(mutableDateTime0);
      
      String string0 = mutableDateTime0.toString();
      assertEquals(6L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.006", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      assertEquals("1970-01-01T00:00:00.012+00:00:00.006", string0);
  }

  @Test
  public void test027()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 47;
      Locale locale0 = Locale.CHINA;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int0, (Chronology) buddhistChronology0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) charArrayWriter0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(4, timeOfDay0.size());
      assertEquals("00078333333333", charArrayWriter0.toString());
      assertEquals(14, charArrayWriter0.size());
  }

  @Test
  public void test028()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 31;
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) stringWriter0, boolean0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(mockPrintWriter0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) mockPrintWriter0, (ReadablePartial) partial0, locale0);
      assertEquals(0, partial0.size());
      assertEquals("0000000000000000000000000000000", stringWriter0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 153692453;
      byte byte0 = (byte)0;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      String string0 = "rV9!J#-E`|4T/X<X8";
      int int1 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, string0, (int) byte0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test030()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      int int0 = (-649);
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) copticChronology0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      String string0 = ">u)Q";
      int int1 = dateTimeFormatterBuilder_TextField0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(648, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test031() {}
//   @Test
//   public void test031()  throws Throwable  {
//       int int0 = 1074;
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertNotNull(fixedDateTimeZone0);
//       
//       EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertNotNull(ethiopicChronology0);
//       
//       Locale locale0 = Locale.UK;
//       assertEquals("", locale0.getVariant());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_GB", locale0.toString());
//       assertNotNull(locale0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
//       assertEquals("centuryOfEra", dateTimeFieldType0.getName());
//       assertEquals("centuryOfEra", dateTimeFieldType0.toString());
//       assertNotNull(dateTimeFieldType0);
//       
//       boolean boolean0 = true;
//       DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
//       assertEquals("centuryOfEra", dateTimeFieldType0.getName());
//       assertEquals("centuryOfEra", dateTimeFieldType0.toString());
//       assertNotNull(dateTimeFormatterBuilder_TextField0);
//       
//       Writer writer0 = null;
//       DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertNotNull(dateMidnight0);
//       
//       MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime((Chronology) ethiopicChronology0);
//       assertEquals(1392335998926L, mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertNotNull(mutableDateTime0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)mutableDateTime0.toGregorianCalendar();
//       assertEquals(1392335998926L, mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392335998926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:01.074,offset=1074,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1074,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(1392335998926L, mutableDateTime0.getMillis());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals(4, localDateTime0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392335998926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:01.074,offset=1074,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1074,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertNotNull(localDateTime0);
//       
//       // Undeclared exception!
//       try {
//         dateTimeFormatterBuilder_TextField0.printTo(writer0, (ReadablePartial) localDateTime0, locale0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test032()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 'i';
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(char0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendDayOfWeekShortText();
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder2);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertTrue(boolean0);
  }

  @Test
  public void test033() {}
//   @Test
//   public void test033()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("hourOfDay", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertNotNull(dateTimeField0);
//       
//       int int0 = 979;
//       OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, int0);
//       assertEquals(true, offsetDateTimeField0.isSupported());
//       assertEquals(false, offsetDateTimeField0.isLenient());
//       assertEquals("hourOfDay", offsetDateTimeField0.getName());
//       assertEquals(1002, offsetDateTimeField0.getMaximumValue());
//       assertEquals(979, offsetDateTimeField0.getMinimumValue());
//       assertEquals(979, offsetDateTimeField0.getOffset());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("hourOfDay", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertNotNull(offsetDateTimeField0);
//       
//       DateTimeFieldType dateTimeFieldType0 = offsetDateTimeField0.getType();
//       assertEquals(true, offsetDateTimeField0.isSupported());
//       assertEquals(false, offsetDateTimeField0.isLenient());
//       assertEquals("hourOfDay", offsetDateTimeField0.getName());
//       assertEquals(1002, offsetDateTimeField0.getMaximumValue());
//       assertEquals(979, offsetDateTimeField0.getMinimumValue());
//       assertEquals(979, offsetDateTimeField0.getOffset());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("hourOfDay", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals("hourOfDay", dateTimeFieldType0.toString());
//       assertEquals("hourOfDay", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       boolean boolean0 = buddhistChronology0.equals((Object) dateTimeFieldType0);
//       assertEquals(true, offsetDateTimeField0.isSupported());
//       assertEquals(false, offsetDateTimeField0.isLenient());
//       assertEquals("hourOfDay", offsetDateTimeField0.getName());
//       assertEquals(1002, offsetDateTimeField0.getMaximumValue());
//       assertEquals(979, offsetDateTimeField0.getMinimumValue());
//       assertEquals(979, offsetDateTimeField0.getOffset());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("hourOfDay", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals("hourOfDay", dateTimeFieldType0.toString());
//       assertEquals("hourOfDay", dateTimeFieldType0.getName());
//       assertFalse(boolean0);
//       
//       CharArrayWriter charArrayWriter0 = new CharArrayWriter();
//       assertEquals(0, charArrayWriter0.size());
//       assertEquals("", charArrayWriter0.toString());
//       assertNotNull(charArrayWriter0);
//       
//       TimeOfDay timeOfDay0 = new TimeOfDay((long) int0, (Chronology) buddhistChronology0);
//       assertEquals(4, timeOfDay0.size());
//       assertNotNull(timeOfDay0);
//       
//       Locale locale0 = Locale.GERMAN;
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
//       assertEquals(true, offsetDateTimeField0.isSupported());
//       assertEquals(false, offsetDateTimeField0.isLenient());
//       assertEquals("hourOfDay", offsetDateTimeField0.getName());
//       assertEquals(1002, offsetDateTimeField0.getMaximumValue());
//       assertEquals(979, offsetDateTimeField0.getMinimumValue());
//       assertEquals(979, offsetDateTimeField0.getOffset());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("hourOfDay", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals("hourOfDay", dateTimeFieldType0.toString());
//       assertEquals("hourOfDay", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
//       
//       dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) charArrayWriter0, (ReadablePartial) timeOfDay0, locale0);
//       assertEquals(true, offsetDateTimeField0.isSupported());
//       assertEquals(false, offsetDateTimeField0.isLenient());
//       assertEquals("hourOfDay", offsetDateTimeField0.getName());
//       assertEquals(1002, offsetDateTimeField0.getMaximumValue());
//       assertEquals(979, offsetDateTimeField0.getMinimumValue());
//       assertEquals(979, offsetDateTimeField0.getOffset());
//       assertEquals(true, dateTimeField0.isSupported());
//       assertEquals("hourOfDay", dateTimeField0.getName());
//       assertEquals(false, dateTimeField0.isLenient());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals("hourOfDay", dateTimeFieldType0.toString());
//       assertEquals("hourOfDay", dateTimeFieldType0.getName());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals(2, charArrayWriter0.size());
//       assertEquals("01", charArrayWriter0.toString());
//   }

  @Test
  public void test034()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      int int0 = 1000;
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, int0);
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = offsetDateTimeField0.getType();
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      boolean boolean0 = true;
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo((Writer) charArrayWriter0, (long) int0, (Chronology) strictChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("01", charArrayWriter0.toString());
      assertEquals(2, charArrayWriter0.size());
      assertEquals("hourOfDay", offsetDateTimeField0.getName());
      assertEquals(1000, offsetDateTimeField0.getOffset());
      assertEquals(1023, offsetDateTimeField0.getMaximumValue());
      assertEquals(1000, offsetDateTimeField0.getMinimumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
  }

  @Test
  public void test035()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      boolean boolean0 = true;
      String string0 = "\\m}vC+v";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals("\\m}vC+v", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertEquals(23, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      dateTimeFormatterBuilder_TwoDigitYear0.printTo(stringBuffer0, (long) int0, (Chronology) copticChronology0, int0, dateTimeZone0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("\\m}vC+v04", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertEquals(23, stringBuffer0.capacity());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
  }

  @Test
  public void test036()  throws Throwable  {
      char char0 = 'N';
      String string0 = "5ZHR%6Map0;g";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, char0, boolean0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) char0, (Chronology) gJChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = 0;
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test037()  throws Throwable  {
      char char0 = 'N';
      String string0 = "5ZHR%6Map0;g";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, char0, boolean0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) char0, (Chronology) gJChronology0, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = 0;
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test038()  throws Throwable  {
      char char0 = 'N';
      String string0 = "5ZHR%6Map0;g";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, char0, boolean0);
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) char0, (Chronology) gJChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(dateTimeParserBucket0);
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.parseInto(dateTimeParserBucket0, string0, (int) char0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals((-79), int0);
  }

  @Test
  public void test039()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      int int0 = (-649);
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, int0, boolean0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      int int1 = dateTimeFormatterBuilder_TwoDigitYear0.estimateParsedLength();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals(2, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test040()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 5;
      int int1 = 0;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int1, boolean0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(int1 == int0);
      
      String string0 = "Zulu";
      Chronology chronology0 = null;
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      int int2 = (-834);
      Integer integer0 = new Integer(int2);
      assertEquals((-834), (int)integer0);
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, integer0, int1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = dateTimeFormatterBuilder_FixedNumber0.parseInto(dateTimeParserBucket0, string0, int2);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals(832, int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test
  public void test041()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "MET";
      int int0 = 46;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Locale locale0 = null;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(4, localDateTime0.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
  }

  @Test
  public void test042()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 5;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      String string0 = "Zulu";
      Chronology chronology0 = null;
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((long) int0, chronology0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
  }

  @Test
  public void test043()  throws Throwable  {
      long long0 = 0L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      String string0 = yearMonthDay0.toString();
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(string0);
      assertEquals("1970-01-01", string0);
  }

  @Test
  public void test044() {}
//   @Test
//   public void test044()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
//       assertEquals("monthOfYear", dateTimeFieldType0.toString());
//       assertEquals("monthOfYear", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFieldType0);
//       
//       int int0 = 18;
//       boolean boolean0 = false;
//       DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
//       assertEquals("monthOfYear", dateTimeFieldType0.toString());
//       assertEquals("monthOfYear", dateTimeFieldType0.getName());
//       assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
//       
//       String string0 = "6-w";
//       MockFile mockFile0 = new MockFile(string0, string0);
//       assertNotNull(mockFile0);
//       
//       MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
//       assertNotNull(mockPrintWriter0);
//       
//       char char0 = 'J';
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, (int) char0, (int) char0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=18,MONTH=74,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=74,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=18,MONTH=74,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=74,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=18,MONTH=74,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=74,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertNotNull(fixedDateTimeZone0);
//       
//       LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=18,MONTH=74,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=74,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertNotNull(localDate0);
//       
//       Locale locale0 = new Locale(string0, string0, string0);
//       assertEquals("6-w", locale0.getLanguage());
//       assertEquals("6-W", locale0.getCountry());
//       assertEquals("6-w", locale0.getISO3Language());
//       assertEquals("6-w", locale0.getVariant());
//       assertEquals("6-w_6-W_6-w", locale0.toString());
//       assertNotNull(locale0);
//       
//       dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDate0, locale0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=18,MONTH=74,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=74,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("6-w", locale0.getLanguage());
//       assertEquals("6-W", locale0.getCountry());
//       assertEquals("6-w", locale0.getISO3Language());
//       assertEquals("6-w", locale0.getVariant());
//       assertEquals("6-w_6-W_6-w", locale0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("monthOfYear", dateTimeFieldType0.toString());
//       assertEquals("monthOfYear", dateTimeFieldType0.getName());
//   }

  @Test
  public void test045()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 31;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) stringWriter0, boolean0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(mockPrintWriter0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) mockPrintWriter0, (ReadablePartial) partial0, locale0);
      assertEquals("\uFFFD", stringWriter0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals(0, partial0.size());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
  }

  @Test
  public void test046()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 31;
      String string0 = "m}<#+v";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(6, stringBuffer0.length());
      assertEquals(22, stringBuffer0.capacity());
      assertEquals("m}<#+v", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo(stringBuffer0, (ReadablePartial) partial0, locale0);
      assertEquals(0, partial0.size());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(7, stringBuffer0.length());
      assertEquals(22, stringBuffer0.capacity());
      assertEquals("m}<#+v\uFFFD", stringBuffer0.toString());
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "2#ToQ'0qjs";
      // Undeclared exception!
      try {
        Instant instant0 = Instant.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2#ToQ'0qjs\" is malformed at \"#ToQ'0qjs\"
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      char char0 = '2';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
      assertEquals(1, int0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) ethiopicChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.minuteOfHour();
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("minuteOfHour", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(lenientDateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) ethiopicChronology0, (DateTimeField) lenientDateTimeField0);
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("minuteOfHour", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(skipUndoDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("minuteOfHour", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = true;
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, char0, boolean0);
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("minuteOfHour", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      int int1 = dateTimeFormatterBuilder_FixedNumber0.estimatePrintedLength();
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("minuteOfHour", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(50, int1);
      assertFalse(int1 == int0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) islamicChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(dateTimeParserBucket0);
      assertFalse(int0 == int1);
      
      String string0 = "UXs@";
      int int2 = dateTimeFormatterBuilder_CharacterLiteral0.parseInto(dateTimeParserBucket0, string0, int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("minuteOfHour", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("minuteOfHour", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals((-51), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test049()  throws Throwable  {
      char char0 = 'F';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertEquals(1, int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, char0, char0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      String string0 = "Invalid style specification: ";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter((Writer) mockFileWriter0);
      assertNotNull(bufferedWriter0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) ethiopicChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(dateTimeParserBucket0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)dateTimeParserBucket0.getZone();
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      dateTimeFormatterBuilder_Fraction0.printTo((Writer) bufferedWriter0, (long) int0, (Chronology) ethiopicChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test050()  throws Throwable  {
      char char0 = 'S';
      String string0 = "US/Mountain";
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, char0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      StringBuffer stringBuffer0 = null;
      Chronology chronology0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("America/Denver", cachedDateTimeZone0.toString());
      assertEquals("America/Denver", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_FixedNumber0.printTo(stringBuffer0, (long) char0, chronology0, (int) char0, (DateTimeZone) cachedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int int0 = (-583);
      StringBuffer stringBuffer0 = null;
      DateTimeFormatterBuilder.appendUnknownString(stringBuffer0, int0);
  }

  @Test
  public void test052()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneName();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test053()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean0);
      
      boolean boolean1 = dateTimeFormatterBuilder0.canBuildFormatter();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      byte[] byteArray0 = new byte[2];
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfDay(int0, (int) byteArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 50;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int1 = (-507);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfSecond(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 1328;
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TextField0;
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(20, dateTimeParserArray0[0].estimateParsedLength());
      assertNotNull(dateTimeParserArray0[0]);
      
      DateTimeFormatterBuilder.MatchingParser dateTimeFormatterBuilder_MatchingParser0 = new DateTimeFormatterBuilder.MatchingParser(dateTimeParserArray0);
      assertNotNull(dateTimeFormatterBuilder_MatchingParser0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, (Chronology) buddhistChronology0, locale0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(dateTimeParserBucket0);
      
      String string0 = "UnsupportedDurationField[";
      int int1 = dateTimeFormatterBuilder_MatchingParser0.parseInto(dateTimeParserBucket0, string0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals((-1329), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      char char0 = 'u';
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFractionOfHour((int) char0, int1);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test057()  throws Throwable  {
      char char0 = '';
      String string0 = "C@oz<&,%[G%F";
      boolean boolean0 = true;
      int int0 = 1461;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, char0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      Chronology chronology0 = null;
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimeParserBucket dateTimeParserBucket0 = new DateTimeParserBucket((long) int0, chronology0, locale0, (Integer) int0, int0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(dateTimeParserBucket0);
      
      int int1 = dateTimeFormatterBuilder_TimeZoneOffset0.parseInto(dateTimeParserBucket0, string0, (int) char0);
      assertEquals(0, dateTimeParserBucket0.getOffset());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals((-128), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFraction(dateTimeFieldType0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field type must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 6;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedSignedDecimal(dateTimeFieldType0, int0);
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test061()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 5;
      int int1 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(int1, int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test062()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      int int1 = (-1451);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 287;
      int int1 = (-115);
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendCenturyOfEra(int0, int1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test064()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal number of digits: 0
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 5144;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendFixedDecimal(dateTimeFieldType0, int0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test066()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfCentury(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = (-4430);
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfDay(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test068()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      char char0 = '^';
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendLiteral(char0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = (DateTimeFormatterBuilder.CharacterLiteral)dateTimeFormatterBuilder1.toPrinter();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
  }

  @Test
  public void test070()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      // Undeclared exception!
      try {
        DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder0.toFormatter();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Both printing and parsing not supported
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildParser();
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TextField0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test073()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 6;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfDay(int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test074()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      dateTimeFormatterBuilder0.clear();
  }

  @Test
  public void test075()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.append((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test076()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      String string0 = "";
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendPattern(string0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test077()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHourOfHalfday(int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test078()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendEraText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test079()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendHalfdayOfDayText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test080()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTimeZoneId();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test081()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 'N';
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) char0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test082()  throws Throwable  {
      char char0 = '^';
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendSecondOfDay((int) char0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test083()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendClockhourOfHalfday(int0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test084()  throws Throwable  {
      char char0 = 'D';
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendYearOfEra((int) char0, (int) char0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test085()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearShortText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test086()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendDayOfWeekText();
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test087()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMonthOfYearText();
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test088()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      boolean boolean0 = dateTimeFormatterBuilder0.canBuildPrinter();
      assertFalse(boolean0);
  }

  @Test
  public void test089()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      char char0 = 'N';
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitWeekyear((int) char0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test090()  throws Throwable  {
      int int0 = (-2026);
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      String string0 = "$~QT,g})?^}";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertEquals(11, stringBuffer0.length());
      assertEquals(27, stringBuffer0.capacity());
      assertEquals("$~QT,g})?^}", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      String string1 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (long) int0, (Chronology) julianChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals(11, stringBuffer0.length());
      assertEquals(27, stringBuffer0.capacity());
      assertEquals("$~QT,g})?^}", stringBuffer0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test091()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      dateTimeFormatterBuilder_TimeZoneName0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(3, localDate0.size());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
  }

  @Test
  public void test092()  throws Throwable  {
      int int0 = 6;
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      Writer writer0 = null;
      ReadablePartial readablePartial0 = null;
      dateTimeFormatterBuilder_TimeZoneName0.printTo(writer0, readablePartial0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test093()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Chronology chronology0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_FixedNumber0.printTo((Writer) stringWriter0, (long) int0, chronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", stringWriter0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
  }

  @Test
  public void test094()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      int int0 = (-649);
      int int1 = 1043;
      PipedReader pipedReader0 = new PipedReader(int1);
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      assertFalse(int1 == int0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedWriter0);
      assertFalse(int1 == int0);
      
      char char0 = 'j';
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int2 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes((int) char0, int2);
      assertEquals("+106:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+106:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TextField0.printTo((Writer) pipedWriter0, (long) char0, (Chronology) gJChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals("+106:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+106:00", fixedDateTimeZone0.getID());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(true, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test095() {}
//   @Test
//   public void test095()  throws Throwable  {
//       boolean boolean0 = false;
//       int int0 = 1074;
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertNotNull(fixedDateTimeZone0);
//       
//       EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertNotNull(ethiopicChronology0);
//       
//       Locale locale0 = Locale.UK;
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
//       assertEquals("centuryOfEra", dateTimeFieldType0.getName());
//       assertEquals("centuryOfEra", dateTimeFieldType0.toString());
//       assertNotNull(dateTimeFieldType0);
//       
//       DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
//       assertEquals("centuryOfEra", dateTimeFieldType0.getName());
//       assertEquals("centuryOfEra", dateTimeFieldType0.toString());
//       assertNotNull(dateTimeFormatterBuilder_TextField0);
//       
//       Writer writer0 = null;
//       DateMidnight dateMidnight0 = new DateMidnight((Chronology) ethiopicChronology0);
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertNotNull(dateMidnight0);
//       
//       MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime((Chronology) ethiopicChronology0);
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(1392335998926L, mutableDateTime0.getMillis());
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertNotNull(mutableDateTime0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)mutableDateTime0.toGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392335998926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:01.074,offset=1074,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1074,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(1392335998926L, mutableDateTime0.getMillis());
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertNotNull(mockGregorianCalendar0);
//       
//       LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392335998926,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:01.074,offset=1074,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=1074,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(0, mutableDateTime0.getRoundingMode());
//       assertEquals(1392335998926L, mutableDateTime0.getMillis());
//       assertEquals(1392335998926L, dateMidnight0.getMillis());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.toString());
//       assertEquals("+00:00:01.074", fixedDateTimeZone0.getID());
//       assertNotNull(localDateTime0);
//       
//       // Undeclared exception!
//       try {
//         dateTimeFormatterBuilder_TextField0.printTo(writer0, (ReadablePartial) localDateTime0, locale0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      int int0 = 1916;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(1916, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringBuffer0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (long) int0, (Chronology) buddhistChronology0, int0, dateTimeZone0, locale0);
      assertEquals(1916, stringBuffer0.capacity());
      assertEquals(1, stringBuffer0.length());
      assertEquals("1", stringBuffer0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("1", stringWriter0.toString());
  }

  @Test
  public void test097()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = false;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      dateTimeFormatterBuilder_TextField0.printTo(stringBuffer0, (ReadablePartial) timeOfDay0, locale0);
      assertEquals(4, timeOfDay0.size());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals(1, stringBuffer0.length());
      assertEquals("\uFFFD", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "j\"r";
      boolean boolean0 = true;
      int int0 = 3;
      DateTimeFormatterBuilder.TimeZoneOffset dateTimeFormatterBuilder_TimeZoneOffset0 = new DateTimeFormatterBuilder.TimeZoneOffset(string0, string0, boolean0, int0, int0);
      assertNotNull(dateTimeFormatterBuilder_TimeZoneOffset0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringBuffer0);
      
      ReadablePartial readablePartial0 = null;
      dateTimeFormatterBuilder_TimeZoneOffset0.printTo(stringBuffer0, readablePartial0, locale0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", stringWriter0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "MET";
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Locale locale0 = null;
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((File) mockFile0);
      assertNotNull(mockPrintWriter0);
      
      char char0 = 'A';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (ReadablePartial) localDateTime0, locale0);
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test100()  throws Throwable  {
      char char0 = '+';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int0 = dateTimeFormatterBuilder_CharacterLiteral0.estimatePrintedLength();
      assertEquals(1, int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(mockPrintWriter0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)strictChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(copticChronology0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[6];
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) periodFormatterBuilder_FieldFormatterArray0[1], (PeriodParser) periodFormatterBuilder_FieldFormatterArray0[0]);
      assertEquals(false, periodFormatter0.isParser());
      assertEquals(false, periodFormatter0.isPrinter());
      assertNotNull(periodFormatter0);
      
      Locale locale0 = periodFormatter0.getLocale();
      assertEquals(false, periodFormatter0.isParser());
      assertEquals(false, periodFormatter0.isPrinter());
      assertNull(locale0);
      
      dateTimeFormatterBuilder_CharacterLiteral0.printTo((Writer) mockPrintWriter0, (long) char0, (Chronology) copticChronology0, int0, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals(false, periodFormatter0.isParser());
      assertEquals(false, periodFormatter0.isPrinter());
      assertEquals("+", stringWriter0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = (-333);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      String string0 = "2#TQ'0qjs";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("2#TQ'0qjs", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=2#TQ'0qjs,offset=-333,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-333, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("2#TQ'0qjs", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=2#TQ'0qjs,offset=-333,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-333, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      char char0 = 'N';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      int int1 = dateTimeFormatterBuilder_CharacterLiteral0.estimateParsedLength();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = true;
      StringWriter stringWriter0 = new StringWriter(int1);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      assertFalse(int1 == int0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DateTimeFormatterBuilder.UnpaddedNumber dateTimeFormatterBuilder_UnpaddedNumber0 = new DateTimeFormatterBuilder.UnpaddedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_UnpaddedNumber0);
      assertFalse(int0 == int1);
      
      dateTimeFormatterBuilder_UnpaddedNumber0.printTo((Writer) stringWriter0, (long) int0, (Chronology) ethiopicChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("0", stringWriter0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("2#TQ'0qjs", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=2#TQ'0qjs,offset=-333,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-333, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "2#TQ'0qjs";
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      try {
        dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) pipedWriter0, (ReadablePartial) monthDay0, locale0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-83);
      String string0 = "8I@wEO7C~";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      Locale locale0 = null;
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (long) byteArray0[1], (Chronology) islamicChronology0, (int) byte0, dateTimeZone0, locale0);
      assertEquals("8I@wEO7C~", stringWriter0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("8I@wEO7C~", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test104()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-583);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      int int1 = dateTimeFormatterBuilder_Fraction0.estimatePrintedLength();
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals((-583), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      String string0 = "org.joda.time.format.DateTimeFormatterBuilder$TextField";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      String string1 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      Locale locale0 = null;
      dateTimeFormatterBuilder_StringLiteral0.printTo((Writer) mockFileWriter0, (long) int1, (Chronology) julianChronology0, int1, (DateTimeZone) cachedDateTimeZone0, locale0);
      assertEquals("weekyearOfCentury", dateTimeFieldType0.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "US/East-IndianahC0$.]Iz";
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutableDateTime mutableDateTime0 = null;
      try {
        mutableDateTime0 = new MutableDateTime((Object) string0, (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"US/East-IndianahC0$.]Iz\"
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = null;
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      char char0 = 'B';
      YearMonthDay yearMonthDay0 = new YearMonthDay((long) char0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      dateTimeFormatterBuilder_StringLiteral0.printTo(stringBuffer0, (ReadablePartial) yearMonthDay0, locale0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(4, stringBuffer0.length());
      assertEquals("null", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
  }

  @Test
  public void test107()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      char char0 = 'F';
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TwoDigitYear dateTimeFormatterBuilder_TwoDigitYear0 = new DateTimeFormatterBuilder.TwoDigitYear(dateTimeFieldType0, char0, boolean0);
      assertNotNull(dateTimeFormatterBuilder_TwoDigitYear0);
      
      int int0 = dateTimeFormatterBuilder_TwoDigitYear0.estimatePrintedLength();
      assertEquals(2, int0);
  }

  @Test
  public void test108()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      int int0 = 0;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendTwoDigitYear(int0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
  }

  @Test
  public void test109()  throws Throwable  {
      DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new DateTimeFormatterBuilder();
      assertNotNull(dateTimeFormatterBuilder0);
      
      DateTimeFormatterBuilder.TimeZoneId dateTimeFormatterBuilder_TimeZoneId0 = DateTimeFormatterBuilder.TimeZoneId.INSTANCE;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      
      int int0 = 287;
      DateTimeFormatterBuilder dateTimeFormatterBuilder1 = dateTimeFormatterBuilder0.appendMinuteOfHour(int0);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertNotNull(dateTimeFormatterBuilder1);
      
      DateTimeParser[] dateTimeParserArray0 = new DateTimeParser[1];
      dateTimeParserArray0[0] = (DateTimeParser) dateTimeFormatterBuilder_TimeZoneId0;
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertEquals(32, dateTimeParserArray0[0].estimateParsedLength());
      assertNotNull(dateTimeParserArray0[0]);
      
      DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder1.append((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneId0, dateTimeParserArray0);
      assertEquals(0, dateTimeFormatterBuilder_TimeZoneId0.ordinal());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.name());
      assertEquals("INSTANCE", dateTimeFormatterBuilder_TimeZoneId0.toString());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder2, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatterBuilder2);
      
      DateTimeFormatter dateTimeFormatter0 = dateTimeFormatterBuilder1.toFormatter();
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder2);
      assertSame(dateTimeFormatterBuilder1, dateTimeFormatterBuilder0);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder1);
      assertSame(dateTimeFormatterBuilder0, dateTimeFormatterBuilder2);
      assertNotNull(dateTimeFormatter0);
  }

  @Test
  public void test110()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1194);
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      Writer writer0 = null;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      String string0 = "US/ArizonahC0$.]Iz";
      Locale locale0 = new Locale(string0, string0);
      assertEquals("us/arizonahc0$.]iz_US/ARIZONAHC0$.]IZ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("us/arizonahc0$.]iz", locale0.getLanguage());
      assertEquals("US/ARIZONAHC0$.]IZ", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        dateTimeFormatterBuilder_Fraction0.printTo(writer0, (long) int0, (Chronology) gregorianChronology0, int0, (DateTimeZone) fixedDateTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test111()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      int int0 = 0;
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(iSOChronology0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      DateTimeFormatterBuilder.Fraction dateTimeFormatterBuilder_Fraction0 = new DateTimeFormatterBuilder.Fraction(dateTimeFieldType0, int0, int0);
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_Fraction0);
      
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      dateTimeFormatterBuilder_Fraction0.printTo(stringBuffer0, (ReadablePartial) localDate0, locale0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("0", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(1, stringBuffer0.length());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals(3, localDate0.size());
  }
}
