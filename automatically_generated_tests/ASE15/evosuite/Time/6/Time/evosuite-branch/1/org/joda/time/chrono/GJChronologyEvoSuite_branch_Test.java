/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:48:25 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class GJChronologyEvoSuite_branch_Test   {

  //@Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-1007L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3600000, int0);
      
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy(int0);
      assertNotNull(months1);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, months0.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      
      Period period0 = months1.toPeriod();
      assertNotNull(period0);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, months0.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertNotSame(months0, months1);
      assertEquals(1, months0.size());
      assertFalse(months0.equals((Object)months1));
      
      long long1 = gJChronology0.add((ReadablePeriod) period0, (long) int0, int0);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, months0.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(months0.equals((Object)months1));
      assertEquals((-5642498878869525000L), long1);
      
      int[] intArray0 = gJChronology0.get((ReadablePeriod) mutablePeriod0, long0, long1);
      assertNotNull(intArray0);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, months0.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(months0.equals((Object)months1));
      assertArrayEquals(new int[] {(-178800000), 0, 0, 0, 1, 0, 1, 7}, intArray0);
  }

  //@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = (-1396);
      DateTime dateTime1 = dateTime0.withWeekyear(int0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-106186390643680L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      assertNotNull(years0);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertEquals(1, years0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals((-106186390643680L), dateTime1.getMillis());
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-861);
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy(int0);
      assertNotNull(months1);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      
      Period period0 = months1.toPeriod();
      assertNotNull(period0);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      
      int int1 = 4;
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      LocalDate localDate0 = monthDay0.toLocalDate(int0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(2, monthDay0.size());
      assertFalse(int0 == int1);
      
      LocalDate localDate1 = localDate0.withPeriodAdded((ReadablePeriod) period0, int1);
      assertNotNull(localDate1);
      assertNotSame(months1, months0);
      assertNotSame(localDate0, localDate1);
      assertNotSame(months0, months1);
      assertNotSame(localDate1, localDate0);
      assertEquals(1, months1.size());
      assertEquals(3, localDate0.size());
      assertEquals(1, months0.size());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate1.size());
      assertFalse(months1.equals((Object)months0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(months0.equals((Object)months1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(localDate1.equals((Object)localDate0));
  }

  //@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = (-1007L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3600000, int0);
      
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy(int0);
      assertNotNull(months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Period period0 = months1.toPeriod();
      assertNotNull(period0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      int int1 = 24;
      assertFalse(int1 == int0);
      
      long long1 = gJChronology0.add((ReadablePeriod) period0, long0, int1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertFalse(months1.equals((Object)months0));
      assertFalse(int1 == int0);
      assertFalse(long0 == long1);
      assertEquals((-37615532326007L), long1);
  }

  //@Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      long long0 = (-25L);
      long long1 = gJChronology0.set((ReadablePartial) monthDay0, long0);
      assertEquals(2, monthDay0.size());
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(3801599975L, long1);
      
      int int0 = (-870);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int1 = cachedDateTimeZone0.getOffsetFromLocal(long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(2, monthDay0.size());
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertEquals(3600000, int1);
      
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy(int1);
      assertNotNull(months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, months0.size());
      assertEquals(2, monthDay0.size());
      assertEquals(1, months1.size());
      assertFalse(long0 == long1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(months1.equals((Object)months0));
      
      Period period0 = months1.toPeriod();
      assertNotNull(period0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, months0.size());
      assertEquals(2, monthDay0.size());
      assertEquals(1, months1.size());
      assertFalse(long0 == long1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(months1.equals((Object)months0));
      
      long long2 = gJChronology0.add((ReadablePeriod) period0, (long) int0, int1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, months0.size());
      assertEquals(2, monthDay0.size());
      assertEquals(1, months1.size());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(months0.equals((Object)months1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(months1.equals((Object)months0));
      assertEquals((-5642498878873125870L), long2);
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-861);
      Months months0 = Months.MIN_VALUE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Months months1 = months0.dividedBy(int0);
      assertNotNull(months1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      Period period0 = months1.toPeriod();
      assertNotNull(period0);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      
      int int1 = 4;
      long long0 = gJChronology0.add((ReadablePeriod) period0, (long) int0, int1);
      assertNotSame(months0, months1);
      assertNotSame(months1, months0);
      assertEquals(1, months0.size());
      assertEquals(1, months1.size());
      assertFalse(int1 == int0);
      assertFalse(months0.equals((Object)months1));
      assertFalse(months1.equals((Object)months0));
      assertFalse(int0 == int1);
      assertEquals(26236165942799139L, long0);
  }

  //@Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      long long0 = (-25L);
      long long1 = gJChronology0.set((ReadablePartial) monthDay0, long0);
      assertEquals(2, monthDay0.size());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(3801599975L, long1);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long1);
      assertEquals(2, monthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(3600000, int0);
      
      MonthDay monthDay1 = monthDay0.minusMonths(int0);
      assertNotNull(monthDay1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(2, monthDay1.size());
      assertTrue(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay1.equals((Object)monthDay0));
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  //@Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gJChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 9;
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0, int0, int0, (Chronology) gJChronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      long long0 = 1800000L;
      Duration duration0 = new Duration(long0);
      assertNotNull(duration0);
      assertEquals(1800000L, duration0.getMillis());
      
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertNotNull(instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
      assertEquals((-12219291000000L), instant1.getMillis());
      assertEquals(1800000L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant0.equals((Object)instant1));
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) instant1, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219291000000L), instant1.getMillis());
      assertEquals(1800000L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant0.equals((Object)instant1));
      
      int int0 = (-8);
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(int0);
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219291000000L), instant1.getMillis());
      assertEquals(1800000L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant0.equals((Object)instant1));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) instant0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = (-8);
      YearMonthDay yearMonthDay1 = yearMonthDay0.minusYears(int0);
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertEquals(3, yearMonthDay1.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      YearMonthDay yearMonthDay2 = yearMonthDay1.plus((ReadablePeriod) mutablePeriod0);
      assertNotNull(yearMonthDay2);
      assertNotSame(yearMonthDay1, yearMonthDay2);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay0);
      assertNotSame(yearMonthDay2, yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay2);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertEquals(3, yearMonthDay1.size());
      assertEquals(3, yearMonthDay2.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay0));
      assertFalse(yearMonthDay2.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay2));
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      int int0 = (-861);
      Seconds seconds0 = Seconds.seconds(int0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, seconds0.size());
      
      MonthDay monthDay1 = monthDay0.plus((ReadablePeriod) mutablePeriod0);
      assertNotNull(monthDay1);
      assertNotSame(monthDay0, monthDay1);
      assertNotSame(monthDay1, monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, seconds0.size());
      assertEquals(2, monthDay1.size());
      assertTrue(monthDay0.equals((Object)monthDay1));
      assertTrue(monthDay1.equals((Object)monthDay0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  //@Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("GJChronology[UTC,cutover=2014-02-14T20:21:21.320Z]", string0);
  }

  //@Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      String string0 = gJChronology0.toString();
      assertNotNull(string0);
      assertEquals("GJChronology[Europe/London]", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      
      boolean boolean0 = gJChronology0.equals((Object) arrayList0);
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      GJChronology gJChronology1 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      
      boolean boolean0 = gJChronology0.equals((Object) gJChronology1);
      assertNotSame(gJChronology0, gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertFalse(gJChronology0.equals((Object)gJChronology1));
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      long long0 = 1800000L;
      Duration duration0 = new Duration(long0);
      assertNotNull(duration0);
      assertEquals(1800000L, duration0.getMillis());
      
      Instant instant1 = instant0.plus((ReadableDuration) duration0);
      assertNotNull(instant1);
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
      assertEquals((-12219291000000L), instant1.getMillis());
      assertEquals(1800000L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant0.equals((Object)instant1));
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) instant1, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219291000000L), instant1.getMillis());
      assertEquals(1800000L, duration0.getMillis());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant0.equals((Object)instant1));
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1800000L, mutableDateTime0.getMillis());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1800000L, mutableDateTime0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertNotSame(instant1, instant0);
      assertNotSame(instant0, instant1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1800000L, mutableDateTime0.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219292725000L), dateMidnight0.getMillis());
      assertEquals((-12219291000000L), instant1.getMillis());
      assertEquals(1800000L, duration0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertFalse(instant1.equals((Object)instant0));
      assertFalse(instant0.equals((Object)instant1));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = (-8);
      try {
        long long0 = gJChronology0.getDateTimeMillis(int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -8 for hourOfDay must be in the range [0,23]
         //
      }
  }

  //@Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = (-1007L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3600000, int0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) gJChronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      LocalDate localDate0 = monthDay0.toLocalDate(int0);
      assertNotNull(localDate0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
  }

  //@Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = (-40L);
      int int0 = (-861);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int1 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(int1 == int0);
      assertEquals(3600000, int1);
      
      try {
        long long1 = gJChronology0.getDateTimeMillis(int1, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3600000 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology1 = (GJChronology)gJChronology0.withZone(dateTimeZone0);
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte byte0 = (byte)127;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (long) byte0, (int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: 127
         //
      }
  }

  //@Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int0 = (-1396);
      DateTime dateTime1 = dateTime0.withWeekyear(int0);
      assertNotNull(dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertEquals((-106186390643680L), dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      // Undeclared exception!
      try {
        GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateTime1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cutover too early. Must be on or after 0001-01-01.
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      long long0 = (-12219292800000L);
      int int0 = (-1900);
      // Undeclared exception!
      try {
        GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid min days in first week: -1900
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      int int0 = (-1267);
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      
      long long0 = (-9L);
      int[] intArray0 = buddhistChronology0.get((ReadablePeriod) period0, (long) int0, long0);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 1, 258}, intArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      int int0 = 9;
      long long0 = gJChronology0.julianToGregorianByWeekyear(int0);
      assertEquals((-1209599991L), long0);
  }

  //@Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      long long0 = 1800000L;
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) instant0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(1800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(1800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals(1800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219379125000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      GJChronology gJChronology1 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0, (ReadableInstant) dateMidnight0);
      assertNotNull(gJChronology1);
      assertNotSame(gJChronology1, gJChronology0);
      assertNotSame(gJChronology0, gJChronology1);
      assertEquals(1800000L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals((-12219379125000L), dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(gJChronology1.equals((Object)gJChronology0));
      assertFalse(gJChronology0.equals((Object)gJChronology1));
  }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       
//       GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
//       assertNotNull(gJChronology0);
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       
//       int int0 = gJChronology0.hashCode();
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(110953517, int0);
//   }

  //@Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      int int0 = 6;
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(lenientChronology0);
      
      long long0 = lenientChronology0.getDateTimeMillis((long) int0, int0, int0, int0, int0);
      assertEquals(18366006L, long0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      gJChronology0.assemble(assembledChronology_Fields0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gJChronology0);
      assertNotNull(strictChronology0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) instant0, (Chronology) gJChronology0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      YearMonthDay yearMonthDay1 = yearMonthDay0.withChronologyRetainFields((Chronology) strictChronology0);
      assertNotNull(yearMonthDay1);
      assertNotSame(yearMonthDay0, yearMonthDay1);
      assertNotSame(yearMonthDay1, yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, yearMonthDay1.size());
      assertFalse(yearMonthDay0.equals((Object)yearMonthDay1));
      assertFalse(yearMonthDay1.equals((Object)yearMonthDay0));
  }
}
