/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:33:40 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-6L);
      PeriodType periodType0 = null;
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1615;
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0);
      assertNotNull(mutableInterval0);
      assertEquals(1615L, mutableInterval0.getStartMillis());
      assertEquals(1615L, mutableInterval0.getEndMillis());
      
      Period period0 = mutableInterval0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1615L, mutableInterval0.getStartMillis());
      assertEquals(1615L, mutableInterval0.getEndMillis());
      
      Period period1 = period0.withMonths(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(1615L, mutableInterval0.getStartMillis());
      assertEquals(1615L, mutableInterval0.getEndMillis());
      
      // Undeclared exception!
      try {
        Days days0 = period1.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains months and months vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 25;
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 3438;
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Days days0 = Days.days(int0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Period period1 = period0.minus((ReadablePeriod) days0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusMillis(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = (-1L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.plusSeconds(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = (-6L);
      PeriodType periodType0 = null;
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 1719;
      Period period1 = period0.minusMinutes(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-4);
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int1 = 0;
      Period period1 = period0.plusHours(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = (-6L);
      PeriodType periodType0 = null;
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.minusDays(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-900);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int1 = 0;
      Period period1 = period0.plusWeeks(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-1435);
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusMonths(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plusYears(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1615;
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0);
      assertNotNull(mutableInterval0);
      assertEquals(1615L, mutableInterval0.getEndMillis());
      assertEquals(1615L, mutableInterval0.getStartMillis());
      
      Period period0 = mutableInterval0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1615L, mutableInterval0.getEndMillis());
      assertEquals(1615L, mutableInterval0.getStartMillis());
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(1615L, mutableInterval0.getEndMillis());
      assertEquals(1615L, mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 2545;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-1435);
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 1;
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-1L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = null;
      PeriodType periodType0 = null;
      Period period0 = new Period(object0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 1921;
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = (-1L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-900);
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 3438;
      Days days0 = Days.days(int0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Period period0 = days0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withPeriodType(periodType0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(8, period0.size());
      assertEquals(7, period1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-816);
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      LocalDate localDate0 = monthDay0.toLocalDate(int0);
      assertNotNull(localDate0);
      assertEquals(2, monthDay0.size());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-449);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusWeeks(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-449);
      ReadableInterval readableInterval0 = null;
      Weeks weeks0 = Weeks.weeksIn(readableInterval0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Duration duration0 = weeks0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) int0);
      assertNotNull(mutableDateTime0);
      assertEquals((-449L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) mutableDateTime0);
      assertNotNull(period0);
      assertEquals((-449L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 97;
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertNotNull(period0);
      assertEquals(4, period0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(4, period0.size());
      assertEquals(1, minutes0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-449);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      Chronology chronology0 = null;
      Period period1 = new Period((Object) period0, periodType0, chronology0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 1615;
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0);
      assertNotNull(mutableInterval0);
      assertEquals(1615L, mutableInterval0.getEndMillis());
      assertEquals(1615L, mutableInterval0.getStartMillis());
      
      Period period0 = mutableInterval0.toPeriod();
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(1615L, mutableInterval0.getEndMillis());
      assertEquals(1615L, mutableInterval0.getStartMillis());
      
      Period period1 = period0.withHours(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(1615L, mutableInterval0.getEndMillis());
      assertEquals(1615L, mutableInterval0.getStartMillis());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 3438;
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusSeconds(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = (-1L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.withWeeks(int0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      long long0 = (-1L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.withSeconds(int0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 6;
      Period period1 = period0.minusYears(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 0;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      YearMonth yearMonth0 = new YearMonth((long) int0, (Chronology) gregorianChronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Period period0 = new Period((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      assertEquals(2, yearMonth0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-1435);
      Period period0 = new Period(int0, int0, int0, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusHours(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertNotNull(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      
      Period period0 = new Period(readableDuration0, readableInstant0, periodType0);
      assertNotNull(period0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, period0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test39() {}
//   @Test(timeout = 4000)
//   public void test39()  throws Throwable  {
//       int int0 = 0;
//       LocalTime localTime0 = new LocalTime(int0, int0, int0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       
//       Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime0);
//       assertNotNull(period0);
//       assertEquals(4, period0.size());
//       assertEquals(4, localTime0.size());
//       
//       // Undeclared exception!
//       try {
//         Period period1 = period0.withDays(int0);
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // Field is not supported
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
      assertEquals(7, period0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(0L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Duration duration0 = period0.toStandardDuration();
      assertNotNull(duration0);
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 2545;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.normalizedStandard();
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      assertEquals(8, period0.size());
      
      Period period1 = Period.hours(int0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = (-6L);
      PeriodType periodType0 = null;
      Period period0 = new Period(long0, periodType0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = 0;
      Period period1 = period0.minusMinutes(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Days days0 = Days.SIX;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      PeriodType periodType0 = days0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, days0.size());
      
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, period0.size());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 2545;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusDays(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 3438;
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.minusMillis(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 1341L;
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertNotNull(period0);
      assertEquals(1, period0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-4);
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.normalizedStandard();
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "A.V";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"A.V\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test51() {}
//   @Test(timeout = 4000)
//   public void test51()  throws Throwable  {
//       int int0 = 0;
//       LocalTime localTime0 = new LocalTime(int0, int0, int0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       
//       Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localTime0);
//       assertNotNull(period0);
//       assertEquals(4, period0.size());
//       assertEquals(4, localTime0.size());
//       
//       Period period1 = period0.minusMonths(int0);
//       assertSame(period1, period0);
//       assertSame(period0, period1);
//       assertNotNull(period1);
//       assertEquals(4, period1.size());
//       assertEquals(4, period0.size());
//       assertEquals(4, localTime0.size());
//   }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withMinutes(int0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 97;
      Period period0 = new Period(int0, PeriodType.DAY_INDEX, int0, PeriodType.DAY_INDEX, int0, int0, PeriodType.MILLI_INDEX, int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 2545;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.withMillis(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertNotNull(period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Duration duration0 = new Duration(readableInstant0, readableInstant0);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      
      Hours hours0 = Hours.EIGHT;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      PeriodType periodType0 = hours0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, hours0.size());
      
      Period period0 = new Period(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertNotNull(period0);
      assertEquals(1, period0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, hours0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = 8L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, chronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = 2545;
      Period period0 = new Period((long) int0, (long) int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = (-1L);
      Period period0 = new Period(long0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      Period period1 = period0.toPeriod();
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = (-1284);
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = period0.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = null;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Period period0 = new Period(object0, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertEquals(8, period0.size());
      
      int int0 = period0.getHours();
      assertEquals(0, int0);
      assertEquals(8, period0.size());
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Duration duration0 = new Duration((long) int0, (long) int0);
      assertNotNull(duration0);
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      
      Period period1 = new Period((ReadableInstant) mutableDateTime0, (ReadableDuration) duration0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(8, period1.size());
  }
}
