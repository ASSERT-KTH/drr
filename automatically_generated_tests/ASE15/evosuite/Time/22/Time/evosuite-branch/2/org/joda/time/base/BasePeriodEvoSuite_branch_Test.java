/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:21:35 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BasePeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      long long0 = (-2186L);
      int int0 = 66;
      Years years0 = Years.years(int0);
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, years0.size());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(copticChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, (Chronology) copticChronology0);
      assertEquals(1, years0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("Years", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.add((ReadablePeriod) period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'seconds'
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1105;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadablePeriod readablePeriod0 = null;
      mutablePeriod0.add(readablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-1684);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-1637);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = null;
      mutablePeriod0.mergePeriod((ReadablePeriod) mutablePeriod1);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.addMonths(int0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 1058;
      // Undeclared exception!
      try {
        mutablePeriod0.addMinutes(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 404;
      mutablePeriod0.addMillis(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 1344L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 1713L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) buddhistChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = (-3188);
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-1684);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = (-1);
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, readableInstant0, periodType0);
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertEquals(6, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertEquals(8, period0.size());
      assertEquals(1, period1.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test12()  throws Throwable  {
      long long0 = (-13L);
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) localDateTime0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(yearMonthDay0);
      
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) yearMonthDay0, (ReadablePartial) localDateTime0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test13() {}
//   @Test
//   public void test13()  throws Throwable  {
//       long long0 = (-60L);
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertNotNull(fixedDateTimeZone0);
//       
//       TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) fixedDateTimeZone0);
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertNotNull(timeOfDay0);
//       
//       ISOChronology iSOChronology0 = (ISOChronology)timeOfDay0.getChronology();
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertNotNull(iSOChronology0);
//       
//       LocalTime localTime0 = new LocalTime(long0, (Chronology) iSOChronology0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertNotNull(localTime0);
//       
//       Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) timeOfDay0);
//       assertEquals(4, localTime0.size());
//       assertEquals(4, timeOfDay0.size());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(8, period0.size());
//       assertNotNull(period0);
//   }

  @Test
  public void test14()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) timeOfDay0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      TimeOfDay timeOfDay1 = null;
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test17()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = 1713L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) buddhistChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTimeZone dateTimeZone0 = null;
      DateTime dateTime0 = dateMidnight0.toDateTime(dateTimeZone0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) buddhistChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = mutablePeriod0.toDurationFrom((ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 810;
      Period period0 = new Period((long) int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = (-11L);
      Instant instant0 = new Instant(long0);
      assertEquals((-11L), instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals((-11L), dateTime0.getMillis());
      assertEquals((-11L), instant0.getMillis());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(604800000L, duration0.getMillis());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, (ReadableInstant) dateTime0, periodType0);
      assertEquals(4, mutablePeriod0.size());
      assertEquals(604800000L, duration0.getMillis());
      assertEquals((-11L), dateTime0.getMillis());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals((-11L), instant0.getMillis());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.setDays(int0);
      assertEquals(4, mutablePeriod0.size());
      assertEquals(604800000L, duration0.getMillis());
      assertEquals((-11L), dateTime0.getMillis());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals((-11L), instant0.getMillis());
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 1713L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight(long0, (Chronology) buddhistChronology0);
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateTimeZone dateTimeZone0 = null;
      DateTime dateTime0 = dateMidnight0.toDateTime(dateTimeZone0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0, periodType0);
      assertEquals(2, period0.size());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test22()  throws Throwable  {
      Days days0 = Days.FIVE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = (-11L);
      Instant instant0 = new Instant(long0);
      assertEquals((-11L), instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals((-11L), instant0.getMillis());
      assertEquals((-11L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) instant0, periodType0);
      assertEquals((-11L), instant0.getMillis());
      assertEquals(4, period0.size());
      assertEquals((-11L), dateTime0.getMillis());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationTo((ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals((-11L), instant0.getMillis());
      assertEquals(4, period0.size());
      assertEquals((-11L), dateTime0.getMillis());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(duration0);
  }

  @Test
  public void test24()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      long long0 = 2239L;
      LocalTime localTime0 = new LocalTime(long0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int int0 = (-1);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(1, weeks0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(weeks0);
      
      Duration duration0 = weeks0.toStandardDuration();
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, localTime0.size());
      assertNotNull(duration0);
      
      Interval interval0 = duration0.toIntervalFrom(readableInstant0);
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      DateTime dateTime0 = interval0.getEnd();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableInstant0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, weeks0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, localTime0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test
  public void test25()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.setValue(int0, int0);
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(1, mutablePeriod0.size());
  }
}
