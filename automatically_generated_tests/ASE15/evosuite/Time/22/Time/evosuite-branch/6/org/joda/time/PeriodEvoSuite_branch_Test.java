/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:04:58 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertEquals(2, period1.size());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int1, int0);
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(8, period0.size());
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Period period1 = period0.withYears(int1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      
      Period period2 = period1.normalizedStandard();
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(8, period2.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period2);
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(int1 == int0);
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(int0 == int1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 15;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test03()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertEquals(7, period0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertEquals(7, period0.size());
      assertEquals(7, period1.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 517;
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.minusMillis(int1);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test05()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) julianChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      int int0 = (-938);
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.minusSeconds(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period1 = period0.minusMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plusHours(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test08()  throws Throwable  {
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusDays(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-2146);
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusWeeks(int1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test11()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertEquals(7, period1.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(7, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) mutablePeriod0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(8, period0.size());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertEquals(4, localDateTime0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test14()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      
      Period period0 = Period.years(int0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals(1, minutes0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(2, int0);
      assertEquals(1, minutes0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      
      Period period0 = minutes0.toPeriod();
      assertEquals(1, minutes0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertEquals(8, period1.size());
      assertEquals(1, minutes0.size());
      assertEquals(8, period0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 67;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.DAYS_TYPE;
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = 7;
      Period period1 = period0.withField(durationFieldType0, int0);
      assertEquals(8, period1.size());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = (-3072);
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 6L;
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(long0, long0, periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(2, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(2, period1.size());
      assertEquals(2, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 2772L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay0);
      assertEquals(3, period0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(period0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 2427;
      LocalDate localDate0 = new LocalDate((long) int0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      YearMonth yearMonth0 = new YearMonth();
      assertEquals(2, yearMonth0.size());
      assertNotNull(yearMonth0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDate0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gregorianChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(8, period0.size());
      assertNotNull(seconds0);
  }

  @Test
  public void test25()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period0);
      
      int int0 = 7;
      Period period1 = period0.minusWeeks(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test26()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period0 = new Period((long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 7;
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertEquals(7000L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period((ReadableDuration) duration0, readableInstant0);
      assertEquals(8, period0.size());
      assertEquals(7000L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test28()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      
      Period period0 = Period.years(int0);
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Minutes minutes0 = period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      long long0 = 0L;
      mutablePeriod0.add(long0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-1638);
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Weeks weeks0 = period0.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(days0);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withHours(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test33()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period1 = period0.minusSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test34()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, hours0.size());
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.withWeeks(int0);
      assertEquals(1, hours0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Chronology chronology0 = null;
      Period period0 = new Period((Object) hours0, chronology0);
      assertEquals(1, hours0.size());
      assertEquals(1, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withSeconds(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      
      Period period0 = Period.years(int0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = (-29);
      Period period0 = new Period(int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusHours(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test39()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period(readableDuration0, (ReadableInstant) dateMidnight0, periodType0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test40()  throws Throwable  {
      long long0 = 2L;
      int int0 = 1000;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Period period0 = new Period(long0, long0, (Chronology) julianChronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test41()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      Chronology chronology0 = null;
      Period period0 = new Period(long0, long0, periodType0, chronology0);
      assertEquals(8, period0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(8, period0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = (-3072);
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period0);
      
      int int0 = 7;
      Period period1 = period0.minusMinutes(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 20;
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusDays(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test45()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 7;
      Period period1 = period0.minusMillis(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = 0;
      int int1 = 1;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int1, int0);
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertNotNull(mockDate0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(8, period0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Period period1 = period0.plusMonths(int1);
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(int0 == int1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      
      Period period2 = period1.normalizedStandard();
      assertEquals("Sun Dec 31 00:01:00 GMT 1899", mockDate0.toString());
      assertEquals(8, period1.size());
      assertEquals(8, period2.size());
      assertEquals(8, period0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period2);
      assertTrue(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertTrue(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(int1 == int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(int0 == int1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "iw";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"iw\"
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = (-2146);
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = (-29);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test51()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertNotNull(durationFieldType0);
      
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(2, int0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      
      Period period0 = minutes0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withMillis(int0);
      assertEquals(8, period1.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(8, period0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test
  public void test52()  throws Throwable  {
      long long0 = 10048L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(10048L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadableInstant) mutableDateTime0, (ReadableDuration) duration0, periodType0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(10048L, mutableDateTime0.getMillis());
      assertEquals(1, periodType0.size());
      assertEquals("Weeks", periodType0.getName());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test53()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Period period0 = new Period((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(8, period0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(8, period0.size());
      assertEquals(7, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 20;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Period period0 = new Period((long) int0, (Chronology) copticChronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period((long) int0, (long) int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 67;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test
  public void test58()  throws Throwable  {
      long long0 = 2L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Period period0 = new Period(long0, long0, (Chronology) julianChronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(1, hours0.size());
      assertEquals(8, period0.size());
      assertNotNull(hours0);
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = (-3072);
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertEquals((-3072000L), duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = new Period((ReadableInstant) instant0, (ReadableDuration) duration0);
      assertEquals(8, period0.size());
      assertEquals((-3072000L), duration0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test60()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
      assertEquals(8, mutablePeriod0.size());
      
      Period period0 = Period.minutes(int0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period0);
  }
}
