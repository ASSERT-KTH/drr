/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:01:45 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class MutablePeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      long long0 = (-3017L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) islamicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = new Duration(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(0L, duration0.getMillis());
  }

  @Test
  public void test01()  throws Throwable  {
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableDuration readableDuration0 = null;
      mutablePeriod0.add(readableDuration0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 1656;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0, (Chronology) gJChronology0);
      assertEquals(1656L, mutableInterval0.getEndMillis());
      assertEquals(1656L, mutableInterval0.getStartMillis());
      assertNotNull(mutableInterval0);
      
      mutablePeriod0.add((ReadableInterval) mutableInterval0);
      assertEquals(1656L, mutableInterval0.getEndMillis());
      assertEquals(1656L, mutableInterval0.getStartMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 192;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.add(readableInterval0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = (-3017L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) islamicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      mutablePeriod0.setPeriod((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test
  public void test05()  throws Throwable  {
      int int0 = (-1396);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) mutablePeriod0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-47302531125000L), dateMidnight1.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      
      mutablePeriod0.setPeriod((ReadableInstant) dateMidnight1, (ReadableInstant) dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals((-47302531125000L), dateMidnight1.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
  }

  //@Test
  public void test06()  throws Throwable  {
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableDuration readableDuration0 = null;
      Interval interval0 = new Interval((Object) readableDuration0);
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNotNull(interval0);
      
      mutablePeriod0.setPeriod((ReadableInterval) interval0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
  }

  @Test
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      long long0 = 3063L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadableInterval readableInterval0 = null;
      mutablePeriod0.setPeriod(readableInterval0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  //@Test
  public void test08()  throws Throwable  {
      ReadableDuration readableDuration0 = null;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(yearMonthDay0);
      
      int int0 = 0;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay((long) int0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      DateTime dateTime0 = yearMonthDay0.toDateTime(timeOfDay0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(readableDuration0, (ReadableInstant) dateTime0, periodType0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, period0.size());
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(2, period0.size());
      assertNotNull(weeks0);
      
      MutablePeriod mutablePeriod0 = weeks0.toMutablePeriod();
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(2, period0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setHours(int0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(2, period0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 1656;
      mutablePeriod0.addDays(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "4R~<goMJ3UBycZIH+";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"4R~<goMJ3UBycZIH+\"
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 1299;
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MonthDay monthDay0 = new MonthDay((long) int0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)monthDay0.getChronology();
      assertEquals(2, monthDay0.size());
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) iSOChronology0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setValue(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1299
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 1995;
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = PeriodType.MONTH_INDEX;
      assertEquals(1, int0);
      
      Object object0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, (Chronology) gregorianChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 1656;
      mutablePeriod0.setMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1396);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setMillis(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 192;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-964);
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = PeriodType.MONTH_INDEX;
      assertEquals(1, int0);
      
      Object object0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, (Chronology) gregorianChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMinutes(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test19()  throws Throwable  {
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 1656;
      mutablePeriod0.addWeeks(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 1656;
      ReadableDuration readableDuration0 = null;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutableInterval mutableInterval0 = new MutableInterval((long) int0, (long) int0, (Chronology) gJChronology0);
      assertEquals(1656L, mutableInterval0.getEndMillis());
      assertEquals(1656L, mutableInterval0.getStartMillis());
      assertNotNull(mutableInterval0);
      
      DateTime dateTime0 = mutableInterval0.getEnd();
      assertEquals(1656L, dateTime0.getMillis());
      assertEquals(1656L, mutableInterval0.getEndMillis());
      assertEquals(1656L, mutableInterval0.getStartMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(readableDuration0, (ReadableInstant) dateTime0);
      assertEquals(1656L, dateTime0.getMillis());
      assertEquals(1656L, mutableInterval0.getEndMillis());
      assertEquals(1656L, mutableInterval0.getStartMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test21()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      long long0 = 3063L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = PeriodType.WEEK_INDEX;
      assertEquals(2, int0);
      
      mutablePeriod0.setWeeks(int0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      long long0 = 3063L;
      Instant instant0 = new Instant(long0);
      assertEquals(3063L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) instant0, (ReadableInstant) instant0, periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(3063L, instant0.getMillis());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 1299;
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MonthDay monthDay0 = new MonthDay((long) int0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)monthDay0.getChronology();
      assertEquals(2, monthDay0.size());
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) iSOChronology0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(2, monthDay0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod((long) int0, (long) int0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(2, monthDay0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 192;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addMonths(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test25()  throws Throwable  {
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "LtHx8_c<vN#X+)T<_#";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertNotNull(islamicChronology0);
      
      mutablePeriod0.add((long) int0, (Chronology) islamicChronology0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertEquals(0, int0);
      
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(1, minutes0.size());
      assertNotNull(durationFieldType0);
      
      mutablePeriod0.set(durationFieldType0, int0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = (-3017L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) islamicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.addMillis(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 1299;
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MonthDay monthDay0 = new MonthDay((long) int0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)monthDay0.getChronology();
      assertEquals(2, monthDay0.size());
      assertNotNull(iSOChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0, (Chronology) iSOChronology0);
      assertEquals(2, monthDay0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add((long) int0);
      assertEquals(2, monthDay0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = 3063L;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) buddhistChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test30()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      long long0 = 3063L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) mutablePeriod0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.addYears(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test32()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) duration0, readableInstant0, periodType0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(1, mutablePeriod0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = PeriodType.WEEK_INDEX;
      assertEquals(2, int0);
      
      Instant instant0 = new Instant((long) int0);
      assertEquals(2L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(2L, dateTime0.getMillis());
      assertEquals(2L, instant0.getMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) instant0, (ReadableInstant) dateTime0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(2L, dateTime0.getMillis());
      assertEquals(2L, instant0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, periodType0, (Chronology) julianChronology0);
      assertEquals(7, mutablePeriod0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertEquals(7, mutablePeriod0.size());
      assertEquals(7, mutablePeriod1.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotSame(mutablePeriod0, mutablePeriod1);
      assertNotSame(mutablePeriod1, mutablePeriod0);
      assertNotNull(mutablePeriod1);
      assertTrue(mutablePeriod0.equals((Object)mutablePeriod1));
      assertTrue(mutablePeriod1.equals((Object)mutablePeriod0));
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 192;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test36()  throws Throwable  {
      Object object0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 1656;
      mutablePeriod0.setDays(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test37()  throws Throwable  {
      PeriodType periodType0 = null;
      String string0 = "LtHx8_c<vN#X+)T<_#";
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((Object) string0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"LtHx8_c<vN#X+)T<_#\"
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = (-964);
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Minutes minutes0 = Minutes.MAX_VALUE;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertNotNull(durationFieldType0);
      
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = PeriodType.MONTH_INDEX;
      assertEquals(1, int0);
      
      Object object0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, (Chronology) gregorianChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addHours(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test40()  throws Throwable  {
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      int int0 = (-964);
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setYears(int0);
      assertEquals(1, months0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test41()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      long long0 = 3063L;
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period0);
  }

  @Test
  public void test42()  throws Throwable  {
      long long0 = (-1724L);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0, (Chronology) ethiopicChronology0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test43()  throws Throwable  {
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      mutablePeriod0.setSeconds(int0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = PeriodType.MONTH_INDEX;
      assertEquals(1, int0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      Object object0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, (Chronology) gregorianChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.add(periodType0.DAY_INDEX, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 192;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Seconds seconds0 = Seconds.ONE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(1000L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertNotNull(duration0);
      
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(1000L, duration0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test46()  throws Throwable  {
      long long0 = (-3017L);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      Duration duration0 = new Duration(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) instant0, (ReadableDuration) duration0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Hours hours0 = Hours.THREE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(1, hours0.size());
      assertEquals(10800000L, duration0.getMillis());
      assertNotNull(duration0);
      
      long long0 = 3063L;
      Instant instant0 = new Instant(long0);
      assertEquals(3063L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) instant0, (ReadableDuration) duration0, periodType0);
      assertEquals(1, hours0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(3063L, instant0.getMillis());
      assertEquals(10800000L, duration0.getMillis());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }
}
