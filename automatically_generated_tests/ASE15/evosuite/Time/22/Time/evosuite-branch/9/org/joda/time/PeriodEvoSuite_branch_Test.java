/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:12:10 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      int int0 = 0;
      PeriodType.HOUR_INDEX = int0;
      Days days0 = seconds0.toStandardDays();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(days0);
      
      Period period0 = days0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period0);
      
      int int1 = 2516;
      Period period1 = period0.plusHours(int1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      // Undeclared exception!
      try {
        Hours hours0 = period1.toStandardHours();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Hours as this period contains years and years vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 292278969;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-17);
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minus((ReadablePeriod) period0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = period0.getMillis();
      assertEquals(8, period0.size());
      assertEquals(0, int0);
      
      Period period1 = period0.minusSeconds(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = null;
      Period period0 = new Period(object0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 113;
      Period period1 = period0.plusMinutes(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusDays(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusWeeks(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 292278969;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-474);
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = (-2783L);
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 721;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Period period0 = years0.toPeriod();
      assertEquals(1, years0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = period0.getFieldType(int0);
      assertEquals(1, years0.size());
      assertEquals(8, period0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(1, years0.size());
      assertEquals(8, period0.size());
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-474);
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-17);
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test18() {}
//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       long long0 = 669L;
//       DateTimeZone dateTimeZone0 = null;
//       GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
//       assertNotNull(gJChronology0);
//       
//       LocalDate localDate0 = new LocalDate(long0, (Chronology) gJChronology0);
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Period period0 = Period.fieldDifference((ReadablePartial) localDate0, (ReadablePartial) localDate0);
//       assertEquals(3, period0.size());
//       assertEquals(3, localDate0.size());
//       assertNotNull(period0);
//   }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(julianChronology0);
      
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      assertEquals(4, localTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(localTime0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localTime0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-2336);
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
      assertEquals("Mon Aug 30 00:25:04 GMT 639", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalTime localTime0 = LocalTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localTime0.size());
      assertEquals("Mon Aug 30 00:25:04 GMT 639", mockDate0.toString());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(4, localTime0.size());
      assertEquals("Mon Aug 30 00:25:04 GMT 639", mockDate0.toString());
      assertEquals(1392337504000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      LocalDate localDate0 = dateTime0.toLocalDate();
      assertEquals(4, localTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals("Mon Aug 30 00:25:04 GMT 639", mockDate0.toString());
      assertEquals(1392337504000L, dateTime0.getMillis());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDate0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      long long0 = 901L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(8, period0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = null;
      Period period0 = new Period(object0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 113;
      Period period1 = period0.minusWeeks(int0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 901L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Duration duration0 = period0.toDurationTo((ReadableInstant) dateMidnight0);
      assertEquals(8, period0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(901L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period1 = duration0.toPeriodTo((ReadableInstant) dateMidnight0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(8, period1.size());
      assertEquals(901L, duration0.getMillis());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 48;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Minutes minutes0 = period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriod(periodType0);
      assertEquals(3, period0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1133;
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(weeks0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 292278969;
      Period period0 = new Period(int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertNotNull(days0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Period period0 = new Period((long) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-1168);
      Period period1 = period0.withHours(int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 4;
      Period period1 = period0.minusSeconds(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(int0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = (-2783L);
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = null;
      Chronology chronology0 = null;
      Period period0 = new Period((Object) string0, chronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 4;
      Period period1 = period0.withSeconds(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusHours(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      long long0 = (-2783L);
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationTo(readableInstant0);
      assertEquals(8, period0.size());
      assertEquals((-2783L), duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = new Period((ReadableDuration) duration0, readableInstant0, periodType0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(8, period0.size());
      assertEquals(7, period1.size());
      assertEquals((-2783L), duration0.getMillis());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = (-17);
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0, (Chronology) ethiopicChronology0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = 33L;
      PeriodType periodType0 = null;
      Period period0 = new Period(long0, long0, periodType0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(duration0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Period period0 = years0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, years0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(3, period1.size());
      assertEquals(1, years0.size());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusMinutes(int0);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertSame(period1, period0);
      assertSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.years();
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(readableInstant0, readableInstant0, periodType0);
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Years", periodType0.getName());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Period period0 = new Period((long) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-1168);
      Period period1 = period0.minusDays(int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      Period period0 = new Period((long) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-1168);
      Period period1 = period0.minusMillis(int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0, (Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 4;
      Period period1 = period0.plusMonths(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals(2, periodType0.size());
      assertEquals("YearDay", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try {
        Period period2 = period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "min!2eOfDay";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"min!2eOfDay\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Object object0 = null;
      Period period0 = new Period(object0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 113;
      Period period1 = period0.withMinutes(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      int int0 = 292278969;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withMillis(int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      long long0 = (-2783L);
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationTo(readableInstant0);
      assertEquals((-2783L), duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = new Period(readableInstant0, (ReadableDuration) duration0, periodType0);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals((-2783L), duration0.getMillis());
      assertEquals(7, period1.size());
      assertEquals(8, period0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(period1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      Period period0 = new Period(readableInstant0, readableInstant0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Hours hours0 = Hours.ONE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, hours0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(8, period0.size());
      assertEquals(1, period1.size());
      assertNotNull(period1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 10000000L;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, (Chronology) islamicChronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = 10000000L;
      int int0 = 1133;
      Period period0 = new Period(long0, (long) int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = (-3129);
      Period period0 = Period.weeks(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((long) int0, (Chronology) buddhistChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int1 = localDateTime0.getSecondOfMinute();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(4, localDateTime0.size());
      assertEquals(0, int1);
      
      Period period0 = Period.millis(int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(8, period0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = 42L;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-818);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      ISOChronology iSOChronology0 = (ISOChronology)partial0.getChronology();
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(long0, long0, (Chronology) iSOChronology0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertSame(period0, period1);
      assertSame(period1, period0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long long0 = 2190L;
      Instant instant0 = new Instant(long0);
      assertEquals(2190L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertEquals(2190L, dateTime0.getMillis());
      assertEquals(2190L, instant0.getMillis());
      assertNotNull(dateTime0);
      
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertEquals(2190L, mutableInterval0.getStartMillis());
      assertEquals(2190L, mutableInterval0.getEndMillis());
      assertNotNull(mutableInterval0);
      
      Duration duration0 = mutableInterval0.toDuration();
      assertEquals(0L, duration0.getMillis());
      assertEquals(2190L, mutableInterval0.getStartMillis());
      assertEquals(2190L, mutableInterval0.getEndMillis());
      assertNotNull(duration0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0);
      assertEquals(8, period0.size());
      assertEquals(2190L, dateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(2190L, mutableInterval0.getStartMillis());
      assertEquals(2190L, mutableInterval0.getEndMillis());
      assertEquals(2190L, instant0.getMillis());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = (-2336);
      Period period0 = Period.minutes(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }
}
