/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:25 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = PeriodType.SECOND_INDEX;
      assertEquals(6, int0);
      
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-826);
      Period period1 = period0.plusYears(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      
      // Undeclared exception!
      try {
        Weeks weeks0 = period1.toStandardWeeks();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Weeks as this period contains years and years vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1377;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Minutes minutes0 = period0.toStandardMinutes();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Minutes as this period contains months and months vary in length
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusMillis(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 27;
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int1 = period0.getHours();
      assertEquals(8, period0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Period period1 = period0.plusSeconds(int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1384);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plusMinutes(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 436L;
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(8, period0.size());
      assertEquals(0, int0);
      
      Period period1 = period0.plusHours(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-1384);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int1 = period0.getYears();
      assertEquals(8, period0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Period period1 = period0.plusDays(int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1384);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int1 = period0.getYears();
      assertEquals(8, period0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Period period1 = period0.plusWeeks(int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 436L;
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(8, period0.size());
      assertEquals(0, int0);
      
      Period period1 = period0.minusMonths(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusYears(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(1, weeks0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 2687;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      MutablePeriod mutablePeriod0 = null;
      Period period1 = period0.plus((ReadablePeriod) mutablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      long long0 = 259200000L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) days0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      int int1 = 2740;
      Period period0 = Period.hours(int1);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      assertFalse(int1 == int0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      assertFalse(int1 == int0);
      
      DurationFieldType durationFieldType0 = weeks0.getFieldType(int0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int1);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(int1 == int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 25;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(weeks0);
      
      DurationFieldType durationFieldType0 = weeks0.getFieldType(int0);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals(1, weeks0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = (-110);
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 259200000L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 2;
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Period period0 = new Period();
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.withFields(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-20);
      Period period0 = Period.weeks(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 27;
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(7, period1.size());
      assertEquals(8, period0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      MockDate mockDate0 = (MockDate)mutableDateTime0.toDate();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      TimeOfDay timeOfDay0 = TimeOfDay.fromDateFields((Date) mockDate0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(timeOfDay0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      assertEquals(4, period0.size());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 5;
      Days days0 = Days.SIX;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Hours hours0 = days0.toStandardHours();
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      assertNotNull(hours0);
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(minutes0);
      
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(518400000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      DateTime dateTime0 = new DateTime((long) int0);
      assertEquals(5L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = new Period((ReadableDuration) duration0, (ReadableInstant) dateTime0, periodType0);
      assertEquals(8, period0.size());
      assertEquals(518400000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertEquals(5L, dateTime0.getMillis());
      assertNotNull(period0);
      
      Seconds seconds0 = period0.toStandardSeconds();
      assertEquals(8, period0.size());
      assertEquals(518400000L, duration0.getMillis());
      assertEquals(1, hours0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertEquals(5L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 2;
      Period period0 = Period.months(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      int int0 = 1377;
      Period period1 = period0.minusWeeks(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = 259200000L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      Period period1 = new Period((ReadableDuration) duration0, readableInstant0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(259200000L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = (-1384);
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, periodType0);
      assertEquals(1, period0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 436L;
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period1 = new Period((Object) period0, periodType0, (Chronology) islamicChronology0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = 436L;
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = period0.getMinutes();
      assertEquals(8, period0.size());
      assertEquals(0, int0);
      
      Period period1 = new Period(int0, int0, int0, int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 436L;
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Days days0 = period0.toStandardDays();
      assertEquals(8, period0.size());
      assertEquals(1, days0.size());
      assertNotNull(days0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-1384);
      Period period0 = Period.years(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = (-1384);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int1 = period0.getYears();
      assertEquals(8, period0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Period period1 = period0.withHours(int1);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 0L;
      Period period0 = new Period(long0, long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-826);
      Period period1 = period0.minusSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-20);
      Period period0 = Period.weeks(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withWeeks(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 2687;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Period period1 = new Period((Object) period0, (Chronology) julianChronology0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = PeriodType.SECOND_INDEX;
      assertEquals(6, int0);
      
      Period period0 = Period.days(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withSeconds(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      Period period0 = new Period((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Period period0 = Period.ZERO;
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = (-5602);
      Period period1 = period0.minusHours(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 2687;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertEquals(1, seconds0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(1, seconds0.size());
      assertEquals((-2147483640000L), duration0.getMillis());
      assertEquals(1, minutes0.size());
      assertNotNull(duration0);
      
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType0);
      assertEquals(1, seconds0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(7, period0.size());
      assertEquals((-2147483640000L), duration0.getMillis());
      assertEquals(1, minutes0.size());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard();
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(1, seconds0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(7, period0.size());
      assertEquals((-2147483640000L), duration0.getMillis());
      assertEquals(1, minutes0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(periodType0);
      
      long long0 = (-8L);
      int int0 = 0;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(long0, long0, periodType0, (Chronology) iSOChronology0);
      assertEquals(5, period0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMinutes(int0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertEquals(5, period0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("DayTime", periodType0.getName());
      assertEquals(5, periodType0.size());
      assertEquals(5, period1.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localTime0.toDateTimeToday();
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertNotNull(dateTime0);
      
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0, periodType0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1, period0.size());
      assertEquals(1, periodType0.size());
      assertEquals("Hours", periodType0.getName());
      assertEquals(4, localTime0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 1377;
      Period period1 = period0.minusDays(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      int int0 = 1377;
      Period period1 = period0.minusMillis(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(1, weeks0.size());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = PeriodType.YEAR_INDEX;
      assertEquals(0, int0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) copticChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) zonedChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(strictChronology0);
      
      LocalTime localTime0 = new LocalTime((long) int0, (Chronology) strictChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      PeriodType periodType0 = null;
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0, periodType0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 365L;
      Duration duration0 = new Duration(long0);
      assertEquals(365L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      Period period0 = duration0.toPeriodFrom(readableInstant0);
      assertEquals(365L, duration0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Months months0 = Months.ONE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Period period1 = period0.minus((ReadablePeriod) months0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertEquals(365L, duration0.getMillis());
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertEquals(1, months0.size());
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      
      Seconds seconds0 = Seconds.TWO;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try {
        Period period2 = period1.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = PeriodType.SECOND_INDEX;
      assertEquals(6, int0);
      
      PeriodType periodType0 = PeriodType.time();
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      assertEquals(4, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 25;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMonths(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.hours(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertNotNull(period1);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      int int0 = 1377;
      Period period1 = period0.withMillis(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(8, period0.size());
      assertEquals(8, period1.size());
      assertEquals(1, weeks0.size());
      assertNotNull(period1);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = (-797L);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = (-5602);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Period period0 = new Period((long) int0, (Chronology) copticChronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = null;
      Period period0 = new Period((Object) string0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      int int0 = PeriodType.SECOND_INDEX;
      assertEquals(6, int0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, (Chronology) julianChronology0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 259200000L;
      Period period0 = new Period(long0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertEquals(8, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = (-1384);
      Period period0 = Period.millis(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(8, period0.size());
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.minutes(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }
}
