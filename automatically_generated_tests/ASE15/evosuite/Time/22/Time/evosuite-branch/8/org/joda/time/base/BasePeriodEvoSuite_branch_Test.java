/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:37:56 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

 
public class BasePeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals(1, mutablePeriod0.size());
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(long0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "c5Gw,:33]4HDNXn>TN*";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateTime dateTime0 = timeOfDay0.toDateTimeToday(dateTimeZone0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Interval interval0 = new Interval((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392339600000L, interval0.getStartMillis());
      assertEquals(1392339600000L, interval0.getEndMillis());
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertNotNull(interval0);
      
      Period period0 = interval0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392339600000L, interval0.getStartMillis());
      assertEquals(1392339600000L, interval0.getEndMillis());
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertNotNull(period0);
      
      int int0 = 352831702;
      Period period1 = period0.plusMonths(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(8, period1.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392339600000L, interval0.getStartMillis());
      assertEquals(1392339600000L, interval0.getEndMillis());
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertNotNull(period1);
      
      // Undeclared exception!
      try {
        mutablePeriod0.add((ReadablePeriod) period1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = 0L;
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, periodType0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Duration duration0 = Duration.ZERO;
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(long0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "c5Gw,:33]4HDNXn>TN*";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      DateTime dateTime0 = timeOfDay0.toDateTimeToday(dateTimeZone0);
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(dateTime0);
      
      Interval interval0 = new Interval((ReadableDuration) duration0, (ReadableInstant) dateTime0);
      assertEquals(1392339600000L, interval0.getStartMillis());
      assertEquals(1392339600000L, interval0.getEndMillis());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(interval0);
      
      Period period0 = interval0.toPeriod();
      assertEquals(1392339600000L, interval0.getStartMillis());
      assertEquals(1392339600000L, interval0.getEndMillis());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(period0);
      
      mutablePeriod0.add((ReadablePeriod) period0);
      assertEquals("Minutes", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1392339600000L, interval0.getStartMillis());
      assertEquals(1392339600000L, interval0.getEndMillis());
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392339600000L, dateTime0.getMillis());
      assertEquals(4, timeOfDay0.size());
      assertEquals(1, mutablePeriod0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 7L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) gJChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadablePeriod readablePeriod0 = null;
      mutablePeriod0.add(readablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 8;
      Hours hours0 = Hours.MAX_VALUE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay(int0, int0, int0, int0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Period period0 = new Period((ReadablePartial) timeOfDay0, (ReadablePartial) timeOfDay0);
      assertEquals(8, period0.size());
      assertEquals(4, timeOfDay0.size());
      assertNotNull(period0);
      
      mutablePeriod0.mergePeriod((ReadablePeriod) period0);
      assertEquals(1, hours0.size());
      assertEquals(8, period0.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 7L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, (Chronology) gJChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      ReadablePeriod readablePeriod0 = null;
      mutablePeriod0.mergePeriod(readablePeriod0);
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      long long0 = 1396L;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) ethiopicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = 0;
      mutablePeriod0.add(durationFieldType0, int0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      long long0 = 0L;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(long0, long0, (Chronology) ethiopicChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertNotNull(unsupportedDurationField0);
      
      DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertNull(durationFieldType1);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.add(durationFieldType1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 254;
      Period period0 = Period.seconds(int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'halfdays'
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 5;
      int int1 = 0;
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0, periodType0);
      assertFalse(int0 == int1);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(4, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setYears(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertEquals(4, mutablePeriod0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 1;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      int int1 = 0;
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 8;
      Hours hours0 = Hours.MAX_VALUE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setMonths(int0);
      assertEquals(1, hours0.size());
      assertEquals(8, mutablePeriod0.size());
  }

  @Test
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(7, period1.size());
      assertEquals(8, period0.size());
      assertNotNull(period1);
  }

  @Test
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.time();
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 434;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withPeriodType(periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'years'
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 8;
      DateTimeZone dateTimeZone0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      LocalTime localTime0 = new LocalTime(int0, int0, int0, int0, (Chronology) strictChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      Period period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertEquals(8, period0.size());
      assertEquals(4, localTime0.size());
      assertNotNull(period0);
  }

  @Test
  public void test14()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = 1;
      LocalTime localTime0 = dateTime0.toLocalTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      YearMonth yearMonth0 = YearMonth.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(2, yearMonth0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62133087540000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(yearMonth0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = null;
      try {
        period0 = new Period((ReadablePartial) localTime0, (ReadablePartial) yearMonth0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Period period0 = null;
      try {
        period0 = new Period(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      MutableDateTime mutableDateTime0 = null;
      Period period0 = new Period((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) islamicChronology0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      MutableDateTime mutableDateTime1 = null;
      Period period0 = new Period((ReadableInstant) mutableDateTime1, (ReadableInstant) mutableDateTime0);
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(8, period0.size());
      assertNotNull(period0);
  }

  @Test
  public void test18()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = (-2407L);
      Duration duration0 = new Duration(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = duration0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 1;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        mutablePeriod0.set(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Object object0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(object0, (Chronology) gregorianChronology0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-1318L);
      DateTime dateTime0 = new DateTime(long0);
      assertEquals((-1318L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Hours hours0 = Hours.SIX;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(1, hours0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toDurationFrom((ReadableInstant) dateTime0);
      assertEquals((-1318L), dateTime0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(1, hours0.size());
      assertEquals(21600000L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertNotNull(periodType0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) dateTime0, (ReadableDuration) duration0, periodType0);
      assertEquals(2, mutablePeriod0.size());
      assertEquals((-1318L), dateTime0.getMillis());
      assertEquals(8, period0.size());
      assertEquals(1, hours0.size());
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType0.size());
      assertEquals(21600000L, duration0.getMillis());
      assertNotNull(mutablePeriod0);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 607;
      Months months0 = Months.SIX;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.addYears(int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-1);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(period0);
      
      ReadableInstant readableInstant0 = null;
      Duration duration0 = period0.toDurationTo(readableInstant0);
      assertEquals(8, period0.size());
      assertEquals(8, mutablePeriod0.size());
      assertEquals((-3661001L), duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 61;
      Days days0 = Days.THREE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Minutes minutes0 = days0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(minutes0);
      
      MutablePeriod mutablePeriod0 = minutes0.toMutablePeriod();
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
      assertNotNull(mutablePeriod0);
      
      mutablePeriod0.setPeriod(int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, days0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-1);
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertEquals(8, mutablePeriod0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        mutablePeriod0.setValue(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      long long0 = (-2407L);
      Duration duration0 = new Duration(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      ReadableInstant readableInstant0 = null;
      PeriodType periodType0 = PeriodType.hours();
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriodTo(readableInstant0, periodType0);
      assertEquals("Hours", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, period0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
  }
}
