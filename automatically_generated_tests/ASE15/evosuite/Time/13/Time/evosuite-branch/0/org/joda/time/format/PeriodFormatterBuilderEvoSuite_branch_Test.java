/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:38:27 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.StringWriter;
import java.io.Writer;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

 
public class PeriodFormatterBuilderEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "ReadablePartial objects must have the same set of fields";
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodParser periodParser0 = null;
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, periodParser0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendSeparator(string0, string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
  }

  @Test
  public void test01()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "No field to apply suffix to";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "vo`$/";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = (-2075);
      int int1 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(10, int1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int1, periodType0, (Chronology) ethiopicChronology0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(mutablePeriod0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Composite0.parseInto((ReadWritablePeriod) mutablePeriod0, string0, int1, locale0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      String string0 = "org.joda.time.YearMonth$Property";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string0, stringArray0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org.joda.time.YearMonth$Property\"
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "/";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[5];
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      long long0 = (-1861L);
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "(.*\"";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      int int0 = 317351877;
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1, boolean0, boolean0);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) stringArray0[3]);
      assertNotNull(stringBuffer0);
      assertEquals("(.*\"", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
      assertEquals(4, stringBuffer0.length());
      
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(86, stringBuffer0.capacity());
      assertEquals(44, stringBuffer0.length());
      assertEquals("(.*\"317351877317351877(.*\"317351877317351877", stringBuffer0.toString());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "(.*\"";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      int int0 = 317351877;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int1 = periodFormatterBuilder_PluralAffix0.scan(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-317351878), int1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatter0.getParser();
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1, boolean0, boolean0);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) stringArray0[3]);
      assertNotNull(stringBuffer0);
      assertEquals(4, stringBuffer0.length());
      assertEquals("(.*\"", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.capacity());
      
      Period period0 = Period.millis(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(period0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertEquals(42, stringBuffer0.capacity());
      assertEquals(28, stringBuffer0.length());
      assertEquals("(.*\"-317351878(.*\"-317351878", stringBuffer0.toString());
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "org.jodaxxruo=xd<p^o5rjene.provider";
      int int0 = (-1755);
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(35, stringBuffer0.length());
      assertEquals(51, stringBuffer0.capacity());
      assertEquals("org.jodaxxruo=xd<p^o5rjene.provider", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) period0);
      assertSame(stringBuffer1, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertNotNull(stringBuffer1);
      assertEquals("org.jodaxxruo=xd<p^o5rjene.providerP-1755D", stringBuffer1.toString());
      assertEquals(42, stringBuffer1.length());
      assertEquals(51, stringBuffer1.capacity());
      assertEquals(51, stringBuffer0.capacity());
      assertEquals(42, stringBuffer0.length());
      assertEquals("org.jodaxxruo=xd<p^o5rjene.providerP-1755D", stringBuffer0.toString());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "Year is too small: ";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      long long0 = 3096L;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period(long0, long0, (Chronology) islamicChronology0);
      assertNotNull(period0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int0 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) period0, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(0, int0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "must not be smaller than ";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = stringArray0[0];
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      int int0 = 1894;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[10];
      boolean boolean0 = true;
      PeriodFormatterBuilder.PeriodFieldAffix periodFormatterBuilder_PeriodFieldAffix0 = null;
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PeriodFieldAffix0, periodFormatterBuilder_PeriodFieldAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatterArray0[0];
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[2]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[2], periodFormatterBuilder_FieldFormatterArray0[2], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatterArray0[6]);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      Months months0 = Months.FIVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      int int1 = periodFormatterBuilder_Separator1.calculatePrintedLength((ReadablePeriod) months0, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(0, int1);
      assertEquals(1, months0.size());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "c";
      String[] stringArray0 = new String[7];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      int int0 = 0;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      boolean boolean0 = true;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[6], string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[0], periodFormatterBuilder_FieldFormatterArray0[0], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Separator0, periodFormatterBuilder_FieldFormatterArray0[1]);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) stringArray0[1]);
      assertNotNull(stringBuffer0);
      assertEquals(17, stringBuffer0.capacity());
      assertEquals(1, stringBuffer0.length());
      assertEquals("c", stringBuffer0.toString());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int0);
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = new Locale(string0, stringArray0[0]);
      assertNotNull(locale0);
      assertEquals("C", locale0.getCountry());
      assertEquals("c", locale0.getLanguage());
      assertEquals("c_C", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "m855timezone must not be null";
      String string1 = "t\\";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(stringArray0[2]);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(stringArray0[2], stringArray0[2], stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "+?2%\"1";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 629;
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-630), int1);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      ReadWritablePeriod readWritablePeriod0 = null;
      int int2 = periodFormatterBuilder_Literal0.parseInto(readWritablePeriod0, string0, int1, locale0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(629, int2);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "'j2>g5x)fk6td\\j";
      int int0 = 430;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.PeriodFieldAffix periodFormatterBuilder_PeriodFieldAffix0 = null;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PeriodFieldAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, months0.size());
      
      periodFormatterBuilder_FieldFormatter0.setFieldValue(mutablePeriod0, int0, int0);
      assertEquals("Months", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "/";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      int int0 = 0;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      boolean boolean0 = true;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      
      Minutes minutes0 = Minutes.ZERO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Days days0 = minutes0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) days0, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatter0.getPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Composite0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Seconds seconds0 = Seconds.MIN_VALUE;
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      Minutes minutes0 = seconds0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      assertEquals(1, seconds0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.toString());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo(stringBuffer0, (ReadablePeriod) minutes0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "72Z(O4Gy";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"72Z(O4Gy\" is malformed at \"Z(O4Gy\"
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "2(XUO4G";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0, periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"2(XUO4G\" is malformed at \"(XUO4G\"
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      String string0 = ",U;YgE\\%;<({";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \",U;YgE\\%;<({\"
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "pwcific/guaalcanal";
      PeriodType periodType0 = null;
      Chronology chronology0 = null;
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((Object) string0, periodType0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pwcific/guaalcanal\" is malformed at \"wcific/guaalcanal\"
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "Pacific/Guadalcanal";
      // Undeclared exception!
      try {
        MutablePeriod mutablePeriod0 = MutablePeriod.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Pacific/Guadalcanal\" is malformed at \"acific/Guadalcanal\"
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "m855timezone must not be null";
      String string1 = "t\\";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      int int0 = 3600000;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      int int1 = 0;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string1, stringArray0, periodFormatterBuilder_FieldFormatterArray0[2], periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, string1, int1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "'j2>g5x)fk6td\\j";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      int int0 = 430;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[4];
      PeriodFormatterBuilder.PeriodFieldAffix periodFormatterBuilder_PeriodFieldAffix0 = null;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[0], stringArray0[1]);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PeriodFieldAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      PeriodType periodType0 = months0.getPeriodType();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, months0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(1, months0.size());
      
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatterArray0[0];
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[2]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatterArray0[2], periodFormatterBuilder_FieldFormatterArray0[2], boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Locale locale0 = null;
      // Undeclared exception!
      try {
        int int1 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, stringArray0[2], int0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toParser();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      String string0 = "w&%`aFW4y>()+5Vps'";
      String[] stringArray0 = new String[3];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite1 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder1.toPrinter();
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder_Composite1);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      char char0 = 'x';
      boolean boolean1 = true;
      int int0 = periodFormatterBuilder_CompositeAffix0.scan(string0, (int) char0);
      assertEquals((-121), int0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, stringArray0[1], stringArray0, periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0, boolean0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertFalse(periodFormatterBuilder_Composite0.equals((Object)periodFormatterBuilder_Composite1));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertFalse(periodFormatterBuilder_Composite0.equals((Object)periodFormatterBuilder_Composite1));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      MockFile mockFile0 = new MockFile(stringArray0[1]);
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotNull(mockFileWriter0);
      
      Period period0 = Period.years(int0);
      assertNotNull(period0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      periodFormatterBuilder_Separator1.printTo((Writer) mockFileWriter0, (ReadablePeriod) period0, locale0);
      assertFalse(boolean0 == boolean1);
      assertFalse(periodFormatterBuilder_Composite0.equals((Object)periodFormatterBuilder_Composite1));
      assertFalse(periodFormatterBuilder_Composite1.equals((Object)periodFormatterBuilder_Composite0));
      assertFalse(boolean1 == boolean0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotSame(periodFormatterBuilder_Composite1, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "m855timezone must not be null";
      int int0 = 3600000;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[5];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "9=;xr";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.parse(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-6), int1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "91";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 1;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-2), int1);
      
      String string1 = "nk'.BCFx:h\"";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int2 = periodFormatterBuilder_PluralAffix0.scan(string0, int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int2);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "vo`$/";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = (-2075);
      int int1 = periodFormatterBuilder_PluralAffix0.scan(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "No field to apply suffix to";
      String string1 = "{@6}vq>gbwzm$r|";
      assertNotSame(string1, string0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_PluralAffix0.parse(string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(15, int1);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "49o";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int0 = 45;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      int int1 = 0;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[2] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[2]);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatterArray0[2], boolean0, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodType periodType0 = null;
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, periodType0);
      assertFalse(int0 == int1);
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      int int2 = periodFormatterBuilder_Separator0.parseInto((ReadWritablePeriod) mutablePeriod0, stringArray0[1], int1, locale0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-4), int2);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "Iji~zrLL^";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = 1;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, int0);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "";
      byte[] byteArray0 = new byte[8];
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) stringWriter0, (int) byteArray0[2]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "Iji~zrLL^";
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals(9, stringBuffer0.length());
      assertEquals("Iji~zrLL^", stringBuffer0.toString());
      assertEquals(25, stringBuffer0.capacity());
      
      int int0 = 1;
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, int0);
      assertEquals("Iji~zrLL^Iji~zrLL^", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
      assertEquals(25, stringBuffer0.capacity());
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "DateTimeZone must not be null";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "9pF'I5~|l_^ktE";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "91";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "{3X v{=\\cUKBA2?X%U";
      assertNotSame(string1, string0);
      
      int int0 = 1;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-2), int1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "CK0r6:pQ?(0o";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      byte[] byteArray0 = new byte[9];
      String string1 = "0xn=T<.(0,y+(Ns?^b";
      assertNotSame(string1, string0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan(string1, (int) byteArray0[4]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "XxruO=xD<p^O5Rje";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = "o#g.joda.time.DateTimeZone.Provider";
      assertNotSame(string1, string0);
      
      int int0 = 8;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-9), int1);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "\"7/)`enw}_&d#";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      String string1 = ",A";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.scan(string1, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "org.joda.time.ocalTime";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_CompositeAffix0.scan(string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test40()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "ReadablePartial objects must have the same set of fields";
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodParser periodParser0 = null;
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatter0.getPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, periodParser0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatter periodFormatter1 = periodFormatterBuilder0.toFormatter();
      assertFalse(periodFormatter1.equals((Object)periodFormatter0));
      assertNotSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter1);
      assertEquals(false, periodFormatter1.isParser());
      assertEquals(true, periodFormatter1.isPrinter());
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "(.*\"";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator(string0, string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = (PeriodFormatterBuilder.Separator)periodFormatterBuilder1.toPrinter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder1.toFormatter();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "(.*\"";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      PeriodPrinter periodPrinter0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(false, periodFormatter0.isPrinter());
  }

  @Test
  public void test43()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "ReadablePartial objects must have the same set of fields";
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isParser());
      assertEquals(true, periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.append(periodFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "\"*2Z9rG{> a|]OnY4M";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter(string0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparator(string0, string0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String string0 = "m855timezone must not be null";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(string0, string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.appendSeparator(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "@7VY)/1kk\\M!G{ghs";
      String string1 = null;
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0, string1, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "XxruO=xD<p^O5Rje";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "No field to apply suffix to";
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "K**o";
      int int0 = 6;
      boolean boolean0 = false;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[7];
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      periodFormatterBuilder_FieldFormatterArray0[0] = periodFormatterBuilder_FieldFormatter0;
      assertNotNull(periodFormatterBuilder_FieldFormatterArray0[0]);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_FieldFormatterArray0[0], (PeriodParser) periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix(string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "No printer or parser supplied";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "No field to apply suffix to";
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0, string0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "49o";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSuffix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "(.*\"";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendPrefix(string0, string0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test
  public void test55()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = " for ";
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string1, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodPrinter periodPrinter0 = null;
      PeriodParser periodParser0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, periodParser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = null;
      // Undeclared exception!
      try {
        PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      periodFormatterBuilder0.clear();
  }

  @Test
  public void test62()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatter periodFormatter0 = periodFormatterBuilder0.toFormatter();
      assertNotNull(periodFormatter0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = (PeriodFormatterBuilder.Literal)periodFormatter0.getPrinter();
      assertNotNull(periodFormatterBuilder_Literal0);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodParser periodParser0 = null;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, periodParser0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
      
      PeriodParser periodParser1 = periodFormatterBuilder1.toParser();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNull(periodParser1);
      assertEquals(true, periodFormatter0.isPrinter());
      assertEquals(true, periodFormatter0.isParser());
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = "(.*\"";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      PeriodPrinter periodPrinter0 = null;
      String[] stringArray0 = new String[1];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodPrinter0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodPrinter0, (PeriodParser) periodFormatterBuilder_Separator0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodPrinter periodPrinter1 = periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNull(periodPrinter1);
  }

  @Test
  public void test64()  throws Throwable  {
      String string0 = "org.joda.time.YearMonth$Property";
      int int0 = 0;
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(string0, string0);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, int0);
      assertEquals("org.joda.time.YearMonth$Propertyorg.joda.time.YearMonth$Property", stringBuffer0.toString());
      assertEquals(70, stringBuffer0.capacity());
      assertEquals(64, stringBuffer0.length());
  }

  @Test
  public void test65()  throws Throwable  {
      String string0 = "-.\"p$*WdJO";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      int int0 = 86400000;
      boolean boolean0 = false;
      int int1 = 7;
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[2];
      PeriodFormatterBuilder.PeriodFieldAffix periodFormatterBuilder_PeriodFieldAffix0 = null;
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PeriodFieldAffix0, periodFormatterBuilder_PeriodFieldAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(stringArray0[1], stringArray0[7]);
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(int0, int0, int0, boolean0, int1, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, boolean0, boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      Period period0 = Period.minutes(int1);
      assertFalse(int1 == int0);
      assertNotNull(period0);
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("-.\"p$*wdjo", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("-.\"p$*wdjo", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        int int2 = periodFormatterBuilder_Separator0.calculatePrintedLength((ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      String string0 = "A\"~miLU7z";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(string0);
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = 0;
      int int1 = periodFormatterBuilder_SimpleAffix0.parse(string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(9, int1);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) stringWriter0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("A\"~miLU7zA\"~miLU7z", stringWriter0.toString());
  }

  @Test
  public void test67()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeconds();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test68()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test69()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test70()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String string0 = "m855timezone must not be null";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test71()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[8];
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test72()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test73()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 317351877;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(int0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = "@7VY)/1kk\\M!G{ghs";
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsBefore(string0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test75()  throws Throwable  {
      String string0 = "\"*2Z9rG{> aw]OnCY4r";
      int int0 = 0;
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(35, stringBuffer0.capacity());
      assertEquals("\"*2Z9rG{> aw]OnCY4r", stringBuffer0.toString());
      assertEquals(19, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((Object) period0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(35, stringBuffer0.capacity());
      assertEquals(23, stringBuffer0.length());
      assertEquals("\"*2Z9rG{> aw]OnCY4rPT0S", stringBuffer0.toString());
      assertEquals(23, stringBuffer1.length());
      assertEquals(35, stringBuffer1.capacity());
      assertEquals("\"*2Z9rG{> aw]OnCY4rPT0S", stringBuffer1.toString());
  }

  @Test
  public void test76()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test77()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      int int0 = 317351877;
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(int0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test78()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder1);
  }

  @Test
  public void test79()  throws Throwable  {
      String string0 = "/";
      String[] stringArray0 = new String[9];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[1];
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(string0);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = false;
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator(string0, string0, stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, boolean0, boolean0);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      long long0 = (-1861L);
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        periodFormatterBuilder_Separator0.printTo((Writer) charArrayWriter0, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
