/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:29:51 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class LocalDateTimeEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = 1687L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      String string0 = null;
      Locale locale0 = null;
      String string1 = localDateTime0.toString(string0, locale0);
      assertEquals("1970-01-01T01:00:01.687", string1);
      assertEquals(4, localDateTime0.size());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      String string0 = "bb\\s]~^[==~d-C";
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      try {
        String string1 = localDateTime0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: bb
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(localDateTime0);
      
      String string0 = "fOgV.P[@@;";
      // Undeclared exception!
      try {
        String string1 = localDateTime0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int int0 = (-1);
      int int1 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-01:00", fixedDateTimeZone0.toString());
      assertEquals("-01:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      assertFalse(int0 == int1);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-01:00", fixedDateTimeZone0.toString());
      assertEquals("-01:00", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertFalse(int0 == int1);
      
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(int1);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-01:00", fixedDateTimeZone0.toString());
      assertEquals("-01:00", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 2288;
      LocalDateTime localDateTime1 = localDateTime0.minusMillis(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 2288;
      LocalDateTime localDateTime1 = localDateTime0.minusSeconds(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-366);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusHours(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDateTime0);
      
      int int0 = 2244;
      LocalDateTime localDateTime1 = localDateTime0.minusHours(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusDays(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      long long0 = 0L;
      DateTime dateTime0 = new DateTime(long0);
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(localDateTime0);
      
      int int0 = 67;
      LocalDateTime localDateTime1 = localDateTime0.minusDays(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.hourOfHalfday();
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertNotNull(lenientDateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) julianChronology0, (DateTimeField) lenientDateTimeField0);
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertNotNull(skipUndoDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = localDateTime0.get(dateTimeFieldType0);
      assertEquals(8, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals(4, localDateTime1.size());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 46;
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1, int0, int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=46,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=46,HOUR_OF_DAY=46,MINUTE=46,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62046350040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=305,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(int1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62046350040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=305,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-819);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.minusYears(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-366);
      LocalDateTime localDateTime1 = localDateTime0.minusYears(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-366);
      LocalDateTime localDateTime1 = localDateTime0.plusMillis(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-366);
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      int int0 = (-993);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-993,MONTH=-993,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-993,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-993,HOUR_OF_DAY=-993,MINUTE=-993,SECOND=-993,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(localDateTime0);
      
      int int1 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(int1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(localDateTime1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-366);
      LocalDateTime localDateTime1 = localDateTime0.plusMinutes(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusHours(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-75);
      LocalDateTime localDateTime1 = localDateTime0.plusHours(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 1945;
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusDays(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 1491;
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = (-993);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-993,MONTH=-993,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-993,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-993,HOUR_OF_DAY=-993,MINUTE=-993,SECOND=-993,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-366);
      LocalDateTime localDateTime1 = localDateTime0.plusYears(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Period period0 = new Period((Object) dateTimeZone0, (Chronology) copticChronology0);
      assertNotNull(period0);
      
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded((ReadablePeriod) period0, int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 46;
      int int1 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int1, int0, int0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=0,MONTH=46,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=46,HOUR_OF_DAY=46,MINUTE=46,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62046350040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=305,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(localDateTime0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      Minutes minutes0 = Minutes.TWO;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(120000L, duration0.getMillis());
      assertEquals(1, minutes0.size());
      assertNotNull(duration0);
      
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded((ReadableDuration) duration0, int1);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(120000L, duration0.getMillis());
      assertEquals(1, minutes0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62046350040000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=3,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=305,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(localDateTime1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      ReadableDuration readableDuration0 = null;
      LocalDateTime localDateTime1 = localDateTime0.withDurationAdded(readableDuration0, int0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      long long0 = 1404L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      MonthDay monthDay0 = new MonthDay((Object) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(int0);
      assertEquals(3, localDate0.size());
      assertEquals(2, monthDay0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals(3, localDate0.size());
      assertEquals(2, monthDay0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(2, monthDay0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = null;
      int int0 = (-4220);
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Days days0 = Days.MIN_VALUE;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, days0.size());
      assertNotNull(durationFieldType0);
      
      int int0 = 4;
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, days0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      long long0 = 0L;
      DateTime dateTime0 = new DateTime(long0);
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertEquals(0L, dateTime0.getMillis());
      assertNotNull(localDateTime0);
      
      int int0 = 67;
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      long long0 = 1404L;
      LocalDate localDate0 = new LocalDate(long0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 0;
      MonthDay monthDay0 = new MonthDay((Object) localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(int0);
      assertEquals(3, localDate0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals(2, monthDay0.size());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = (-14);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-14,MONTH=-14,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-14,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62647257600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=17,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=17,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Mon Oct 17 00:00:00 GMT 17", date0.toString());
      assertNotNull(date0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62647257600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=17,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=17,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Mon Oct 17 00:00:00 GMT 17", date0.toString());
      assertNotNull(localDateTime0);
      
      ReadablePartial readablePartial0 = null;
      LocalDateTime localDateTime1 = localDateTime0.withFields(readablePartial0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62647257600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=17,MONTH=9,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=17,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Mon Oct 17 00:00:00 GMT 17", date0.toString());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withFields((ReadablePartial) localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      assertEquals(4, localDateTime0.size());
      assertEquals("yearOfCentury", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.withMinimumValue();
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("yearOfCentury", localDateTime_Property0.getName());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      boolean boolean0 = localDateTime0.isEqual((ReadablePartial) localDateTime1);
      assertFalse(boolean0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("yearOfCentury", localDateTime_Property0.getName());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.year();
      assertEquals("year", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      long long0 = (-1026L);
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy(long0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("year", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      int int0 = localDateTime1.compareTo((ReadablePartial) localDateTime0);
      assertEquals((-1), int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("year", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Object) localDateTime0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(yearMonthDay0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = localDateTime0.isEqual((ReadablePartial) yearMonthDay0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfCentury();
      assertEquals(4, localDateTime0.size());
      assertEquals("yearOfCentury", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.withMinimumValue();
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("yearOfCentury", localDateTime_Property0.getName());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      
      boolean boolean0 = localDateTime1.equals((Object) localDateTime0);
      assertFalse(boolean0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("yearOfCentury", localDateTime_Property0.getName());
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      boolean boolean0 = localDateTime0.equals((Object) localDateTime_Property0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = 0L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(copticChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (Chronology) copticChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      MockDate mockDate0 = (MockDate)localDateTime0.toDate();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Tue Apr 23 01:00:00 GMT 1686", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 46;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=46,MONTH=46,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=46,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=46,HOUR_OF_DAY=46,MINUTE=46,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60590682840000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=49,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=351,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(localDateTime0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = localDateTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals("years", durationFieldType0.toString());
      assertEquals("years", durationFieldType0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60590682840000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=49,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=351,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = localDateTime0.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        int int0 = localDateTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getDayOfMonth();
      assertEquals(14, int0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        int int1 = localDateTime0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 14
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.hourOfHalfday();
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(lenientDateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) julianChronology0, (DateTimeField) lenientDateTimeField0);
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(skipUndoDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = localDateTime0.get(dateTimeFieldType0);
      assertEquals(8, int0);
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try {
        DateTimeFieldType dateTimeFieldType1 = localDateTime0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 8
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 46;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=46,MONTH=46,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=46,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=46,HOUR_OF_DAY=46,MINUTE=46,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60590682840000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=49,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=351,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(localDateTime0);
      
      MockDate mockDate0 = (MockDate)localDateTime0.toDate();
      assertEquals(4, localDateTime0.size());
      assertEquals("Wed Dec 17 22:46:00 GMT 49", mockDate0.toString());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-60590682840000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=49,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=351,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=46,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockDate0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getYearOfEra();
      assertEquals(2014, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = (-993);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-993,MONTH=-993,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-993,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-993,HOUR_OF_DAY=-993,MINUTE=-993,SECOND=-993,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int1 = localDateTime0.getDayOfYear();
      assertEquals(150, int1);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withMinuteOfHour(int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 150 for minuteOfHour must be in the range [0,59]
         //
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 7;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      long long0 = 0L;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      Interval interval0 = localDateTime_Property0.toInterval();
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(31536000000L, interval0.getEndMillis());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertNotNull(interval0);
      
      Duration duration0 = interval0.toDuration();
      assertEquals(31536000000L, duration0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(31536000000L, interval0.getEndMillis());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertNotNull(duration0);
      
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadableDuration) duration0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(31536000000L, duration0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(31536000000L, interval0.getEndMillis());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int int0 = (-993);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-993,MONTH=-993,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-993,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-993,HOUR_OF_DAY=-993,MINUTE=-993,SECOND=-993,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(localDateTime0);
      
      ReadableInterval readableInterval0 = null;
      Years years0 = Years.yearsIn(readableInterval0);
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      Period period0 = years0.toPeriod();
      assertEquals(1, years0.size());
      assertNotNull(period0);
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) period0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(1, years0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getYearOfCentury();
      assertEquals(14, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfSecond();
      assertEquals("millisOfSecond", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withYear(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getCenturyOfEra();
      assertEquals(20, int0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfMonth();
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("dayOfMonth", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      long long0 = 1L;
      Chronology chronology0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(long0, chronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 499;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withDayOfWeek(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 499 for dayOfWeek must be in the range [1,7]
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.centuryOfEra();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("centuryOfEra", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withTime(int0, int0, int0, int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 46;
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withWeekOfWeekyear(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDate0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-75);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getEra();
      assertEquals(1, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 2252;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withEra(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2252 for era must be in the range [0,1]
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localTime0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getMillisOfDay();
      assertEquals(73281320, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = (-993);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-993,MONTH=-993,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-993,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-993,HOUR_OF_DAY=-993,MINUTE=-993,SECOND=-993,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfYear();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, localDateTime0.size());
      assertEquals("dayOfYear", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getWeekOfWeekyear();
      assertEquals(7, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withDate(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 2244;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withYearOfCentury(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2244 for yearOfCentury must be in the range [0,99]
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      String string0 = null;
      String string1 = localDateTime0.toString(string0);
      assertEquals("2014-02-14T20:21:21.320", string1);
      assertEquals(4, localDateTime0.size());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withDayOfMonth(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.minuteOfHour();
      assertEquals(4, localDateTime0.size());
      assertEquals("minuteOfHour", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(localDateTime0);
      
      Seconds seconds0 = null;
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = localDateTime0.getWeekyear();
      assertEquals(1970, int0);
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      long long0 = 1687L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 4725;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withMonthOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 4725 for monthOfYear must be in the range [1,12]
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime0.withDayOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 21599963L;
      DateTime dateTime0 = new DateTime(long0);
      assertEquals(21599963L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      MockDate mockDate0 = (MockDate)dateTime0.toDate();
      assertEquals("Thu Jan 01 05:59:59 GMT 1970", mockDate0.toString());
      assertEquals(21599963L, dateTime0.getMillis());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Thu Jan 01 05:59:59 GMT 1970", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(21599963L, dateTime0.getMillis());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.hourOfDay();
      assertEquals("Thu Jan 01 05:59:59 GMT 1970", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals("hourOfDay", localDateTime_Property0.getName());
      assertEquals(21599963L, dateTime0.getMillis());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 1491;
      LocalDateTime localDateTime1 = localDateTime0.withYearOfEra(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      assertEquals("monthOfYear", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      String string0 = localDateTime_Property0.getName();
      assertEquals("monthOfYear", string0);
      assertEquals("monthOfYear", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = LocalDateTime.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"monthOfYear\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.millisOfDay();
      assertEquals("millisOfDay", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      Seconds seconds0 = Seconds.seconds(int0);
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      Duration duration0 = seconds0.toStandardDuration();
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadableDuration) duration0);
      assertSame(localDateTime0, localDateTime1);
      assertSame(localDateTime1, localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertEquals(1, seconds0.size());
      assertEquals(0L, duration0.getMillis());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfSecond(int0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Object) string0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(localDateTime0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      DateTime dateTime0 = localDateTime0.toDateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertNotNull(dateTime0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withSecondOfMinute(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.era();
      assertEquals("era", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = (-993);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-993,MONTH=-993,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-993,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-993,HOUR_OF_DAY=-993,MINUTE=-993,SECOND=-993,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(localDateTime0);
      
      int int1 = localDateTime0.getDayOfWeek();
      assertEquals(5, int1);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-96205024173000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=1080,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=150,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=10,HOUR_OF_DAY=22,MINUTE=10,SECOND=27,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekyear();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertEquals("weekyear", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.EthiopicChronology
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      long long0 = 2388L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.monthOfYear();
      assertEquals(4, localDateTime0.size());
      assertEquals("monthOfYear", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundFloorCopy();
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("monthOfYear", localDateTime_Property0.getName());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.withMaximumValue();
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime_Property0.getChronology();
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(iSOChronology0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) islamicChronology0);
      assertNotNull(lenientChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) lenientChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundCeilingCopy();
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfCeilingCopy();
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.hourOfHalfday();
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(lenientDateTimeField0);
      
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) julianChronology0, (DateTimeField) lenientDateTimeField0);
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(skipUndoDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipUndoDateTimeField0.getType();
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = localDateTime0.get(dateTimeFieldType0);
      assertEquals(8, int0);
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals(4, localDateTime0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.property(dateTimeFieldType0);
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.addWrapFieldToCopy(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals("hourOfHalfday", skipUndoDateTimeField0.getName());
      assertEquals(true, skipUndoDateTimeField0.isSupported());
      assertEquals(0, skipUndoDateTimeField0.getMinimumValue());
      assertEquals(true, skipUndoDateTimeField0.isLenient());
      assertEquals("hourOfHalfday", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfHalfday", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.dayOfWeek();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.getLocalDateTime();
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("dayOfWeek", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.weekOfWeekyear();
      assertEquals("weekOfWeekyear", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfEvenCopy();
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertEquals("weekOfWeekyear", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.addToCopy(int0);
      assertSame(localDateTime1, localDateTime0);
      assertSame(localDateTime0, localDateTime1);
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(localDateTime1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.secondOfMinute();
      assertEquals("secondOfMinute", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime_Property0);
      
      LocalDateTime localDateTime1 = localDateTime_Property0.roundHalfFloorCopy();
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals("secondOfMinute", localDateTime_Property0.getName());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      LocalDateTime.Property localDateTime_Property0 = localDateTime0.yearOfEra();
      assertEquals(4, localDateTime0.size());
      assertEquals("yearOfEra", localDateTime_Property0.getName());
      assertNotNull(localDateTime_Property0);
      
      String string0 = "r+K2\\CF.";
      // Undeclared exception!
      try {
        LocalDateTime localDateTime1 = localDateTime_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"r+K2\\CF.\" for yearOfEra is not supported
         //
      }
  }
}
