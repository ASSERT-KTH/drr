/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:57:15 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonth;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class LocalDateEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      String string0 = null;
      Locale locale0 = null;
      String string1 = localDate0.toString(string0, locale0);
      assertNotNull(string1);
      assertEquals("2014-02-14", string1);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test01()  throws Throwable  {
      long long0 = 654L;
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate(long0, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      String string0 = "Field must not be null";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      try {
        String string1 = localDate0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: F
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfMonth();
      assertNotNull(localDate_Property0);
      assertEquals("dayOfMonth", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      Locale locale0 = null;
      String string0 = localDate_Property0.getAsShortText(locale0);
      assertNotNull(string0);
      assertEquals("14", string0);
      assertEquals("dayOfMonth", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      String string1 = localDate0.toString(string0);
      assertNotNull(string1);
      assertEquals("14", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("dayOfMonth", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test03()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfSecond' is not supported
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 21599985L;
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      LocalDate.Property localDate_Property0 = localDate0.property(dateTimeFieldType0);
      assertNotNull(localDate_Property0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.minusDays(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test
  public void test07()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfYear();
      assertNotNull(localDate_Property0);
      assertEquals("dayOfYear", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      int int0 = localDate_Property0.get();
      assertEquals(45, int0);
      assertEquals("dayOfYear", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusDays(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals("dayOfYear", localDate_Property0.getName());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = (-1773L);
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.minusWeeks(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 256;
      LocalDate localDate1 = localDate0.minusWeeks(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusMonths(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = (-589L);
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate(long0, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 1887;
      LocalDate localDate1 = localDate0.minusMonths(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minusYears(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 256;
      LocalDate localDate1 = localDate0.minusYears(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusDays(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test
  public void test15()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusWeeks(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate1.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test16()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = (-1070);
      LocalDate localDate1 = localDate0.plusWeeks(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.plusMonths(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      
      int int0 = 37;
      LocalDate localDate1 = localDate0.plusMonths(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.plusYears(int0);
      assertNotNull(localDate1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Months months0 = Months.FIVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withPeriodAdded((ReadablePeriod) months0, int0);
      assertNotNull(localDate1);
      assertEquals(1, months0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test
  public void test21()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      ReadablePeriod readablePeriod0 = null;
      LocalDate localDate1 = localDate0.withPeriodAdded(readablePeriod0, int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test22()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, months0.size());
      
      int int0 = (-1070);
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals(1, months0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test23()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'hours' is not supported
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 1395L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertNotNull(mutableDateTime0);
      assertEquals(1395L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)mutableDateTime0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(1395L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(1395L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DurationFieldType durationFieldType0 = null;
      int int0 = (-416);
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, instant0.getMillis());
      
      DurationFieldType durationFieldType0 = DurationFieldType.CENTURIES_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(localDate1);
      assertEquals("centuries", durationFieldType0.getName());
      assertEquals("centuries", durationFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate1.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test26()  throws Throwable  {
      long long0 = 6L;
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      
      int int0 = 1304;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'secondOfMinute' is not supported
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Chronology chronology0 = null;
      LocalDate localDate0 = new LocalDate(chronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 114;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType0.getName());
      assertEquals("dayOfMonth", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withField(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must be in the range [1,28]
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(3, localDate0.size());
      
      ReadablePartial readablePartial0 = null;
      LocalDate localDate1 = localDate0.withFields(readablePartial0);
      assertNotNull(localDate1);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test30()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withFields((ReadablePartial) localDate0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = 259199960L;
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(long0, (Chronology) copticChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        DateTime dateTime0 = localDate0.toDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = null;
      DateTimeZone dateTimeZone0 = null;
      DateTime dateTime0 = localDate0.toDateTime(localTime0, dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 1107L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      
      int int0 = (-1491);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay((long) int0, (Chronology) gregorianChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The chronology of the time does not match
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = null;
      // Undeclared exception!
      try {
        LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The time must not be null
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = (-589L);
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate(long0, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      assertNotNull(localDateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test36()  throws Throwable  {
      long long0 = (-589L);
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate(long0, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      int int0 = 1887;
      LocalDate localDate1 = localDate_Property0.addWrapFieldToCopy(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      boolean boolean0 = localDate1.isEqual((ReadablePartial) localDate0);
      assertFalse(boolean0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.withLocalMillis(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      
      boolean boolean0 = localDate1.isEqual((ReadablePartial) localDate0);
      assertFalse(boolean0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test38()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 3;
      YearMonth yearMonth0 = new YearMonth(int0, int0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      // Undeclared exception!
      try {
        boolean boolean0 = localDate0.isAfter((ReadablePartial) yearMonth0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) julianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      MockDate mockDate0 = (MockDate)localDate0.toDate();
      assertNotNull(mockDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Sat Feb 01 00:00:00 GMT 2014", mockDate0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(gregorianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(zonedChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      boolean boolean0 = localDate0.equals((Object) zonedChronology0);
      assertFalse(boolean0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test41()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 37;
      LocalDate localDate1 = localDate0.plusYears(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
      
      boolean boolean0 = localDate0.equals((Object) localDate1);
      assertFalse(boolean0);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test42()  throws Throwable  {
      long long0 = 21599985L;
      DateTimeZone dateTimeZone0 = null;
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate(long0, (DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = localDate0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test43()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      boolean boolean0 = localDate0.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test44()  throws Throwable  {
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try {
        int int0 = localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'millisOfSecond' is not supported
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) gregorianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        int int0 = localDate0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 292272995;
      // Undeclared exception!
      try {
        int int1 = localDate0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 292272995
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      //  // Unstable assertion: assertNotNull(instant0);
      //  // Unstable assertion: assertEquals((-12219292800000L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      //  // Unstable assertion: assertNotNull(fixedDateTimeZone0);
      //  // Unstable assertion: assertEquals((-12219292800000L), instant0.getMillis());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      //  // Unstable assertion: assertNotNull(localDate0);
      //  // Unstable assertion: assertEquals((-12219292800000L), instant0.getMillis());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(3, localDate0.size());
      
      int int0 = localDate0.hashCode();
      //  // Unstable assertion: assertEquals(1845557313, int0);
      //  // Unstable assertion: assertEquals((-12219292800000L), instant0.getMillis());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("UTC", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try {
        DateTimeField dateTimeField0 = localDate0.getField(int0);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: 1845557313
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Date date0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.fromDateFields(date0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Calendar calendar0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      LocalDate localDate0 = new LocalDate(int0, int1, int1);
      assertNotNull(localDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3, localDate0.size());
      
      MockDate mockDate0 = (MockDate)localDate0.toDate();
      assertNotNull(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("Mon Feb 02 00:00:00 GMT 1", mockDate0.toString());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test51()  throws Throwable  {
      Chronology chronology0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.now(chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.now(dateTimeZone0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) julianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getYearOfCentury();
      assertEquals(14, int0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 0;
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withDayOfYear(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must be in the range [1,365]
         //
      }
  }

  @Test
  public void test55()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.weekOfWeekyear();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("weekOfWeekyear", localDate_Property0.getName());
  }

  @Test
  public void test56()  throws Throwable  {
      long long0 = 804L;
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MockDate mockDate0 = (MockDate)mutableDateTime0.toDate();
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      int int0 = localDate0.getDayOfWeek();
      assertEquals(4, int0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test57()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      String string0 = null;
      String string1 = localDate0.toString(string0);
      assertNotNull(string1);
      assertEquals("2014-02-14", string1);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test58()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392336000000L, dateTime0.getMillis());
  }

  @Test
  public void test59()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getDayOfYear();
      assertEquals(1, int0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test60()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      
      int int0 = 37;
      LocalDate localDate1 = localDate0.withWeekOfWeekyear(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test61()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.dayOfWeek();
      assertNotNull(localDate_Property0);
      assertEquals("dayOfWeek", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test62()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = null;
      try {
        localDate0 = new LocalDate((Object) ethiopicChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.joda.time.chrono.EthiopicChronology
         //
      }
  }

  @Test
  public void test63()  throws Throwable  {
      long long0 = (-589L);
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate(long0, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getEra();
      assertEquals(1, int0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test64()  throws Throwable  {
      long long0 = (-1773L);
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getWeekOfWeekyear();
      assertEquals(1, int0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test65()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = 37;
      LocalDate localDate1 = localDate0.withYearOfCentury(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test66()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getYearOfEra();
      assertEquals(2014, int0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test67()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 3701;
      LocalDate localDate1 = localDate0.withWeekyear(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test68()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        LocalDate localDate0 = LocalDate.parse(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test69()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) julianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getCenturyOfEra();
      assertEquals(21, int0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test70()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 0;
      LocalDate localDate1 = localDate0.withCenturyOfEra(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test71()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 12;
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withEra(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 12 for era must be in the range [0,1]
         //
      }
  }

  @Test
  public void test72()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 3701;
      LocalDate localDate1 = localDate0.withYear(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test73()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.monthOfYear();
      assertNotNull(localDate_Property0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      assertEquals("monthOfYear", localDate_Property0.getName());
  }

  @Test
  public void test74()  throws Throwable  {
      long long0 = (-1773L);
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(3, localDate0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
  }

  @Test
  public void test75()  throws Throwable  {
      long long0 = (-589L);
      DateTimeZone dateTimeZone0 = null;
      LocalDate localDate0 = new LocalDate(long0, dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(4, localTime0.size());
  }

  @Test
  public void test76()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate0.minus((ReadablePeriod) hours0);
      assertNotNull(localDate1);
      assertEquals(1, hours0.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertSame(localDate0, localDate1);
      assertSame(localDate1, localDate0);
  }

  @Test
  public void test77()  throws Throwable  {
      Object object0 = null;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      LocalDate localDate0 = new LocalDate(object0, (Chronology) gregorianChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = localDate0.getWeekyear();
      assertEquals(2014, int0);
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test78()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 12;
      LocalDate localDate1 = localDate0.withMonthOfYear(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(3, localDate1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test79()  throws Throwable  {
      long long0 = 259199960L;
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Interval interval0 = localDate0.toInterval();
      assertNotNull(interval0);
      assertEquals(255600000L, interval0.getStartMillis());
      assertEquals(342000000L, interval0.getEndMillis());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test80()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      LocalDate localDate0 = localDateTime0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = 12;
      LocalDate localDate1 = localDate0.withDayOfMonth(int0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test81()  throws Throwable  {
      Object object0 = null;
      LocalDate localDate0 = new LocalDate(object0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = 3701;
      LocalDate localDate1 = localDate0.withYearOfEra(int0);
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test82()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight();
      assertNotNull(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(3, localDate0.size());
  }

  @Test
  public void test83()  throws Throwable  {
      long long0 = 804L;
      DateTimeZone dateTimeZone0 = null;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0, dateTimeZone0);
      assertNotNull(mutableDateTime0);
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      MockDate mockDate0 = (MockDate)mutableDateTime0.toDate();
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertNotNull(dateTime0);
      assertEquals(69681320L, dateTime0.getMillis());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(804L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
  }

  @Test
  public void test84()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      int int0 = (-1848);
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate0.withDayOfWeek(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1848 for dayOfWeek must be in the range [1,7]
         //
      }
  }

  @Test
  public void test85()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      Days days0 = Days.FOUR;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      LocalDate localDate1 = localDate0.plus((ReadablePeriod) days0);
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(1, days0.size());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test86()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertNotNull(localDate_Property0);
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      
      LocalDate localDate1 = localDate_Property0.roundHalfFloorCopy();
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test87()  throws Throwable  {
      long long0 = 1107L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      LocalDate localDate1 = localDate_Property0.getLocalDate();
      assertNotNull(localDate1);
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test
  public void test88()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      LocalDate localDate1 = localDate_Property0.roundHalfEvenCopy();
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(3, localDate1.size());
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test89()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.weekyear();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("weekyear", localDate_Property0.getName());
      
      ISOChronology iSOChronology0 = (ISOChronology)localDate_Property0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(3, localDate0.size());
      assertEquals("weekyear", localDate_Property0.getName());
  }

  @Test
  public void test90()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      LocalDate localDate0 = new LocalDate((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfCentury();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      LocalDate localDate1 = localDate_Property0.withMaximumValue();
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("yearOfCentury", localDate_Property0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test91()  throws Throwable  {
      long long0 = 1107L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      LocalDate.Property localDate_Property0 = localDate0.year();
      assertNotNull(localDate_Property0);
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      
      LocalDate localDate1 = localDate_Property0.withMinimumValue();
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals("year", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertEquals("Thu Jan 01 00:00:01 GMT 1970", mockDate0.toString());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }

  @Test
  public void test92()  throws Throwable  {
      int int0 = 0;
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals("centuryOfEra", localDate_Property0.getName());
      
      LocalDate localDate1 = localDate_Property0.addToCopy(int0);
      assertNotNull(localDate1);
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals("centuryOfEra", localDate_Property0.getName());
      assertSame(localDate1, localDate0);
      assertSame(localDate0, localDate1);
  }

  @Test
  public void test93()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.yearOfEra();
      assertNotNull(localDate_Property0);
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      LocalDate localDate1 = localDate_Property0.roundHalfCeilingCopy();
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals("yearOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test94()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.centuryOfEra();
      assertNotNull(localDate_Property0);
      assertEquals("centuryOfEra", localDate_Property0.getName());
      assertEquals(3, localDate0.size());
      
      String string0 = "*1";
      // Undeclared exception!
      try {
        LocalDate localDate1 = localDate_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"*1\" for centuryOfEra is not supported
         //
      }
  }

  @Test
  public void test95()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("era", localDate_Property0.getName());
      
      LocalDate localDate1 = localDate_Property0.roundFloorCopy();
      assertNotNull(localDate1);
      assertFalse(localDate1.equals((Object)localDate0));
      assertFalse(localDate0.equals((Object)localDate1));
      assertEquals(3, localDate1.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("era", localDate_Property0.getName());
      assertNotSame(localDate1, localDate0);
      assertNotSame(localDate0, localDate1);
  }

  @Test
  public void test96()  throws Throwable  {
      long long0 = (-4132L);
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = yearMonthDay0.toLocalDate();
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate.Property localDate_Property0 = localDate0.era();
      assertNotNull(localDate_Property0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("era", localDate_Property0.getName());
      
      LocalDate localDate1 = localDate_Property0.roundCeilingCopy();
      assertNotNull(localDate1);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("era", localDate_Property0.getName());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
  }
}
