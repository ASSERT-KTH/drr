/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:01:40 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Locale locale0 = null;
      String string0 = null;
      String string1 = partial0.toString(string0, locale0);
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertEquals(0, partial0.size());
      
      Locale locale1 = Locale.FRENCH;
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      String string2 = partial0.toString(string1, locale1);
      assertEquals("[]", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertEquals(0, partial0.size());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = "Z";
      String string1 = partial0.toString(string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[17];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(2, partial0.size());
      
      // Undeclared exception!
      try {
        String string0 = partial0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      String string0 = partial0.toString();
      assertEquals("0000", string0);
      assertNotNull(string0);
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      MonthDay monthDay0 = new MonthDay((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = monthDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals(2, monthDay0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("monthOfYear", dateTimeFieldTypeArray0[1].toString());
      assertEquals(2, monthDay0.size());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int[] intArray0 = new int[17];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      // Undeclared exception!
      try {
        String string0 = partial0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals("[hourOfHalfday=0]", string1);
      assertNotNull(string1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNull(dateTimeFormatter0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       
//       int int0 = (-2897);
//       MockDate mockDate0 = new MockDate(int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       
//       LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
//       assertNotNull(localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertNotNull(partial0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       
//       Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
//       assertNotNull(partial_Property0);
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       
//       Partial partial1 = partial_Property0.withMinimumValue();
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotNull(partial1);
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertEquals(3, partial1.size());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       
//       boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
//       assertFalse(boolean0);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertEquals(3, partial1.size());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//   }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-2897);
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      assertEquals(3, localDate0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      assertEquals(3, localDate0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      assertEquals(3, partial0.size());
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      assertEquals(3, localDate0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 918L;
      MockDate mockDate0 = new MockDate(long0);
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      
      LocalTime localTime0 = LocalTime.fromDateFields((Date) mockDate0);
      assertNotNull(localTime0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      int int0 = 2377;
      LocalTime localTime1 = localTime0.plusHours(int0);
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertNotNull(localTime1);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime0, localTime1);
      assertEquals(4, localTime1.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localTime1);
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertNotNull(partial0);
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime0, localTime1);
      assertEquals(4, localTime1.size());
      assertEquals(4, partial0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4, localTime0.size());
      
      Instant instant0 = new Instant((long) int0);
      assertNotNull(instant0);
      assertEquals(2377L, instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTimeISO();
      assertNotNull(dateTime0);
      assertEquals(2377L, dateTime0.getMillis());
      assertEquals(2377L, instant0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertFalse(boolean0);
      assertFalse(localTime1.equals((Object)localTime0));
      assertFalse(localTime0.equals((Object)localTime1));
      assertNotSame(localTime1, localTime0);
      assertNotSame(localTime0, localTime1);
      assertEquals(2377L, dateTime0.getMillis());
      assertEquals(4, localTime1.size());
      assertEquals(4, partial0.size());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(4, localTime0.size());
      assertEquals(2377L, instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      assertNotNull(dateMidnight0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight0);
      assertTrue(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      long long0 = 288L;
      MonthDay monthDay0 = new MonthDay(long0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, partial0.size());
      assertEquals(2, monthDay0.size());
      
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      int int0 = (-2591);
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) months0, int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(2, partial0.size());
      assertEquals(2, partial1.size());
      assertEquals(2, monthDay0.size());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Minutes minutes0 = Minutes.minutes(int0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) minutes0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       long long0 = 918L;
//       MockDate mockDate0 = new MockDate(long0);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       
//       LocalTime localTime0 = LocalTime.fromDateFields((Date) mockDate0);
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertNotNull(partial0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       
//       int int0 = 0;
//       Hours hours0 = Hours.FIVE;
//       assertNotNull(hours0);
//       assertEquals(1, hours0.size());
//       
//       DurationFieldType durationFieldType0 = hours0.getFieldType();
//       assertNotNull(durationFieldType0);
//       assertEquals(1, hours0.size());
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals("hours", durationFieldType0.getName());
//       
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
//       assertNotNull(partial1);
//       assertSame(partial0, partial1);
//       assertSame(partial1, partial0);
//       assertEquals(1, hours0.size());
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals("hours", durationFieldType0.getName());
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(4, partial1.size());
//   }

  @Test(timeout = 4000)
  public void test13() {}
//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       long long0 = 859L;
//       MockDate mockDate0 = new MockDate(long0);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       
//       LocalTime localTime0 = LocalTime.fromDateFields((Date) mockDate0);
//       assertNotNull(localTime0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(4, localTime0.size());
//       
//       int int0 = 2378;
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertNotNull(partial0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//       
//       Hours hours0 = Hours.FIVE;
//       assertNotNull(hours0);
//       assertEquals(1, hours0.size());
//       
//       DurationFieldType durationFieldType0 = hours0.getFieldType();
//       assertNotNull(durationFieldType0);
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals("hours", durationFieldType0.getName());
//       assertEquals(1, hours0.size());
//       
//       Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotNull(partial1);
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals("hours", durationFieldType0.getName());
//       assertEquals(4, partial1.size());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(1, hours0.size());
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial0.size());
//   }

  @Test(timeout = 4000)
  public void test14() {}
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       long long0 = 918L;
//       MockDate mockDate0 = new MockDate(long0);
//       assertNotNull(mockDate0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       
//       LocalTime localTime0 = LocalTime.fromDateFields((Date) mockDate0);
//       assertNotNull(localTime0);
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(4, localTime0.size());
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertNotNull(partial0);
//       assertEquals(4, partial0.size());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(4, localTime0.size());
//       
//       int int0 = 0;
//       Hours hours0 = Hours.FIVE;
//       assertNotNull(hours0);
//       assertEquals(1, hours0.size());
//       
//       DurationFieldType durationFieldType0 = hours0.getFieldType();
//       assertNotNull(durationFieldType0);
//       assertEquals(1, hours0.size());
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals("hours", durationFieldType0.getName());
//       
//       Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
//       assertNotNull(partial1);
//       assertSame(partial0, partial1);
//       assertSame(partial1, partial0);
//       assertEquals(4, partial0.size());
//       assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
//       assertEquals(1, hours0.size());
//       assertEquals(4, partial1.size());
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals("hours", durationFieldType0.getName());
//       assertEquals(4, localTime0.size());
//   }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      int int1 = (-1011);
      Hours hours0 = Hours.FIVE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Maximum value exceeded for add
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = 0;
      int[] intArray0 = new int[17];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Partial partial1 = partial0.withField(dateTimeFieldTypeArray0[1], int0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, partial1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = 2373;
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {2373, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withField(dateTimeFieldTypeArray0[1], intArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18() {}
//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       
//       int int0 = (-2897);
//       MockDate mockDate0 = new MockDate(int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       
//       LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
//       assertNotNull(localDate0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, localDate0.size());
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertNotNull(partial0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//       
//       Partial partial1 = partial0.without(dateTimeFieldType0);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotNull(partial1);
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertEquals(2, partial1.size());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, partial0.size());
//       assertEquals(3, localDate0.size());
//   }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[1].getName());
      assertEquals("hourOfHalfday", dateTimeFieldTypeArray0[1].toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int int0 = 2373;
      int[] intArray0 = new int[9];
      intArray0[0] = int0;
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {2373, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldTypeArray0[1], intArray0[1]);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertArrayEquals(new int[] {2373, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial1.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2, partial0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 86399999L;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(long0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, timeOfDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
      assertEquals("monthOfYear", dateTimeFieldType0.getName());
      
      int int0 = 611;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 611 for monthOfYear must not be larger than 12
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial((Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = 32;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 32 for era must not be larger than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 294L;
      MonthDay monthDay0 = new MonthDay(long0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      
      int int0 = 1333;
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) gJChronology0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) copticChronology0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = 288L;
      MonthDay monthDay0 = new MonthDay(long0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      
      int int0 = (-2591);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2591 for dayOfYear must not be smaller than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("dayOfMonth", dateTimeFieldType1.getName());
      assertEquals("dayOfMonth", dateTimeFieldType1.toString());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfMonth must not be smaller than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[3].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[3].getName());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[4].getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[4].toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[5].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[5].getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[6].getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[6].toString());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[7].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[7].getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[8].toString());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[8].getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[9]);
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[9].getName());
      assertEquals("minuteOfDay", dateTimeFieldTypeArray0[9].toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[10];
      Chronology chronology0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: minuteOfDay
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(buddhistChronology0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.hourOfHalfday();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType1.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType1.getName());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, intArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyearOfCentury();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("weekyearOfCentury", dateTimeFieldType1.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType1.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("weekyearOfCentury", dateTimeFieldType1.toString());
      assertEquals("weekyearOfCentury", dateTimeFieldType1.getName());
      assertEquals("weekyearOfCentury", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekyearOfCentury", dateTimeFieldTypeArray0[1].toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[2].toString());
      
      int[] intArray0 = new int[3];
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: hourOfDay < weekyearOfCentury
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      int[] intArray0 = new int[9];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[2];
      Chronology chronology0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[9];
      DateTimeFieldType[] dateTimeFieldTypeArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Partial partial1 = partial0.minus((ReadablePeriod) years0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(1, years0.size());
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-2897);
      MockDate mockDate0 = new MockDate(int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      
      LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      
      Partial partial0 = new Partial((ReadablePartial) localDate0);
      assertNotNull(partial0);
      assertEquals(3, localDate0.size());
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      assertEquals(3, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(3, localDate0.size());
      assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
      assertEquals(3, partial0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.plus(readablePeriod0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       
//       int int0 = (-2897);
//       MockDate mockDate0 = new MockDate(int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       
//       LocalDate localDate0 = LocalDate.fromDateFields((Date) mockDate0);
//       assertNotNull(localDate0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, localDate0.size());
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertNotNull(partial0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       
//       Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
//       assertNotNull(partial_Property0);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals(3, partial0.size());
//       
//       int int1 = partial_Property0.get();
//       assertEquals((-1247), int1);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals(3, partial0.size());
//       
//       Partial partial1 = partial_Property0.addToCopy(int1);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotNull(partial1);
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertEquals(3, partial1.size());
//       assertEquals("Fri Aug 25 00:00:00 GMT 1248", mockDate0.toString());
//       assertEquals(3, localDate0.size());
//       assertEquals("year", dateTimeFieldType0.toString());
//       assertEquals("year", dateTimeFieldType0.getName());
//       assertEquals(3, partial0.size());
//   }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 81;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 81
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = 60017L;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(long0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = timeOfDay0.getFieldType(int0);
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals(4, timeOfDay0.size());
      
      String string0 = "7s_GtyiB.zASrAIB?VS";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"7s_GtyiB.zASrAIB?VS\" for hourOfDay is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 288L;
      MonthDay monthDay0 = new MonthDay(long0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      
      int int0 = (-2591);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial0.size());
      
      Partial partial1 = partial_Property0.getPartial();
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(2, monthDay0.size());
      assertEquals(2, partial1.size());
      assertEquals(2, partial0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertNotNull(dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      ISOChronology iSOChronology0 = (ISOChronology)instant0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
  }
}
