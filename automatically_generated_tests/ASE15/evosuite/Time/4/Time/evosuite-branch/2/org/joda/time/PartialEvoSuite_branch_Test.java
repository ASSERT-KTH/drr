/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:11 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = "The partial st not be null";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("THE PARTIAL ST NOT BE NULL", locale0.getCountry());
      assertEquals("The partial st not be null", locale0.getVariant());
      assertEquals("the partial st not be null", locale0.getLanguage());
      assertEquals("the partial st not be null_THE PARTIAL ST NOT BE NULL_The partial st not be null", locale0.toString());
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertEquals(0, partial0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertEquals(0, partial0.size());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      String string2 = partial0.toString(string1);
      assertEquals("[]", string2);
      assertNotNull(string2);
      assertEquals(0, partial0.size());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
  }

  //@Test
  public void test03()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      String string0 = partial0.toStringList();
      assertEquals("[year=2014, monthOfYear=2, dayOfMonth=14]", string0);
      assertNotNull(string0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
  }

  //@Test
  public void test04()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      DateTimeFormatter dateTimeFormatter1 = null;
      String string0 = partial0.toString(dateTimeFormatter1);
      assertEquals("2014-02-14", string0);
      assertNotNull(string0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
  }

  @Test
  public void test05()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2094;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string0 = partial0.toString();
      assertEquals("[millisOfDay=2094]", string0);
      assertNotNull(string0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNull(dateTimeFormatter0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 0;
      LocalDateTime localDateTime1 = localDateTime0.withHourOfDay(int0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime1);
      assertNotNull(partial0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) localDateTime0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
  }

  @Test
  public void test08()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      int int0 = 2094;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  //@Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 882;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertFalse(boolean0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  //@Test
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = (-13);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertNotNull(partial0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTime dateTime0 = DateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.withYear(int0);
      assertNotNull(dateTime1);
      assertEquals((-62573571443680L), dateTime1.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime1);
      assertTrue(boolean0);
      assertEquals((-62573571443680L), dateTime1.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
  }

  //@Test
  public void test12()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = yearMonthDay0.getMonthOfYear();
      assertEquals(2, int0);
      assertEquals(3, yearMonthDay0.size());
      
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) period0, int0);
      assertNotNull(partial1);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      Years years0 = Years.MAX_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) years0, intArray0[5]);
      assertNotNull(partial1);
      assertEquals(4, partial1.size());
      assertEquals(1, years0.size());
      assertEquals(4, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test14()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      int int0 = 76;
      Partial partial1 = partial0.withPeriodAdded(readablePeriod0, int0);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test15()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      
      int[] intArray0 = new int[2];
      int int0 = 117;
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], int0, chronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, intArray0[0]);
      assertNotNull(partial1);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  //@Test
  public void test16()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      int int0 = yearMonthDay0.getMonthOfYear();
      assertEquals(2, int0);
      assertEquals(3, yearMonthDay0.size());
      
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertNotNull(duration0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(2000L, duration0.getMillis());
      
      LocalDate localDate0 = new LocalDate((long) int0);
      assertNotNull(localDate0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, localDate0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertNotNull(periodType1);
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType0.equals((Object)periodType1));
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType1);
      assertNotNull(period0);
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(3, localDate0.size());
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType0.equals((Object)periodType1));
      
      DurationFieldType durationFieldType0 = period0.getFieldType(int0);
      assertNotNull(durationFieldType0);
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(2000L, duration0.getMillis());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType0, periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType0.equals((Object)periodType1));
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(3, partial1.size());
      assertEquals(7, periodType1.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(3, partial0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(3, localDate0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(periodType1, periodType0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(partial0.equals((Object)partial1));
  }

  //@Test
  public void test17()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      int int0 = yearMonthDay0.getMonthOfYear();
      assertEquals(2, int0);
      assertEquals(3, yearMonthDay0.size());
      
      Duration duration0 = Duration.standardSeconds((long) int0);
      assertNotNull(duration0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(2000L, duration0.getMillis());
      
      LocalDate localDate0 = new LocalDate((long) int0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertNotNull(periodType1);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      
      Period period0 = duration0.toPeriodFrom((ReadableInstant) dateTime0, periodType1);
      assertNotNull(period0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertEquals(2000L, duration0.getMillis());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      
      DurationFieldType durationFieldType0 = period0.getFieldType(int0);
      assertNotNull(durationFieldType0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertEquals(2000L, duration0.getMillis());
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
      assertNotNull(partial1);
      assertEquals(3, partial1.size());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals("StandardNoMonths", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertEquals(2000L, duration0.getMillis());
      assertEquals(3, partial0.size());
      assertSame(partial1, partial0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(partial0, partial1);
      assertFalse(int0 == int1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertFalse(int1 == int0);
  }

  //@Test
  public void test18()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = yearMonthDay0.getMonthOfYear();
      assertEquals(2, int0);
      assertEquals(3, yearMonthDay0.size());
      
      Days days0 = Days.SEVEN;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(1, days0.size());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(3, partial1.size());
      assertEquals(1, days0.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2094;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2083;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      int int1 = 20;
      Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(int1 == int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals(0, partial1.size());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertEquals(4, partial0.size());
      assertEquals(4, partial1.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
  }

  //@Test
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = 882;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int1 = 4;
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
  }

  //@Test
  public void test24()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(3, partial0.size());
      
      int int0 = yearMonthDay0.getMonthOfYear();
      assertEquals(2, int0);
      assertEquals(3, yearMonthDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals(4, partial1.size());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals(3, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test25()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      int int0 = 7;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals(4, partial1.size());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType1);
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals("era", dateTimeFieldType1.getName());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertEquals("era", dateTimeFieldType1.getName());
      
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, intArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 900;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 900 for era must not be larger than 1
         //
      }
  }

  //@Test
  public void test28()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = (-13);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
  }

  @Test
  public void test29()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 76;
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      int int0 = 117;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[0], int0, chronology0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields(chronology0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  @Test
  public void test31()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) julianChronology0);
      assertNotNull(partial1);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test32()  throws Throwable  {
      YearMonthDay yearMonthDay0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial((ReadablePartial) yearMonthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[3].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[3].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[4].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[4].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[5].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[5].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[6].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[6].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[7].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[7].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldTypeArray0[3];
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[8].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[8].toString());
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[9]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[9].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[9].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekOfWeekyear
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType1);
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[5].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[5].getName());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[6].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[6].getName());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("era", dateTimeFieldTypeArray0[7].getName());
      assertEquals("era", dateTimeFieldTypeArray0[7].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("era", dateTimeFieldTypeArray0[8].getName());
      assertEquals("era", dateTimeFieldTypeArray0[8].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[9]);
      assertEquals("era", dateTimeFieldTypeArray0[9].toString());
      assertEquals("era", dateTimeFieldTypeArray0[9].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int[] intArray0 = new int[10];
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfWeek < era
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("dayOfYear", dateTimeFieldType0.toString());
      assertEquals("dayOfYear", dateTimeFieldType0.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfEra();
      assertNotNull(dateTimeFieldType1);
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("yearOfEra", dateTimeFieldTypeArray0[1].toString());
      assertEquals("yearOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("yearOfEra", dateTimeFieldType1.getName());
      assertEquals("yearOfEra", dateTimeFieldType1.toString());
      
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: dayOfYear < yearOfEra
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      int int0 = (-11);
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].toString());
      
      Partial partial0 = new Partial((ReadablePartial) monthDay0);
      assertNotNull(partial0);
      assertEquals(2, partial0.size());
      assertEquals(2, monthDay0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldTypeArray0[0], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -11 for dayOfWeek must not be smaller than 1
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[2];
      Chronology chronology0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, chronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[24];
      int[] intArray0 = new int[1];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType1);
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekyear", dateTimeFieldType1.getName());
      assertEquals("weekyear", dateTimeFieldType1.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].getName());
      
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, intArray0[5]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear
         //
      }
  }

  //@Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 505;
      DateMidnight dateMidnight0 = new DateMidnight((long) int0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      DateTime dateTime0 = dateMidnight0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTime0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2094;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Years years0 = Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.minus((ReadablePeriod) years0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, years0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
  }

  @Test
  public void test42()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2094;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
  }

  @Test
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      Years years0 = Years.MAX_VALUE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.plus((ReadablePeriod) years0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2094;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  //@Test
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = 882;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) julianChronology0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      Partial partial1 = partial_Property0.addToCopy(int0);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  //@Test
  public void test46()  throws Throwable  {
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonthDay0);
      assertNotNull(partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int0 = yearMonthDay0.getMonthOfYear();
      assertEquals(2, int0);
      assertEquals(3, yearMonthDay0.size());
      
      LocalDate localDate0 = new LocalDate((long) int0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      assertNotNull(dateTime0);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(3, yearMonthDay0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      
      int int1 = partial_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(1, int1);
      assertEquals((-3600000L), dateTime0.getMillis());
      assertEquals(3, localDate0.size());
      assertEquals(3, partial0.size());
      assertEquals(3, yearMonthDay0.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test47()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekOfWeekyear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.toString());
      assertEquals("weekOfWeekyear", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[6];
      Partial partial0 = new Partial(buddhistChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, intArray0[5]);
      assertNotNull(partial_Property0);
      assertEquals(4, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      String string0 = "CE";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = (-6787);
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial_Property0.getPartial();
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
  }

  //@Test
  public void test50()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(ethiopicChronology0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[5];
      Partial partial0 = new Partial(ethiopicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, intArray0[3]);
      assertNotNull(partial_Property0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1, partial0.size());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addWrapFieldToCopy(intArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
