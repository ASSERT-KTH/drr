/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:35 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      String string0 = "";
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      String string0 = "";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      int[] intArray0 = new int[3];
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldTypeArray0[1];
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      // Undeclared exception!
      try {
        String string0 = partial0.toStringList();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("20:21:21.320", string1);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(string1);
      
      String string2 = partial0.toString();
      assertTrue(string2.equals((Object)string1));
      assertEquals("20:21:21.320", string2);
      assertNotSame(string2, string1);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[7];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, partial0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        String string0 = partial0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      String string0 = null;
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = partial0.toString(string0, locale0);
      assertEquals("20:21:21.320", string1);
      assertEquals(4, timeOfDay0.size());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals(4, partial0.size());
      assertNotNull(string1);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(4, timeOfDay0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(4, partial0.size());
      assertNotNull(dateTimeFormatter0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].getName());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(3, partial1.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial1);
      
      boolean boolean0 = partial1.isMatch((ReadablePartial) partial0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(boolean0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(3, partial1.size());
      assertEquals(3, partial0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[3];
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean0);
      assertEquals(3, partial0.size());
  }

  //@Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldTypeArray0[2];
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(localDate0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, partial0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  //@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      DateTimeZone dateTimeZone0 = null;
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      DateMidnight dateMidnight1 = dateMidnight0.withFields((ReadablePartial) partial0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1, partial0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-125719084725000L), dateMidnight1.getMillis());
      assertNotNull(dateMidnight1);
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertTrue(boolean0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertEquals(1, partial0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals((-125719084725000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       long long0 = 0L;
//       LocalDate localDate0 = new LocalDate(long0);
//       assertEquals(3, localDate0.size());
//       assertNotNull(localDate0);
//       
//       Partial partial0 = new Partial((ReadablePartial) localDate0);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial0.size());
//       assertNotNull(partial0);
//       
//       Months months0 = Months.SIX;
//       assertEquals(1, months0.size());
//       assertNotNull(months0);
//       
//       Partial partial1 = partial0.minus((ReadablePeriod) months0);
//       assertFalse(partial1.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertNotSame(partial1, partial0);
//       assertNotSame(partial0, partial1);
//       assertEquals(3, localDate0.size());
//       assertEquals(3, partial1.size());
//       assertEquals(1, months0.size());
//       assertEquals(3, partial0.size());
//       assertNotNull(partial1);
//   }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) hours0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(3, partial1.size());
      assertEquals(3, partial0.size());
      assertEquals(1, hours0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[3];
      int int0 = 2673;
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      Period period0 = Period.days(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) period0, int1);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(3, partial1.size());
      assertEquals(3, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.yearOfEra();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      BuddhistChronology buddhistChronology0 = null;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) buddhistChronology0, dateTimeField0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(1, partial1.size());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.yearOfEra();
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) buddhistChronology0, dateTimeField0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      int int1 = (-2565);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2565 for yearOfEra must be in the range [1,292278993]
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(0, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      
      Partial partial2 = partial1.with(dateTimeFieldType0, int0);
      assertFalse(partial1.equals((Object)partial2));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertTrue(partial0.equals((Object)partial2));
      assertFalse(partial2.equals((Object)partial1));
      assertTrue(partial2.equals((Object)partial0));
      assertNotSame(partial1, partial2);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial0, partial2);
      assertNotSame(partial2, partial1);
      assertNotSame(partial2, partial0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals(1, partial2.size());
      assertNotNull(partial2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.millisOfSecond();
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType2.equals((Object)dateTimeFieldType1));
      assertNotSame(dateTimeFieldType2, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType2, dateTimeFieldType1);
      assertEquals("millisOfSecond", dateTimeFieldType2.toString());
      assertEquals("millisOfSecond", dateTimeFieldType2.getName());
      assertNotNull(dateTimeFieldType2);
      
      int[] intArray0 = new int[3];
      int int0 = 2694;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType2, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 2551440384L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1288;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1288 for minuteOfHour must not be larger than 59
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("minuteOfHour", dateTimeFieldType1.getName());
      assertEquals("minuteOfHour", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      Partial partial1 = partial0.with(dateTimeFieldType1, int0);
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("minuteOfHour", dateTimeFieldType1.getName());
      assertEquals("minuteOfHour", dateTimeFieldType1.toString());
      assertEquals(1, partial0.size());
      assertEquals(2, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[0].toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfSecond();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType1.toString());
      assertEquals("millisOfSecond", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("dayOfWeek", dateTimeFieldType0.getName());
      assertEquals("dayOfWeek", dateTimeFieldType0.toString());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].getName());
      assertEquals("dayOfWeek", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      int int0 = 2694;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(iSOChronology0, dateTimeFieldTypeArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      assertNotNull(partial0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: dayOfWeek
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2177;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2177 for era must not be larger than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-22);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Partial partial0 = new Partial((Chronology) islamicChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) islamicChronology0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) gJChronology0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].getName());
      assertEquals("yearOfCentury", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: yearOfCentury < year
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[0].toString());
      assertEquals("year", dateTimeFieldTypeArray0[0].getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[1].toString());
      assertEquals("year", dateTimeFieldTypeArray0[1].getName());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertEquals("year", dateTimeFieldTypeArray0[2].getName());
      assertEquals("year", dateTimeFieldTypeArray0[2].toString());
      assertEquals("year", dateTimeFieldType0.getName());
      assertEquals("year", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[0].getName());
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[0].toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.toString());
      assertEquals("minuteOfHour", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.era();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldType1.getName());
      assertEquals("era", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[2].toString());
      assertEquals("minuteOfHour", dateTimeFieldTypeArray0[2].getName());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[1];
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertNotNull(dateTimeFieldTypeArray0[3]);
      
      int[] intArray0 = new int[4];
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) ethiopicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: minuteOfHour < era
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].toString());
      assertNotNull(dateTimeFieldTypeArray0[1]);
      
      int[] intArray0 = new int[3];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[0].getName());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldTypeArray0[0]);
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[2].toString());
      assertNotNull(dateTimeFieldTypeArray0[2]);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: millisOfDay < dayOfYear
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.yearOfEra();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      BuddhistChronology buddhistChronology0 = null;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) buddhistChronology0, dateTimeField0);
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.yearOfCentury();
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertNotNull(dateTimeFieldType1);
      
      Partial partial1 = partial0.with(dateTimeFieldType1, int0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(partial1.equals((Object)partial0));
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(partial0, partial1);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(partial1, partial0);
      assertEquals("yearOfCentury", dateTimeFieldType1.getName());
      assertEquals("yearOfCentury", dateTimeFieldType1.toString());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(2, partial1.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[3];
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 30;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int1 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) zonedChronology0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals(1, partial0.size());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(partial_Property0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 30;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      int int1 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertFalse(int1 == int0);
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) zonedChronology0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(partial0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(dateTimeFieldTypeArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.plus(readablePeriod0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Partial partial0 = new Partial();
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 97;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMinimumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.yearOfEra();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      BuddhistChronology buddhistChronology0 = null;
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField((Chronology) buddhistChronology0, dateTimeField0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertNotNull(skipDateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = skipDateTimeField0.getType();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 44;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("yearOfEra", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals(1, skipDateTimeField0.getMinimumValue());
      assertEquals(false, skipDateTimeField0.isLenient());
      assertEquals(true, skipDateTimeField0.isSupported());
      assertEquals("yearOfEra", skipDateTimeField0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        String string0 = partial_Property0.getAsString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      int int1 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(partial1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 61;
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertEquals("[]", string1);
      assertEquals(0, partial0.size());
      assertNotNull(string1);
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial((Chronology) ethiopicChronology0);
      assertEquals(0, partial0.size());
      assertNotNull(partial0);
      
      int int0 = 0;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertEquals(0, partial0.size());
      assertNotNull(partial_Property0);
      
      Partial partial1 = partial_Property0.getPartial();
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertNotNull(partial1);
  }
}
