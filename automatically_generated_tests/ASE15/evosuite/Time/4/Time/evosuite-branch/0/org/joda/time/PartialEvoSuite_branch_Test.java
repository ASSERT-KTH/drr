/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:57 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.YearMonth;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 24;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      String string0 = null;
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      
      String string1 = partial0.toString(string0, locale0);
      assertNotNull(string1);
      assertEquals(1, partial0.size());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("---.024", string1);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "PccYSv'&l8bq!";
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "bz);jT";
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals("---.001", string0);
  }

  //@Test
  public void test04()  throws Throwable  {
      int int0 = 1;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertNotNull(partial0);
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(5, partial1.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      
      String string0 = partial1.toString();
      assertNotNull(string0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals(5, partial1.size());
      assertEquals(4, localTime0.size());
      assertEquals(4, partial0.size());
      assertEquals("[hourOfDay=20, minuteOfHour=21, secondOfMinute=21, millisOfDay=1, millisOfSecond=320]", string0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test05()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertEquals(0, partial0.size());
      assertEquals("[]", string1);
  }

  @Test
  public void test06()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      
      DateTimeFormatter dateTimeFormatter1 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
  }

  @Test
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertFalse(boolean0);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(boolean0);
  }

  //@Test
  public void test09()  throws Throwable  {
      long long0 = 19L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertEquals(4, partial0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  //@Test
  public void test10()  throws Throwable  {
      long long0 = 0L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      System.setCurrentTimeMillis(long0);
      DateTime dateTime0 = new DateTime();
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(0, partial0.size());
      
      Days days0 = seconds0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, partial0.size());
      
      Period period0 = days0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, partial0.size());
      
      int int0 = 0;
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) period0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(0, partial0.size());
  }

  @Test
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Partial partial0 = new Partial((ReadablePartial) yearMonth0);
      assertNotNull(partial0);
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      int int0 = (-1348);
      Partial partial1 = partial0.withPeriodAdded(readablePeriod0, int0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(2, partial1.size());
      assertEquals(2, yearMonth0.size());
      assertEquals(2, partial0.size());
  }

  @Test
  public void test13()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, intArray0[3]);
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(2, partial1.size());
      assertEquals(2, partial0.size());
  }

  @Test
  public void test14()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[4];
      Partial partial0 = new Partial(julianChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2, partial0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      
      int int0 = 117;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 24;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      
      int int1 = 0;
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test16() {}
//   @Test
//   public void test16()  throws Throwable  {
//       long long0 = 0L;
//       LocalDateTime localDateTime0 = new LocalDateTime(long0);
//       assertNotNull(localDateTime0);
//       assertEquals(4, localDateTime0.size());
//       
//       Partial partial0 = new Partial((ReadablePartial) localDateTime0);
//       assertNotNull(partial0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, partial0.size());
//       
//       DurationFieldType durationFieldType0 = DurationFieldType.millis();
//       assertNotNull(durationFieldType0);
//       assertEquals("millis", durationFieldType0.toString());
//       assertEquals("millis", durationFieldType0.getName());
//       
//       int int0 = 508;
//       Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
//       assertNotNull(partial1);
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//       assertEquals(4, localDateTime0.size());
//       assertEquals(4, partial0.size());
//       assertEquals("millis", durationFieldType0.toString());
//       assertEquals("millis", durationFieldType0.getName());
//       assertEquals(4, partial1.size());
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//   }

  @Test
  public void test17()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      int int1 = 61;
      Partial partial1 = partial0.withField(dateTimeFieldType0, int1);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals(0, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals(0, partial1.size());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
  }

  @Test
  public void test21() {}
//   @Test
//   public void test21()  throws Throwable  {
//       DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
//       assertNotNull(dateTimeFieldType0);
//       assertEquals("millisOfSecond", dateTimeFieldType0.toString());
//       assertEquals("millisOfSecond", dateTimeFieldType0.getName());
//       
//       int int0 = 1;
//       LocalTime localTime0 = new LocalTime();
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertNotNull(partial0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       
//       Partial partial1 = partial0.with(dateTimeFieldType0, int0);
//       assertNotNull(partial1);
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial1, partial0);
//       assertEquals("millisOfSecond", dateTimeFieldType0.toString());
//       assertEquals("millisOfSecond", dateTimeFieldType0.getName());
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial1.size());
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial1.equals((Object)partial0));
//       
//       Partial partial2 = partial1.with(dateTimeFieldType0, int0);
//       assertNotNull(partial2);
//       assertNotSame(partial2, partial0);
//       assertSame(partial2, partial1);
//       assertNotSame(partial0, partial1);
//       assertNotSame(partial0, partial2);
//       assertSame(partial1, partial2);
//       assertNotSame(partial1, partial0);
//       assertEquals(4, partial2.size());
//       assertEquals("millisOfSecond", dateTimeFieldType0.toString());
//       assertEquals("millisOfSecond", dateTimeFieldType0.getName());
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       assertEquals(4, partial1.size());
//       assertFalse(partial2.equals((Object)partial0));
//       assertFalse(partial0.equals((Object)partial1));
//       assertFalse(partial0.equals((Object)partial2));
//       assertFalse(partial1.equals((Object)partial0));
//   }

  //@Test
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)localTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
      assertNotNull(dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      int int1 = partial_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(4, localTime0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfWeek();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("dayOfWeek", dateTimeFieldType1.toString());
      assertEquals("dayOfWeek", dateTimeFieldType1.getName());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for dayOfWeek must not be smaller than 1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      Partial partial0 = new Partial(dateTimeFieldType1, int0);
      assertNotNull(partial0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotNull(partial1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals("millisOfDay", dateTimeFieldType1.getName());
      assertEquals("millisOfDay", dateTimeFieldType1.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(2, partial1.size());
      assertEquals(1, partial0.size());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
  }

  @Test
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = (-505);
      DateTimeFieldType dateTimeFieldType0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 26;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) copticChronology0);
      assertNotNull(partial1);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 24;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) islamicChronology0);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }

  @Test
  public void test27()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[3].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[3].getName());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[2].toString());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[2].getName());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: centuryOfEra
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 21;
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldTypeArray0[1], int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: year
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.halfdayOfDay();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("halfdayOfDay", dateTimeFieldType1.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType1.toString());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("halfdayOfDay", dateTimeFieldTypeArray0[1].toString());
      
      int[] intArray0 = new int[3];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: halfdayOfDay < era
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      assertNotNull(dateTimeFieldType0);
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[0].toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.toString());
      assertEquals("centuryOfEra", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].getName());
      assertEquals("centuryOfEra", dateTimeFieldTypeArray0[1].toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType1);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[2].toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[3].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[3].getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      
      int[] intArray0 = new int[4];
      dateTimeFieldTypeArray0[0] = dateTimeFieldTypeArray0[3];
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: clockhourOfDay < centuryOfEra
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      int[] intArray0 = new int[2];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      int[] intArray0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must not be null
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-1);
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test
  public void test36()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      
      int int0 = 1;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Period period0 = Period.fieldDifference((ReadablePartial) partial0, (ReadablePartial) partial0);
      assertNotNull(period0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.minus((ReadablePeriod) period0);
      assertNotNull(partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertEquals(1, partial1.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
  }

  @Test
  public void test37()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(0, partial0.size());
  }

  @Test
  public void test38()  throws Throwable  {
      Chronology chronology0 = null;
      Partial partial0 = new Partial(chronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Period period0 = Period.ZERO;
      assertNotNull(period0);
      
      Partial partial1 = partial0.plus((ReadablePeriod) period0);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
  }

  @Test
  public void test39()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[16];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, intArray0[0]);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.addToCopy(intArray0[2]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.withMaximumValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      
      int int0 = 2;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals("minuteOfDay", dateTimeFieldType0.toString());
      assertEquals("minuteOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      String string0 = null;
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      Chronology chronology0 = null;
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      int[] intArray0 = new int[16];
      Partial partial0 = new Partial(chronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, intArray0[0]);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3, partial0.size());
      
      Partial partial1 = partial_Property0.getPartial();
      assertNotNull(partial1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertEquals(3, partial0.size());
      assertEquals(3, partial1.size());
  }

  @Test
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 24;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertNotNull(partial1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertEquals(1, partial0.size());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
  }
}
