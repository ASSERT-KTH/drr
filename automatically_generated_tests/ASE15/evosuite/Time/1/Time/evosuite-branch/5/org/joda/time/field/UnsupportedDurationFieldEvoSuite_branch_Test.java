/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:31:53 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Minutes;
import org.joda.time.PeriodType;
import org.joda.time.Weeks;
import org.joda.time.field.UnsupportedDurationField;
import org.junit.runner.RunWith;

 
public class UnsupportedDurationFieldEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertNotNull(unsupportedDurationField0);
      
      Minutes minutes0 = Minutes.TWO;
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType1 = minutes0.getFieldType();
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertEquals(1, minutes0.size());
      assertEquals("minutes", durationFieldType1.toString());
      assertEquals("minutes", durationFieldType1.getName());
      assertNotNull(durationFieldType1);
      
      UnsupportedDurationField unsupportedDurationField1 = UnsupportedDurationField.getInstance(durationFieldType1);
      assertNotSame(unsupportedDurationField1, unsupportedDurationField0);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(unsupportedDurationField1.equals((Object)unsupportedDurationField0));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertEquals(0L, unsupportedDurationField1.getUnitMillis());
      assertEquals(true, unsupportedDurationField1.isPrecise());
      assertEquals("minutes", unsupportedDurationField1.getName());
      assertEquals(false, unsupportedDurationField1.isSupported());
      assertEquals(1, minutes0.size());
      assertEquals("minutes", durationFieldType1.toString());
      assertEquals("minutes", durationFieldType1.getName());
      assertNotNull(unsupportedDurationField1);
      
      boolean boolean0 = unsupportedDurationField0.equals((Object) unsupportedDurationField1);
      assertNotSame(durationFieldType0, durationFieldType1);
      assertNotSame(unsupportedDurationField1, unsupportedDurationField0);
      assertNotSame(unsupportedDurationField0, unsupportedDurationField1);
      assertNotSame(durationFieldType1, durationFieldType0);
      assertFalse(durationFieldType0.equals((Object)durationFieldType1));
      assertFalse(unsupportedDurationField1.equals((Object)unsupportedDurationField0));
      assertFalse(unsupportedDurationField0.equals((Object)unsupportedDurationField1));
      assertFalse(durationFieldType1.equals((Object)durationFieldType0));
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(0L, unsupportedDurationField1.getUnitMillis());
      assertEquals(true, unsupportedDurationField1.isPrecise());
      assertEquals("minutes", unsupportedDurationField1.getName());
      assertEquals(false, unsupportedDurationField1.isSupported());
      assertEquals(1, minutes0.size());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals("minutes", durationFieldType1.toString());
      assertEquals("minutes", durationFieldType1.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("seconds", unsupportedDurationField0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(unsupportedDurationField0);
      
      boolean boolean0 = unsupportedDurationField0.equals((Object) unsupportedDurationField0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("seconds", unsupportedDurationField0.getName());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("millis", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertNotNull(unsupportedDurationField0);
      
      boolean boolean0 = unsupportedDurationField0.equals((Object) durationFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("millis", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(unsupportedDurationField0);
      
      UnsupportedDurationField unsupportedDurationField1 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertSame(unsupportedDurationField1, unsupportedDurationField0);
      assertEquals(false, unsupportedDurationField1.isSupported());
      assertEquals(0L, unsupportedDurationField1.getUnitMillis());
      assertEquals(true, unsupportedDurationField1.isPrecise());
      assertEquals("eras", unsupportedDurationField1.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(unsupportedDurationField1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("hours", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = (-2935);
      // Undeclared exception!
      try {
        long long0 = unsupportedDurationField0.getMillis(int0, (long) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      boolean boolean0 = unsupportedDurationField0.isSupported();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertNotNull(unsupportedDurationField0);
      
      boolean boolean0 = unsupportedDurationField0.isPrecise();
      assertEquals("days", durationFieldType0.getName());
      assertEquals("days", durationFieldType0.toString());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1348);
      Hours hours0 = Hours.ZERO;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("hours", unsupportedDurationField0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertNotNull(unsupportedDurationField0);
      
      // Undeclared exception!
      try {
        int int1 = unsupportedDurationField0.getDifference((long) int0, (long) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("millis", unsupportedDurationField0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = (-22);
      // Undeclared exception!
      try {
        long long0 = unsupportedDurationField0.getMillis(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // millis field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("hours", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = unsupportedDurationField0.compareTo((DurationField) unsupportedDurationField0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("hours", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFieldType durationFieldType0 = null;
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertNotNull(unsupportedDurationField0);
      
      long long0 = 456L;
      // Undeclared exception!
      try {
        long long1 = unsupportedDurationField0.getMillis(long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // null field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = null;
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      long long0 = (-2760L);
      // Undeclared exception!
      try {
        long long1 = unsupportedDurationField0.getValueAsLong(long0, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // null field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = periodType0.getFieldType(int0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("months", unsupportedDurationField0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertNotNull(unsupportedDurationField0);
      
      // Undeclared exception!
      try {
        long long0 = unsupportedDurationField0.add((long) int0, int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // months field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("years", unsupportedDurationField0.getName());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertNotNull(unsupportedDurationField0);
      
      long long0 = (-719L);
      // Undeclared exception!
      try {
        int int0 = unsupportedDurationField0.getValue(long0, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // years field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Hours hours0 = weeks0.toStandardHours();
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("hours", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(unsupportedDurationField0);
      
      String string0 = unsupportedDurationField0.toString();
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("hours", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals("UnsupportedDurationField[hours]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("seconds", unsupportedDurationField0.getName());
      assertNotNull(unsupportedDurationField0);
      
      long long0 = (-6914L);
      // Undeclared exception!
      try {
        long long1 = unsupportedDurationField0.subtract(long0, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // seconds field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      long long0 = unsupportedDurationField0.getUnitMillis();
      assertEquals("eras", durationFieldType0.toString());
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, long0);
      
      // Undeclared exception!
      try {
        long long1 = unsupportedDurationField0.getValueAsLong(long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("eras", durationFieldType0.getName());
      assertEquals("eras", durationFieldType0.toString());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      long long0 = (-1463L);
      // Undeclared exception!
      try {
        int int0 = unsupportedDurationField0.getValue(long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test18() {}
//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       Weeks weeks0 = Weeks.ZERO;
//       assertEquals(1, weeks0.size());
//       assertNotNull(weeks0);
//       
//       Hours hours0 = weeks0.toStandardHours();
//       assertEquals(1, weeks0.size());
//       assertEquals(1, hours0.size());
//       assertNotNull(hours0);
//       
//       DurationFieldType durationFieldType0 = hours0.getFieldType();
//       assertEquals(1, weeks0.size());
//       assertEquals("hours", durationFieldType0.getName());
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals(1, hours0.size());
//       assertNotNull(durationFieldType0);
//       
//       UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
//       assertEquals(1, weeks0.size());
//       assertEquals("hours", unsupportedDurationField0.getName());
//       assertEquals(true, unsupportedDurationField0.isPrecise());
//       assertEquals(0L, unsupportedDurationField0.getUnitMillis());
//       assertEquals(false, unsupportedDurationField0.isSupported());
//       assertEquals("hours", durationFieldType0.getName());
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals(1, hours0.size());
//       assertNotNull(unsupportedDurationField0);
//       
//       DurationFieldType durationFieldType1 = unsupportedDurationField0.getType();
//       assertSame(durationFieldType0, durationFieldType1);
//       assertSame(durationFieldType1, durationFieldType0);
//       assertEquals(1, weeks0.size());
//       assertEquals("hours", unsupportedDurationField0.getName());
//       assertEquals(true, unsupportedDurationField0.isPrecise());
//       assertEquals(0L, unsupportedDurationField0.getUnitMillis());
//       assertEquals(false, unsupportedDurationField0.isSupported());
//       assertEquals("hours", durationFieldType0.getName());
//       assertEquals("hours", durationFieldType0.toString());
//       assertEquals("hours", durationFieldType1.getName());
//       assertEquals("hours", durationFieldType1.toString());
//       assertEquals(1, hours0.size());
//       assertNotNull(durationFieldType1);
//   }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Hours hours0 = weeks0.toStandardHours();
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(hours0);
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("hours", unsupportedDurationField0.getName());
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = 3466;
      // Undeclared exception!
      try {
        long long0 = unsupportedDurationField0.getMillis((long) int0, (long) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // hours field is unsupported
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = unsupportedDurationField0.hashCode();
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(3076183, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      UnsupportedDurationField unsupportedDurationField0 = UnsupportedDurationField.getInstance(durationFieldType0);
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertEquals("days", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertNotNull(unsupportedDurationField0);
      
      long long0 = 10L;
      // Undeclared exception!
      try {
        long long1 = unsupportedDurationField0.getDifferenceAsLong(long0, long0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // days field is unsupported
         //
      }
  }
}
