/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:25 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PartialEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      String string0 = "Style '--' is invalid";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      String string0 = "AMDU$9M-";
      // Undeclared exception!
      try {
        String string1 = partial0.toString(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("[year=1435, monthOfYear=4, dayOfMonth=13, millisOfDay=73281320]", string0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      String string1 = partial0.toString();
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[year=1435, monthOfYear=4, dayOfMonth=13, millisOfDay=73281320]", string1);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       LocalTime localTime0 = LocalTime.MIDNIGHT;
//       assertNotNull(localTime0);
//       assertEquals(4, localTime0.size());
//       
//       Partial partial0 = new Partial((ReadablePartial) localTime0);
//       assertNotNull(partial0);
//       assertEquals(4, partial0.size());
//       assertEquals(4, localTime0.size());
//       
//       String string0 = null;
//       Locale locale0 = Locale.UK;
//       assertNotNull(locale0);
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       
//       String string1 = partial0.toString(string0, locale0);
//       assertNotNull(string1);
//       assertEquals("00:00:00.000", string1);
//       assertEquals(4, partial0.size());
//       assertEquals("en_GB", locale0.toString());
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals(4, localTime0.size());
//   }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      String string0 = null;
      String string1 = partial0.toString(string0);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      String string0 = partial0.toString();
      assertNotNull(string0);
      assertEquals("[year=1435, monthOfYear=4, dayOfMonth=13, millisOfDay=73281320]", string0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertNotNull(dateTimeFormatter0);
      assertEquals(4, partial0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      
      int[] intArray0 = new int[8];
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[2], intArray0[3]);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.withMaximumValue();
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(boolean0);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      Partial partial1 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = partial0.isMatch((ReadablePartial) partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadablePartial) partial0);
      assertTrue(boolean0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = (-1172);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertFalse(boolean0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      Partial partial0 = new Partial((ReadablePartial) localTime0);
      assertNotNull(partial0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      boolean boolean0 = partial0.isMatch((ReadableInstant) instant0);
      assertTrue(boolean0);
      assertEquals(4, partial0.size());
      assertEquals(4, localTime0.size());
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      int int0 = 0;
      Partial partial1 = partial0.withPeriodAdded((ReadablePeriod) mutablePeriod0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = (-1356);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAddWrapped(durationFieldType0, int0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals(1, partial0.size());
      assertEquals("weekyears", durationFieldType0.toString());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      assertNotNull(durationFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      int int1 = (-1569);
      Partial partial1 = partial0.withFieldAdded(durationFieldType0, int1);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertFalse(int1 == int0);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int0 == int1);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertEquals(1, partial1.size());
      assertEquals("weekyears", durationFieldType0.getName());
      assertEquals("weekyears", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      int int0 = (-1356);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.withField(dateTimeFieldType0, int0);
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "America/Phoenix";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(islamicChronology0);
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[1];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("hourOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[8];
      int int0 = (-3233);
      intArray0[0] = int0;
      Partial partial0 = new Partial(islamicChronology0, dateTimeFieldTypeArray0, intArray0);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {(-3233), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {(-3233), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.withMinimumValue();
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertArrayEquals(new int[] {(-3233), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial1.size());
      assertEquals("America/Phoenix", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Phoenix", cachedDateTimeZone0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.toString());
      assertEquals("hourOfDay", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial2 = partial1.withField(dateTimeFieldType0, intArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3233 for hourOfDay must be in the range [0,23]
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(0, partial1.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.without(dateTimeFieldType0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals("clockhourOfDay", dateTimeFieldType0.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = (-1356);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int1 = (-1659);
      Partial partial1 = partial0.with(dateTimeFieldType0, int1);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertNotNull(dateTimeFieldType0);
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      
      int int0 = (-3047);
      TimeOfDay timeOfDay0 = TimeOfDay.MIDNIGHT;
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3047 for yearOfCentury must not be smaller than 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int[] intArray0 = new int[10];
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, intArray0[1]);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertFalse(partial0.equals((Object)partial1));
      assertFalse(partial1.equals((Object)partial0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(0, partial0.size());
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(1, partial1.size());
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Partial partial0 = new Partial((Chronology) gJChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = (-2207);
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      Partial partial0 = new Partial((Chronology) copticChronology0);
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) copticChronology0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial0.withChronologyRetainFields((Chronology) julianChronology0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(0, partial1.size());
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[1].getName());
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[0].toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[2].toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("millisOfDay", dateTimeFieldType0.getName());
      assertEquals("millisOfDay", dateTimeFieldType0.toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[3].toString());
      assertEquals("millisOfDay", dateTimeFieldTypeArray0[3].getName());
      
      int[] intArray0 = new int[4];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: millisOfDay and millisOfDay
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[6];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[0].getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[2].toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].getName());
      assertEquals("weekyear", dateTimeFieldTypeArray0[3].toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[4].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[4].getName());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("weekyear", dateTimeFieldTypeArray0[5].toString());
      assertEquals("weekyear", dateTimeFieldTypeArray0[5].getName());
      
      int[] intArray0 = new int[6];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate: weekyear and weekyear
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertNotNull(dateTimeFieldType0);
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      int int0 = 4580;
      Partial partial1 = partial0.with(dateTimeFieldType0, int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(5, partial1.size());
      assertEquals(4, timeOfDay0.size());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals(4, partial0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[9];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertNotNull(dateTimeFieldType0);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[0].toString());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[1].toString());
      assertEquals("dayOfYear", dateTimeFieldTypeArray0[1].getName());
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[2].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[2].toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldTypeArray0[2];
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[3].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[3].toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[4].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[4].toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[5].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[5].toString());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[6].toString());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[6].getName());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldTypeArray0[0];
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[7].getName());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[7].toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldTypeArray0[3];
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[8].toString());
      assertEquals("millisOfSecond", dateTimeFieldTypeArray0[8].getName());
      
      int[] intArray0 = new int[9];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: millisOfSecond < dayOfYear
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      
      dateTimeFieldTypeArray0[0] = dateTimeFieldType1;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("clockhourOfDay", dateTimeFieldType1.toString());
      assertEquals("clockhourOfDay", dateTimeFieldType1.getName());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].toString());
      assertEquals("clockhourOfDay", dateTimeFieldTypeArray0[0].getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("era", dateTimeFieldTypeArray0[5].toString());
      assertEquals("era", dateTimeFieldTypeArray0[5].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldTypeArray0[5];
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("era", dateTimeFieldTypeArray0[6].toString());
      assertEquals("era", dateTimeFieldTypeArray0[6].getName());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("era", dateTimeFieldTypeArray0[7].getName());
      assertEquals("era", dateTimeFieldTypeArray0[7].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("era", dateTimeFieldTypeArray0[8].toString());
      assertEquals("era", dateTimeFieldTypeArray0[8].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldTypeArray0[3];
      assertNotNull(dateTimeFieldTypeArray0[9]);
      assertEquals("era", dateTimeFieldTypeArray0[9].getName());
      assertEquals("era", dateTimeFieldTypeArray0[9].toString());
      
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must be in order largest-smallest: clockhourOfDay < era
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfYear();
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotNull(dateTimeFieldType1);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("dayOfYear", dateTimeFieldType1.toString());
      assertEquals("dayOfYear", dateTimeFieldType1.getName());
      
      // Undeclared exception!
      try {
        Partial partial1 = partial0.with(dateTimeFieldType1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfYear must not be smaller than 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[0]);
      assertEquals("era", dateTimeFieldTypeArray0[0].toString());
      assertEquals("era", dateTimeFieldTypeArray0[0].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[3] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[3]);
      assertEquals("era", dateTimeFieldTypeArray0[3].toString());
      assertEquals("era", dateTimeFieldTypeArray0[3].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[4] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[4]);
      assertEquals("era", dateTimeFieldTypeArray0[4].toString());
      assertEquals("era", dateTimeFieldTypeArray0[4].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[5] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[5]);
      assertEquals("era", dateTimeFieldTypeArray0[5].toString());
      assertEquals("era", dateTimeFieldTypeArray0[5].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[6] = dateTimeFieldTypeArray0[5];
      assertNotNull(dateTimeFieldTypeArray0[6]);
      assertEquals("era", dateTimeFieldTypeArray0[6].getName());
      assertEquals("era", dateTimeFieldTypeArray0[6].toString());
      
      dateTimeFieldTypeArray0[7] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[7]);
      assertEquals("era", dateTimeFieldTypeArray0[7].toString());
      assertEquals("era", dateTimeFieldTypeArray0[7].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[8] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[8]);
      assertEquals("era", dateTimeFieldTypeArray0[8].toString());
      assertEquals("era", dateTimeFieldTypeArray0[8].getName());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldType0.toString());
      
      dateTimeFieldTypeArray0[9] = dateTimeFieldTypeArray0[3];
      assertNotNull(dateTimeFieldTypeArray0[9]);
      assertEquals("era", dateTimeFieldTypeArray0[9].toString());
      assertEquals("era", dateTimeFieldTypeArray0[9].getName());
      
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain duplicate unsupported: era and era
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)partial0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      int[] intArray0 = new int[8];
      Partial partial1 = null;
      try {
        partial1 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Values array must be the same length as the types array
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[10];
      int[] intArray0 = new int[10];
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null: index 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 0;
      DateTimeFieldType dateTimeFieldType0 = null;
      Partial partial0 = null;
      try {
        partial0 = new Partial(dateTimeFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The field type must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 27;
      Partial partial0 = new Partial((ReadablePartial) localDateTime0);
      assertNotNull(partial0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
      
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Partial partial1 = partial0.minus((ReadablePeriod) period0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertEquals(4, partial1.size());
      assertEquals(4, localDateTime0.size());
      assertEquals(4, partial0.size());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      DateTimeFieldType[] dateTimeFieldTypeArray0 = partial0.getFieldTypes();
      assertNotNull(dateTimeFieldTypeArray0);
      assertEquals(0, partial0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      Partial partial0 = new Partial((ReadablePartial) timeOfDay0);
      assertNotNull(partial0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial0.size());
      
      ReadablePeriod readablePeriod0 = null;
      Partial partial1 = partial0.plus(readablePeriod0);
      assertSame(partial1, partial0);
      assertSame(partial0, partial1);
      assertNotNull(partial1);
      assertEquals(4, timeOfDay0.size());
      assertEquals(4, partial1.size());
      assertEquals(4, partial0.size());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      
      Partial partial1 = partial_Property0.addToCopy(int0);
      assertNotSame(partial0, partial1);
      assertNotSame(partial1, partial0);
      assertNotNull(partial1);
      assertTrue(partial0.equals((Object)partial1));
      assertTrue(partial1.equals((Object)partial0));
      assertEquals(1, partial0.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(1, partial1.size());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[5];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      assertNotNull(dateTimeFieldType0);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      
      dateTimeFieldTypeArray0[1] = dateTimeFieldType0;
      assertNotNull(dateTimeFieldTypeArray0[1]);
      assertEquals("era", dateTimeFieldType0.toString());
      assertEquals("era", dateTimeFieldType0.getName());
      assertEquals("era", dateTimeFieldTypeArray0[1].toString());
      assertEquals("era", dateTimeFieldTypeArray0[1].getName());
      
      dateTimeFieldTypeArray0[2] = dateTimeFieldTypeArray0[1];
      assertNotNull(dateTimeFieldTypeArray0[2]);
      assertEquals("era", dateTimeFieldTypeArray0[2].getName());
      assertEquals("era", dateTimeFieldTypeArray0[2].toString());
      
      int[] intArray0 = new int[8];
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0[2], intArray0[3]);
      assertNotNull(partial0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1, partial0.size());
      
      int int1 = partial_Property0.get();
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertEquals(1, partial0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertNotNull(dateTimeFieldType0);
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      int int0 = (-1356);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      
      String string0 = "Types array must be in order largest-smallest: ";
      // Undeclared exception!
      try {
        Partial partial1 = partial_Property0.setCopy(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"Types array must be in order largest-smallest: \" for weekyear is not supported
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Partial partial0 = new Partial();
      assertNotNull(partial0);
      assertEquals(0, partial0.size());
      
      int int0 = 2209;
      Partial.Property partial_Property0 = new Partial.Property(partial0, int0);
      assertNotNull(partial_Property0);
      assertEquals(0, partial0.size());
      
      Partial partial1 = partial_Property0.getPartial();
      assertSame(partial0, partial1);
      assertSame(partial1, partial0);
      assertNotNull(partial1);
      assertEquals(0, partial0.size());
      assertEquals(0, partial1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertNotNull(dateTimeFieldType0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      
      int int0 = 0;
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertNotNull(partial0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial.Property partial_Property0 = partial0.property(dateTimeFieldType0);
      assertNotNull(partial_Property0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      
      Partial partial1 = partial_Property0.addWrapFieldToCopy(int0);
      assertNotSame(partial1, partial0);
      assertNotSame(partial0, partial1);
      assertNotNull(partial1);
      assertTrue(partial1.equals((Object)partial0));
      assertTrue(partial0.equals((Object)partial1));
      assertEquals(1, partial1.size());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
  }
}
