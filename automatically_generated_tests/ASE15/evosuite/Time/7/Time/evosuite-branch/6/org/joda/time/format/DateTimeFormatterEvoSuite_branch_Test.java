/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:43 GMT 2014
 */

package org.joda.time.format;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.ReadWritableInstant;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.TimeOfDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeFormatterBuilder;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class DateTimeFormatterEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = " field is unsupported";
      // Undeclared exception!
      try {
        DateTime dateTime0 = dateTimeFormatter0.parseDateTime(string0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      String string0 = "Instant must not be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) cachedDateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(string0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertNotNull(mutableDateTime0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = dateTimeFormatter0.print((long) int0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{=UTC}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNull(dateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)hashMap0.put(string0, dateTimeZone0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotNull(fixedDateTimeZone1);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(0L, mutableDateTime0.getMillis());
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotNull(mutableDateTime0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter1);
      
      MutableDateTime mutableDateTime0 = dateTimeFormatter1.parseMutableDateTime(string0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "1t }\"bf;)[0[Jr";
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      boolean boolean0 = true;
      DateTimeFormatterBuilder.TextField dateTimeFormatterBuilder_TextField0 = new DateTimeFormatterBuilder.TextField(dateTimeFieldType0, boolean0);
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_TextField0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TextField0, (DateTimeParser) dateTimeFormatterBuilder_TextField0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("hourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("hourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatter0);
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"1t }\"bf;)[0[Jr\" is malformed at \"t }\"bf;)[0[Jr\"
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "0~V&_AG3<~$qqF";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        MutableDateTime mutableDateTime0 = dateTimeFormatter0.parseMutableDateTime(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "KEDYV'+,bO|44d";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime(string0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTime0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter1);
      
      DateTime dateTime0 = dateTimeFormatter1.parseDateTime(string0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals((-3600000L), dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = dateTimeFormatter0.print((long) int0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(1, hashMap0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{=UTC}", hashMap0.toString());
      assertNull(dateTimeZone0);
      
      String string1 = "T+l,{Az#";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        Instant instant0 = Instant.parse(string1, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"T+l,{Az#\"
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "sf$g/+OA#";
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      
      MutableInterval mutableInterval0 = null;
      try {
        mutableInterval0 = new MutableInterval((Object) string0, (Chronology) gregorianChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"sf$g\"
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = dateTimeFormatter0.print((long) int0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals("{=UTC}", hashMap0.toString());
      assertEquals(1, hashMap0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNull(dateTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)hashMap0.put(string0, dateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(fixedDateTimeZone1);
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate(string0);
      assertEquals(3, localDate0.size());
      assertEquals(false, hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals("{=null}", hashMap0.toString());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(localDate0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = dateTimeFormatter0.print((long) int0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone dateTimeZone0 = hashMap0.put(string0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(1, hashMap0.size());
      assertEquals("{=UTC}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertNull(dateTimeZone0);
      
      LocalDate localDate0 = dateTimeFormatter0.parseLocalDate(string0);
      assertEquals(3, localDate0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(1, hashMap0.size());
      assertEquals("{=UTC}", hashMap0.toString());
      assertEquals(false, hashMap0.isEmpty());
      assertNotNull(localDate0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "4";
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Object) string0, (Chronology) iSOChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
  }

  @Test
  public void test13()  throws Throwable  {
      char char0 = 'F';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = "Printing not supportNd";
      // Undeclared exception!
      try {
        long long0 = dateTimeFormatter0.parseMillis(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"Printing not supportNd\"
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "R3}O^d>/#uMFG*. >6";
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      char char0 = '|';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertNotNull(dateTimeFormatter1);
      
      Instant instant0 = Instant.now();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      MutableDateTime mutableDateTime0 = instant0.toMutableDateTime((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(mutableDateTime0);
      
      int int0 = dateTimeFormatter1.parseInto((ReadWritableInstant) mutableDateTime0, string0, (int) char0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals((-125), int0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "KEDYV'+,bO|44d";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      int int0 = (-10);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.parse(string0, dateTimeFormatter0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(mutableDateTime0);
      
      int int1 = dateTimeFormatter1.parseInto((ReadWritableInstant) mutableDateTime0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(int1 == int0);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals((-3600000L), mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(9, int1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      int int0 = 236548278;
      ReadWritableInstant readWritableInstant0 = null;
      // Undeclared exception!
      try {
        int int1 = dateTimeFormatter0.parseInto(readWritableInstant0, string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instant must not be null
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "Instant must not be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      // Undeclared exception!
      try {
        String string1 = dateTimeFormatter0.print((ReadablePartial) timeOfDay0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Printing not supported
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      long long0 = (-4340L);
      Instant instant0 = new Instant(long0);
      assertEquals((-4340L), instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals((-4340L), instant0.getMillis());
      assertEquals((-4340L), dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      dateTimeFormatter0.printTo((Writer) stringWriter0, (ReadableInstant) dateTime0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals("", stringWriter0.toString());
      assertEquals((-4340L), instant0.getMillis());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals((-4340L), dateTime0.getMillis());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      Writer writer0 = null;
      Partial partial0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo(writer0, (ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(iSOChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) iSOChronology0);
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals("millisOfSecond", dateTimeFieldType0.getName());
      assertEquals("millisOfSecond", dateTimeFieldType0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(1, partial0.size());
      assertNotNull(dateTimeFormatter0);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo(writer0, (ReadablePartial) partial0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 712;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      int int1 = 0;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0);
      assertFalse(int0 == int1);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(int0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
      
      Integer integer0 = new Integer(int1);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(int0 == int1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertNotNull(dateTimeFormatter2);
  }

  @Test
  public void test22()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      int int0 = 0;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withPivotYear(int0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
      
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withPivotYear(integer0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertTrue(integer0.equals((Object)int0));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertEquals(false, dateTimeFormatter2.isParser());
      assertEquals(false, dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter2);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-649);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(dateTimeFormatter0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.649", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.649", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZone((DateTimeZone) fixedDateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("-00:00:00.649", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.649", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertNotNull(dateTimeFormatter1);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withZone((DateTimeZone) fixedDateTimeZone0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("-00:00:00.649", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.649", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, dateTimeFormatter2.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertNotNull(dateTimeFormatter2);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      Chronology chronology0 = null;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withChronology(chronology0);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
  }

  @Test
  public void test25()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 712;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter1);
      
      DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter1.withOffsetParsed();
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter2.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter2));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter1, dateTimeFormatter2);
      assertNotSame(dateTimeFormatter2, dateTimeFormatter0);
      assertSame(dateTimeFormatter2, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter2);
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals(true, dateTimeFormatter2.isPrinter());
      assertEquals(2000, dateTimeFormatter2.getDefaultYear());
      assertEquals(true, dateTimeFormatter2.isOffsetParsed());
      assertEquals(true, dateTimeFormatter2.isParser());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter2);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      Locale locale0 = dateTimeFormatter0.getLocale();
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNull(locale0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertSame(dateTimeFormatter1, dateTimeFormatter0);
      assertSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertTrue(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertNotNull(dateTimeFormatter0);
      
      boolean boolean0 = dateTimeFormatter0.isParser();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertTrue(boolean0);
  }

  @Test
  public void test30()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      boolean boolean0 = dateTimeFormatter0.isPrinter();
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertFalse(boolean0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertNotNull(dateTimeFormatter0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      dateTimeFormatter0.printTo((Writer) stringWriter0, (long) int0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", stringWriter0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      int int0 = 1;
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withDefaultYear(int0);
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertEquals(1, dateTimeFormatter1.getDefaultYear());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter1);
  }

  @Test
  public void test33()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      Chronology chronology0 = dateTimeFormatter0.getChronology();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNull(chronology0);
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-659);
      Partial partial0 = new Partial(dateTimeFieldType0, int0);
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(partial0);
      
      DateTimeFormatter dateTimeFormatter0 = partial0.getFormatter();
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(1, partial0.size());
      assertEquals("weekyear", dateTimeFieldType0.toString());
      assertEquals("weekyear", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = "6?\\IIN{oh";
      // Undeclared exception!
      try {
        LocalTime localTime0 = dateTimeFormatter0.parseLocalTime(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6?\\IIN{oh\" is malformed at \"?\\IIN{oh\"
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "Instant must not be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      boolean boolean0 = dateTimeFormatter0.isOffsetParsed();
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertFalse(boolean0);
  }

  @Test
  public void test36()  throws Throwable  {
      char char0 = 'E';
      DateTimeFormatterBuilder.CharacterLiteral dateTimeFormatterBuilder_CharacterLiteral0 = new DateTimeFormatterBuilder.CharacterLiteral(char0);
      assertNotNull(dateTimeFormatterBuilder_CharacterLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_CharacterLiteral0, (DateTimeParser) dateTimeFormatterBuilder_CharacterLiteral0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      Integer integer0 = new Integer((int) char0);
      assertEquals(69, (int)integer0);
      
      StringWriter stringWriter0 = new StringWriter((int) integer0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo((Appendable) stringWriter0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The partial must not be null
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = null;
      DateTimeParser dateTimeParser0 = null;
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      Integer integer0 = dateTimeFormatter0.getPivotYear();
      assertEquals(false, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
  }

  @Test
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 712;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFormatter0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withLocale(locale0);
      assertFalse(dateTimeFormatter0.equals((Object)dateTimeFormatter1));
      assertFalse(dateTimeFormatter1.equals((Object)dateTimeFormatter0));
      assertNotSame(dateTimeFormatter0, dateTimeFormatter1);
      assertNotSame(dateTimeFormatter1, dateTimeFormatter0);
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter1.getDefaultYear());
      assertEquals(false, dateTimeFormatter1.isOffsetParsed());
      assertEquals(true, dateTimeFormatter1.isPrinter());
      assertEquals(true, dateTimeFormatter1.isParser());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(dateTimeFormatter1);
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      DateTime dateTime0 = DateTime.now();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      dateTimeFormatter0.printTo((Appendable) stringWriter0, (ReadableInstant) dateTime0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 712;
      boolean boolean0 = false;
      DateTimeFormatterBuilder.FixedNumber dateTimeFormatterBuilder_FixedNumber0 = new DateTimeFormatterBuilder.FixedNumber(dateTimeFieldType0, int0, boolean0);
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatterBuilder_FixedNumber0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_FixedNumber0, (DateTimeParser) dateTimeFormatterBuilder_FixedNumber0);
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFormatter0);
      
      Chronology chronology0 = dateTimeFormatter0.getChronolgy();
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals("halfdayOfDay", dateTimeFieldType0.toString());
      assertEquals("halfdayOfDay", dateTimeFieldType0.getName());
      assertNull(chronology0);
  }

  @Test
  public void test41()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertNotNull(dateTimeFormatter0);
      
      int int0 = dateTimeFormatter0.getDefaultYear();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(2000, int0);
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 269;
      HashMap<String, DateTimeZone> hashMap0 = new HashMap<String, DateTimeZone>();
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      DateTimeFormatterBuilder.TimeZoneName dateTimeFormatterBuilder_TimeZoneName0 = new DateTimeFormatterBuilder.TimeZoneName(int0, hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(dateTimeFormatterBuilder_TimeZoneName0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_TimeZoneName0, (DateTimeParser) dateTimeFormatterBuilder_TimeZoneName0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      String string0 = dateTimeFormatter0.print((long) int0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        LocalDate localDate0 = dateTimeFormatter0.parseLocalDate(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "Instant must not be null";
      DateTimeFormatterBuilder.StringLiteral dateTimeFormatterBuilder_StringLiteral0 = new DateTimeFormatterBuilder.StringLiteral(string0);
      assertNotNull(dateTimeFormatterBuilder_StringLiteral0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_StringLiteral0, (DateTimeParser) dateTimeFormatterBuilder_StringLiteral0);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertNotNull(dateTimeFormatter0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay();
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      String string1 = dateTimeFormatter0.print((ReadablePartial) timeOfDay0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(4, timeOfDay0.size());
      assertEquals("Instant must not be null", string1);
      assertNotNull(string1);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "3=Q-RVL!OO2RTQ";
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime((Object) string0, (Chronology) iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"3=Q-RVL!OO2RTQ\" is malformed at \"=Q-RVL!OO2RTQ\"
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-649);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      DateTimeFormatterBuilder.Composite dateTimeFormatterBuilder_Composite0 = new DateTimeFormatterBuilder.Composite(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(dateTimeFormatterBuilder_Composite0);
      
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) dateTimeFormatterBuilder_Composite0, (DateTimeParser) dateTimeFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(false, dateTimeFormatter0.isOffsetParsed());
      assertEquals(true, dateTimeFormatter0.isPrinter());
      assertEquals(true, dateTimeFormatter0.isParser());
      assertEquals(2000, dateTimeFormatter0.getDefaultYear());
      assertNotNull(dateTimeFormatter0);
      
      Appendable appendable0 = null;
      // Undeclared exception!
      try {
        dateTimeFormatter0.printTo(appendable0, (long) int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
