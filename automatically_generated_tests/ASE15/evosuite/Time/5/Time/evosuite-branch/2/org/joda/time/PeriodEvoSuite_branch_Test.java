/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:58:17 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.junit.runner.RunWith;

 
public class PeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0, (Chronology) islamicChronology0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(period0);
      
      Period period1 = period0.normalizedStandard(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 1899;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals(1, periodType0.size());
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.normalizedStandard(periodType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Unable to normalize as PeriodType is missing either years or months but period has a month/year amount: P1899Y1899M1899W1899DT1899H1899M1900.899S
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = 31557600000L;
      long long1 = 188L;
      Chronology chronology0 = null;
      Period period0 = new Period(long0, long1, chronology0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Days days0 = period0.toStandardDays();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Days as this period contains years and years vary in length
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 23034375;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType0 = mutablePeriod0.getPeriodType();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.multipliedBy(PeriodType.MONTH_INDEX);
      assertEquals(4, localDateTime0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 86400007L;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period(long0, periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.minus(readablePeriod0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-875);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Hours hours0 = Hours.EIGHT;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      Period period1 = period0.minus((ReadablePeriod) minutes0);
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0, (Chronology) islamicChronology0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plusMillis(int0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 23034375;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType0 = mutablePeriod0.getPeriodType();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.minusSeconds(int1);
      assertEquals(4, localDateTime0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(period1);
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 2961L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusMinutes(int0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  //@Test
  public void test09()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      long long0 = 0L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateTime0.getZone();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      TimeOfDay timeOfDay0 = new TimeOfDay((DateTimeZone) cachedDateTimeZone0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(timeOfDay0);
      
      ISOChronology iSOChronology0 = (ISOChronology)timeOfDay0.getChronology();
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(iSOChronology0);
      
      Period period0 = new Period(long0, (Chronology) iSOChronology0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.plusHours(int0);
      assertEquals(4, timeOfDay0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 1691;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.plusDays(int1);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(period1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 80;
      Weeks weeks0 = Weeks.weeks(int0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      int int1 = 0;
      Period period1 = period0.minusWeeks(int1);
      assertEquals(1, weeks0.size());
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(period1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 3160;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      int int1 = period0.getWeeks();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Period period1 = period0.plusMonths(int1);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(period1);
  }

  @Test
  public void test13()  throws Throwable  {
      long long0 = 3247L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      
      int int0 = 0;
      Period period1 = period0.minusYears(int0);
      assertEquals(4, localDateTime0.size());
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 3160;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      ReadablePeriod readablePeriod0 = null;
      Period period1 = period0.plus(readablePeriod0);
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test15()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0, (Chronology) islamicChronology0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.plus((ReadablePeriod) period0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1691;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int1 = 0;
      Period period1 = period0.withFieldAdded(durationFieldType0, int1);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(period1);
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 60001L;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      assertNotNull(julianChronology0);
      
      int int0 = 0;
      DateTime dateTime0 = new DateTime(long0, (Chronology) julianChronology0);
      assertEquals(60001L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Duration duration0 = new Duration(long0, long0);
      assertEquals(0L, duration0.getMillis());
      assertNotNull(duration0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0);
      assertEquals(60001L, dateTime0.getMillis());
      assertEquals(0L, duration0.getMillis());
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withFieldAdded(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 1691;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      Period period1 = period0.withFieldAdded(durationFieldType0, int0);
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals("minutes", durationFieldType0.toString());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 1347;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = null;
      // Undeclared exception!
      try {
        Period period1 = period0.withField(durationFieldType0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = period0.indexOf(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, int0);
      
      Period period1 = period0.withField(durationFieldType0, int0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 3247L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      
      Months months0 = null;
      Period period1 = period0.withFields((ReadablePeriod) months0);
      assertEquals(4, localDateTime0.size());
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 3160;
      Period period0 = Period.months(int0);
      assertNotNull(period0);
      
      PeriodType periodType0 = null;
      Period period1 = period0.withPeriodType(periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 5;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      MonthDay monthDay0 = new MonthDay((Chronology) julianChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      LocalDate localDate0 = monthDay0.toLocalDate(int0);
      assertEquals(3, localDate0.size());
      assertEquals(2, monthDay0.size());
      assertNotNull(localDate0);
      
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 3;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      MonthDay monthDay0 = new MonthDay(int0, int0, (Chronology) islamicChronology0);
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference((ReadablePartial) monthDay0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Period period0 = Period.fieldDifference(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-875);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Seconds seconds0 = period0.toStandardSeconds();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Cannot convert to Seconds as this period contains months and months vary in length
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = period0.indexOf(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, int0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period1 = new Period(int0, int0, int0, int0, int0, int0, int0, int0, periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 80;
      Weeks weeks0 = Weeks.weeks(int0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusWeeks(int0);
      assertEquals(1, weeks0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = 60001L;
      Period period0 = new Period(long0);
      assertNotNull(period0);
  }

  //@Test
  public void test30()  throws Throwable  {
      long long0 = 3247L;
      Duration duration0 = Duration.standardHours(long0);
      assertEquals(11689200000L, duration0.getMillis());
      assertNotNull(duration0);
      
      int int0 = 6;
      DateMidnight dateMidnight0 = new DateMidnight(int0, int0, int0);
      assertEquals((-61964351925000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateMidnight0);
      assertEquals((-61964351925000L), dateMidnight0.getMillis());
      assertEquals(11689200000L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 1691;
      Period period0 = Period.seconds(int0);
      assertNotNull(period0);
      
      Minutes minutes0 = period0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
  }

  @Test
  public void test32()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = period0.indexOf(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, int0);
      
      Period period1 = Period.days(int0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test33()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      int int0 = 0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0, (Chronology) islamicChronology0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertEquals(1, weeks0.size());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(weeks0);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 23034375;
      Period period0 = Period.years(int0);
      assertNotNull(period0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = (-875);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.withHours(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertTrue(period0.equals((Object)period1));
      assertTrue(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test36()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 23034375;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType0 = mutablePeriod0.getPeriodType();
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusSeconds(int0);
      assertEquals(4, localDateTime0.size());
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test37()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = 0;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      Period period0 = new Period((long) int0, (long) int0, periodType0, (Chronology) islamicChronology0);
      assertEquals(1, periodType0.size());
      assertEquals("Days", periodType0.getName());
      assertNotNull(period0);
      
      // Undeclared exception!
      try {
        Period period1 = period0.withWeeks(int0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      long long0 = 2961L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 10209390;
      Period period1 = period0.withSeconds(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test39()  throws Throwable  {
      long long0 = 3247L;
      int int0 = 6;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusYears(int0);
      assertEquals(4, localDateTime0.size());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test40()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertEquals(2, monthDay0.size());
      assertNotNull(monthDay0);
      
      Period period0 = new Period((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      assertEquals(2, monthDay0.size());
      assertNotNull(period0);
  }

  @Test
  public void test41()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotNull(durationFieldType0);
      
      int int0 = period0.indexOf(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, int0);
      
      Period period1 = period0.minusHours(int0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  //@Test
  public void test42()  throws Throwable  {
      int int0 = 1614;
      Duration duration0 = new Duration((long) int0);
      assertEquals(1614L, duration0.getMillis());
      assertNotNull(duration0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now();
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertNotNull(mutableDateTime0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertNotNull(periodType0);
      
      Period period0 = duration0.toPeriodTo((ReadableInstant) mutableDateTime0, periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1614L, duration0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = 5;
      Period period0 = Period.millis(int0);
      assertNotNull(period0);
      
      Period period1 = period0.withDays(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 80;
      Weeks weeks0 = Weeks.weeks(int0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Period period0 = weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertNotNull(period0);
      
      Duration duration0 = period0.toStandardDuration();
      assertEquals(1, weeks0.size());
      assertEquals(48384000000L, duration0.getMillis());
      assertNotNull(duration0);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = 1000;
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
  }

  @Test
  public void test46()  throws Throwable  {
      long long0 = 2961L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 10209390;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(10209390, (int)integer0);
      
      Period period1 = period0.minusMinutes((int) integer0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(period1);
  }

  //@Test
  public void test47()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertNotNull(periodType0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Object) evoSuiteFile0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(dateMidnight0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      Period period0 = new Period((ReadableInstant) dateMidnight0, (ReadableInstant) mutableDateTime0, periodType0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test48()  throws Throwable  {
      long long0 = 2961L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 10209390;
      Period period1 = period0.minusDays(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test49()  throws Throwable  {
      long long0 = 3247L;
      int int0 = 6;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      Period period0 = Period.fieldDifference((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis(int0);
      assertEquals(4, localDateTime0.size());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test50()  throws Throwable  {
      long long0 = 2961L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      int int0 = 10209390;
      Period period1 = period0.minusMonths(int0);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
      
      Period period2 = period1.normalizedStandard();
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period2);
  }

  @Test
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = (-1270);
      Period period0 = new Period((long) int0, (long) int0, periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(period0);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Period period0 = Period.parse(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = (-875);
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.withMinutes(int0);
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test54()  throws Throwable  {
      Period period0 = new Period();
      assertNotNull(period0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotNull(durationFieldType0);
      
      int int0 = period0.indexOf(durationFieldType0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertEquals(1, int0);
      
      Period period1 = period0.withMillis(int0);
      assertEquals("months", durationFieldType0.getName());
      assertEquals("months", durationFieldType0.toString());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 1614;
      Duration duration0 = new Duration((long) int0);
      assertEquals(1614L, duration0.getMillis());
      assertNotNull(duration0);
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
      
      DateTime dateTime0 = new DateTime((long) int0);
      assertEquals(1614L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableDuration) duration0, periodType0);
      assertEquals(1614L, duration0.getMillis());
      assertEquals(1614L, dateTime0.getMillis());
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(period0);
  }

  //@Test
  public void test56()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(dateTime0);
      
      Period period0 = new Period((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertNotNull(period0);
  }

  @Test
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotNull(periodType0);
      
      int int0 = (-1270);
      Period period0 = new Period(int0, PeriodType.WEEK_INDEX, PeriodType.WEEK_INDEX, int0);
      assertNotNull(period0);
      
      Period period1 = period0.withPeriodType(periodType0);
      assertEquals(6, periodType0.size());
      assertEquals("YearDayTime", periodType0.getName());
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertNotNull(period1);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = 0;
      Period period0 = Period.weeks(int0);
      assertNotNull(period0);
  }

  @Test
  public void test59()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
      
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) copticChronology0);
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      int int0 = 23034375;
      MutablePeriod mutablePeriod0 = new MutablePeriod(int0, int0, int0, int0);
      assertNotNull(mutablePeriod0);
      
      PeriodType periodType0 = mutablePeriod0.getPeriodType();
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(periodType0);
      
      Period period0 = new Period((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0, periodType0);
      assertEquals(4, localDateTime0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertNotNull(period0);
      
      Period period1 = period0.toPeriod();
      assertEquals(4, localDateTime0.size());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertSame(period1, period0);
      assertSame(period0, period1);
      assertNotNull(period1);
  }

  @Test
  public void test60()  throws Throwable  {
      int int0 = 1899;
      Period period0 = new Period(int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(period0);
      
      Period period1 = period0.negated();
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertFalse(period1.equals((Object)period0));
      assertFalse(period0.equals((Object)period1));
      assertNotNull(period1);
  }

  @Test
  public void test61()  throws Throwable  {
      long long0 = 2961L;
      Period period0 = new Period(long0, long0);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
  }

  @Test
  public void test62()  throws Throwable  {
      int int0 = PeriodType.DAY_INDEX;
      assertEquals(3, int0);
      
      Period period0 = Period.minutes(int0);
      assertNotNull(period0);
  }
}
