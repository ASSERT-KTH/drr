/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:08 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MonthDay;
import org.joda.time.ReadableInstant;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 43;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.getID());
      
      boolean boolean0 = false;
      long long0 = fixedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals(43L, long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      long long0 = 2092L;
      boolean boolean0 = true;
      long long1 = fixedDateTimeZone0.adjustOffset(long0, boolean0);
      assertEquals(2092L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(lenientChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      int int0 = 4978125;
      LocalDateTime localDateTime0 = new LocalDateTime(int0, int0, int0, int0, int0, int0, int0, (Chronology) lenientChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(4, localDateTime0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = (-44L);
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      LocalDateTime localDateTime0 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      assertNotNull(copticChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) copticChronology0);
      assertNotNull(lenientChronology0);
      
      int int0 = 4978125;
      LocalDateTime localDateTime0 = new LocalDateTime(int0, int0, int0, int0, int0, int0, int0, (Chronology) lenientChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.withMillisOfDay(int0);
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertNotSame(localDateTime0, localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotNull(localDateTime1);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localDateTime1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "Asia/Yerevan";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
      
      long long0 = 0L;
      boolean boolean0 = false;
      long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
      assertEquals((-14400000L), long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 9223372036854775795L;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      LocalDateTime localDateTime0 = null;
      try {
        localDateTime0 = new LocalDateTime(long0, (Chronology) julianChronology0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 2092L;
      String string0 = "WET";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("WET", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("WET", cachedDateTimeZone0.toString());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals(0, int0);
      assertEquals("WET", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("WET", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 2548L;
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
      
      DateMidnight dateMidnight0 = yearMonthDay0.toDateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      int int0 = (-9);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(int0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotNull(dateMidnight1);
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-62451043125000L), dateMidnight1.getMillis());
      
      DateMidnight dateMidnight2 = dateMidnight1.plusMonths(int0);
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotNull(dateMidnight2);
      assertEquals((-62474803125000L), dateMidnight2.getMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals((-62451043125000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 12;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+12:00", fixedDateTimeZone0.toString());
      assertEquals("+12:00", fixedDateTimeZone0.getID());
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((long) int0);
      assertTrue(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+12:00", fixedDateTimeZone0.toString());
      assertEquals("+12:00", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = (-3934L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertEquals(57722400000L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long1);
      assertEquals(3600000, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertFalse(boolean0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      ReadableInstant readableInstant0 = null;
      int int0 = cachedDateTimeZone0.getOffset(readableInstant0);
      assertEquals(0, int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = (-4729);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.toString());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.getID());
      
      Instant instant0 = Instant.now();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      int int1 = fixedDateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-4729), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.toString());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "Asia/Yerevan";
      long long0 = 36L;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
      
      String string1 = cachedDateTimeZone0.getName(long0);
      assertEquals("+04:00", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = 2092L;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string0 = fixedDateTimeZone0.getName(long0, locale0);
      assertEquals("\u534F\u8C03\u4E16\u754C\u65F6\u95F4", string0);
      assertNotNull(string0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 10000;
      String string0 = "ur[&xbLz";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(10000, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=ur[&xbLz,offset=10000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ur[&xbLz", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(10000, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=ur[&xbLz,offset=10000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ur[&xbLz", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      String string1 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertEquals("UTC", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(10000, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=ur[&xbLz,offset=10000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ur[&xbLz", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-5784);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.784", fixedDateTimeZone0.toString());
      assertEquals("-00:00:05.784", fixedDateTimeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertEquals("-00:00:05.784", string0);
      assertNotNull(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.784", fixedDateTimeZone0.toString());
      assertEquals("-00:00:05.784", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 10125000;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+02:48:45", fixedDateTimeZone0.toString());
      assertEquals("+02:48:45", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 10000;
      String string0 = "ur[&xbLz";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("ur[&xbLz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(10000, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ur[&xbLz,offset=10000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("ur[&xbLz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(10000, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ur[&xbLz,offset=10000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("ur[&xbLz", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(10000, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ur[&xbLz,offset=10000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 7593806;
      String string0 = "user.K9%ezone";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=user.K9%ezone,offset=7593806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("user.K9%ezone", simpleTimeZone0.getID());
      assertEquals(7593806, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+02:06", fixedDateTimeZone0.getID());
      assertEquals("+02:06", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=user.K9%ezone,offset=7593806,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("user.K9%ezone", simpleTimeZone0.getID());
      assertEquals(7593806, simpleTimeZone0.getRawOffset());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-343);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-343:00", fixedDateTimeZone0.getID());
      assertEquals("-343:00", fixedDateTimeZone0.toString());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-343:00", fixedDateTimeZone0.getID());
      assertEquals("-343:00", fixedDateTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-1234800000, simpleTimeZone0.getRawOffset());
      assertEquals("-343:00", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=-343:00,offset=-1234800000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-R3:00\" is malformed at \"R3:00\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      String string0 = "Pacific/Guadalcanal";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("Pacific/Guadalcanal", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'Pacific/Guadalcanal' is not recognised
         //
      }
  }

  @Test(timeout = 4000)
  public void test26() {}
//   @Test(timeout = 4000)
//   public void test26()  throws Throwable  {
//       String string0 = "Pacific/Guadalcanal";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("Pacific/Guadalcanal", zoneInfo0.getID());
//       
//       DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
//       assertNotNull(dateTimeZone0);
//       assertEquals("Pacific/Guadalcanal", zoneInfo0.getID());
//       assertEquals(false, dateTimeZone0.isFixed());
//       assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
//       assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
//   }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 292272992;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 292272992
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 438;
      int int1 = (-1737);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1737
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 43;
      int int1 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:43", fixedDateTimeZone0.getID());
      assertEquals("+00:43", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-2);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertEquals("-00:00:00.002", string0);
      assertNotNull(string0);
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("-00:00:00.002", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.002", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.002", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.002", fixedDateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "W_p_@yUml";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fixedDateTimeZone0.getID();
      assertEquals("UTC", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotSame(string1, string0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(string0, string1);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = new DefaultNameProvider();
      assertNotNull(defaultNameProvider0);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      
      String string0 = "c";
      String string1 = defaultNameProvider0.getName(locale0, string0, string0);
      assertNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string1);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      DateTimeZone.setDefault((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      int int0 = 1000;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=1000,MONTH=1000,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1000,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      MonthDay monthDay0 = MonthDay.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-27893808000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1086,MONTH=0,WEEK_OF_YEAR=4,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=24,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 12;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+12:00", fixedDateTimeZone0.toString());
      assertEquals("+12:00", fixedDateTimeZone0.getID());
      
      DateTimeZone dateTimeZone0 = null;
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (long) int0);
      assertEquals(39600012L, long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+12:00", fixedDateTimeZone0.toString());
      assertEquals("+12:00", fixedDateTimeZone0.getID());
      
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("Europe/London", zoneInfo0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 43;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.toString());
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertEquals("+00:00:00.043", string0);
      assertNotNull(string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("+00:00:00.043", fixedDateTimeZone1.toString());
      assertEquals("+00:00:00.043", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.043", fixedDateTimeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertNotNull(set0);
//       assertEquals(572, set0.size());
//       assertEquals(false, set0.isEmpty());
//   }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)iSOChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals("UTC", string0);
      assertNotNull(string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       int int0 = (-2334);
//       String string0 = "Asia/Yerevan";
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
//       
//       String string1 = cachedDateTimeZone0.getShortName((long) int0);
//       assertEquals("+04:00", string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
//   }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-4729);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.getID());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.toString());
      
      Object object0 = fixedDateTimeZone0.writeReplace();
      assertNotNull(object0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.getID());
      assertEquals("-00:00:04.729", fixedDateTimeZone0.toString());
  }
}
