/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:08:28 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      long long0 = (-614L);
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      boolean boolean0 = false;
      long long1 = fixedDateTimeZone0.adjustOffset(long0, boolean0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-614L), long1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = (-2182);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:02.182", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = null;
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("-00:00:02.182", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.toString());
  }

  //@Test
  public void test02()  throws Throwable  {
      int int0 = (-362);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-362:00", fixedDateTimeZone0.getID());
      assertEquals("-362:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone0 = null;
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (long) int0);
      assertEquals((-1306800362L), long0);
      assertEquals("-362:00", fixedDateTimeZone0.getID());
      assertEquals("-362:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test
  public void test03()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 36L;
      boolean boolean0 = true;
      long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3599964L), long1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "America/Puerto_Rico";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Puerto_Rico", cachedDateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", cachedDateTimeZone0.toString());
      
      long long0 = 9223372036854775807L;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "America/Anchorage";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 9223372036854775807L;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "America/Anchorage";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      
      long long0 = (-9223372036854775792L);
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal instant due to time zone offset transition: -292275055-05-16T16:47:04.208 (America/Anchorage)
         //
      }
  }

  //@Test
  public void test07()  throws Throwable  {
      int int0 = 2;
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(int0);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotNull(dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(1397430000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfYear(int0);
      assertFalse(dateMidnight2.equals((Object)dateMidnight1));
      assertFalse(dateMidnight2.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight1.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight2));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertNotNull(dateMidnight2);
      assertNotSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight2);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertEquals(1388620800000L, dateMidnight2.getMillis());
      assertEquals(1397430000000L, dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  //@Test
  public void test08()  throws Throwable  {
      long long0 = (-614L);
      boolean boolean0 = true;
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals((-614L), long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "America/Puerto_Rico";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Puerto_Rico", cachedDateTimeZone0.getID());
      assertEquals("America/Puerto_Rico", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = (-9223372036854775774L);
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  //@Test
  public void test10()  throws Throwable  {
      int int0 = 803;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=803,MONTH=803,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=803,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=803,HOUR_OF_DAY=803,MINUTE=803,SECOND=803,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertNotNull(date0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      
      Interval interval0 = localDate0.toInterval();
      assertNotNull(interval0);
      assertEquals(3, localDate0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals((-34643030325000L), interval0.getStartMillis());
      assertEquals((-34642943925000L), interval0.getEndMillis());
      
      Period period0 = interval0.toPeriod();
      assertNotNull(period0);
      assertEquals(3, localDate0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals((-34643030325000L), interval0.getStartMillis());
      assertEquals((-34642943925000L), interval0.getEndMillis());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "America/Anchorage";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      
      long long0 = (-9223372036854775792L);
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
      assertEquals((-28800000), int0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
  }

  @Test
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      long long0 = (-27L);
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset(long0);
      assertTrue(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  //@Test
  public void test13()  throws Throwable  {
      int int0 = 803;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
      assertNotNull(mockGregorianCalendar0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=803,MONTH=803,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=803,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=803,HOUR_OF_DAY=803,MINUTE=803,SECOND=803,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertNotNull(date0);
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      Interval interval0 = localDate0.toInterval();
      assertNotNull(interval0);
      assertEquals(3, localDate0.size());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals((-34643030325000L), interval0.getStartMillis());
      assertEquals((-34642943925000L), interval0.getEndMillis());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      ISOChronology iSOChronology0 = (ISOChronology)interval0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(3, localDate0.size());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals((-34643030325000L), interval0.getStartMillis());
      assertEquals((-34642943925000L), interval0.getEndMillis());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) iSOChronology0);
      assertNotNull(lenientChronology0);
      assertEquals(3, localDate0.size());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals((-34643030325000L), interval0.getStartMillis());
      assertEquals((-34642943925000L), interval0.getEndMillis());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)lenientChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-34643030325000L), interval0.getStartMillis());
      assertEquals((-34642943925000L), interval0.getEndMillis());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertFalse(boolean0);
      assertEquals(3, localDate0.size());
      assertEquals("Sun Mar 16 00:36:23 GMT 872", date0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-34643030325000L), interval0.getStartMillis());
      assertEquals((-34642943925000L), interval0.getEndMillis());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-34642682617000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=872,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=16,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=36,SECOND=23,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
  }

  @Test
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      int int0 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertEquals(0, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  //@Test
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      DateMidnight dateMidnight0 = new DateMidnight();
      assertNotNull(dateMidnight0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      Instant instant0 = dateMidnight0.toInstant();
      assertNotNull(instant0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, instant0.getMillis());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTime dateTime0 = instant0.toDateTime((Chronology) islamicChronology0);
      assertNotNull(dateTime0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, instant0.getMillis());
      
      int int0 = fixedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, int0);
      assertEquals(1392336000000L, dateTime0.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertEquals(1392336000000L, instant0.getMillis());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 7;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.007", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Locale locale0 = null;
      String string0 = fixedDateTimeZone0.getName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("+00:00:00.007", string0);
      assertEquals("+00:00:00.007", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test
  public void test17()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      int int0 = 0;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      
      String string0 = cachedDateTimeZone0.getName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("British Summer Time", string0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  //@Test
  public void test18()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      int int0 = 0;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      
      String string0 = cachedDateTimeZone0.getShortName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("BST", string0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "America/Anchorage";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = (-9223372036854775792L);
      int int0 = 4;
      LocalDateTime localDateTime0 = new LocalDateTime(int0, int0, int0, int0, int0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      long long1 = cachedDateTimeZone0.convertLocalToUTC(long0, boolean0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-9223372036825975792L), long1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      Locale locale0 = null;
      String string1 = cachedDateTimeZone0.getName(long1, locale0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(long0 == long1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(long1 == long0);
      assertNotNull(string1);
      assertEquals("+14:00:24", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
      assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "MbEW7:FSsP<Wj`";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=MbEW7:FSsP<Wj`,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("MbEW7:FSsP<Wj`", simpleTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=MbEW7:FSsP<Wj`,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("MbEW7:FSsP<Wj`", simpleTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=MbEW7:FSsP<Wj`,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("MbEW7:FSsP<Wj`", simpleTimeZone0.getID());
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test22()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test23()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 9;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+09:00", fixedDateTimeZone0.getID());
      assertEquals("+09:00", fixedDateTimeZone0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("GMT+09:00", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+09:00", fixedDateTimeZone0.getID());
      assertEquals("+09:00", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("GMT+09:00", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+09:00", fixedDateTimeZone1.getID());
      assertEquals("+09:00", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+09:00", fixedDateTimeZone0.getID());
      assertEquals("+09:00", fixedDateTimeZone0.toString());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-562);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-562:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-562:00", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-562:00,offset=-2023200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-2023200000, simpleTimeZone0.getRawOffset());
      assertEquals("-562:00", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("-562:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-562:00", fixedDateTimeZone0.getID());
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-h2:00\" is malformed at \"h2:00\"
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "UTC";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", zoneInfo0.getID());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = (-934);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -934
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 803;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 803
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = (-2182);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.toString());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.getID());
      
      String string0 = fixedDateTimeZone0.toString();
      assertNotNull(string0);
      assertEquals("-00:00:02.182", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.toString());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals("-00:00:02.182", fixedDateTimeZone1.toString());
      assertEquals("-00:00:02.182", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.toString());
      assertEquals("-00:00:02.182", fixedDateTimeZone0.getID());
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 7;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.007", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.getID());
      
      Locale locale0 = null;
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("+00:00:00.007", string0);
      assertEquals("+00:00:00.007", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.007", fixedDateTimeZone1.getID());
      assertEquals("+00:00:00.007", fixedDateTimeZone1.toString());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.getID());
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "UTC";
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test34()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      assertNotNull(copticChronology0);
  }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       String string0 = null;
//       CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(cachedDateTimeZone1);
//       assertSame(cachedDateTimeZone1, cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone1.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone1.getID());
//       assertEquals("Europe/London", cachedDateTimeZone1.toString());
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       int int0 = 0;
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       
//       String string0 = fixedDateTimeZone0.getName((long) int0);
//       assertNotNull(string0);
//       assertEquals("Temps universel coordonn\u00E9", string0);
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("Europe/London", zoneInfo0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//   }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertNotNull(set0);
//       assertEquals(572, set0.size());
//       assertEquals(false, set0.isEmpty());
//   }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test
  public void test41() {}
//   @Test
//   public void test41()  throws Throwable  {
//       String string0 = "America/Anchorage";
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
//       assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       
//       long long0 = 9223372036854775807L;
//       int int0 = cachedDateTimeZone0.getOffsetFromLocal(long0);
//       assertEquals((-28800000), int0);
//       assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
//       assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       
//       String string1 = cachedDateTimeZone0.getShortName((long) int0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotNull(string1);
//       assertEquals("-10:00", string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertEquals("America/Anchorage", cachedDateTimeZone0.getID());
//       assertEquals("America/Anchorage", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//   }

  @Test
  public void test42()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Object object0 = fixedDateTimeZone0.writeReplace();
      assertNotNull(object0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }
}
