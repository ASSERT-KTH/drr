/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:24 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableInstant;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = 2391L;
      int int0 = cachedDateTimeZone0.getStandardOffset(long0);
      assertEquals(0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      boolean boolean0 = cachedDateTimeZone0.isFixed();
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long1 = cachedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals(4, localDateTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test02()  throws Throwable  {
      long long0 = (-20L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-20L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-20L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeZone dateTimeZone0 = null;
      long long1 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3600020L), long1);
      assertEquals((-20L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test03()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      boolean boolean0 = false;
      int int0 = 5;
      long long0 = cachedDateTimeZone0.convertLocalToUTC((long) int0, boolean0);
      assertEquals((-3599995L), long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-3);
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      boolean boolean0 = true;
      long long0 = cachedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals((-3L), long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 9223372036854775776L;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "Pacific/Guadalcanal";
      DateTimeZone dateTimeZone0 = DateTimeZone.forID(string0);
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(false, dateTimeZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(false, dateTimeZone0.isFixed());
      
      int int0 = 2439;
      DateTime dateTime1 = dateTime0.minusMonths(int0);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertEquals((-5021666306680L), dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals(false, dateTimeZone0.isFixed());
  }

  @Test
  public void test08()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      int int0 = 5;
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(int0);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime1);
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test09()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = 10800000L;
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(57722400000L, long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertTrue(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test10()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 10800000L;
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(57722400000L, long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(3600000, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test11()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      DateTime dateTime0 = null;
      int int0 = cachedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(0, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "Pacific/Guadalcanal";
      DateTimeZone dateTimeZone0 = DateTimeZone.forID(string0);
      assertNotNull(dateTimeZone0);
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals(false, dateTimeZone0.isFixed());
      
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals(false, dateTimeZone0.isFixed());
      
      int int0 = dateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(39600000, int0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.toString());
      assertEquals("Pacific/Guadalcanal", dateTimeZone0.getID());
      assertEquals(false, dateTimeZone0.isFixed());
  }

  @Test
  public void test13()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      long long0 = (-2882L);
      String string0 = " (";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals(" (", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(" (", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = cachedDateTimeZone0.getName(long0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("British Summer Time", string1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(" (", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(" (", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = (-118);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-118:00", fixedDateTimeZone0.getID());
      assertEquals("-118:00", fixedDateTimeZone0.toString());
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertNotNull(string0);
      assertEquals("-118:00", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-118:00", fixedDateTimeZone0.getID());
      assertEquals("-118:00", fixedDateTimeZone0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-20L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-20L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals((-20L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = fixedDateTimeZone0.getShortName(long0, locale0);
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals((-20L), instant0.getMillis());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 1000;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:01", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = (-3);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals(-3, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.003,offset=-3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("-00:00:00.003", simpleTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertEquals(-3, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.003,offset=-3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("-00:00:00.003", simpleTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone2);
      assertSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone2);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone2));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertEquals(-3, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=-00:00:00.003,offset=-3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("-00:00:00.003", simpleTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.toString());
      assertEquals(true, fixedDateTimeZone2.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.getID());
  }

  @Test
  public void test18()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test20()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 40;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+40:00", fixedDateTimeZone0.getID());
      assertEquals("+40:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 888;
      int int1 = (-3464);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -3464
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 888;
      int int1 = 0;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 888
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-3);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertNotNull(string0);
      assertEquals("-00:00:00.003", string0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone1.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone1.toString());
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 888;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.888", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.888", fixedDateTimeZone0.getID());
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertNotNull(string0);
      assertEquals("+00:00:00.888", string0);
      assertEquals("+00:00:00.888", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.888", fixedDateTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("+00:00:00.888", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.888", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.888", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.888", fixedDateTimeZone1.getID());
  }

  @Test
  public void test29()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      String string0 = fixedDateTimeZone0.toString();
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", fixedDateTimeZone1.getID());
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "b3_'bV7@_G)";
      int int0 = 60000;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("b3_'bV7@_G)", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=b3_'bV7@_G),offset=60000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(60000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("b3_'bV7@_G)", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=b3_'bV7@_G),offset=60000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(60000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:01", fixedDateTimeZone0.getID());
      assertEquals("+00:01", fixedDateTimeZone0.toString());
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("b3_'bV7@_G)", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=b3_'bV7@_G),offset=60000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(60000, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:01", fixedDateTimeZone0.getID());
      assertEquals("+00:01", fixedDateTimeZone0.toString());
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 850L;
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertNotNull(mutableInterval0);
      assertEquals(850L, mutableInterval0.getStartMillis());
      assertEquals(850L, mutableInterval0.getEndMillis());
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       int int0 = (-6);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-6,MONTH=-6,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-6,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       YearMonthDay yearMonthDay0 = YearMonthDay.fromCalendarFields((Calendar) mockGregorianCalendar0);
//       assertNotNull(yearMonthDay0);
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62373196800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=8,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=175,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       
//       DateTime dateTime0 = yearMonthDay0.toDateTimeAtCurrentTime();
//       assertNotNull(dateTime0);
//       assertEquals((-61899565043680L), dateTime0.getMillis());
//       assertEquals(3, yearMonthDay0.size());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62373196800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=8,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=24,DAY_OF_YEAR=175,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//   }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       String string0 = "GMT";
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       
//       long long0 = (-2259L);
//       String string1 = fixedDateTimeZone0.getName(long0);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertNotNull(string1);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("+00:00", string1);
//       assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//   }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("Europe/London", zoneInfo0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertNotNull(set0);
//       assertEquals(false, set0.isEmpty());
//       assertEquals(572, set0.size());
//   }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test
  public void test39() {}
//   @Test
//   public void test39()  throws Throwable  {
//       String string0 = "GMT";
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(fixedDateTimeZone0);
//       assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
//       
//       long long0 = (-2259L);
//       String string1 = fixedDateTimeZone0.getShortName(long0);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals("+00:00", string1);
//       assertEquals("Etc/GMT", fixedDateTimeZone0.toString());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("Etc/GMT", fixedDateTimeZone0.getID());
//   }

  @Test
  public void test40() {}
//   @Test
//   public void test40()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       
//       Object object0 = cachedDateTimeZone0.writeReplace();
//       assertNotNull(object0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//   }
}
