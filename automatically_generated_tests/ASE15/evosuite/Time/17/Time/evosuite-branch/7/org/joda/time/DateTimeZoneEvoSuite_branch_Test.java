/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:49:48 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.ReadableInstant;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-7L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(57722400000L, long1);
      
      boolean boolean0 = false;
      long long2 = cachedDateTimeZone0.adjustOffset(long1, boolean0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(57718800000L, long2);
  }

  @Test
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775808L);
      long long1 = cachedDateTimeZone0.adjustOffset(long0, boolean0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals((-9223372036854775808L), long1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = true;
      long long0 = fixedDateTimeZone0.adjustOffset((long) int0, boolean0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0L, long0);
  }

  @Test
  public void test03()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-31L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(57722400000L, long1);
      
      boolean boolean0 = true;
      long long2 = cachedDateTimeZone0.adjustOffset(long1, boolean0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(57722400000L, long2);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = (-3);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-31L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(57722400000L, long1);
      
      boolean boolean0 = true;
      long long2 = 12L;
      assertFalse(long2 == long1);
      
      long long3 = cachedDateTimeZone0.convertLocalToUTC(long2, boolean0, long1);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long3);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertFalse(long1 == long3);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      assertFalse(long3 == long2);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals((-3599988L), long3);
  }

  @Test
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = (-6210);
      LocalDate localDate1 = localDate0.plusMonths(int0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(localDate1);
      
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localDate1.toDateTime(localTime0, (DateTimeZone) cachedDateTimeZone0);
      assertFalse(localDate0.equals((Object)localDate1));
      assertFalse(localDate1.equals((Object)localDate0));
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertEquals((-14937622643680L), dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3, localDate1.size());
      assertNotSame(localDate0, localDate1);
      assertNotSame(localDate1, localDate0);
      assertNotNull(dateTime0);
  }

  @Test
  public void test07()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)iSOChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertNotNull(localDateTime0);
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Instant instant0 = new Instant();
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(instant0);
      
      DateTime dateTime0 = instant0.toDateTime();
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotNull(dateTime0);
      
      int int0 = (-3593);
      DateTime dateTime1 = dateTime0.plusYears(int0);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertEquals((-111991693043680L), dateTime1.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, instant0.getMillis());
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime0, dateTime1);
      assertNotNull(dateTime1);
  }

  @Test
  public void test10()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-31L);
      long long1 = cachedDateTimeZone0.nextTransition(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(57722400000L, long1);
      
      int int0 = cachedDateTimeZone0.getOffsetFromLocal(long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(3600000, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 19;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+19:00", fixedDateTimeZone0.toString());
      assertEquals("+19:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      boolean boolean0 = fixedDateTimeZone0.isStandardOffset((long) int0);
      assertEquals("+19:00", fixedDateTimeZone0.toString());
      assertEquals("+19:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertTrue(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-1L);
      long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3599999L, long1);
      
      int int0 = cachedDateTimeZone0.getOffset(long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(3600000, int0);
      
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset((long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      LocalTime localTime0 = new LocalTime((Chronology) buddhistChronology0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      DateTime dateTime0 = localDate0.toDateTime(localTime0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertNotNull(dateTime0);
      
      int int0 = cachedDateTimeZone0.getOffset((ReadableInstant) dateTime0);
      assertEquals(3, localDate0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(4, localTime0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test14() {}
//   @Test
//   public void test14()  throws Throwable  {
//       FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertNotNull(fixedDateTimeZone0);
//       
//       ReadableInstant readableInstant0 = null;
//       int int0 = fixedDateTimeZone0.getOffset(readableInstant0);
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals(0, int0);
//       
//       String string0 = fixedDateTimeZone0.getName((long) int0);
//       assertEquals("UTC", fixedDateTimeZone0.getID());
//       assertEquals(true, fixedDateTimeZone0.isFixed());
//       assertEquals("UTC", fixedDateTimeZone0.toString());
//       assertEquals("\u5354\u8ABF\u4E16\u754C\u6642\u9593", string0);
//       assertNotNull(string0);
//   }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-3);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = fixedDateTimeZone0.getName((long) int0, locale0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("-00:00:00.003", string0);
      assertNotNull(string0);
  }

  @Test
  public void test16()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      long long0 = (-42521587199985L);
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = cachedDateTimeZone0.getShortName(long0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("-00:01:15", string0);
      assertNotNull(string0);
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = 1125;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:01.125", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      int int1 = fixedDateTimeZone0.getOffset((long) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals("+00:00:01.125", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.toString());
      assertEquals(1125, int1);
      
      String string0 = fixedDateTimeZone0.getID();
      assertTrue(int0 == int1);
      assertEquals("+00:00:01.125", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.toString());
      assertEquals("+00:00:01.125", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertTrue(int0 == int1);
      assertEquals("+00:00:01.125", fixedDateTimeZone1.getID());
      assertEquals("+00:00:01.125", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.toString());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:01.125,offset=1125,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1125, simpleTimeZone0.getRawOffset());
      assertEquals("+00:00:01.125", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.toString());
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone2 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertTrue(int1 == int0);
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone0));
      assertFalse(fixedDateTimeZone2.equals((Object)fixedDateTimeZone1));
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone2));
      assertTrue(int0 == int1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=+00:00:01.125,offset=1125,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1125, simpleTimeZone0.getRawOffset());
      assertEquals("+00:00:01.125", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(true, fixedDateTimeZone2.isFixed());
      assertEquals("UTC", fixedDateTimeZone2.getID());
      assertEquals("UTC", fixedDateTimeZone2.toString());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:01.125", fixedDateTimeZone0.toString());
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone2, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone2);
      assertNotNull(fixedDateTimeZone2);
  }

  @Test
  public void test18()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      //  // Unstable assertion: assertNotNull(uTCProvider0);
      
      int int0 = (-13);
      String string0 = "3d34dH<\"V.L <";
      DateTimeZone.setProvider((Provider) uTCProvider0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(fixedDateTimeZone0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone0.toTimeZone();
      //  // Unstable assertion: assertEquals("GMT-13:00", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone1.toString());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone1.isFixed());
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone1.getID());
      //  // Unstable assertion: assertEquals("GMT-13:00", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      //  // Unstable assertion: assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      //  // Unstable assertion: assertNotNull(fixedDateTimeZone1);
      
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      //  // Unstable assertion: assertNull(dateTimeZone0);
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (long) int0);
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.getID());
      //  // Unstable assertion: assertEquals(true, fixedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("-13:00", fixedDateTimeZone0.toString());
      //  // Unstable assertion: assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      //  // Unstable assertion: assertEquals((-46800013L), long0);
  }

  @Test
  public void test19()  throws Throwable  {
      NameProvider nameProvider0 = null;
      DateTimeZone.setNameProvider(nameProvider0);
  }

  @Test
  public void test20()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test21()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      int int1 = fixedDateTimeZone0.getOffset((long) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, int1);
      
      String string0 = fixedDateTimeZone0.getID();
      assertTrue(int0 == int1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", string0);
      assertNotNull(string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = (-573);
      int int1 = 15356270;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 15356270
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-1062);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -1062
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      int int1 = fixedDateTimeZone0.getOffset((long) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(0, int1);
      
      int int2 = 13;
      assertFalse(int2 == int1);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(fixedDateTimeZone1.equals((Object)fixedDateTimeZone0));
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(fixedDateTimeZone0.equals((Object)fixedDateTimeZone1));
      assertFalse(int0 == int2);
      assertTrue(int0 == int1);
      assertEquals("+00:13", fixedDateTimeZone1.getID());
      assertEquals("+00:13", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertNotSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-3);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.003", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("-00:00:00.003", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("-00:00:00.003", fixedDateTimeZone1.getID());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.003", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", string0);
      assertNotNull(string0);
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertNotNull(fixedDateTimeZone1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
  }

  @Test
  public void test30()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "3d34dH<\"V.L <";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-13);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("-13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-13:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("-13:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-13:00", fixedDateTimeZone0.getID());
  }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertNotNull(cachedDateTimeZone0);
//       
//       CachedDateTimeZone cachedDateTimeZone1 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals("Europe/London", cachedDateTimeZone1.toString());
//       assertEquals(false, cachedDateTimeZone1.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone1.getID());
//       assertSame(cachedDateTimeZone1, cachedDateTimeZone0);
//       assertNotNull(cachedDateTimeZone1);
//   }

  @Test
  public void test33() {}
//   @Test
//   public void test33()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertNotNull(cachedDateTimeZone0);
//       
//       long long0 = (-42521587199985L);
//       String string0 = cachedDateTimeZone0.getName(long0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("-00:01:15", string0);
//       assertNotNull(string0);
//   }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(cachedDateTimeZone0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertEquals("Europe/London", zoneInfo0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(zoneInfo0);
//   }

  @Test
  public void test35()  throws Throwable  {
      Set<String> set0 = DateTimeZone.getAvailableIDs();
      assertEquals(false, set0.isEmpty());
      assertEquals(572, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      String string0 = fixedDateTimeZone0.toString();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", string0);
      assertNotNull(string0);
  }

  @Test
  public void test37()  throws Throwable  {
      ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
      assertNotNull(zoneInfoProvider0);
  }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(cachedDateTimeZone0);
//       
//       Object object0 = cachedDateTimeZone0.writeReplace();
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertNotNull(object0);
//   }
}
