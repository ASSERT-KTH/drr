/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:28:31 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.ReadablePeriod;
import org.joda.time.Weeks;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

 
public class FieldUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-2280);
      Integer integer0 = new Integer(int0);
      assertEquals((-2280), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      Object object0 = null;
      boolean boolean0 = FieldUtils.equals((Object) integer0, object0);
      assertFalse(boolean0);
      assertTrue(integer0.equals((Object)int0));
  }

  @Test
  public void test01()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      long long0 = (-871L);
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(758641, int0);
      
      Weeks weeks0 = Weeks.weeks(int0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      int[] intArray0 = ethiopicChronology0.get((ReadablePeriod) weeks0, (long) int0, (long) int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, weeks0.size());
      assertNotNull(intArray0);
      
      String string0 = null;
      boolean boolean0 = FieldUtils.equals((Object) string0, (Object) intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, weeks0.size());
  }

  @Test
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals(object0, object0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      long long0 = (-871L);
      int int0 = 10044;
      int int1 = FieldUtils.safeMultiplyToInt(long0, (long) int0);
      assertEquals((-8748324), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.halfdayOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      Weeks weeks0 = Weeks.weeks(int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      boolean boolean0 = FieldUtils.equals((Object) weeks0, (Object) dateTimeField0);
      assertFalse(boolean0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(1, weeks0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 2;
      int int1 = Integer.MIN_VALUE;
      int int2 = 1;
      int int3 = FieldUtils.getWrappedValue(int0, int1, int2);
      assertEquals(Integer.MIN_VALUE, int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-2280);
      int int1 = 476;
      Integer integer0 = new Integer(int1);
      assertEquals(476, (int)integer0);
      assertFalse(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      int int2 = FieldUtils.getWrappedValue(int1, int1, int0, (int) integer0);
      assertEquals((-1805), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 2;
      int int1 = Integer.MIN_VALUE;
      int int2 = FieldUtils.getWrappedValue(int0, int1, int0);
      assertEquals(2, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      long long0 = 1048L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(1098304, int0);
      
      int int1 = (-2380);
      assertFalse(int1 == int0);
      
      String string0 = "*~?OF2_;^v@}y/";
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1098304 for *~?OF2_;^v@}y/ must be in the range [1098304,-2380]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      long long0 = 1048L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(1098304, int0);
      
      String string0 = "*~?OF2_;^v@}y/";
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 2624;
      int int1 = (-1);
      String string0 = "|u8D3_-";
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for |u8D3_- must be in the range [2624,2624]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      int int1 = 953;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int1, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = null;
      int int0 = 0;
      FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 43;
      int int1 = (-1084);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      assertEquals("secondOfDay", dateTimeFieldType0.getName());
      assertEquals("secondOfDay", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1084 for secondOfDay must be in the range [43,-1084]
         //
      }
  }

  //@Test
  public void test13()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 65;
      // Undeclared exception!
      try {
        DateMidnight dateMidnight1 = dateMidnight0.withEra(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 65 for era must be in the range [0,1]
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      int int0 = 10044;
      DateTimeField dateTimeField0 = ethiopicChronology0.halfdayOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 94;
      int int1 = (-7);
      DateTimeField dateTimeField0 = null;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int1, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 1209600000L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1463132160000000000
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 30617280298L;
      long long1 = (-2778L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -85054804667844
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = (-9223372036854775775L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775775 * -9223372036854775775
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 1048L;
      long long1 = 0L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
      assertEquals(0, int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 177L;
      long long1 = 0L;
      int int0 = FieldUtils.safeMultiplyToInt(long1, long0);
      assertEquals(0, int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-42L);
      int int0 = 1;
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, long0);
      assertEquals((-42), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = (-871L);
      long long1 = 1L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
      assertEquals((-871), int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 9223372036854775775L;
      int int0 = (-2086);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775775 * -2086
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-1);
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 1;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 0;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = (-1);
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = 3599979L;
      int int0 = FieldUtils.safeToInt(long0);
      assertEquals(3599979, int0);
      
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiply(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 3599979 * 3599979
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = (-4L);
      long long1 = FieldUtils.safeSubtract(long0, long0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = 177L;
      long long1 = (-9223372036854775799L);
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775799 - 177
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 0;
      long long0 = FieldUtils.safeSubtract((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = (-9223372036854775799L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeAdd(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775799 + -9223372036854775799
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      long long0 = (-871L);
      long long1 = 2974L;
      int int0 = 10044;
      long long2 = ethiopicChronology0.add(long0, long1, int0);
      assertEquals(29869985L, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 0;
      long long0 = FieldUtils.safeAdd((long) int0, (long) int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = (-513);
      int int1 = 657;
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertEquals(144, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = 2147483592;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeAdd(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483592 + 2147483592
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = (-1320);
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      int int1 = FieldUtils.safeNegate(int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = (-2280);
      Integer integer0 = new Integer(int0);
      assertEquals((-2280), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue((int) integer0, (int) integer0, int0, (int) integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
