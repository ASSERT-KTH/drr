/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:49:15 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.field.FieldUtils;
import org.junit.runner.RunWith;

 
public class FieldUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "o";
      Integer integer0 = null;
      boolean boolean0 = FieldUtils.equals((Object) string0, (Object) integer0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      Object object0 = null;
      Object object1 = new Object();
      assertNotNull(object1);
      
      boolean boolean0 = FieldUtils.equals(object0, object1);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "orY.joda.time.chrono.BasicChronoloMy$HalMdayField";
      boolean boolean0 = FieldUtils.equals((Object) string0, (Object) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      long long0 = 9999999999979L;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals((Object) long0, object0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      int int1 = 645;
      int int2 = 649;
      int int3 = FieldUtils.getWrappedValue(int0, int1, int2);
      assertEquals(645, int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-3855);
      int int2 = (-2565);
      int int3 = FieldUtils.getWrappedValue(int1, int2, int0);
      assertEquals((-1290), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "S";
      int int0 = 87;
      int int1 = (-2525);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 87 for S must be in the range [-2525,-2525]
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      int int0 = 106;
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      int int0 = 12;
      int int1 = 39;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 12 for null must be in the range [39,12]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = (-407);
      int int1 = 20;
      DateTime dateTime0 = null;
      try {
        dateTime0 = new DateTime(int0, int1, int1, int1, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -407 for secondOfMinute must be in the range [0,59]
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = (-1078);
      int int1 = 649;
      int int2 = FieldUtils.getWrappedValue(int0, int0, int1);
      assertEquals((-1078), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int1, int2, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 649 for secondOfMinute must be in the range [-1078,-1078]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = 12740632;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      int int1 = (-1052);
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 12740632 for hourOfDay must be in the range [-1052,-1052]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 12740632;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      FieldUtils.verifyValueBounds(dateTimeField0, int0, int0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("hourOfDay", dateTimeField0.getName());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = 106;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals(212, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeField dateTimeField0 = iSOChronology0.year();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("year", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 106 for year must be in the range [212,212]
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = (-4294967340L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeToInt(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -4294967340
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-9223372036854775726L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775726 * -9223372036854775726
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-9223372036854775763L);
      long long1 = 0L;
      long long2 = FieldUtils.safeMultiply(long0, long1);
      assertEquals(0L, long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = 0L;
      int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertEquals(0, int0);
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 9999999999979L;
      long long1 = 1L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 9999999999979
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = (-18L);
      long long1 = 1L;
      long long2 = FieldUtils.safeMultiply(long0, long1);
      assertEquals((-18L), long2);
      assertTrue(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-962);
      int int1 = FieldUtils.safeNegate(int0);
      assertEquals(962, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = (-9223372036854775808L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * 962
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-1);
      int int1 = FieldUtils.safeMultiplyToInt((long) int0, (long) int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = FieldUtils.safeMultiply((long) int0, int1);
      assertEquals((-1L), long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test24()  throws Throwable  {
      long long0 = 4L;
      int int0 = 0;
      long long1 = FieldUtils.safeMultiply(long0, int0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-3855);
      int int2 = FieldUtils.getWrappedValue(int1, int1, int0);
      assertEquals((-3855), int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      long long0 = FieldUtils.safeMultiply((long) int1, int2);
      assertEquals(14861025L, long0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = (-1);
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-2147483626);
      int int1 = FieldUtils.safeToInt((long) int0);
      assertEquals((-2147483626), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483626 * -2147483626
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 106;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertEquals(212, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      int int2 = FieldUtils.safeMultiply(int1, int1);
      assertEquals(44944, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 236548155;
      int int1 = (-780);
      // Undeclared exception!
      try {
        int int2 = FieldUtils.safeMultiply(int0, int1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 236548155 * -780
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = (-9223372036854775743L);
      long long1 = 1218L;
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775743 - 1218
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = (-9223372036854775743L);
      long long1 = FieldUtils.safeSubtract(long0, long0);
      assertEquals(0L, long1);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 106;
      int int1 = (-4118);
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertEquals((-4012), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      long long0 = FieldUtils.safeSubtract((long) int1, (long) int2);
      assertEquals((-106L), long0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test33()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-12219292800050L);
      long long2 = FieldUtils.safeAdd(long0, long1);
      assertEquals((-12219292800050L), long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = (-9223372036854775763L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeAdd(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775763 + -9223372036854775763
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = 4L;
      long long1 = FieldUtils.safeAdd(long0, long0);
      assertEquals(8L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 2147483606;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeAdd(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483606 + 2147483606
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = (-1);
      int int1 = (-3855);
      int int2 = FieldUtils.getWrappedValue(int1, int1, int0);
      assertEquals((-3855), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      
      // Undeclared exception!
      try {
        int int3 = FieldUtils.getWrappedValue(int0, int0, int2, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
