/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:38:53 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.field.FieldUtils;
import org.joda.time.field.StrictDateTimeField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class FieldUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.dayOfYear();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      boolean boolean0 = FieldUtils.equals((Object) dateTimeField0, (Object) fixedDateTimeZone0);
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = FieldUtils.equals((Object) dateTimeField0, object0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = FieldUtils.equals((Object) int0, (Object) int0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      boolean boolean0 = FieldUtils.equals((Object) cachedDateTimeZone0, (Object) timeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      int int1 = (-16);
      int int2 = (-4981);
      int int3 = FieldUtils.getWrappedValue(int0, int1, int2, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-16), int3);
      
      int int4 = FieldUtils.getWrappedValue(int2, int1, int3, int0);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int1 == int3);
      assertTrue(int1 == int4);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertEquals((-16), int4);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 0;
      int int1 = (-4981);
      String string0 = "Types array must not be null";
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for Types array must not be null must be in the range [-4981,-4981]
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "6R,";
      int int0 = (-1914);
      FieldUtils.verifyValueBounds(string0, int0, int0, int0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "MaR`E";
      int int0 = 3600016;
      int int1 = FieldUtils.safeAdd(int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(7200032, int1);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(string0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 3600016 for MaR`E must be in the range [7200032,3600016]
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      long long0 = 0L;
      int int0 = 83;
      int int1 = FieldUtils.safeMultiplyToInt(long0, long0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 83 for yearOfEra must be in the range [83,0]
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 83;
      FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int0, int0);
      assertEquals("yearOfEra", dateTimeFieldType0.toString());
      assertEquals("yearOfEra", dateTimeFieldType0.getName());
  }

  @Test
  public void test10()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = 653;
      int int1 = 2147483642;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeFieldType0, int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 653 for secondOfMinute must be in the range [2147483642,653]
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.dayOfYear();
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals("dayOfYear", strictDateTimeField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(strictDateTimeField0);
      
      int int0 = 1993;
      int int1 = 6;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds((DateTimeField) strictDateTimeField0, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1993 for dayOfYear must be in the range [1993,6]
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.dayOfYear();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(dateTimeField0);
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals("dayOfYear", strictDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(strictDateTimeField0);
      
      int int0 = 1993;
      FieldUtils.verifyValueBounds((DateTimeField) strictDateTimeField0, int0, int0, int0);
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals("dayOfYear", strictDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("dayOfYear", dateTimeField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      int int0 = (-3523);
      int int1 = 86399999;
      // Undeclared exception!
      try {
        FieldUtils.verifyValueBounds(dateTimeField0, int0, int1, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      long long0 = (-1L);
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -9223372036854775807
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      long long1 = (-1L);
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = 100000000000000010L;
      // Undeclared exception!
      try {
        int int0 = FieldUtils.safeMultiplyToInt(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 100000000000000010 * 100000000000000010
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = (-1928L);
      long long1 = FieldUtils.safeAdd(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3856L), long1);
      
      int int0 = 0;
      long long2 = FieldUtils.safeMultiply(long0, int0);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(0L, long2);
      
      int int1 = FieldUtils.safeMultiplyToInt(long1, long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(int0 == int1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(0, int1);
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = 2147483645;
      int int1 = (-3538);
      int int2 = FieldUtils.getWrappedValue(int0, int1, int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(2147483645, int2);
      
      // Undeclared exception!
      try {
        int int3 = FieldUtils.safeMultiplyToInt((long) int2, (long) int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 4611686005542486025
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      long long0 = 1L;
      int int0 = 3600016;
      long long1 = FieldUtils.safeMultiply(long0, (long) int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(3600016L, long1);
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = 1L;
      long long1 = FieldUtils.safeMultiply(long0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1L, long1);
  }

  @Test
  public void test21()  throws Throwable  {
      long long0 = 9223372036854775768L;
      int int0 = 512;
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 9223372036854775768 * 512
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      long long0 = 347L;
      int int0 = (-1);
      long long1 = FieldUtils.safeMultiply(long0, int0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-347L), long1);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = (-734);
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(538756L, long0);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 1;
      long long0 = FieldUtils.safeMultiply((long) int0, int0);
      assertEquals(1L, long0);
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      int int0 = (-1);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeMultiply(long0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -9223372036854775808 * -1
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 292272992;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeMultiply(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 292272992 * 292272992
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-1196);
      int int1 = 0;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Offset is too large
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      long long0 = (-9223372036854775736L);
      long long1 = 2288L;
      // Undeclared exception!
      try {
        long long2 = FieldUtils.safeSubtract(long1, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2288 - -9223372036854775736
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      long long0 = (-1928L);
      long long1 = 4369L;
      long long2 = FieldUtils.safeAdd(long0, long1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(2441L, long2);
      
      long long3 = 0L;
      assertFalse(long3 == long2);
      
      long long4 = FieldUtils.safeSubtract(long3, long2);
      assertFalse(long3 == long4);
      assertFalse(long3 == long1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long0);
      assertFalse(long2 == long3);
      assertFalse(long2 == long0);
      assertFalse(long2 == long4);
      assertFalse(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long3);
      assertFalse(long0 == long2);
      assertFalse(long0 == long4);
      assertFalse(long4 == long0);
      assertFalse(long4 == long2);
      assertFalse(long4 == long3);
      assertFalse(long4 == long1);
      assertFalse(long1 == long0);
      assertFalse(long1 == long4);
      assertFalse(long1 == long3);
      assertFalse(long1 == long2);
      assertEquals((-2441L), long4);
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = (-1L);
      long long1 = 1136L;
      long long2 = FieldUtils.safeSubtract(long0, long1);
      assertFalse(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      assertEquals((-1137L), long2);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = (-9223372036854775788L);
      // Undeclared exception!
      try {
        long long1 = FieldUtils.safeAdd(long0, long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -9223372036854775788 + -9223372036854775788
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 0;
      int int1 = (-16);
      int int2 = FieldUtils.safeAdd(int0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-16), int2);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-2147483571);
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeAdd(int0, int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483571 + -2147483571
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.safeNegate(int0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = (-734);
      int int1 = FieldUtils.safeNegate(int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(734, int1);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 0;
      // Undeclared exception!
      try {
        int int1 = FieldUtils.getWrappedValue(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
      }
  }
}
