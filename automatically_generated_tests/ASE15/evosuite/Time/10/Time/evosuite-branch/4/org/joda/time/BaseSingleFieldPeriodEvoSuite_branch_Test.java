/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:38 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BaseSingleFieldPeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int0 = 14;
      Hours hours1 = hours0.minus(int0);
      assertNotNull(hours1);
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(1, hours0.size());
      assertEquals(1, hours1.size());
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      
      int int1 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
      assertFalse(int0 == int1);
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(int1 == int0);
      assertEquals(1, hours0.size());
      assertEquals(1, hours1.size());
      assertEquals((-1), int1);
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
  }

  @Test
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      int int0 = (-5);
      Minutes minutes1 = minutes0.dividedBy(int0);
      assertNotNull(minutes1);
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
      
      int int1 = minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(minutes1.equals((Object)minutes0));
      assertEquals(1, minutes0.size());
      assertEquals(1, minutes1.size());
      assertEquals(1, int1);
      assertNotSame(minutes0, minutes1);
      assertNotSame(minutes1, minutes0);
  }

  @Test
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Years years0 = Years.ONE;
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try {
        int int0 = years0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Years cannot be compared to class org.joda.time.Hours
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 0;
      Seconds seconds0 = Seconds.seconds(int0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      
      int int1 = (-1014);
      Seconds seconds1 = seconds0.plus(int1);
      assertNotNull(seconds1);
      assertFalse(seconds1.equals((Object)seconds0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(seconds0.equals((Object)seconds1));
      assertEquals(1, seconds1.size());
      assertEquals(1, seconds0.size());
      assertNotSame(seconds1, seconds0);
      assertNotSame(seconds0, seconds1);
      
      Seconds seconds2 = seconds0.plus(seconds1);
      assertNotNull(seconds2);
      assertTrue(seconds1.equals((Object)seconds2));
      assertFalse(seconds1.equals((Object)seconds0));
      assertFalse(int0 == int1);
      assertTrue(seconds2.equals((Object)seconds1));
      assertFalse(seconds2.equals((Object)seconds0));
      assertFalse(int1 == int0);
      assertFalse(seconds0.equals((Object)seconds2));
      assertFalse(seconds0.equals((Object)seconds1));
      assertEquals(1, seconds1.size());
      assertEquals(1, seconds2.size());
      assertEquals(1, seconds0.size());
      assertNotSame(seconds1, seconds2);
      assertNotSame(seconds1, seconds0);
      assertNotSame(seconds2, seconds1);
      assertNotSame(seconds2, seconds0);
      assertNotSame(seconds0, seconds2);
      assertNotSame(seconds0, seconds1);
      
      boolean boolean0 = seconds2.equals((Object) seconds1);
      assertTrue(seconds1.equals((Object)seconds2));
      assertFalse(seconds1.equals((Object)seconds0));
      assertFalse(int0 == int1);
      assertTrue(seconds2.equals((Object)seconds1));
      assertFalse(seconds2.equals((Object)seconds0));
      assertFalse(int1 == int0);
      assertFalse(seconds0.equals((Object)seconds2));
      assertFalse(seconds0.equals((Object)seconds1));
      assertEquals(1, seconds1.size());
      assertEquals(1, seconds2.size());
      assertEquals(1, seconds0.size());
      assertTrue(boolean0);
      assertNotSame(seconds1, seconds2);
      assertNotSame(seconds1, seconds0);
      assertNotSame(seconds2, seconds1);
      assertNotSame(seconds2, seconds0);
      assertNotSame(seconds0, seconds2);
      assertNotSame(seconds0, seconds1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = (-564);
      Minutes minutes0 = Minutes.minutes(int0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Minutes minutes1 = minutes0.plus(int0);
      assertNotNull(minutes1);
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(minutes0.equals((Object)minutes1));
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
      
      boolean boolean0 = minutes1.equals((Object) minutes0);
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(minutes0.equals((Object)minutes1));
      assertEquals(1, minutes1.size());
      assertEquals(1, minutes0.size());
      assertFalse(boolean0);
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
  }

  @Test
  public void test06()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Hours hours0 = Hours.SIX;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      boolean boolean0 = hours0.equals((Object) months0);
      assertEquals(1, hours0.size());
      assertEquals(1, months0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = null;
      Days days0 = Days.MIN_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      boolean boolean0 = days0.equals((Object) string0);
      assertEquals(1, days0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = (-564);
      Minutes minutes0 = Minutes.minutes(int0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      int int1 = 0;
      DurationFieldType durationFieldType0 = minutes0.getFieldType(int1);
      assertNotNull(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Months months0 = Months.ZERO;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      DurationFieldType durationFieldType0 = null;
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertEquals(1, months0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      long long0 = (-2155L);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      Interval interval0 = new Interval(long0, long0, (Chronology) iSOChronology0);
      assertNotNull(interval0);
      assertEquals((-2155L), interval0.getEndMillis());
      assertEquals((-2155L), interval0.getStartMillis());
      
      Weeks weeks0 = Weeks.weeksIn((ReadableInterval) interval0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals((-2155L), interval0.getEndMillis());
      assertEquals((-2155L), interval0.getStartMillis());
      
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals((-2155L), interval0.getEndMillis());
      assertEquals((-2155L), interval0.getStartMillis());
      
      int int0 = weeks0.get(durationFieldType0);
      assertEquals("weeks", durationFieldType0.toString());
      assertEquals("weeks", durationFieldType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals((-2155L), interval0.getEndMillis());
      assertEquals((-2155L), interval0.getStartMillis());
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      Minutes minutes0 = Minutes.parseMinutes(string0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Days days0 = Days.MIN_VALUE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      DurationFieldType durationFieldType0 = days0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1, days0.size());
      
      int int0 = minutes0.get(durationFieldType0);
      assertEquals("days", durationFieldType0.toString());
      assertEquals("days", durationFieldType0.getName());
      assertEquals(1, days0.size());
      assertEquals(1, minutes0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      int int0 = 87;
      // Undeclared exception!
      try {
        int int1 = weeks0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 87
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = (-1014);
      Months months0 = Months.TWELVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = months0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1014
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.standardHoursIn((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P7M
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Days days0 = Days.standardDaysIn((ReadablePeriod) hours0);
      assertNotNull(days0);
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Weeks weeks0 = Weeks.standardWeeksIn(readablePeriod0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
  }

  @Test
  public void test17()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) years0);
      assertNotNull(seconds0);
      assertEquals(1, years0.size());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1, seconds0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = (-2548L);
      int int0 = 263;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+263:00", fixedDateTimeZone0.toString());
      assertEquals("+263:00", fixedDateTimeZone0.getID());
      
      LocalTime localTime0 = new LocalTime((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localTime0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+263:00", fixedDateTimeZone0.toString());
      assertEquals("+263:00", fixedDateTimeZone0.getID());
      assertEquals(4, localTime0.size());
      
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Chronology chronology0 = null;
      YearMonth yearMonth0 = new YearMonth(chronology0);
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertNotNull(months0);
      assertEquals(2, yearMonth0.size());
      assertEquals(1, months0.size());
  }

  @Test
  public void test20()  throws Throwable  {
      long long0 = (-2401L);
      Chronology chronology0 = null;
      TimeOfDay timeOfDay0 = new TimeOfDay(long0, chronology0);
      assertNotNull(timeOfDay0);
      assertEquals(4, timeOfDay0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Years years0 = Years.yearsBetween((ReadablePartial) timeOfDay0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  //@Test
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  //@Test
  public void test22()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = null;
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      Days days0 = Days.days(int0);
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, days0.size());
  }

  @Test
  public void test26()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      
      Period period0 = weeks0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
  }

  @Test
  public void test27() {}
//   @Test
//   public void test27()  throws Throwable  {
//       Days days0 = Days.MIN_VALUE;
//       assertNotNull(days0);
//       assertEquals(1, days0.size());
//       
//       int int0 = days0.hashCode();
//       assertEquals(1, days0.size());
//       assertEquals((-2147471254), int0);
//   }
}
