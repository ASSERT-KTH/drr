/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:57:44 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Calendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.TimeOfDay;
import org.joda.time.Weeks;
import org.joda.time.YearMonthDay;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BaseSingleFieldPeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Hours hours1 = hours0.minus(hours0);
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(1, hours0.size());
      assertEquals(1, hours1.size());
      assertNotNull(hours1);
      
      int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(1, hours0.size());
      assertEquals(1, hours1.size());
      assertEquals((-1), int0);
  }

  @Test
  public void test01()  throws Throwable  {
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertNotNull(seconds0);
      
      Seconds seconds1 = Seconds.MIN_VALUE;
      assertNotSame(seconds1, seconds0);
      assertFalse(seconds1.equals((Object)seconds0));
      assertEquals(1, seconds1.size());
      assertNotNull(seconds1);
      
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(seconds1.equals((Object)seconds0));
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(1, seconds1.size());
      assertEquals(1, int0);
  }

  @Test
  public void test02() {}
//   @Test
//   public void test02()  throws Throwable  {
//       Days days0 = Days.SEVEN;
//       assertEquals(1, days0.size());
//       assertNotNull(days0);
//       
//       int int0 = days0.hashCode();
//       assertEquals(1, days0.size());
//       assertEquals(12583, int0);
//       
//       Hours hours0 = Hours.hours(int0);
//       assertEquals(1, days0.size());
//       assertEquals(1, hours0.size());
//       assertNotNull(hours0);
//       
//       // Undeclared exception!
//       try {
//         int int1 = days0.compareTo((BaseSingleFieldPeriod) hours0);
//         fail("Expecting exception: ClassCastException");
//       
//       } catch(ClassCastException e) {
//          //
//          // class org.joda.time.Days cannot be compared to class org.joda.time.Hours
//          //
//       }
//   }

  @Test
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertNotNull(seconds0);
      
      Seconds seconds1 = Seconds.standardSecondsIn((ReadablePeriod) hours0);
      assertNotSame(seconds1, seconds0);
      assertTrue(seconds1.equals((Object)seconds0));
      assertEquals(1, hours0.size());
      assertEquals(1, seconds1.size());
      assertNotNull(seconds1);
      
      boolean boolean0 = seconds0.equals((Object) seconds1);
      assertNotSame(seconds0, seconds1);
      assertNotSame(seconds1, seconds0);
      assertTrue(seconds0.equals((Object)seconds1));
      assertTrue(seconds1.equals((Object)seconds0));
      assertEquals(1, seconds0.size());
      assertEquals(1, hours0.size());
      assertEquals(1, seconds1.size());
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, int0);
      
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Months months1 = Months.months(int0);
      assertNotSame(months1, months0);
      assertFalse(months1.equals((Object)months0));
      assertEquals(1, months1.size());
      assertEquals(1, hours0.size());
      assertNotNull(months1);
      
      boolean boolean0 = months0.equals((Object) months1);
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
      assertEquals(1, months1.size());
      assertEquals(1, hours0.size());
      assertEquals(1, months0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      Chronology chronology0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(chronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Interval interval0 = yearMonthDay0.toInterval();
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(interval0);
      
      Days days0 = Days.daysIn((ReadableInterval) interval0);
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      boolean boolean0 = days0.equals((Object) yearMonthDay0);
      assertEquals(1392336000000L, interval0.getStartMillis());
      assertEquals(1392422400000L, interval0.getEndMillis());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1, days0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Months months0 = Months.SEVEN;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      Days days0 = Days.SEVEN;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      boolean boolean0 = months0.equals((Object) seconds0);
      assertEquals(1, days0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, months0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertEquals(1, hours0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, seconds0.size());
      assertNotNull(durationFieldType0);
      
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertEquals(1, hours0.size());
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, seconds0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertNotNull(durationFieldType0);
      
      Months months0 = Months.TWO;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, weeks0.size());
      assertEquals(1, minutes0.size());
      assertEquals(1, months0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      Minutes minutes0 = weeks0.toStandardMinutes();
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(minutes0);
      
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertNotNull(durationFieldType0);
      
      int int0 = minutes0.get(durationFieldType0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(1, weeks0.size());
      assertEquals(10080, int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Years years0 = Years.ZERO;
      assertEquals(1, years0.size());
      assertNotNull(years0);
      
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, years0.size());
      assertNotNull(durationFieldType0);
      
      int int0 = hours0.get(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertEquals(1, years0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int int0 = (-65);
      // Undeclared exception!
      try {
        int int1 = hours0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -65
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      int int0 = 354;
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = hours0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 354
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      assertEquals(1, months0.size());
      assertNotNull(months0);
      
      MutablePeriod mutablePeriod0 = months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertNotNull(mutablePeriod0);
      
      // Undeclared exception!
      try {
        Days days0 = Days.standardDaysIn((ReadablePeriod) mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-2147483648M
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Weeks weeks0 = Weeks.standardWeeksIn(readablePeriod0);
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 0;
      Seconds seconds0 = Seconds.seconds(int0);
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      Partial partial0 = new Partial(dateTimeFieldType0, int0, (Chronology) ethiopicChronology0);
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(1, partial0.size());
      assertNotNull(partial0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay((Chronology) ethiopicChronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      DateTimeFieldType dateTimeFieldType1 = yearMonthDay0.getFieldType(int0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(dateTimeFieldType1);
      
      Partial partial1 = partial0.with(dateTimeFieldType1, int0);
      assertNotSame(partial1, partial0);
      assertNotSame(dateTimeFieldType1, dateTimeFieldType0);
      assertNotSame(dateTimeFieldType0, dateTimeFieldType1);
      assertNotSame(partial0, partial1);
      assertFalse(partial1.equals((Object)partial0));
      assertFalse(dateTimeFieldType1.equals((Object)dateTimeFieldType0));
      assertFalse(dateTimeFieldType0.equals((Object)dateTimeFieldType1));
      assertFalse(partial0.equals((Object)partial1));
      assertEquals(2, partial1.size());
      assertEquals("year", dateTimeFieldType1.getName());
      assertEquals("year", dateTimeFieldType1.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.toString());
      assertEquals("secondOfMinute", dateTimeFieldType0.getName());
      assertEquals(3, yearMonthDay0.size());
      assertEquals(1, partial0.size());
      assertNotNull(partial1);
      
      // Undeclared exception!
      try {
        int int1 = BaseSingleFieldPeriod.between(partial1, partial1, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = 17;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=17,MONTH=17,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=17,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=17,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(mockGregorianCalendar0);
      
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields((Calendar) mockGregorianCalendar0);
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61584820980000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=18,MONTH=5,WEEK_OF_YEAR=24,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=168,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(localDateTime0);
      
      LocalTime localTime0 = localDateTime0.toLocalTime();
      assertEquals(4, localTime0.size());
      assertEquals(4, localDateTime0.size());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61584820980000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=18,MONTH=5,WEEK_OF_YEAR=24,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=168,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=17,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertNotNull(localTime0);
      
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 2020L;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LocalTime localTime0 = new LocalTime(long0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(4, localTime0.size());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(localTime0);
      
      YearMonthDay yearMonthDay0 = new YearMonthDay(long0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) yearMonthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      long long0 = 1673L;
      TimeOfDay timeOfDay0 = TimeOfDay.fromMillisOfDay(long0);
      assertEquals(4, timeOfDay0.size());
      assertNotNull(timeOfDay0);
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween((ReadablePartial) timeOfDay0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      Chronology chronology0 = null;
      YearMonthDay yearMonthDay0 = new YearMonthDay(chronology0);
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(yearMonthDay0);
      
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonthDay0, (ReadablePartial) yearMonthDay0);
      assertEquals(1, years0.size());
      assertEquals(3, yearMonthDay0.size());
      assertNotNull(years0);
  }

  @Test
  public void test20()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) mutableDateTime0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Seconds seconds0 = Seconds.secondsBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      Period period0 = hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertNotNull(period0);
  }
}
