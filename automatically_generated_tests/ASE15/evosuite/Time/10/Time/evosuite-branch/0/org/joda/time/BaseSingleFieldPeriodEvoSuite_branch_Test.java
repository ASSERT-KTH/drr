/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:36:48 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BaseSingleFieldPeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) hours0);
      assertNotNull(weeks0);
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      
      Weeks weeks1 = Weeks.ONE;
      assertNotNull(weeks1);
      assertEquals(1, weeks1.size());
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotSame(weeks1, weeks0);
      
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks1);
      assertEquals(1, hours0.size());
      assertEquals(1, weeks1.size());
      assertEquals(1, weeks0.size());
      assertFalse(weeks1.equals((Object)weeks0));
      assertFalse(weeks0.equals((Object)weeks1));
      assertNotSame(weeks1, weeks0);
      assertNotSame(weeks0, weeks1);
      assertEquals((-1), int0);
  }

  @Test
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) hours0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
      
      Weeks weeks1 = Weeks.ONE;
      assertNotNull(weeks1);
      assertEquals(1, weeks1.size());
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotSame(weeks1, weeks0);
      
      int int0 = weeks1.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks1.size());
      assertEquals(1, hours0.size());
      assertFalse(weeks0.equals((Object)weeks1));
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotSame(weeks0, weeks1);
      assertNotSame(weeks1, weeks0);
      assertEquals(1, int0);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 20;
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Days days0 = Days.standardDaysIn((ReadablePeriod) weeks0);
      assertNotNull(days0);
      assertEquals(1, weeks0.size());
      assertEquals(1, days0.size());
      
      // Undeclared exception!
      try {
        int int1 = weeks0.compareTo((BaseSingleFieldPeriod) days0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Days
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) hours0);
      assertNotNull(weeks0);
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(1, hours0.size());
      assertEquals(1, weeks0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = 2980;
      Hours hours0 = Hours.TWO;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Hours hours1 = hours0.minus(int0);
      assertNotNull(hours1);
      assertEquals(1, hours0.size());
      assertEquals(1, hours1.size());
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      
      Seconds seconds0 = hours1.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours1.size());
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      
      Weeks weeks0 = seconds0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, hours1.size());
      assertEquals(1, weeks0.size());
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      
      Weeks weeks1 = Weeks.standardWeeksIn((ReadablePeriod) seconds0);
      assertNotNull(weeks1);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks1.size());
      assertEquals(1, hours1.size());
      assertFalse(hours0.equals((Object)hours1));
      assertTrue(weeks1.equals((Object)weeks0));
      assertFalse(hours1.equals((Object)hours0));
      assertNotSame(hours0, hours1);
      assertNotSame(weeks1, weeks0);
      assertNotSame(hours1, hours0);
      
      boolean boolean0 = weeks0.equals((Object) weeks1);
      assertEquals(1, hours0.size());
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks1.size());
      assertEquals(1, hours1.size());
      assertEquals(1, weeks0.size());
      assertFalse(hours0.equals((Object)hours1));
      assertTrue(weeks1.equals((Object)weeks0));
      assertFalse(hours1.equals((Object)hours0));
      assertTrue(weeks0.equals((Object)weeks1));
      assertNotSame(hours0, hours1);
      assertNotSame(weeks1, weeks0);
      assertNotSame(hours1, hours0);
      assertNotSame(weeks0, weeks1);
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = 20;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Period period0 = Period.hours(int0);
      assertNotNull(period0);
      
      Weeks weeks0 = period0.toStandardWeeks();
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Days days0 = Days.standardDaysIn((ReadablePeriod) weeks0);
      assertNotNull(days0);
      assertEquals(1, weeks0.size());
      assertEquals(1, days0.size());
      
      boolean boolean0 = years0.equals((Object) days0);
      assertEquals(1, weeks0.size());
      assertEquals(1, days0.size());
      assertEquals(1, years0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Object object0 = null;
      boolean boolean0 = hours0.equals(object0);
      assertEquals(1, hours0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) hours0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
      
      Weeks weeks1 = Weeks.ONE;
      assertNotNull(weeks1);
      assertEquals(1, weeks1.size());
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotSame(weeks1, weeks0);
      
      boolean boolean0 = weeks0.equals((Object) weeks1);
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks1.size());
      assertEquals(1, hours0.size());
      assertFalse(weeks0.equals((Object)weeks1));
      assertFalse(weeks1.equals((Object)weeks0));
      assertNotSame(weeks0, weeks1);
      assertNotSame(weeks1, weeks0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, hours0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 20;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      Months months0 = Months.THREE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, months0.size());
      
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertEquals("months", durationFieldType0.toString());
      assertEquals("months", durationFieldType0.getName());
      assertEquals(1, years0.size());
      assertEquals(1, months0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      assertNotNull(durationFieldType0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      
      int int0 = minutes0.get(durationFieldType0);
      assertEquals("minutes", durationFieldType0.toString());
      assertEquals("minutes", durationFieldType0.getName());
      assertEquals(1, minutes0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test11()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      assertNotNull(durationFieldType0);
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      
      Weeks weeks0 = Weeks.ZERO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) weeks0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(1, seconds0.size());
      assertEquals(1, weeks0.size());
      assertEquals("years", durationFieldType0.getName());
      assertEquals("years", durationFieldType0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test12()  throws Throwable  {
      Chronology chronology0 = null;
      MonthDay monthDay0 = new MonthDay((Object) chronology0, chronology0);
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      int int0 = (-1891);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      assertNotNull(seconds0);
      assertEquals(2, monthDay0.size());
      assertEquals(1, seconds0.size());
      
      // Undeclared exception!
      try {
        int int1 = seconds0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1891
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      int int0 = months0.size();
      assertEquals(1, months0.size());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = months0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 2980;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P2980Y
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      Hours hours0 = null;
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) hours0);
      assertNotNull(minutes0);
      assertEquals(1, minutes0.size());
  }

  @Test
  public void test16()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = (-39);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.039", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.039", fixedDateTimeZone0.toString());
      
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.039", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.039", fixedDateTimeZone0.toString());
      
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      assertNotNull(monthDay0);
      assertEquals(2, monthDay0.size());
      
      LocalTime localTime0 = new LocalTime();
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Years years0 = Years.yearsBetween((ReadablePartial) localDate0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  //@Test
  public void test20()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      ReadableInstant readableInstant0 = null;
      DateTime dateTime0 = yearMonth0.toDateTime(readableInstant0);
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(2, yearMonth0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      assertNotNull(mutableInterval0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      
      Months months0 = Months.monthsIn((ReadableInterval) mutableInterval0);
      assertNotNull(months0);
      assertEquals(0L, mutableInterval0.getEndMillis());
      assertEquals(0L, mutableInterval0.getStartMillis());
      assertEquals(1, months0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 20;
      Years years0 = Years.years(int0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = years0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, years0.size());
  }

  @Test
  public void test24()  throws Throwable  {
      Months months0 = Months.FIVE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Period period0 = months0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, months0.size());
  }

  @Test
  public void test25() {}
//   @Test
//   public void test25()  throws Throwable  {
//       Hours hours0 = Hours.THREE;
//       assertNotNull(hours0);
//       assertEquals(1, hours0.size());
//       
//       Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) hours0);
//       assertNotNull(weeks0);
//       assertEquals(1, weeks0.size());
//       assertEquals(1, hours0.size());
//       
//       int int0 = weeks0.hashCode();
//       assertEquals(1, weeks0.size());
//       assertEquals(1, hours0.size());
//       assertEquals(12394, int0);
//   }
}
