/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:08:11 GMT 2014
 */

package org.joda.time.base;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class BaseSingleFieldPeriodEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = (-2244);
      Hours hours0 = Hours.hours(int0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Hours hours1 = hours0.minus(int0);
      assertNotNull(hours1);
      assertEquals(1, hours0.size());
      assertEquals(1, hours1.size());
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(hours1.equals((Object)hours0));
      
      int int1 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals((-1), int1);
      assertEquals(1, hours0.size());
      assertEquals(1, hours1.size());
      assertNotSame(hours0, hours1);
      assertNotSame(hours1, hours0);
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(int1 == int0);
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(int0 == int1);
  }

  @Test
  public void test01()  throws Throwable  {
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      Days days1 = Days.SIX;
      assertNotNull(days1);
      assertEquals(1, days1.size());
      assertNotSame(days1, days0);
      assertFalse(days1.equals((Object)days0));
      
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
      assertEquals(1, days1.size());
      assertEquals(1, days0.size());
      assertNotSame(days1, days0);
      assertNotSame(days0, days1);
      assertFalse(days1.equals((Object)days0));
      assertFalse(days0.equals((Object)days1));
  }

  @Test
  public void test02()  throws Throwable  {
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(0, int0);
      assertEquals(1, days0.size());
      
      Seconds seconds0 = Seconds.seconds(int0);
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      
      // Undeclared exception!
      try {
        int int1 = seconds0.compareTo((BaseSingleFieldPeriod) days0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Days
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      Months months0 = Months.NINE;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      Months months1 = Months.SIX;
      assertNotNull(months1);
      assertEquals(1, months1.size());
      assertNotSame(months1, months0);
      assertFalse(months1.equals((Object)months0));
      
      boolean boolean0 = months0.equals((Object) months1);
      assertFalse(boolean0);
      assertEquals(1, months1.size());
      assertEquals(1, months0.size());
      assertNotSame(months1, months0);
      assertNotSame(months0, months1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(months0.equals((Object)months1));
  }

  @Test
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      
      Minutes minutes1 = Minutes.standardMinutesIn((ReadablePeriod) hours0);
      assertNotNull(minutes1);
      assertEquals(1, minutes1.size());
      assertEquals(1, hours0.size());
      assertNotSame(minutes1, minutes0);
      assertTrue(minutes1.equals((Object)minutes0));
      
      boolean boolean0 = minutes0.equals((Object) minutes1);
      assertTrue(boolean0);
      assertEquals(1, minutes1.size());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      assertNotSame(minutes1, minutes0);
      assertNotSame(minutes0, minutes1);
      assertTrue(minutes1.equals((Object)minutes0));
      assertTrue(minutes0.equals((Object)minutes1));
  }

  @Test
  public void test05()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Months months0 = Months.SIX;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      boolean boolean0 = months0.equals((Object) readablePeriod0);
      assertFalse(boolean0);
      assertEquals(1, months0.size());
  }

  @Test
  public void test06()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = (-287);
      int int1 = localTime0.getSecondOfMinute();
      assertEquals(0, int1);
      assertEquals(4, localTime0.size());
      assertFalse(int1 == int0);
      
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(years0);
      assertEquals(4, localTime0.size());
      assertEquals(1, years0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) int0, (long) int1);
      assertNotNull(mutablePeriod0);
      assertEquals(4, localTime0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      boolean boolean0 = years0.equals((Object) mutablePeriod0);
      assertFalse(boolean0);
      assertEquals(4, localTime0.size());
      assertEquals(1, years0.size());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Hours hours0 = weeks0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
      
      int int0 = 0;
      DurationFieldType durationFieldType0 = hours0.getFieldType(int0);
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
      
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      assertNotNull(durationFieldType0);
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
      
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(1, weeks0.size());
      assertEquals("millis", durationFieldType0.toString());
      assertEquals("millis", durationFieldType0.getName());
  }

  @Test
  public void test09()  throws Throwable  {
      Days days0 = Days.THREE;
      assertNotNull(days0);
      assertEquals(1, days0.size());
      
      int int0 = 40;
      Period period0 = days0.toPeriod();
      assertNotNull(period0);
      assertEquals(1, days0.size());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+40:40", fixedDateTimeZone0.toString());
      assertEquals("+40:40", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Interval interval0 = new Interval((long) int0, (long) int0, (DateTimeZone) fixedDateTimeZone0);
      assertNotNull(interval0);
      assertEquals(40L, interval0.getEndMillis());
      assertEquals(40L, interval0.getStartMillis());
      assertEquals("+40:40", fixedDateTimeZone0.toString());
      assertEquals("+40:40", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Seconds seconds0 = Seconds.secondsIn((ReadableInterval) interval0);
      assertNotNull(seconds0);
      assertEquals(40L, interval0.getEndMillis());
      assertEquals(40L, interval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals("+40:40", fixedDateTimeZone0.toString());
      assertEquals("+40:40", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Period period1 = period0.plus((ReadablePeriod) seconds0);
      assertNotNull(period1);
      assertEquals(1, days0.size());
      assertEquals(40L, interval0.getEndMillis());
      assertEquals(40L, interval0.getStartMillis());
      assertEquals(1, seconds0.size());
      assertEquals("+40:40", fixedDateTimeZone0.toString());
      assertEquals("+40:40", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotSame(period1, period0);
      assertNotSame(period0, period1);
      assertTrue(period1.equals((Object)period0));
      assertTrue(period0.equals((Object)period1));
  }

  @Test
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
      
      Hours hours0 = weeks0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
      
      Days days0 = hours0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, weeks0.size());
      assertEquals(1, hours0.size());
      assertEquals(1, days0.size());
      
      int int0 = (-1716);
      // Undeclared exception!
      try {
        int int1 = days0.getValue(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1716
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      int int0 = (-287);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      assertNotNull(years0);
      assertEquals(1, years0.size());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        DurationFieldType durationFieldType0 = years0.getFieldType(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -287
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      Months months0 = Months.TEN;
      assertNotNull(months0);
      assertEquals(1, months0.size());
      
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P10M
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      Minutes minutes0 = hours0.toStandardMinutes();
      assertNotNull(minutes0);
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      
      Days days0 = minutes0.toStandardDays();
      assertNotNull(days0);
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      
      Seconds seconds0 = days0.toStandardSeconds();
      assertNotNull(seconds0);
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(1, minutes0.size());
      
      Days days1 = Days.standardDaysIn((ReadablePeriod) seconds0);
      assertNotNull(days1);
      assertEquals(1, seconds0.size());
      assertEquals(1, days0.size());
      assertEquals(1, hours0.size());
      assertEquals(1, days1.size());
      assertEquals(1, minutes0.size());
      assertSame(days0, days1);
      assertSame(days1, days0);
  }

  @Test
  public void test14()  throws Throwable  {
      ReadablePeriod readablePeriod0 = null;
      Weeks weeks0 = Weeks.standardWeeksIn(readablePeriod0);
      assertNotNull(weeks0);
      assertEquals(1, weeks0.size());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime((Object) string0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      ISOChronology iSOChronology0 = (ISOChronology)localDateTime0.getChronology();
      assertNotNull(iSOChronology0);
      assertEquals(4, localDateTime0.size());
      
      LocalTime localTime0 = new LocalTime((Object) string0, (Chronology) iSOChronology0);
      assertNotNull(localTime0);
      assertEquals(4, localDateTime0.size());
      assertEquals(4, localTime0.size());
      
      // Undeclared exception!
      try {
        Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      long long0 = (-2108L);
      LocalDate localDate0 = new LocalDate(long0);
      assertNotNull(localDate0);
      assertEquals(3, localDate0.size());
      
      YearMonth yearMonth0 = YearMonth.now();
      assertNotNull(yearMonth0);
      assertEquals(2, yearMonth0.size());
      
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween((ReadablePartial) localDate0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      long long0 = 1503L;
      LocalDateTime localDateTime0 = new LocalDateTime(long0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Months months0 = Months.monthsBetween((ReadablePartial) localDateTime0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      ReadablePartial readablePartial0 = null;
      // Undeclared exception!
      try {
        Hours hours0 = Hours.hoursBetween(readablePartial0, readablePartial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      assertNotNull(ethiopicChronology0);
      
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) ethiopicChronology0);
      assertNotNull(mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(1392409281320L, mutableDateTime0.getMillis());
      
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) mutableDateTime0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ReadableInstant readableInstant0 = null;
      // Undeclared exception!
      try {
        Days days0 = Days.daysBetween(readableInstant0, readableInstant0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-2244);
      Hours hours0 = Hours.hours(int0);
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      
      MutablePeriod mutablePeriod0 = hours0.toMutablePeriod();
      assertNotNull(mutablePeriod0);
      assertEquals(1, hours0.size());
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       Days days0 = Days.THREE;
//       assertNotNull(days0);
//       assertEquals(1, days0.size());
//       
//       int int0 = days0.hashCode();
//       assertEquals(12475, int0);
//       assertEquals(1, days0.size());
//   }
}
