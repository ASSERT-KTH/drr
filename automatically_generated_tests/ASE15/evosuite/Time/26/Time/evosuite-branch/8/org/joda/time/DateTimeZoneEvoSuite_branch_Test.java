/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:13:21 GMT 2014
 */

package org.joda.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Date;
import java.util.Locale;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockArithmeticException;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.YearMonthDay;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.DefaultNameProvider;
import org.joda.time.tz.FixedDateTimeZone;
import org.joda.time.tz.NameProvider;
import org.joda.time.tz.Provider;
import org.joda.time.tz.UTCProvider;
import org.joda.time.tz.ZoneInfoProvider;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DateTimeZoneEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = 51;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+51:00", fixedDateTimeZone0.getID());
      assertEquals("+51:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "-...";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      long long0 = fixedDateTimeZone0.getMillisKeepLocal(dateTimeZone0, (long) int0);
      assertEquals(180000051L, long0);
      assertEquals("+51:00", fixedDateTimeZone0.getID());
      assertEquals("+51:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 60;
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      LocalDateTime localDateTime1 = localDateTime0.minusHours(int0);
      assertNotNull(localDateTime1);
      assertFalse(localDateTime1.equals((Object)localDateTime0));
      assertFalse(localDateTime0.equals((Object)localDateTime1));
      assertEquals(4, localDateTime1.size());
      assertEquals(4, localDateTime0.size());
      assertNotSame(localDateTime1, localDateTime0);
      assertNotSame(localDateTime0, localDateTime1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-2547);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:02.547", fixedDateTimeZone0.toString());
      assertEquals("-00:00:02.547", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = 9223372036854775802L;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        long long1 = fixedDateTimeZone0.convertLocalToUTC(long0, boolean0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Subtracting time zone offset caused overflow
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = (-2547);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("-00:00:02.547", fixedDateTimeZone0.toString());
      assertEquals("-00:00:02.547", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      boolean boolean0 = false;
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) int0, boolean0);
      assertEquals(0L, long0);
      assertEquals("-00:00:02.547", fixedDateTimeZone0.toString());
      assertEquals("-00:00:02.547", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test04()  throws Throwable  {
      long long0 = 1069L;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertNotNull(dateMidnight0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      
      int int0 = 2930;
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(int0);
      assertNotNull(dateMidnight1);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(9186228748800000L, dateMidnight1.getMillis());
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
  }

  @Test
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      long long0 = 9223372036854775807L;
      // Undeclared exception!
      try {
        long long1 = cachedDateTimeZone0.convertUTCToLocal(long0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Adding time zone offset caused overflow
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) cachedDateTimeZone0);
      assertNotNull(dateMidnight0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      MockDate mockDate0 = (MockDate)dateMidnight0.toDate();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields((Date) mockDate0);
      assertNotNull(localDateTime0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      boolean boolean0 = cachedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(4, localDateTime0.size());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = 60;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.060", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      Object object0 = null;
      LocalDateTime localDateTime0 = new LocalDateTime(object0);
      assertNotNull(localDateTime0);
      assertEquals(4, localDateTime0.size());
      
      boolean boolean0 = fixedDateTimeZone0.isLocalDateTimeGap(localDateTime0);
      assertFalse(boolean0);
      assertEquals("+00:00:00.060", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      long long0 = fixedDateTimeZone0.convertLocalToUTC((long) int0, boolean0, (long) int0);
      assertEquals(0L, long0);
      assertEquals("+00:00:00.060", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
      
      boolean boolean1 = fixedDateTimeZone0.isStandardOffset(long0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("+00:00:00.060", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(4, localDateTime0.size());
  }

  @Test
  public void test08()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      long long0 = (-2486L);
      boolean boolean0 = cachedDateTimeZone0.isStandardOffset(long0);
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 47;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+47:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+47:00", fixedDateTimeZone0.getID());
      
      ReadableInstant readableInstant0 = null;
      int int1 = fixedDateTimeZone0.getOffset(readableInstant0);
      assertEquals(169200000, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("+47:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+47:00", fixedDateTimeZone0.getID());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 60;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.getID());
      
      String string0 = fixedDateTimeZone0.getName((long) int0);
      assertNotNull(string0);
      assertEquals("+00:00:00.060", string0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.toString());
      assertEquals("+00:00:00.060", fixedDateTimeZone0.getID());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "Asia/Yerevan";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      long long0 = 2006L;
      String string1 = cachedDateTimeZone0.getName(long0, locale0);
      assertNotNull(string1);
      assertEquals("+04:00", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = 51;
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      int int1 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertNotNull(fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0, locale0);
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Asia/Yerevan";
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      
      long long0 = 2006L;
      String string1 = cachedDateTimeZone0.getShortName(long0, locale0);
      assertNotNull(string1);
      assertEquals("+04:00", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
      assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = 10000;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:10", fixedDateTimeZone0.getID());
      assertEquals("+00:00:10", fixedDateTimeZone0.toString());
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = (-1762);
      String string0 = "";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1762,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1762, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1762,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1762, simpleTimeZone0.getRawOffset());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-1762,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(-1762, simpleTimeZone0.getRawOffset());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = (DefaultNameProvider)DateTimeZone.getNameProvider();
      assertNotNull(defaultNameProvider0);
      
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultNameProvider defaultNameProvider0 = null;
      DateTimeZone.setNameProvider((NameProvider) defaultNameProvider0);
  }

  @Test
  public void test18()  throws Throwable  {
      Provider provider0 = null;
      DateTimeZone.setProvider(provider0);
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 80;
      String string0 = "GB";
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int1, int0, int0, int0, int1, int1, int0);
      assertNotNull(simpleTimeZone0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(80, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=GB,offset=80,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=80,startDay=0,startDayOfWeek=80,startTime=80,startTimeMode=0,endMode=0,endMonth=80,endDay=0,endDayOfWeek=0,endTime=80,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("GB", simpleTimeZone0.getID());
      
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone id 'GB' is not recognised
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = (-20);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-20:00", fixedDateTimeZone0.toString());
      assertEquals("-20:00", fixedDateTimeZone0.getID());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fixedDateTimeZone0.toTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("GMT-20:00", zoneInfo0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-20:00", fixedDateTimeZone0.toString());
      assertEquals("-20:00", fixedDateTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) zoneInfo0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("GMT-20:00", zoneInfo0.getID());
      assertEquals("-20:00", fixedDateTimeZone1.toString());
      assertEquals("-20:00", fixedDateTimeZone1.getID());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-20:00", fixedDateTimeZone0.toString());
      assertEquals("-20:00", fixedDateTimeZone0.getID());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test22()  throws Throwable  {
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone0 = (SimpleTimeZone)fixedDateTimeZone0.toTimeZone();
      assertNotNull(simpleTimeZone0);
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forTimeZone((TimeZone) simpleTimeZone0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals("UTC", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test23()  throws Throwable  {
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertNotNull(cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      Instant instant0 = gJChronology0.getGregorianCutover();
      assertNotNull(instant0);
      assertEquals((-12219292800000L), instant0.getMillis());
      
      int int0 = cachedDateTimeZone0.getOffset((ReadableInstant) instant0);
      assertEquals((-75000), int0);
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: -75000
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      int int1 = 4687;
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minutes out of range: 4687
         //
      }
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      String string0 = fixedDateTimeZone0.getShortName((long) int0);
      assertNotNull(string0);
      assertEquals("+00:00:00.001", string0);
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertEquals("+00:00:00.001", fixedDateTimeZone1.toString());
      assertEquals("+00:00:00.001", fixedDateTimeZone1.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.001", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
  }

  @Test
  public void test26()  throws Throwable  {
      long long0 = (-1007L);
      Instant instant0 = new Instant(long0);
      assertNotNull(instant0);
      assertEquals((-1007L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertNotNull(fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-1007L), instant0.getMillis());
      
      String string0 = fixedDateTimeZone0.getID();
      assertNotNull(string0);
      assertEquals("UTC", string0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-1007L), instant0.getMillis());
      
      FixedDateTimeZone fixedDateTimeZone1 = (FixedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(fixedDateTimeZone1);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals((-1007L), instant0.getMillis());
      assertEquals("UTC", fixedDateTimeZone1.getID());
      assertEquals("UTC", fixedDateTimeZone1.toString());
      assertEquals(true, fixedDateTimeZone1.isFixed());
      assertSame(fixedDateTimeZone0, fixedDateTimeZone1);
      assertSame(fixedDateTimeZone1, fixedDateTimeZone0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
      assertNotNull(cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test28()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      String string0 = "-imitCponology[";
      DateTimeZone dateTimeZone0 = uTCProvider0.getZone(string0);
      assertNull(dateTimeZone0);
      
      // Undeclared exception!
      try {
        DateTimeZone.setDefault(dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The datetime zone must not be null
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 80;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertNotNull(fixedDateTimeZone0);
      assertEquals("+80:00", fixedDateTimeZone0.toString());
      assertEquals("+80:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      DateTimeZone.setDefault((DateTimeZone) fixedDateTimeZone0);
      assertEquals("+80:00", fixedDateTimeZone0.toString());
      assertEquals("+80:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test30()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      DateTimeZone.setProvider((Provider) uTCProvider0);
      YearMonthDay yearMonthDay0 = new YearMonthDay();
      assertNotNull(yearMonthDay0);
      assertEquals(3, yearMonthDay0.size());
  }

  @Test
  public void test31() {}
//   @Test
//   public void test31()  throws Throwable  {
//       BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
//       assertNotNull(buddhistChronology0);
//       
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)buddhistChronology0.getZone();
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       
//       long long0 = (-920L);
//       String string0 = cachedDateTimeZone0.getName(long0);
//       assertNotNull(string0);
//       assertEquals("British Summer Time", string0);
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//   }

  @Test
  public void test32() {}
//   @Test
//   public void test32()  throws Throwable  {
//       String string0 = "Asia/Yerevan";
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forID(string0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)cachedDateTimeZone0.toTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("Asia/Yerevan", zoneInfo0.getID());
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Asia/Yerevan", cachedDateTimeZone0.getID());
//   }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "-vp";
      // Undeclared exception!
      try {
        DateTimeZone dateTimeZone0 = DateTimeZone.forID(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"-vp\" is malformed at \"vp\"
         //
      }
  }

  @Test
  public void test34() {}
//   @Test
//   public void test34()  throws Throwable  {
//       Set<String> set0 = DateTimeZone.getAvailableIDs();
//       assertNotNull(set0);
//       assertEquals(567, set0.size());
//       assertEquals(false, set0.isEmpty());
//   }

  @Test
  public void test35() {}
//   @Test
//   public void test35()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       
//       String string0 = cachedDateTimeZone0.toString();
//       assertNotNull(string0);
//       assertEquals("Europe/London", string0);
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//   }

  @Test
  public void test36() {}
//   @Test
//   public void test36()  throws Throwable  {
//       ZoneInfoProvider zoneInfoProvider0 = (ZoneInfoProvider)DateTimeZone.getProvider();
//       assertNotNull(zoneInfoProvider0);
//   }

  @Test
  public void test37() {}
//   @Test
//   public void test37()  throws Throwable  {
//       TimeZone timeZone0 = null;
//       CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
//       assertNotNull(cachedDateTimeZone0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//       
//       Object object0 = cachedDateTimeZone0.writeReplace();
//       assertNotNull(object0);
//       assertEquals(false, cachedDateTimeZone0.isFixed());
//       assertEquals("Europe/London", cachedDateTimeZone0.getID());
//       assertEquals("Europe/London", cachedDateTimeZone0.toString());
//   }
}
