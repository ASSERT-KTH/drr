/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 19:13:50 GMT 2014
 */

package org.joda.time.field;

import static org.junit.Assert.*;
import org.junit.Test;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.StrictDateTimeField;
import org.junit.runner.RunWith;

 
public class LenientDateTimeFieldEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      DateTimeField dateTimeField0 = gregorianChronology0.minuteOfHour();
      assertNotNull(dateTimeField0);
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      StrictDateTimeField strictDateTimeField0 = new StrictDateTimeField(dateTimeField0);
      assertNotNull(strictDateTimeField0);
      assertEquals("minuteOfHour", strictDateTimeField0.getName());
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)LenientDateTimeField.getInstance((DateTimeField) strictDateTimeField0, (Chronology) gregorianChronology0);
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("minuteOfHour", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("minuteOfHour", strictDateTimeField0.getName());
      assertEquals(false, strictDateTimeField0.isLenient());
      assertEquals(true, strictDateTimeField0.isSupported());
      assertEquals("minuteOfHour", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DateTimeField dateTimeField0 = null;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField1 = LenientDateTimeField.getInstance(dateTimeField0, (Chronology) islamicChronology0);
      assertNull(dateTimeField1);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) buddhistChronology0);
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.weekOfWeekyear();
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      
      LenientDateTimeField lenientDateTimeField1 = (LenientDateTimeField)LenientDateTimeField.getInstance((DateTimeField) lenientDateTimeField0, (Chronology) buddhistChronology0);
      assertNotNull(lenientDateTimeField1);
      assertSame(lenientDateTimeField1, lenientDateTimeField0);
      assertSame(lenientDateTimeField0, lenientDateTimeField1);
      assertEquals("weekOfWeekyear", lenientDateTimeField1.getName());
      assertEquals(true, lenientDateTimeField1.isSupported());
      assertEquals(true, lenientDateTimeField1.isLenient());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      DateTimeField dateTimeField0 = iSOChronology0.hourOfDay();
      assertNotNull(dateTimeField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, iSOChronology0);
      assertNotNull(lenientDateTimeField0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfDay", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      
      long long0 = 1279L;
      int int0 = lenientDateTimeField0.get(long0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfDay", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(1, int0);
      
      long long1 = lenientDateTimeField0.set(long0, int0);
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals("hourOfDay", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("hourOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1279L, long1);
  }
}
