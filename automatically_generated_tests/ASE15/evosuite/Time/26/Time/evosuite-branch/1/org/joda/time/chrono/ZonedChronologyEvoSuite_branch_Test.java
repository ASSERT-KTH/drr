/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:01:02 GMT 2014
 */

package org.joda.time.chrono;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationField;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.ReadableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BasicDayOfYearDateTimeField;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GJDayOfWeekDateTimeField;
import org.joda.time.chrono.GJMonthOfYearDateTimeField;
import org.joda.time.chrono.GJYearOfEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.field.DividedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.PreciseDurationField;
import org.joda.time.field.ScaledDurationField;
import org.joda.time.field.UnsupportedDurationField;
import org.joda.time.tz.CachedDateTimeZone;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

 
public class ZonedChronologyEvoSuite_branch_Test   {

  //@Test
  public void test00()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)strictChronology0.dayOfWeek();
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.seconds();
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = (-1779L);
      long long1 = zonedChronology_ZonedDateTimeField1.roundHalfCeiling(long0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals((-7200000L), long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
  }

  //@Test
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)strictChronology0.dayOfWeek();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.seconds();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      long long1 = zonedChronology_ZonedDateTimeField1.roundHalfCeiling(long0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(long1 == long0);
      assertEquals((-7200000L), long1);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
  }

  //@Test
  public void test02()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DateTimeField dateTimeField0 = ethiopicChronology0.dayOfMonth();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      TimeZone timeZone0 = null;
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.forTimeZone(timeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.seconds();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = 1005L;
      long long1 = zonedChronology_ZonedDateTimeField0.getDifferenceAsLong(long0, long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("dayOfMonth", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("dayOfMonth", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
  }

  @Test
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.weekyearOfCentury();
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumShortTextLength(locale0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals(3, int0);
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      
      long long0 = zonedChronology_ZonedDateTimeField1.getDifferenceAsLong((long) int0, (long) int0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals(0L, long0);
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
  }

  @Test
  public void test04()  throws Throwable  {
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      long long0 = (-1906L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(julianChronology0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) julianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.clockhourOfDay();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(lenientDateTimeField0);
      
      GJYearOfEraDateTimeField gJYearOfEraDateTimeField0 = new GJYearOfEraDateTimeField(lenientDateTimeField0, julianChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(gJYearOfEraDateTimeField0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)gJYearOfEraDateTimeField0.getRangeDurationField();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(preciseDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(lenientDateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals(true, gJYearOfEraDateTimeField0.isLenient());
      assertEquals(true, gJYearOfEraDateTimeField0.isSupported());
      assertEquals("yearOfEra", gJYearOfEraDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        long long1 = zonedChronology_ZonedDateTimeField0.set(long0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for clockhourOfDay is not supported: Illegal instant due to time zone offset transition: 1969-12-31T00:59:58.094 (UTC)
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      DurationField durationField0 = buddhistChronology0.millis();
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long0 = zonedChronology_ZonedDateTimeField0.addWrapField((long) int0, int0);
      assertEquals(0L, long0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
  }

  @Test
  public void test06()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.weekyearOfCentury();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumShortTextLength(locale0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(3, int0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      long long0 = zonedChronology_ZonedDateTimeField1.addWrapField((long) int0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(94953600003L, long0);
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
  }

  //@Test
  public void test07()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long0 = 3304L;
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertNotNull(mutableInterval0);
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertNotNull(iSOChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 808;
      DateMidnight dateMidnight1 = dateMidnight0.withYear(int0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight1);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) iSOChronology0, (ReadableDateTime) dateMidnight1, (ReadableDateTime) dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(limitChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) limitChronology0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int1 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertFalse(int1 == int0);
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.millisOfSecond, fixedDateTimeZone0, assembledChronology_Fields0.weeks, assembledChronology_Fields0.seconds, assembledChronology_Fields0.months);
      assertFalse(int1 == int0);
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      long long1 = zonedChronology_ZonedDateTimeField0.add(long0, long0);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertEquals(6608L, long1);
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
  }

  //@Test
  public void test08()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)strictChronology0.dayOfWeek();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.millis();
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      int int0 = 595;
      long long1 = zonedChronology_ZonedDateTimeField1.add(long0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(51408000000L, long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
  }

  @Test
  public void test09()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      assertNotNull(ethiopicChronology0);
      
      DurationField durationField0 = ethiopicChronology0.millis();
      assertEquals("millis", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertNotNull(durationField0);
      
      Instant instant0 = GJChronology.DEFAULT_CUTOVER;
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(instant0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)instant0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(fixedDateTimeZone0);
      
      long long0 = (-1618L);
      byte byte0 = (byte)93;
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, fixedDateTimeZone0);
      assertEquals("millis", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long1 = zonedChronology_ZonedDurationField0.getDifferenceAsLong(long0, (long) byte0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals((-1711L), long1);
      assertEquals("millis", durationField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals((-12219292800000L), instant0.getMillis());
  }

  @Test
  public void test10()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)iSOChronology0.centuries();
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertNotNull(scaledDurationField0);
      
      int int0 = (-128);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(scaledDurationField0, fixedDateTimeZone0);
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) zonedChronology0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(lenientChronology0);
      
      LenientDateTimeField lenientDateTimeField0 = (LenientDateTimeField)lenientChronology0.clockhourOfDay();
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(lenientDateTimeField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(lenientDateTimeField0, fixedDateTimeZone0, scaledDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int1 = zonedChronology_ZonedDateTimeField0.getDifference((long) int0, (long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
      
      long long0 = zonedChronology_ZonedDurationField0.getDifferenceAsLong((long) int1, (long) int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0L, long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("clockhourOfDay", lenientDateTimeField0.getName());
      assertEquals(true, lenientDateTimeField0.isSupported());
      assertEquals(true, lenientDateTimeField0.isLenient());
  }

  @Test
  public void test11()  throws Throwable  {
      long long0 = 2157L;
      MutableDateTime mutableDateTime0 = new MutableDateTime(long0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2157L, mutableDateTime0.getMillis());
      assertNotNull(mutableDateTime0);
      
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2157L, mutableDateTime0.getMillis());
      assertEquals(1, minutes0.size());
      assertNotNull(minutes0);
  }

  @Test
  public void test12()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      long long0 = 0L;
      int int0 = 41;
      Hours hours0 = Hours.hours(int0);
      assertEquals(1, hours0.size());
      assertNotNull(hours0);
      
      long long1 = gJChronology0.add((ReadablePeriod) hours0, long0, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(6051600000L, long1);
      assertEquals(1, hours0.size());
  }

  //@Test
  public void test13()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, int0, int0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(durationField0, cachedDateTimeZone0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = zonedChronology_ZonedDurationField0.subtract((long) int0, int0);
      assertEquals(3155853599999L, long0);
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(true, offsetDateTimeField0.isSupported());
  }

  //@Test
  public void test14()  throws Throwable  {
      long long0 = 4L;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      Seconds seconds0 = Seconds.ZERO;
      assertEquals(1, seconds0.size());
      assertNotNull(seconds0);
      
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals(1, seconds0.size());
      assertNotNull(durationFieldType0);
      
      int int0 = (-1952);
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, int0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertEquals("seconds", durationFieldType0.toString());
      assertEquals("seconds", durationFieldType0.getName());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(1, seconds0.size());
      assertEquals((-90000000L), dateMidnight1.getMillis());
      assertNotNull(dateMidnight1);
  }

  @Test
  public void test15()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      int int0 = (-128);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      Days days0 = Days.ZERO;
      assertEquals(1, days0.size());
      assertNotNull(days0);
      
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) days0, (long) int0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, days0.size());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(intArray0);
  }

  @Test
  public void test16()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)iSOChronology0.centuries();
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertNotNull(scaledDurationField0);
      
      int int0 = (-5502);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.getID());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(scaledDurationField0, fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.getID());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.toString());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      boolean boolean0 = zonedChronology_ZonedDurationField0.isPrecise();
      assertFalse(boolean0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.getID());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.toString());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
  }

  //@Test
  public void test17()  throws Throwable  {
      long long0 = 4L;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(ethiopicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) cachedDateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gJChronology0.minutes();
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      BasicDayOfYearDateTimeField basicDayOfYearDateTimeField0 = new BasicDayOfYearDateTimeField(ethiopicChronology0, zonedChronology_ZonedDurationField0);
      assertEquals(60000L, basicDayOfYearDateTimeField0.getUnitMillis());
      assertEquals("dayOfYear", basicDayOfYearDateTimeField0.getName());
      assertEquals(true, basicDayOfYearDateTimeField0.isSupported());
      assertEquals(false, basicDayOfYearDateTimeField0.isLenient());
      assertEquals("minutes", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(basicDayOfYearDateTimeField0);
  }

  //@Test
  public void test18()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      long long0 = (-1779L);
      Weeks weeks0 = Weeks.THREE;
      assertEquals(1, weeks0.size());
      assertNotNull(weeks0);
      
      int[] intArray0 = zonedChronology0.get((ReadablePeriod) weeks0, long0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(1, weeks0.size());
      assertNotNull(intArray0);
  }

  @Test
  public void test19()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      UnsupportedDurationField unsupportedDurationField0 = (UnsupportedDurationField)iSOChronology0.eras();
      assertEquals(false, unsupportedDurationField0.isSupported());
      assertEquals("eras", unsupportedDurationField0.getName());
      assertEquals(0L, unsupportedDurationField0.getUnitMillis());
      assertEquals(true, unsupportedDurationField0.isPrecise());
      assertNotNull(unsupportedDurationField0);
      
      int int0 = 3;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+03:00", fixedDateTimeZone0.toString());
      assertEquals("+03:00", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = null;
      try {
        zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(unsupportedDurationField0, fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      int int0 = (-128);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      boolean boolean0 = zonedChronology0.equals((Object) zonedChronology0);
      assertTrue(boolean0);
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
  }

  //@Test
  public void test21()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gregorianChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.millis();
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      boolean boolean0 = zonedChronology0.equals((Object) zonedChronology_ZonedDurationField0);
      assertFalse(boolean0);
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
  }

  @Test
  public void test22()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      int int0 = 4955;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:04.955", fixedDateTimeZone0.getID());
      assertEquals("+00:00:04.955", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("+00:00:04.955", fixedDateTimeZone0.getID());
      assertEquals("+00:00:04.955", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      zonedChronology0.assemble(assembledChronology_Fields0);
      assertEquals("+00:00:04.955", fixedDateTimeZone0.getID());
      assertEquals("+00:00:04.955", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  //@Test
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      ZonedChronology zonedChronology0 = (ZonedChronology)islamicChronology0.getBase();
      assertNotNull(zonedChronology0);
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) zonedChronology0, readableDateTime0, readableDateTime0);
      assertNotNull(limitChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance((Chronology) limitChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertFalse(zonedChronology0.equals((Object)zonedChronology1));
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(zonedChronology1);
  }

  @Test
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)gJChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone(dateTimeZone0);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertFalse(zonedChronology1.equals((Object)zonedChronology0));
      assertFalse(zonedChronology0.equals((Object)zonedChronology1));
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology1);
  }

  //@Test
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology zonedChronology1 = (ZonedChronology)zonedChronology0.withZone((DateTimeZone) cachedDateTimeZone0);
      assertSame(zonedChronology0, zonedChronology1);
      assertSame(zonedChronology1, zonedChronology0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology1);
  }

  @Test
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = null;
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, dateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DateTimeZone must not be null
         //
      }
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 4955;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+00:00:04.955", fixedDateTimeZone0.getID());
      assertEquals("+00:00:04.955", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ISOChronology iSOChronology0 = null;
      // Undeclared exception!
      try {
        ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a chronology
         //
      }
  }

  @Test
  public void test28()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      int int0 = (-128);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) iSOChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.getID());
      assertEquals("-00:00:00.128", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      try {
        long long0 = zonedChronology0.getDateTimeMillis(int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -128 for millisOfDay must be in the range [0,86400000]
         //
      }
  }

  //@Test
  public void test29()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      assertNotNull(julianChronology0);
      
      long long0 = 0L;
      LocalDate localDate0 = new LocalDate(long0, (Chronology) julianChronology0);
      assertEquals(3, localDate0.size());
      assertNotNull(localDate0);
      
      int int0 = 7;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("+00:00:00.007", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      DateTime dateTime0 = localDate0.toDateTimeAtMidnight((DateTimeZone) fixedDateTimeZone0);
      assertEquals("+00:00:00.007", fixedDateTimeZone0.getID());
      assertEquals("+00:00:00.007", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals(3, localDate0.size());
      assertEquals((-7L), dateTime0.getMillis());
      assertNotNull(dateTime0);
  }

  @Test
  public void test30()  throws Throwable  {
      long long0 = 4L;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      //  // Unstable assertion: assertEquals((-3600000L), dateMidnight0.getMillis());
      //  // Unstable assertion: assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      //  // Unstable assertion: assertEquals((-3600000L), dateMidnight0.getMillis());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(cachedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      //  // Unstable assertion: assertNotNull(islamicChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) cachedDateTimeZone0);
      //  // Unstable assertion: assertEquals((-3600000L), dateMidnight0.getMillis());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
      //  // Unstable assertion: assertNotNull(zonedChronology0);
      
      int int0 = zonedChronology0.hashCode();
      //  // Unstable assertion: assertEquals(1470476020, int0);
      //  // Unstable assertion: assertEquals((-3600000L), dateMidnight0.getMillis());
      //  // Unstable assertion: assertEquals(false, cachedDateTimeZone0.isFixed());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.toString());
      //  // Unstable assertion: assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  //@Test
  public void test31()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertNotNull(islamicChronology0);
      
      long long0 = 0L;
      int int0 = 0;
      long long1 = islamicChronology0.getDateTimeMillis(long0, int0, int0, int0, int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-3600000L), long1);
  }

  //@Test
  public void test32()  throws Throwable  {
      long long0 = 4L;
      DateMidnight dateMidnight0 = new DateMidnight(long0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)dateMidnight0.getZone();
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) islamicChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology0);
      
      ZonedChronology zonedChronology1 = ZonedChronology.getInstance((Chronology) zonedChronology0, (DateTimeZone) cachedDateTimeZone0);
      assertNotSame(zonedChronology1, zonedChronology0);
      assertNotSame(zonedChronology0, zonedChronology1);
      assertTrue(zonedChronology1.equals((Object)zonedChronology0));
      assertTrue(zonedChronology0.equals((Object)zonedChronology1));
      assertEquals((-3600000L), dateMidnight0.getMillis());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology1);
  }

  //@Test
  public void test33()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)strictChronology0.dayOfWeek();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.seconds();
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumValue(long0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals(7, int0);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("seconds", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField1);
      
      long long1 = zonedChronology_ZonedDurationField1.getValueAsLong((long) int0, (long) int0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertTrue(long1 == long0);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertTrue(long0 == long1);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertEquals(0L, long1);
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("seconds", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
  }

  //@Test
  public void test34()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.millis();
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = (-1793L);
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField1 = new ZonedChronology.ZonedDurationField(zonedChronology_ZonedDurationField0, cachedDateTimeZone0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertEquals("millis", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField1);
      
      int int0 = gregorianChronology0.getDaysInMonthMax();
      assertEquals(31, int0);
      
      long long1 = zonedChronology_ZonedDurationField1.getMillis(int0, long0);
      assertNotSame(zonedChronology_ZonedDurationField1, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField1);
      assertFalse(zonedChronology_ZonedDurationField1.equals((Object)zonedChronology_ZonedDurationField0));
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertFalse(zonedChronology_ZonedDurationField0.equals((Object)zonedChronology_ZonedDurationField1));
      assertEquals(31L, long1);
      assertEquals("millis", zonedChronology_ZonedDurationField1.getName());
      assertEquals(true, zonedChronology_ZonedDurationField1.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
  }

  @Test
  public void test35()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      assertNotNull(iSOChronology0);
      
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)iSOChronology0.centuries();
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals("centuries", scaledDurationField0.getName());
      assertNotNull(scaledDurationField0);
      
      int int0 = (-5502);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals("-00:00:05.502", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(scaledDurationField0, fixedDateTimeZone0);
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      long long0 = zonedChronology_ZonedDurationField0.getMillis((long) int0, (long) int0);
      assertEquals((-17362634947200000L), long0);
      assertEquals(false, scaledDurationField0.isPrecise());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(100, scaledDurationField0.getScalar());
      assertEquals("centuries", scaledDurationField0.getName());
      assertEquals("centuries", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("-00:00:05.502", fixedDateTimeZone0.toString());
  }

  //@Test
  public void test36()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long0 = 3304L;
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertNotNull(mutableInterval0);
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertNotNull(iSOChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 808;
      DateMidnight dateMidnight1 = dateMidnight0.withYear(int0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight1);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) iSOChronology0, (ReadableDateTime) dateMidnight1, (ReadableDateTime) dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(limitChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) limitChronology0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int1 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = new ZonedChronology.ZonedDurationField(assembledChronology_Fields0.weeks, fixedDateTimeZone0);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      int int2 = zonedChronology_ZonedDurationField0.getValue((long) int1, (long) int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("weeks", zonedChronology_ZonedDurationField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
  }

  //@Test
  public void test37()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      StrictChronology strictChronology0 = StrictChronology.getInstance((Chronology) gregorianChronology0);
      assertNotNull(strictChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)strictChronology0.dayOfWeek();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.seconds();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      boolean boolean0 = zonedChronology_ZonedDateTimeField1.isLeap(long0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(boolean0);
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("seconds", zonedChronology_ZonedDurationField0.getName());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int0);
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int1 = 2754;
      DividedDateTimeField dividedDateTimeField0 = new DividedDateTimeField(dateTimeField0, dateTimeFieldType0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(2754, dividedDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertNotNull(dividedDateTimeField0);
      
      ScaledDurationField scaledDurationField0 = (ScaledDurationField)dividedDateTimeField0.getDurationField();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(2754, dividedDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(2754, scaledDurationField0.getScalar());
      assertEquals("years", scaledDurationField0.getName());
      assertEquals(true, scaledDurationField0.isPrecise());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertNotNull(scaledDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, scaledDurationField0, scaledDurationField0, scaledDurationField0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(2754, dividedDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(2754, scaledDurationField0.getScalar());
      assertEquals("years", scaledDurationField0.getName());
      assertEquals(true, scaledDurationField0.isPrecise());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText((long) int1, locale0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("120", string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, dividedDateTimeField0.getMaximumValue());
      assertEquals(true, dividedDateTimeField0.isSupported());
      assertEquals(2754, dividedDateTimeField0.getDivisor());
      assertEquals("yearOfCentury", dividedDateTimeField0.getName());
      assertEquals(false, dividedDateTimeField0.isLenient());
      assertEquals(0, dividedDateTimeField0.getMinimumValue());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("minuteOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals("yearOfCentury", dateTimeFieldType0.toString());
      assertEquals("yearOfCentury", dateTimeFieldType0.getName());
      assertEquals(true, scaledDurationField0.isSupported());
      assertEquals(2754, scaledDurationField0.getScalar());
      assertEquals("years", scaledDurationField0.getName());
      assertEquals(true, scaledDurationField0.isPrecise());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("minuteOfDay", dateTimeField0.getName());
      assertNotNull(string0);
  }

  //@Test
  public void test39()  throws Throwable  {
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      long long0 = 3304L;
      MutableInterval mutableInterval0 = new MutableInterval(long0, long0);
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertNotNull(mutableInterval0);
      
      ISOChronology iSOChronology0 = (ISOChronology)mutableInterval0.getChronology();
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertNotNull(iSOChronology0);
      
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) iSOChronology0);
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight0);
      
      int int0 = 808;
      DateMidnight dateMidnight1 = dateMidnight0.withYear(int0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(dateMidnight1);
      
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) iSOChronology0, (ReadableDateTime) dateMidnight1, (ReadableDateTime) dateMidnight0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      assertNotNull(limitChronology0);
      
      assembledChronology_Fields0.copyFieldsFrom((Chronology) limitChronology0);
      assertNotSame(dateMidnight1, dateMidnight0);
      assertNotSame(dateMidnight0, dateMidnight1);
      assertFalse(dateMidnight1.equals((Object)dateMidnight0));
      assertFalse(dateMidnight0.equals((Object)dateMidnight1));
      assertEquals((-36665395125000L), dateMidnight1.getMillis());
      assertEquals(3304L, mutableInterval0.getStartMillis());
      assertEquals(3304L, mutableInterval0.getEndMillis());
      assertEquals(1392336000000L, dateMidnight0.getMillis());
      
      int int1 = 1;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHours(int1);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(assembledChronology_Fields0.millisOfSecond, fixedDateTimeZone0, assembledChronology_Fields0.weeks, assembledChronology_Fields0.seconds, assembledChronology_Fields0.months);
      assertFalse(int1 == int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText((long) int1, locale0);
      assertFalse(int1 == int0);
      assertEquals("1", string0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("+01:00", fixedDateTimeZone0.getID());
      assertEquals("+01:00", fixedDateTimeZone0.toString());
      assertEquals("millisOfSecond", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(string0);
  }

  //@Test
  public void test40()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertNotNull(dateTimeField0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)DateTimeZone.getDefault();
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertNotNull(cachedDateTimeZone0);
      
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(dateTimeFieldType0);
      
      int int0 = (-1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, int0, int0, int0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertNotNull(offsetDateTimeField0);
      
      DurationField durationField0 = offsetDateTimeField0.getRangeDurationField();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, cachedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int1 = zonedChronology_ZonedDateTimeField0.getLeapAmount((long) int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals("weekyearOfCentury", dateTimeField0.getName());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals("clockhourOfHalfday", offsetDateTimeField0.getName());
      assertEquals(-1, offsetDateTimeField0.getOffset());
      assertEquals(-1, offsetDateTimeField0.getMaximumValue());
      assertEquals(false, offsetDateTimeField0.isLenient());
      assertEquals(true, offsetDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.toString());
      assertEquals("clockhourOfHalfday", dateTimeFieldType0.getName());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, durationField0.isPrecise());
      assertEquals(true, durationField0.isSupported());
      assertEquals("centuries", durationField0.getName());
  }

  @Test
  public void test41()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(gJChronology0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) gJChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(zonedChronology0);
      
      String string0 = zonedChronology0.toString();
      assertEquals("ZonedChronology[GJChronology[UTC], UTC]", string0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(string0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(dateTimeField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(lenientChronology0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)lenientChronology0.days();
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(preciseDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("weekOfWeekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, dateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = (-60);
      // Undeclared exception!
      try {
        long long0 = zonedChronology_ZonedDateTimeField0.set((long) int0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"ZonedChronology[GJChronology[UTC], UTC]\" for weekOfWeekyear is not supported
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertNotNull(islamicChronology0);
      
      DateTimeField dateTimeField0 = islamicChronology0.centuryOfEra();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      int int0 = Integer.MIN_VALUE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetMillis(int0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("--596:-31:-23.-648", fixedDateTimeZone0.getID());
      assertEquals("--596:-31:-23.-648", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      GJMonthOfYearDateTimeField gJMonthOfYearDateTimeField0 = new GJMonthOfYearDateTimeField(islamicChronology0);
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertNotNull(gJMonthOfYearDateTimeField0);
      
      DurationField durationField0 = gJMonthOfYearDateTimeField0.getDurationField();
      assertEquals(true, durationField0.isSupported());
      assertEquals("months", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("--596:-31:-23.-648", fixedDateTimeZone0.getID());
      assertEquals("--596:-31:-23.-648", fixedDateTimeZone0.toString());
      assertEquals(true, durationField0.isSupported());
      assertEquals("months", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("centuryOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = null;
      String string0 = zonedChronology_ZonedDateTimeField0.getAsShortText(int0, locale0);
      assertEquals("-2147483648", string0);
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("centuryOfEra", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("--596:-31:-23.-648", fixedDateTimeZone0.getID());
      assertEquals("--596:-31:-23.-648", fixedDateTimeZone0.toString());
      assertEquals(true, durationField0.isSupported());
      assertEquals("months", durationField0.getName());
      assertEquals(false, durationField0.isPrecise());
      assertEquals("monthOfYear", gJMonthOfYearDateTimeField0.getName());
      assertEquals(true, gJMonthOfYearDateTimeField0.isSupported());
      assertEquals("centuryOfEra", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertNotNull(string0);
  }

  @Test
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)buddhistChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(fixedDateTimeZone0);
      
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance((Chronology) buddhistChronology0, (DateTimeZone) fixedDateTimeZone0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)zonedChronology0.weekyearOfCentury();
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      DurationField durationField0 = null;
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField1.getMaximumShortTextLength(locale0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(3, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      
      long long0 = zonedChronology_ZonedDateTimeField1.remainder((long) int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(259200003L, long0);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("weekyearOfCentury", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
  }

  @Test
  public void test44()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      assertNotNull(gJChronology0);
      
      GJDayOfWeekDateTimeField gJDayOfWeekDateTimeField0 = (GJDayOfWeekDateTimeField)gJChronology0.dayOfWeek();
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(false, gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(true, gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertNotNull(gJDayOfWeekDateTimeField0);
      
      ReadableDateTime readableDateTime0 = null;
      LimitChronology limitChronology0 = LimitChronology.getInstance((Chronology) gJChronology0, readableDateTime0, readableDateTime0);
      assertNotNull(limitChronology0);
      
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)limitChronology0.getZone();
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) limitChronology0);
      assertNotNull(lenientChronology0);
      
      DurationField durationField0 = lenientChronology0.millis();
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(gJDayOfWeekDateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(false, gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(true, gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = zonedChronology_ZonedDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(3, int0);
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("dayOfWeek", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(86400000L, gJDayOfWeekDateTimeField0.getUnitMillis());
      assertEquals(false, gJDayOfWeekDateTimeField0.isLenient());
      assertEquals(true, gJDayOfWeekDateTimeField0.isSupported());
      assertEquals("dayOfWeek", gJDayOfWeekDateTimeField0.getName());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.getID());
  }

  @Test
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertNotNull(buddhistChronology0);
      
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertNotNull(dateTimeField0);
      
      int int0 = 0;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.forOffsetHoursMinutes(int0, int0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertNotNull(fixedDateTimeZone0);
      
      DurationField durationField0 = buddhistChronology0.millis();
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertNotNull(durationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, durationField0, durationField0, durationField0);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      LocalTime localTime0 = new LocalTime((long) int0);
      assertEquals(4, localTime0.size());
      assertNotNull(localTime0);
      
      int[] intArray0 = new int[8];
      int[] intArray1 = zonedChronology_ZonedDateTimeField0.addWrapField((ReadablePartial) localTime0, int0, intArray0, intArray0[4]);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("halfdayOfDay", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals("halfdayOfDay", dateTimeField0.getName());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(4, localTime0.size());
      assertEquals(true, durationField0.isSupported());
      assertEquals(true, durationField0.isPrecise());
      assertEquals("millis", durationField0.getName());
      assertNotNull(intArray1);
  }

  @Test
  public void test46()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(fixedDateTimeZone0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(gJChronology0);
      
      DateTimeField dateTimeField0 = gJChronology0.weekOfWeekyear();
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(dateTimeField0);
      
      LenientChronology lenientChronology0 = LenientChronology.getInstance((Chronology) gJChronology0);
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(lenientChronology0);
      
      PreciseDurationField preciseDurationField0 = (PreciseDurationField)lenientChronology0.days();
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(preciseDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = new ZonedChronology.ZonedDateTimeField(dateTimeField0, fixedDateTimeZone0, preciseDurationField0, preciseDurationField0, preciseDurationField0);
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      int int0 = (-60);
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = zonedChronology_ZonedDateTimeField0.getAsText(int0, locale0);
      assertEquals("-60", string0);
      assertEquals("weekOfWeekyear", dateTimeField0.getName());
      assertEquals(true, dateTimeField0.isSupported());
      assertEquals(false, dateTimeField0.isLenient());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("weekOfWeekyear", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, preciseDurationField0.isSupported());
      assertEquals(true, preciseDurationField0.isPrecise());
      assertEquals(86400000L, preciseDurationField0.getUnitMillis());
      assertEquals("days", preciseDurationField0.getName());
      assertEquals(true, fixedDateTimeZone0.isFixed());
      assertEquals("UTC", fixedDateTimeZone0.toString());
      assertEquals("UTC", fixedDateTimeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
  }

  //@Test
  public void test47()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      assertNotNull(gregorianChronology0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField0 = (ZonedChronology.ZonedDateTimeField)gregorianChronology0.clockhourOfHalfday();
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField0);
      
      GJChronology gJChronology0 = GJChronology.getInstance();
      assertNotNull(gJChronology0);
      
      CachedDateTimeZone cachedDateTimeZone0 = (CachedDateTimeZone)gJChronology0.getZone();
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertNotNull(cachedDateTimeZone0);
      
      ZonedChronology.ZonedDurationField zonedChronology_ZonedDurationField0 = (ZonedChronology.ZonedDurationField)gregorianChronology0.millis();
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDurationField0);
      
      ZonedChronology.ZonedDateTimeField zonedChronology_ZonedDateTimeField1 = new ZonedChronology.ZonedDateTimeField(zonedChronology_ZonedDateTimeField0, cachedDateTimeZone0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0, zonedChronology_ZonedDurationField0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      assertNotNull(zonedChronology_ZonedDateTimeField1);
      
      long long0 = 0L;
      int int0 = 595;
      long long1 = zonedChronology_ZonedDateTimeField1.add(long0, int0);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(long1 == long0);
      assertEquals(2142000000L, long1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
      
      int int1 = zonedChronology_ZonedDateTimeField1.getMinimumValue(long1);
      assertNotSame(zonedChronology_ZonedDateTimeField1, zonedChronology_ZonedDateTimeField0);
      assertNotSame(zonedChronology_ZonedDateTimeField0, zonedChronology_ZonedDateTimeField1);
      assertFalse(long0 == long1);
      assertFalse(zonedChronology_ZonedDateTimeField1.equals((Object)zonedChronology_ZonedDateTimeField0));
      assertFalse(int1 == int0);
      assertFalse(zonedChronology_ZonedDateTimeField0.equals((Object)zonedChronology_ZonedDateTimeField1));
      assertFalse(int0 == int1);
      assertFalse(long1 == long0);
      assertEquals(1, int1);
      assertEquals(true, zonedChronology_ZonedDateTimeField1.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField1.getName());
      assertEquals("Europe/London", cachedDateTimeZone0.getID());
      assertEquals(false, cachedDateTimeZone0.isFixed());
      assertEquals("Europe/London", cachedDateTimeZone0.toString());
      assertEquals(true, zonedChronology_ZonedDateTimeField0.isSupported());
      assertEquals("clockhourOfHalfday", zonedChronology_ZonedDateTimeField0.getName());
      assertEquals(true, zonedChronology_ZonedDurationField0.isSupported());
      assertEquals("millis", zonedChronology_ZonedDurationField0.getName());
  }
}
