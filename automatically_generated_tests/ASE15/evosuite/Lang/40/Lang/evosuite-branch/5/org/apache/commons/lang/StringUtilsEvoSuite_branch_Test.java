/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:46:29 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "(8^}";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = 'J';
      boolean boolean0 = linkedList0.add((Object) string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(8^}]", linkedList0.toString());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(8^}]", linkedList0.toString());
      assertEquals("(8^}", string1);
      
      String string2 = ".Y) \\`}N^yw(`C=r";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEndIgnoreCase(string1, string2);
      assertNotNull(string3);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals(1, linkedList0.size());
      assertEquals("[(8^}]", linkedList0.toString());
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals("(8^}", string3);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "M.wh2\\7Et";
      int int0 = 5892;
      char char0 = ' ';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualswh2\\7Et", string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.endsWith(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "roL&+7Wjt:d8Xf%";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.swapCase(string0);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("ROl&+7wJT:D8xF%", string2);
      
      char char0 = '7';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, char0);
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      boolean boolean0 = StringUtils.startsWithAny(string2, stringArray0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "...";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "roL&+7Wjt:d8Xf%";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ROl&+7wJT:D8xF%", string1);
      
      char char0 = '7';
      String string2 = null;
      String string3 = StringUtils.leftPad(string2, (int) char0);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string3, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "O3)FueS)B^V]";
      String[] stringArray0 = new String[2];
      String string1 = "$L7QnOFIJJEM";
      assertNotSame(string1, string0);
      
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.getLevenshteinDistance(string0, stringArray0[0]);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(13, int0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "";
      int int0 = 958;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualsstring1);
      
      int int1 = StringUtils.getLevenshteinDistance(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(958, int1);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "9zevL\\tYga($Xl/";
      int int0 = 1596;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualszevL\\tYga($Xlstring1);
      
      int int1 = StringUtils.getLevenshteinDistance(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1580, int1);
  }

  @Test
  public void test013()  throws Throwable  {
      char char0 = 'J';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string0);
      
      String string1 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test014()  throws Throwable  {
      char char0 = 'J';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance(string0, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "hg";
      String string1 = StringUtils.reverse(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("gh", string1);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = stringArray0[2];
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertEquals("Cannot pad a negative amount: ", string1);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.remove(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "<jm0A95";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "n&R.VfMLZ/iuV";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("n&R.VfMLZ/iuV", string1);
      
      Locale locale0 = Locale.forLanguageTag(string1);
      assertNotNull(locale0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.lowerCase(string0, locale0);
      assertNotNull(string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("n&r.vfmlz/iuv", string2);
      
      String string3 = StringUtils.difference(string2, string0);
      assertNotNull(string3);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("R.VfMLZ/iuV", string3);
  }

  @Test
  public void test022()  throws Throwable  {
      char char0 = 'e';
      String string0 = " is less than 0: ";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad(string0, (int) char0, char0);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee is less than 0: ", string2);
      
      String string3 = StringUtils.difference(string2, string1);
      assertNotNull(string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "c{|YdfcVnC^%<$";
      int int0 = 90;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("                                      c{|YdfcVnC^%<$                                      ", string1);
      
      String string2 = null;
      int int1 = StringUtils.indexOfDifference(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int1);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = null;
      String string1 = "timetolive f ";
      int int0 = StringUtils.indexOfDifference(string0, string1);
      assertEquals(0, int0);
  }

  @Test
  public void test025()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = 'e';
      String string0 = " is less than 0: ";
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad(string0, (int) char0, char0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee is less than 0: ", string2);
      
      String string3 = StringUtils.difference(string1, string2);
      assertNotNull(string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee is less than 0: ", string3);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = null;
      String string1 = "The Array must not be null";
      String string2 = StringUtils.difference(string1, string0);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("The Array must not be null", string2);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("4OSkO)3{h9B~!", string1);
      
      String string2 = null;
      String string3 = StringUtils.difference(string2, string1);
      assertNotNull(string3);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string3, string0);
      assertSame(string3, string1);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertEquals("4OSkO)3{h9B~!", string3);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "\"y-\\!c,6";
      int int0 = 7;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"y-\\...", string1);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "', has a length less than 2";
      int int0 = 14;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("', has a le...", string1);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "7Ay+k&ab";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test031()  throws Throwable  {
      int int0 = 13;
      String string0 = null;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "574w]@fZ]lM^:&I>b";
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("574w]@fZ]lM^:&I>b", string1);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = null;
      char char0 = 'e';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString(string1, string1);
      assertNull(string2);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "O3)FueS)B^V]";
      String string1 = StringUtils.defaultString(string0, string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("O3)FueS)B^V]", string1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "z/\"kz=aej<km*#g\\^fu5k:;itz~1W%BA";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string1, string0, string1);
      assertNull(string2);
      
      String string3 = StringUtils.defaultString(string2);
      assertNotNull(string3);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertEquals("", string3);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "O3)FueS)B^V]";
      String string1 = StringUtils.defaultString(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("O3)FueS)B^V]", string1);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = "U";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "(8^}";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test040()  throws Throwable  {
      char char0 = 'J';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "ZQ?";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "The character ";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = null;
      int int0 = (-1);
      String string1 = StringUtils.repeat(string0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "";
      int int0 = 13;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("             ", string1);
      
      boolean boolean0 = StringUtils.isWhitespace(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = ".Y) \\`}N^yw(`C=r";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      boolean boolean0 = StringUtils.isNumericSpace(string1);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = "7Ay+k&abnf+GM&9n";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = ".Y) \\`}N^yE+UUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUw(`C=r";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "(8^}";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "The String must not be empty";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = "Index: ";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = "dd";
      int int0 = 4;
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      
      String string1 = StringUtils.right(string0, int1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "XY50(9Q>A BJ&8lx";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "Bx";
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "The Character must not be null";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-";
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-kp5b-xiy]lko|q-", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "B\"XvP,n\"O6Ura;Rr'\"4";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "',Y%*h1Zu=";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("',Y%*h1Zu=", string1);
      
      boolean boolean0 = StringUtils.isAlpha(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = "Search and Replace array lengths don't match: ";
      int int0 = StringUtils.countMatches(string1, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, int0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "',Y%*h1Zu=',Y%*h1Zu=";
      int int0 = (-1);
      String string1 = StringUtils.repeat(string0, int0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.countMatches(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int1);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
      
      String string2 = StringUtils.swapCase(string1);
      assertNull(string2);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.uncapitalize(string1);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("4OSkO)3{h9B~!", string1);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      int int0 = 63;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is 4MMinimum abbreviation width is 4", string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertEquals("Minimum abbreviation width is 4MMinimum abbreviation width is 4", string2);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase(string1);
      assertNull(string2);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.remove(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string2 = StringUtils.upperCase(string1, locale0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "";
      int int0 = 13;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("             ", string1);
      
      String string2 = StringUtils.upperCase(string1);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("             ", string2);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "yAk*^5";
      int int0 = 3;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("yAk*^5", string1);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = (-3275);
      String string2 = StringUtils.center(string1, int0, string1);
      assertNotNull(string2);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertEquals("", string2);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center(string0, int0, string0);
      assertNull(string1);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "c{|YdfcVnC^%<$";
      int int0 = 2;
      char char0 = 'V';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("c{|YdfcVnC^%<$", string1);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "GD/ixQ-,O#`&y_,B";
      int int0 = 0;
      char char0 = 'u';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("GD/ixQ-,O#`&y_,B", string1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      int int0 = (-1);
      String string1 = StringUtils.repeat(string0, int0);
      assertNull(string1);
      
      int int1 = StringUtils.length(string1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      int int0 = 13;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("             ", string1);
      
      String string2 = StringUtils.leftPad(string1, int0, string0);
      assertNotNull(string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("             ", string2);
  }

  @Test
  public void test091()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = '{';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      int int0 = 0;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "\\u00";
      int int0 = 5;
      String string1 = StringUtils.left(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\\u00", string1);
      
      char char0 = 'r';
      String string2 = "org.apache.commons.lang.StringUtilsorg.apache.commons.lang.StringUtils";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.center(string1, (int) char0, string2);
      assertNotNull(string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertEquals("org.apache.commons.lang.StringUtilsorg.apache.commons.l\\u00org.apache.commons.lang.StringUtilsorg.apache.commons.l", string3);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "0?m1'n7k-+&L";
      int int0 = 48;
      String string1 = "}.?WINg:#UZPU5H[C";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.center(string0, int0, string1);
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("}.?WINg:#UZPU5H[C0?m1'n7k-+&L}.?WINg:#UZPU5H[C", string2);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "0?m1'n7k-+&L";
      int int0 = 48;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("0?m1'n7k-+&L0?m1'n0?m1'n7k-+&L0?m1'n7k-+&L0?m1'n", string1);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "";
      int int0 = 13;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("             ", string1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "574w]@fZ]lM^:&I>b";
      int int0 = (-3996);
      String string1 = null;
      String string2 = StringUtils.rightPad(string1, int0, string0);
      assertNull(string2);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "z/\"kz=aej<km*#g\\^fu5k:;itz~1W%BA";
      int int0 = 0;
      char char0 = 'x';
      String string1 = StringUtils.rightPad(string0, int0, char0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("z/\"kz=aej<km*#g\\^fu5k:;itz~1W%BA", string1);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      char char0 = ' ';
      String string1 = StringUtils.rightPad(string0, int0, char0);
      assertNull(string1);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = ".Y) \\`}N^yw(`C=r";
      int int0 = StringUtils.length(string0);
      assertEquals(3352, int0);
      
      String string1 = null;
      String string2 = StringUtils.repeat(string0, string1, int0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "hg";
      char char0 = ' ';
      String string1 = StringUtils.repeat(string0, (int) char0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("hghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghghg", string1);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "w";
      char char0 = 'w';
      String string1 = StringUtils.repeat(string0, (int) char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string1);
  }

  @Test
  public void test102()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = null;
      char char0 = 'e';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNotNull(string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat(string2, (int) char0);
      assertNotNull(string3);
      assertSame(string2, string3);
      assertSame(string3, string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string3);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "&";
      String string1 = StringUtils.chop(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.chop(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(" is less than 0:", string1);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = " ";
      String string1 = "mP$!!";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string1, string0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("mP$!!", string2);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = " ";
      char char0 = 'g';
      String string1 = StringUtils.remove(string0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.chomp(string1, string0);
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = StringUtils.remove(string0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp(string1, string1);
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "mP$!!";
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("mP$!!", string1);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp(string1);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertEquals("", string2);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.chomp(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(" ", string1);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = null;
      String string1 = "org.apache.commons.lang.StringUtils";
      int int0 = 0;
      char char0 = 'n';
      String string2 = StringUtils.overlay(string1, string0, (int) char0, int0);
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "TimeToLive of ";
      int int0 = 1127;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("TimeToLive of ", string1);
      
      String string2 = StringUtils.overlay(string1, string1, int0, int0);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEquals("TimeToLive of TimeToLive of ", string2);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("4OSkO)3{h9B~!", string1);
      
      String string2 = null;
      char char0 = '?';
      int int0 = StringUtils.indexOf(string0, char0);
      assertSame(string0, string1);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.overlay(string1, string2, int0, int0);
      assertNotNull(string3);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertTrue(string0.equals((Object)string3));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string1.equals((Object)string3));
      assertEquals("4OSkO)3{h9B~!", string3);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = "7i'I{(pf/r<K-3T+#`";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string0, string1, string1);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\\u00", string2);
  }

  @Test
  public void test116()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = "Search and Replace array lengths don't match: ";
      String string2 = "/.Y9&Czm%5@_C*&";
      assertNotSame(string2, string1);
      
      String string3 = StringUtils.replaceChars(string1, string2, string0);
      assertNotNull(string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't atch: ", string3);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "574w]@fZ]lM^:&I>b";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("574w]@fZ]lM^:&I>b", string1);
  }

  @Test
  public void test118()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = "`j81&f!; Hg|  ";
      String string2 = StringUtils.replaceChars(string1, string0, string0);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("`j81&f!; Hg|  ", string2);
  }

  @Test
  public void test119()  throws Throwable  {
      char char0 = 'w';
      String string0 = null;
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char char0 = 'A';
      String string2 = StringUtils.replaceChars(string1, char0, char0);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("", string2);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "\\u00";
      String[] stringArray0 = new String[5];
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("\\u00", string2);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "(8^}";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = 'J';
      boolean boolean0 = linkedList0.add((Object) string0);
      assertEquals("[(8^}]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((int) char0);
      assertEquals(74, (int)integer0);
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      
      Iterator<String> iterator0 = linkedList1.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      
      String string1 = StringUtils.join(iterator0, char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("[(8^}]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      assertEquals("(8^}", string2);
      
      String string3 = "Minimum abbreviation width is 4";
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string3, string1, (int) integer0);
      assertNotNull(stringArray0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.replaceEachRepeatedly(string2, stringArray0, stringArray0);
      assertNotNull(string4);
      assertSame(string4, string2);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string4);
      assertEquals(0, linkedList1.size());
      assertEquals("[]", linkedList1.toString());
      assertEquals("[(8^}]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertEquals("(8^}", string4);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String[] stringArray1 = new String[10];
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray1);
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertSame(string1, string0);
      assertNotSame(stringArray1, stringArray0);
      assertSame(string0, string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("Minimum abbreviation width is 4", string1);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "...";
      int int0 = 1106;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[5];
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 5
         //
      }
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "}~V[";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: }~V[
         //
      }
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "";
      String string1 = "dd";
      assertNotSame(string1, string0);
      
      char char0 = '7';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dd", string2);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("4OSkO)3{h9B~!", string1);
      
      String string2 = null;
      String[] stringArray0 = StringUtils.splitByCharacterType(string2);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split(string1, string2);
      assertNotNull(stringArray1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      String string3 = StringUtils.replaceEach(string1, stringArray0, stringArray1);
      assertNotNull(string3);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertEquals("4OSkO)3{h9B~!", string3);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = null;
      char char0 = 'e';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
      
      String[] stringArray0 = new String[4];
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNull(string2);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "(8^}";
      char char0 = 'J';
      Integer integer0 = new Integer((int) char0);
      assertEquals(74, (int)integer0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = StringUtils.join(iterator0, char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, (int) integer0);
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = "\\u00";
      int int0 = 5;
      String string1 = StringUtils.left(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\\u00", string1);
      
      char char0 = 'r';
      String string2 = StringUtils.replace(string1, string1, string0, (int) char0);
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertEquals("\\u00", string2);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = " ";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(" ", string1);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "{}";
      String string1 = null;
      String string2 = StringUtils.replace(string0, string0, string1);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("{}", string2);
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = "oQ~Wgc(";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("oQ~Wgc(", string1);
      
      String string2 = null;
      String string3 = StringUtils.replaceOnce(string1, string2, string2);
      assertNotNull(string3);
      assertSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertEquals("oQ~Wgc(", string3);
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = "";
      char char0 = '4';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.replace(string1, string1, string1, (int) char0);
      assertNotNull(string2);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("", string2);
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = "Cannot get he toSring of a nullidentity";
      char char0 = 'l';
      String string1 = StringUtils.remove(string0, char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Cannot get he toSring of a nuidentity", string1);
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = "0ff?9/j";
      int int0 = 13;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("0ff?9/j      ", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      
      char char0 = 'c';
      String string3 = StringUtils.remove(string2, char0);
      assertNotNull(string3);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertEquals("", string3);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "]h";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.remove(string0, string1);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("]h", string2);
  }

  @Test
  public void test138()  throws Throwable  {
      String string0 = " ";
      String string1 = null;
      String string2 = StringUtils.remove(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "(8^}";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = 'J';
      Integer integer0 = new Integer((int) char0);
      assertEquals(74, (int)integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertEquals(1, linkedList0.size());
      assertEquals("[74]", linkedList0.toString());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[74]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertEquals("74", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(1, linkedList0.size());
      assertEquals("[74]", linkedList0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("(8^}", string2);
  }

  @Test
  public void test140()  throws Throwable  {
      String string0 = "}~V[";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("}~V[", string2);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "\\u";
      String string1 = null;
      int int0 = 1079;
      String string2 = StringUtils.overlay(string1, string1, int0, int0);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase(string2, string0);
      assertNull(string3);
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = " ";
      char char0 = 'g';
      String string1 = StringUtils.remove(string0, char0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(" ", string1);
      
      String string2 = "mP$!!";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeEnd(string2, string1);
      assertNotNull(string3);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("mP$!!", string3);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "...";
      String string1 = null;
      String string2 = StringUtils.removeEnd(string0, string1);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("...", string2);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "-XiuKz:~";
      String string1 = StringUtils.reverse(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("~:zKuiX-", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("-XiuKz:~", string2);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "\\u";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\\u", string2);
  }

  @Test
  public void test146()  throws Throwable  {
      String string0 = "-XiuKz:~";
      String string1 = StringUtils.reverse(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("~:zKuiX-", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string1, string1);
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = "z/\"kz=aej<km*#g\\^fu5k:;itz~1W%BA";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string1, string0, string0);
      assertNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase(string2, string1);
      assertNull(string3);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "7ay+k&abnf+gm&9_";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(" is less than 0: ", string2);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = "a";
      String string1 = null;
      String string2 = StringUtils.removeStart(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.deleteWhitespace(string1);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("vs", string1);
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = null;
      Collection<Object> collection0 = null;
      String string1 = StringUtils.join(collection0, string0);
      assertNull(string1);
  }

  @Test
  public void test153()  throws Throwable  {
      Collection<Object> collection0 = null;
      char char0 = 'R';
      String string0 = StringUtils.join(collection0, char0);
      assertNull(string0);
  }

  @Test
  public void test154()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-";
      linkedList0.addFirst(string0);
      assertEquals("[::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.lowerCase(string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-kp5b-xiy]lko|q-", string1);
      
      int int0 = 0;
      linkedList0.add(int0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-kp5b-xiy]lko|q-, ::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("[::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-kp5b-xiy]lko|q-, ::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-::df%kp5b-xiy]lko|q-kp5b-xiy]lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-", string2);
  }

  @Test
  public void test155()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-";
      linkedList0.addFirst(string0);
      assertEquals("[::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("[::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-", string1);
  }

  @Test
  public void test156()  throws Throwable  {
      String string0 = "(8^}";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = 'J';
      boolean boolean0 = linkedList0.add((Object) string0);
      assertEquals(1, linkedList0.size());
      assertEquals("[(8^}]", linkedList0.toString());
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((int) char0);
      assertEquals(74, (int)integer0);
      
      boolean boolean1 = linkedList0.add((Object) integer0);
      assertEquals("[(8^}, 74]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("[(8^}, 74]", linkedList0.toString());
      assertEquals(2, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("(8^}J74", string1);
  }

  @Test
  public void test157()  throws Throwable  {
      char char0 = 'e';
      Iterator<String> iterator0 = null;
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test158()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      assertNotNull(objectArray0[0]);
      
      String string0 = null;
      String string1 = StringUtils.join(objectArray0, string0);
      assertNotNull(string1);
  }

  @Test
  public void test159()  throws Throwable  {
      String string0 = "M.wh2\\7Et";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
      
      char char0 = ' ';
      String string1 = StringUtils.join((Object[]) stringArray0, stringArray0[1], (int) char0, (int) char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = null;
      char char0 = '\\';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, string0, (int) char0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test161()  throws Throwable  {
      char char0 = '4';
      int int0 = 0;
      Object[] objectArray0 = new Object[4];
      // Undeclared exception!
      try {
        String string0 = StringUtils.join(objectArray0, char0, int0, (int) char0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
      }
  }

  @Test
  public void test162()  throws Throwable  {
      String string0 = "U;pO>7+bhq";
      char char0 = '{';
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("U;pO>7+bhq", string1);
      
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertEquals("U;pO>7+bhq", string2);
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNull(stringArray0);
      
      int int0 = 3065;
      char char0 = 'f';
      String string1 = StringUtils.join((Object[]) stringArray0, char0, int0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = "TimeToLive of ";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test166()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = 'J';
      Integer integer0 = new Integer((int) char0);
      assertEquals(74, (int)integer0);
      
      boolean boolean0 = linkedList0.add((Object) integer0);
      assertEquals("[74]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string0);
      assertEquals("[74]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertEquals("74", string0);
      
      String string1 = "Minimum abbreviation width is 4";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(string1, string0);
      assertNotNull(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[74]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = "The Character must not be null";
      String string1 = "~";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1, int0);
      assertNotNull(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOfDifference(string0, string0);
      assertEquals((-1), int0);
      
      String string1 = " rqcUEfI\"";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      char char0 = ' ';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      char char0 = ' ';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = "w";
      char char0 = 'w';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = "m\"od_$uz";
      int int0 = 1;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = "9zevL\\tYga($Xl/";
      int int0 = 1596;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualszevL\\tYga($Xlstring1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0);
      assertNotNull(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = "{}";
      String string1 = " ";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "ZQ?";
      String string1 = "f";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNull(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "]h";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string0);
      assertNotNull(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "0?m1'n7k-+&L";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNull(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "ZQ?";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "rkTi;NqHK:,WAk!Q";
      String string1 = StringUtils.difference(string0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      String string2 = "";
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      
      String string3 = StringUtils.substringBetween(string1, string2);
      assertNotNull(string3);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = " ";
      String string1 = "s\\dCK\"BT,,bpU0";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBetween(string0, string1, string1);
      assertNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "\\u000";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = null;
      int int0 = (-2165);
      String string1 = StringUtils.substring(string0, int0);
      assertNull(string1);
      
      String string2 = StringUtils.substringBetween(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "%s?";
      String string1 = "g{j{$OfpHJ/Ko";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertNotNull(string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = " is less than 0: ";
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals(" is less than 0: ", string1);
      
      String string2 = null;
      String string3 = StringUtils.substringAfterLast(string1, string2);
      assertNotNull(string3);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals("", string3);
  }

  @Test
  public void test186()  throws Throwable  {
      int int0 = (-2374);
      String string0 = null;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast(string1, string1);
      assertNull(string2);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "7ay+k&abnf+gm&9_";
      assertNotSame(string1, string0);
      
      int int0 = 6;
      String string2 = StringUtils.replace(string0, string0, string0, int0);
      assertNotNull(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertEquals(" is less than 0: ", string2);
      
      String string3 = StringUtils.substringBeforeLast(string1, string2);
      assertNotNull(string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string2));
      assertEquals("7ay+k&abnf+gm&9_", string3);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "', has a length less than 2";
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertNotNull(string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("', has a length less than 2", string2);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(string1, string1);
      assertNull(string2);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = "t&\"'eyfhibuot ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNull(string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = "', has a length less than 2";
      String string1 = "Minimum abbreviation width is 4";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is 4", string2);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = "u)bIQ=1Hz6RLb<`bg@c";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotNull(string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "', has a length less than 2";
      String string1 = null;
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("', has a length less than 2", string2);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "574w]@fZ]lM^:&I>b";
      int int0 = (-3996);
      int int1 = 5;
      String string1 = StringUtils.mid(string0, int0, int1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("574w]", string1);
  }

  @Test
  public void test198()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = '{';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      String string1 = StringUtils.mid(string0, (int) char0, (int) char0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "kP5B-xIy]Lko|q-";
      int int0 = 172;
      int int1 = (-402);
      String string1 = StringUtils.mid(string0, int0, int1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals("", string1);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = null;
      char char0 = 'N';
      String string1 = StringUtils.mid(string0, (int) char0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test201()  throws Throwable  {
      char char0 = 'J';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string0);
      
      int int0 = (-394);
      String string1 = StringUtils.right(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
  }

  @Test
  public void test202()  throws Throwable  {
      String string0 = null;
      int int0 = 314;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test203()  throws Throwable  {
      String string0 = "(8^}";
      char char0 = 'J';
      String string1 = StringUtils.right(string0, (int) char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("(8^}", string1);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "XY50(9Q>A BJ&8lx";
      int int0 = (-1877);
      String string1 = StringUtils.left(string0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test205()  throws Throwable  {
      int int0 = 63;
      String string0 = null;
      String string1 = StringUtils.left(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      char char0 = '?';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test
  public void test208()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      char[] charArray0 = new char[3];
      char char0 = 'y';
      String string1 = StringUtils.substring(string0, (int) charArray0[2], (int) char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(" is not in the range '0' - '9'", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test209()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      int int0 = 4;
      char char0 = 'y';
      String string1 = StringUtils.substring(string0, (int) char0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = "W9%-qwp8W{$:}";
      int int0 = (-1560);
      String string1 = StringUtils.substring(string0, int0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("W9%-qwp8W{$:}", string1);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = " ";
      char char0 = 'g';
      String string1 = StringUtils.remove(string0, char0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(" ", string1);
      
      String string2 = StringUtils.substring(string1, (int) char0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = "', has a length less than 2";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      int int0 = StringUtils.lastIndexOfAny(stringArray0[6], stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = "O3)FueS)B^V]";
      String[] stringArray0 = null;
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = "XY50(9Q>A BJ&8lx";
      String[] stringArray0 = new String[8];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = "XY50(9Q>A BJ&8lx";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test216()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = '{';
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string1);
      assertNull(stringArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals((-1), int0);
  }

  @Test
  public void test217()  throws Throwable  {
      String string0 = null;
      String string1 = "The Array must not be null";
      boolean boolean0 = StringUtils.containsNone(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test219()  throws Throwable  {
      String string0 = "\\u00";
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = " ";
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test221()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test222()  throws Throwable  {
      String string0 = "',Y%*h1Zu=',Y%*h1Zu=";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test223()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "7ay+k&abnf+gm&9_";
      assertNotSame(string1, string0);
      
      int int0 = 6;
      String string2 = StringUtils.replace(string0, string1, string1, int0);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(" is less than 0: ", string2);
      
      boolean boolean0 = StringUtils.containsOnly(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test225()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = '{';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      String string1 = "Search and Replace array lengths don't match: ";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly(string1, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test227()  throws Throwable  {
      char[] charArray0 = new char[2];
      String string0 = null;
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test228()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      String string2 = "+0D";
      assertNotSame(string2, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string2, string1);
      assertNotNull(stringArray0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("+0D", string3);
      
      int int0 = StringUtils.indexOfAnyBut(string0, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, int0);
  }

  @Test
  public void test229()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "...";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0);
      assertNotNull(stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      
      int int0 = StringUtils.indexOfAnyBut(string2, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      int int0 = StringUtils.indexOfAnyBut(string1, string0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals((-1), int0);
  }

  @Test
  public void test232()  throws Throwable  {
      String string0 = "',Y%*h1Zu=";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("',Y%*h1Zu=", string1);
      
      boolean boolean0 = StringUtils.containsOnly(string1, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test233()  throws Throwable  {
      String string0 = "Vz5TA'3^";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[8];
      int int0 = StringUtils.indexOfAnyBut(string1, charArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "W9%-qwp8W{$:}";
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = "XY50(9Q>A BJ&8lx";
      String string1 = "";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test237()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = " is less than 0: ";
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsAny(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = "::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-";
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNull(string1);
      
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsAny(string1, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = "\\u";
      String string1 = null;
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = "1YtoG5n,@w2u:}W{";
      String string1 = "jvbKx$FBiy";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = "Array element ";
      int int0 = StringUtils.indexOfAny(string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[4];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      int int0 = 4;
      char[] charArray0 = new char[3];
      char char0 = 'y';
      charArray0[0] = char0;
      String string1 = "VqXTt~.K|sX41X,U;pO>7+bhqVqXTt~.K|sX41X,U;pO>7+bhq";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.mid(string0, int0, (int) charArray0[0]);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("not in the range '0' - '9'", string2);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'y', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      String string2 = StringUtils.strip(string1);
      assertNotNull(string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertFalse(boolean0);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test248()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test249()  throws Throwable  {
      String string0 = "O3)FueS)B^V]";
      String[] stringArray0 = new String[2];
      String string1 = "$L7QnOFIJJEM";
      assertNotSame(string1, string0);
      
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      boolean boolean0 = StringUtils.contains(string0, stringArray0[0]);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      String string1 = null;
      boolean boolean0 = StringUtils.contains(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test251()  throws Throwable  {
      String string0 = "Minimum abbreviation width is 4";
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      boolean boolean0 = StringUtils.contains(string1, string1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(boolean0);
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = "9zevL\\tYga($Xl/";
      int int0 = 1596;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualszevL\\tYga($Xl/                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ", string1);
      
      char char0 = '9';
      boolean boolean0 = StringUtils.contains(string1, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test254()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      char char0 = '{';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test255()  throws Throwable  {
      String string0 = "ZQ?";
      char char0 = 'A';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test256()  throws Throwable  {
      String string0 = " ";
      char char0 = '%';
      int int0 = StringUtils.lastIndexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test257()  throws Throwable  {
      String string0 = "0ff?9/j";
      int int0 = 13;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("0ff?9/j      ", string1);
      
      String string2 = null;
      String[] stringArray0 = new String[9];
      int int1 = StringUtils.lastIndexOfAny(string2, stringArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf(string2, string1, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-1), int2);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = " is less than 0: ";
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test259()  throws Throwable  {
      String string0 = null;
      int int0 = 4;
      String string1 = StringUtils.center(string0, int0);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOf(string1, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = null;
      char char0 = 'e';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf(string1, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = "]h";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      
      char char0 = '$';
      int int0 = StringUtils.lastIndexOf(string1, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      char char0 = '?';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test263()  throws Throwable  {
      String string0 = "GD/ixQ-,O#`&y_,B";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      int int1 = StringUtils.indexOf(string0, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test264()  throws Throwable  {
      String string0 = "(8^}";
      char char0 = 'J';
      int int0 = StringUtils.indexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test265()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      char char0 = '{';
      String string1 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertNotNull(string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string0);
      assertNull(stringArray0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf(string1, string0, int0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test266()  throws Throwable  {
      char char0 = 'J';
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf(string0, string0, (int) char0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, int0);
  }

  @Test
  public void test267()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      int int1 = StringUtils.indexOf(string0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = "7Ay+k&ab";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
      
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "...";
      int int0 = 1106;
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = "p.sa?-";
      int int0 = (-2165);
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test271()  throws Throwable  {
      String string0 = "M.wh2\\7Et";
      int int0 = 5892;
      char char0 = ' ';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEqualswh2\\7Et", string1);
      
      String string2 = null;
      int int1 = StringUtils.ordinalIndexOf(string1, string2, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
  }

  @Test
  public void test272()  throws Throwable  {
      char char0 = 'J';
      Integer integer0 = new Integer((int) char0);
      assertEquals(74, (int)integer0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, string0, (int) integer0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, int0);
  }

  @Test
  public void test273()  throws Throwable  {
      String string0 = "574w]@fZ]lM^:&I>b";
      int int0 = (-3996);
      String string1 = null;
      int int1 = StringUtils.ordinalIndexOf(string1, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test274()  throws Throwable  {
      String string0 = null;
      String string1 = "B\"XvP,n\"O6Ura;Rr'\"4";
      int int0 = StringUtils.indexOf(string1, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test275()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf(string1, string1);
      assertEquals(0, int0);
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = null;
      char char0 = '0';
      int int0 = StringUtils.indexOf(string0, char0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test277()  throws Throwable  {
      String string0 = " ";
      char char0 = 'g';
      String string1 = StringUtils.remove(string0, char0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(" ", string1);
      
      int int0 = StringUtils.indexOf(string1, char0, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = "";
      char char0 = '4';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = "\"y-\\!c,6";
      String string1 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test281()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      String string1 = StringUtils.trim(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("4OSkO)3{h9B~!", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test282()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBefore(string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equals(string1, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = ".Y) \\`}N^yw(`C=r";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      String string2 = null;
      boolean boolean0 = StringUtils.equals(string2, string1);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = ".P=y<;rLdWv";
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = "z/\"kz=aej<km*#g\\^fu5k:;itz~1W%BA";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string0);
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = null;
      int int0 = (-2165);
      String string1 = StringUtils.substring(string0, int0);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string1, int0);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNull(stringArray1);
  }

  @Test
  public void test287()  throws Throwable  {
      String string0 = ".Y) \\`}N^yw(`C=r";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      String string2 = StringUtils.stripEnd(string1, string1);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = " vs ";
      String string1 = "0g:tyf";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotNull(string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(" vs ", string2);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = "9zevL\\tYga($Xl/";
      int int0 = 1596;
      String string1 = StringUtils.center(string0, int0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualszevL\\tYga($Xlstring1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join(iterator0, string1);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      
      String string3 = StringUtils.strip(string1, string2);
      assertNotNull(string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      9zevL\\tYga($Xlstring3);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.strip(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = " vs ";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(" vs ", string1);
      
      String string2 = StringUtils.strip(string1, string0);
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = "',Y%*h1Zu=";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("',Y%*h1Zu=", string1);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertNotNull(string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripStart(string2, string1);
      assertNotNull(string3);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test295()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test296()  throws Throwable  {
      String string0 = "z/\"kz=aej<km*#g\\^fu5k:;itz~1W%BA";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string1, string0, string0);
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull(string2);
      assertNull(string3);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.stripToNull(string0);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("vs", string1);
  }

  @Test
  public void test298()  throws Throwable  {
      String string0 = " is less than 0: ";
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(" is less than 0: ", string1);
      
      String string2 = StringUtils.trimToEmpty(string1);
      assertNotNull(string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("is less than 0:", string2);
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = "&";
      String string1 = StringUtils.trimToNull(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("&", string1);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = "::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-::Df%kP5B-xIy]Lko|q-kP5B-xIy]Lko|q-";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test304()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test306()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test307()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      char char0 = '?';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test
  public void test308()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test
  public void test309()  throws Throwable  {
      String string0 = "z/\"kz=aej<km*#g\\^fu5k:;itz~1W%BA";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test310()  throws Throwable  {
      String string0 = "Y|}iz**pn";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test311()  throws Throwable  {
      String string0 = " is less than 0: ";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test312()  throws Throwable  {
      String string0 = "(8^}";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test
  public void test313()  throws Throwable  {
      String string0 = " is less than 0: ";
      int int0 = 6;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test314()  throws Throwable  {
      String string0 = " ";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test315()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = new String[6];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test316()  throws Throwable  {
      String string0 = "4OSkO)3{h9B~!";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test317()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = linkedList0.pollLast();
      assertNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string1 = StringUtils.join((Object[]) stringArray0);
      assertNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test318()  throws Throwable  {
      String string0 = " ";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test319()  throws Throwable  {
      String string0 = " ";
      int int0 = 2551;
      String[] stringArray0 = StringUtils.split(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test320()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
