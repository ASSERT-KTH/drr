/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:35:33 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Locale;
import org.apache.commons.lang.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = "4<-h)";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("4<-h)", string2);
      assertNotNull(string2);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = null;
      String string2 = StringUtils.trimToEmpty(string0);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("56\"jqt`", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string1, string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = null;
      boolean boolean0 = StringUtils.endsWith(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = " is less than 0: ";
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "}\\N}tny,uGPBqPZ\"";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      boolean boolean0 = StringUtils.startsWithAny(string1, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = null;
      String string1 = "fNp\\$P[Kmr6}_\\MON";
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("fNp\\$P[Kmr6}_\\MON", string2);
      assertNotNull(string2);
      
      String string3 = "";
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string3, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "MJ64'zn.V{";
      String string1 = null;
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String[] stringArray0 = new String[5];
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      int int0 = 2609;
      String string0 = null;
      String string1 = StringUtils.repeat(string0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(string1, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = null;
      String string1 = "fNp\\$P[Kmr6}_\\MON";
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("fNp\\$P[Kmr6}_\\MON", string2);
      assertNotNull(string2);
      
      String string3 = "=xNC5-~F??D";
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.getLevenshteinDistance(string2, string3);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertEquals(17, int0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "Bec#2HqT]>abw:,fq";
      int int0 = 0;
      String string1 = StringUtils.substring(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("Bec#2HqT]>abw:,fq", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(18, int1);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "f";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance(string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "y)?}uQ9`cvhxv8YQSA";
      String string1 = null;
      String string2 = StringUtils.chomp(string0, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("y)?}uQ9`cvhxv8YQSA", string2);
      assertNotNull(string2);
      
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string2, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "56\"jqt`";
      int int0 = StringUtils.getLevenshteinDistance(string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance(string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry(locale0);
      assertEquals("", string0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "FM";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      objectArray0[1] = (Object) string0;
      assertNotNull(objectArray0[1]);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("FMFM", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("FM", string2);
      assertNotNull(string2);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = new String[10];
      String string1 = "P1+=4HC75G";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = ", Length: ";
      String[] stringArray0 = new String[2];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string1, string0);
      assertEquals(", Length: ", string1);
      assertNotNull(string1);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test021()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = null;
      String string1 = "fNp\\$P[Kmr6}_\\MON";
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("fNp\\$P[Kmr6}_\\MON", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string2, string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference(stringArray0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals((-1), int0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "5vgKh\\u&PN9";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = "";
      String string1 = "c<I_asdX%2EPZSsc,$";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.difference(string0, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = "tils$";
      int int0 = 709;
      char char0 = 'N';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualstils$", string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int1 = StringUtils.indexOfDifference(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int1);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "\\u0";
      String[] stringArray0 = new String[10];
      int int0 = StringUtils.indexOfDifference(stringArray0[0], string0);
      assertEquals(0, int0);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "2VT72f";
      String string1 = null;
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("2VT72f", string2);
      assertNotNull(string2);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "r`KG^8K6v";
      int int0 = 51;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("r`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6v", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(string1, int0, int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("...K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8K6vr`KG^8...", string2);
      assertNotNull(string2);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = " is less than 0: ";
      int int0 = 0;
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(string0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = 64;
      String string0 = null;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[10];
      String string1 = StringUtils.reverseDelimited(string0, charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string1);
  }

  @Test
  public void test032()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(iterator0);
      
      char char0 = '\"';
      String string0 = StringUtils.join(iterator0, char0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string1);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "2xU~hgL%J=l'y9";
      Object[] objectArray0 = new Object[7];
      char char0 = '`';
      String string1 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("2xU~hgL%J=l'y9", string2);
      assertNotNull(string2);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "7/wlHD=i+OI{";
      String string1 = null;
      String string2 = StringUtils.defaultString(string1, string0);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("7/wlHD=i+OI{", string2);
      assertNotNull(string2);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test036()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "IQI{6d}YK;p\"LF4%i";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllUpperCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = "f";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = "QVR";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "2<pTg/O?;\"X6U/-\\4y";
      boolean boolean0 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "'4(e>KI";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "n9?;x;K]BECqwyP";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = "8q*g\\'1D8PV4#";
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "-H]_rY";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string1);
      assertFalse(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = "%co~/@U6J)S@l]]";
      boolean boolean0 = StringUtils.isAsciiPrintable(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "The String must not be empty";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "ph}4qPfqF:YyOcTv";
      boolean boolean0 = StringUtils.isAlphanumericSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS 7", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
  }

  @Test
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "Strings must not be null";
      int int0 = (-287);
      String string1 = StringUtils.rightPad(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Strings must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "YYq\"";
      boolean boolean0 = StringUtils.isAlphaSpace(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = 'Q';
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, char0);
      assertEquals("", string0);
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
      assertEquals(false, listIterator0.hasNext());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "kCV%p`z";
      int int0 = (-1039);
      int int1 = 4;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k...", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      int int0 = StringUtils.countMatches(string0, string0);
      assertEquals(1, int0);
  }

  @Test
  public void test068()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = ' ';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = " is not in the range '0' - '9'";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.deleteWhitespace(string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("isnotintherange'0'-'9'", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches(string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
  }

  @Test
  public void test072()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = 'Q';
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertNotNull(string1);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "2VT72f";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("2VT72f", string1);
      assertNotNull(string1);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNull(string1);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase(string1);
      assertNull(string2);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = StringUtils.lowerCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("56\"jqt`", string1);
      assertNotNull(string1);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = null;
      Locale locale0 = null;
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNull(string1);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "n9?;x;K]BECqwyP";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = "The Array must not be null";
      assertNotSame(string2, string0);
      
      int int0 = 16;
      String string3 = StringUtils.center(string2, int0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("The Array must not be null", string3);
      assertNotNull(string3);
  }

  @Test
  public void test082()  throws Throwable  {
      char char0 = 'h';
      String string0 = null;
      String string1 = StringUtils.center(string0, (int) char0, string0);
      assertNull(string1);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      int int0 = 973;
      char char0 = '\u001F';
      String string1 = StringUtils.abbreviate(string0, int0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("...che.commons.lang.StringUtils", string1);
      assertNotNull(string1);
      
      char char1 = 'F';
      String string2 = StringUtils.center(string1, (int) char1, char0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(char1 == char0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(char0 == char1);
      assertEquals("\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F...che.commons.lang.StringUtils\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F", string2);
      assertNotNull(string2);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "kCV%p`z";
      int int0 = (-1039);
      int int1 = 4;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k...", string1);
      assertNotNull(string1);
      
      char char0 = 'Q';
      String string2 = StringUtils.center(string1, int1, char0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("k...", string2);
      assertNotNull(string2);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.length(string1);
      assertEquals(0, int0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "_";
      int int0 = 2778;
      String string1 = StringUtils.chop(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.center(string1, int0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEqualsstring2);
      assertNotNull(string2);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      String string1 = "fNp\\$P[Kmr6}_\\MON";
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("fNp\\$P[Kmr6}_\\MON", string2);
      assertNotNull(string2);
      
      String string3 = "";
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfAnyBut(string2, string0);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.leftPad(string2, int0, string3);
      assertSame(string2, string4);
      assertNotSame(string2, string3);
      assertSame(string2, string1);
      assertNotSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string4, string3);
      assertSame(string4, string1);
      assertSame(string4, string2);
      assertSame(string1, string4);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertEquals("fNp\\$P[Kmr6}_\\MON", string4);
      assertNotNull(string4);
  }

  @Test
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = null;
      String string1 = StringUtils.leftPad(string0, (int) charArray0[1]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string1);
  }

  @Test
  public void test089()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = 'X';
      charArray0[1] = char0;
      String string0 = "The Character must not be null";
      String string1 = StringUtils.center(string0, (int) charArray0[1], string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("The Character must not be nulThe Character must not be nullThe Character must not be nul", string1);
      assertArrayEquals(new char[] {'\u0000', 'X', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "{}";
      int int0 = 11;
      String string1 = "7vG}j$dR";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.rightPad(string0, int0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("{}7vG}j$dR", string2);
      assertNotNull(string2);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "kCV%p`z";
      int int0 = StringUtils.length(string0);
      assertEquals(7, int0);
      
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("kCV%p`z", string1);
      assertNotNull(string1);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char char0 = 'Q';
      String string2 = StringUtils.rightPad(string1, (int) char0, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals("                                                                                 ", string2);
      assertNotNull(string2);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "@w[U)t";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = (-4113);
      String string2 = null;
      String string3 = StringUtils.replace(string2, string0, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string3);
      
      String string4 = StringUtils.rightPad(string3, int0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string4);
  }

  @Test
  public void test094()  throws Throwable  {
      char char0 = '&';
      String string0 = null;
      String string1 = StringUtils.rightPad(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "Dtm[7'vgK5U";
      String string1 = null;
      int int0 = 5222;
      String string2 = StringUtils.repeat(string0, string1, int0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "Dtm[7'vgK5U";
      int int0 = 5222;
      String string1 = StringUtils.repeat(string0, string0, int0);
  }

  @Test
  public void test097()  throws Throwable  {
      char char0 = 'T';
      String string0 = null;
      String string1 = StringUtils.repeat(string0, string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 122;
      String string0 = "NG";
      String string1 = StringUtils.repeat(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("NGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNGNG", string1);
      assertNotNull(string1);
  }

  @Test
  public void test099()  throws Throwable  {
      char char0 = 'e';
      String string0 = "f";
      String string1 = StringUtils.repeat(string0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string1);
      assertNotNull(string1);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "";
      int int0 = 64;
      String string1 = StringUtils.repeat(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "P82$o";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("P82$o", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(string1, int0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "X=(4aqftOn\"@w-x$4";
      String string1 = "-H]_rY";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("-H]_rY", string2);
      assertNotNull(string2);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.chomp(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string3);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = ",";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(",", string1);
      assertNotNull(string1);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(" vs ", string1);
      assertNotNull(string1);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      Object[] objectArray0 = new Object[7];
      char char0 = 'b';
      String string1 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf(string0, char0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.overlay(string0, string1, (int) char0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "zOn(z";
      String string1 = StringUtils.swapCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZoN(Z", string1);
      assertNotNull(string1);
      
      char char0 = ')';
      int int0 = StringUtils.indexOf(string1, char0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.overlay(string0, string1, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZoN(ZzOn(z", string2);
      assertNotNull(string2);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "ph}4qPfqF:YyOcTv";
      String string1 = null;
      String string2 = StringUtils.chop(string0);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("ph}4qPfqF:YyOcT", string2);
      assertNotNull(string2);
      
      char char0 = 'e';
      String string3 = StringUtils.overlay(string2, string1, (int) char0, (int) char0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertTrue(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals("ph}4qPfqF:YyOcT", string3);
      assertNotNull(string3);
  }

  @Test
  public void test110()  throws Throwable  {
      char char0 = '&';
      String string0 = null;
      String string1 = StringUtils.overlay(string0, string0, (int) char0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "PSI9PYa2";
      String string1 = "1f'j8/\\{q";
      assertNotSame(string1, string0);
      
      char char0 = '$';
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("1f'j8/\\{q", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars(string0, string2, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("PSI9PYa2", string3);
      assertNotNull(string3);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = " vs ";
      String string1 = StringUtils.upperCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" VS ", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.replaceChars(string0, string1, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertEquals("vs", string3);
      assertNotNull(string3);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "@w[U)t";
      String string1 = "The character must not be null";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("The character must not be null", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast(string1, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars(string2, string3, string2);
      assertSame(string1, string4);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string2, string4);
      assertSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertSame(string4, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("The character must not be null", string4);
      assertNotNull(string4);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = " ArudB_DwPmo:)M{:";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ArudB_DwPmo:)M{:", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars(string0, string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ArudB_DwPmo:)M{:)", string2);
      assertNotNull(string2);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars(string1, string1, string1);
      assertNull(string2);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = null;
      char char0 = 'K';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "kCV%p`z";
      char char0 = 'Q';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("kCV%p`z", string1);
      assertNotNull(string1);
  }

  @Test
  public void test118()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = ' ';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = " is not in the range '0' - '9'";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string1;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string1;
      assertNotNull(stringArray0[7]);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertEquals(" is not in the range '0' - '9'", string2);
      assertNotNull(string2);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = "'4(e>KI";
      String string1 = StringUtils.upperCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("'4(E>KI", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = string2;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string2;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string2;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string1;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string2;
      assertNotNull(stringArray0[6]);
      
      // Undeclared exception!
      try {
        String string3 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: '4(e>KI
         //
      }
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = "strings must not be nuBs";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: strings must not be nuBs
         //
      }
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      String string1 = "strings must.ke&meeqp4ct";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("050^S/;`B1cR[TPRv3", string2);
      assertNotNull(string2);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "'4(e>KI";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[23];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(stringArray0[2], stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = ", '";
      int int0 = 0;
      String string1 = StringUtils.center(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(", '", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      String[] stringArray1 = new String[10];
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 10
         //
      }
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // TimeToLive of -1 is less than 0: 050^S/;`B1cR[TPRv3
         //
      }
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      Object[] objectArray0 = new Object[7];
      char char0 = 'b';
      String string1 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("050^S/;`B1cR[TPRv3", string2);
      assertNotNull(string2);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[4];
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNull(string1);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "org.apache.commons.lang.CharUtils";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG.CHARUTILS", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.substringsBetween(string1, string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNull(stringArray1);
      
      String string2 = StringUtils.replaceEachRepeatedly(string1, stringArray1, stringArray0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG.CHARUTILS", string2);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string2);
  }

  @Test
  public void test128()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      char char0 = 'b';
      String string0 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = "YYq\"";
      char char0 = 'E';
      String string1 = "4|9(";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.remove(string0, char0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("YYq\"", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replace(string2, string1, string2, (int) char0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string2, string3);
      assertSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("YYq\"", string3);
      assertNotNull(string3);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = ".;@}E9\\O{";
      int int0 = 0;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(".;@}E9\\O{", string1);
      assertNotNull(string1);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "2<pTg/O?;\"X6U/-\\4y";
      String string1 = null;
      String string2 = StringUtils.replace(string0, string0, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("2<pTg/O?;\"X6U/-\\4y", string2);
      assertNotNull(string2);
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = "!,\"#";
      String string1 = "";
      assertNotSame(string1, string0);
      
      char char0 = '_';
      String string2 = StringUtils.replace(string0, string1, string0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("!,\"#", string2);
      assertNotNull(string2);
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = "z]-u";
      String string1 = "N]Xt$R-5#a3'v?By*";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripStart(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("N]Xt$R-5#a3'v?By*", string2);
      assertNotNull(string2);
      
      char char0 = 'v';
      String string3 = StringUtils.remove(string2, char0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertEquals("N]Xt$R-5#a3'?By*", string3);
      assertNotNull(string3);
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = "";
      char char0 = 'Z';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = ", '";
      String string1 = null;
      String string2 = StringUtils.remove(string0, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals(", '", string2);
      assertNotNull(string2);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = " ArudB_DwPmo:)M{:";
      String string1 = StringUtils.remove(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test138()  throws Throwable  {
      String string0 = "_ekYn};oaY/]oC";
      int int0 = StringUtils.length(string0);
      assertEquals(14, int0);
      
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test140()  throws Throwable  {
      String string0 = " is less than 0: ";
      String string1 = "'k\"n'OL";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals(" is less than 0: ", string2);
      assertNotNull(string2);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "Z)dV=i(";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Z)dV=i(", string2);
      assertNotNull(string2);
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "^~8";
      String string1 = "??";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^~8", string2);
      assertNotNull(string2);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "ils";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      Iterator<String> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(iterator0);
      
      char[] charArray0 = new char[10];
      String string1 = StringUtils.join(iterator0, charArray0[1]);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ils", string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string2);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test146()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      String string1 = "strings must.ke&meeqp4ct";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string1, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("strings must.ke&meeqp4ct", string2);
      assertNotNull(string2);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      Object[] objectArray0 = new Object[7];
      char char0 = 'b';
      String string1 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("050^S/;`B1cR[TPRv3", string2);
      assertNotNull(string2);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = "'4(e>KI";
      String string1 = StringUtils.upperCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("'4(E>KI", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart(string2, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = "Z)dV=i(";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace(string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = "tw[`*]";
      char char0 = 'V';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("tw[`*]", string1);
      assertNotNull(string1);
      
      Collection<Object> collection0 = null;
      String string2 = StringUtils.join(collection0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = "zOn(z";
      String string1 = StringUtils.swapCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ZoN(Z", string1);
      assertNotNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertTrue(boolean0);
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.offerLast(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      String string2 = StringUtils.join((Collection<?>) linkedList0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(2, linkedList0.size());
      assertNotNull(string2);
  }

  @Test
  public void test153()  throws Throwable  {
      Collection<Object> collection0 = null;
      char char0 = '\\';
      String string0 = StringUtils.join(collection0, char0);
      assertNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offerLast(string0);
      assertTrue(boolean0);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      String string1 = StringUtils.join((Collection<?>) linkedList0, string0);
      assertEquals("", string1);
      assertEquals("[null]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertNotNull(string1);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "P82$o";
      Iterator<String> iterator0 = null;
      String string1 = StringUtils.join(iterator0, string0);
      assertNull(string1);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = " ArudB_DwPmo:)M{:";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ArudB_DwPmo:)M{:", string1);
      assertNotNull(string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<String> iterator0 = linkedList0.descendingIterator();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string2);
  }

  @Test
  public void test156()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertTrue(boolean0);
      assertEquals("[(this Collection)]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = linkedList0.offerLast(object0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(2, linkedList0.size());
      
      char char0 = ')';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals(2, linkedList0.size());
      assertNotNull(string0);
  }

  @Test
  public void test157()  throws Throwable  {
      String string0 = "kCV%p`z";
      int int0 = (-1039);
      int int1 = 4;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("k...", string1);
      assertNotNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.offer((Object) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(boolean0);
      assertEquals("[k...]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      char char0 = 'Q';
      ListIterator<Object> listIterator0 = linkedList0.listIterator();
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(true, listIterator0.hasNext());
      assertEquals("[k...]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertNotNull(listIterator0);
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, char0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("k...", string2);
      assertEquals(1, listIterator0.nextIndex());
      assertEquals(true, listIterator0.hasPrevious());
      assertEquals(0, listIterator0.previousIndex());
      assertEquals(false, listIterator0.hasNext());
      assertEquals("[k...]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      assertNotNull(string2);
  }

  @Test
  public void test158()  throws Throwable  {
      char char0 = 'X';
      Iterator<String> iterator0 = null;
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test159()  throws Throwable  {
      String string0 = "FM";
      Object[] objectArray0 = new Object[1];
      int int0 = (-1);
      String string1 = StringUtils.join(objectArray0, string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = "@w[U)t";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("@w[U)t", string2);
      assertNotNull(string2);
  }

  @Test
  public void test161()  throws Throwable  {
      String string0 = "$}}Gs}@a4F%7seCr";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = (-244);
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("$}}gs}@a4f%7secr", string1);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNull(string2);
  }

  @Test
  public void test162()  throws Throwable  {
      String string0 = "dy]__R7whi<";
      String string1 = StringUtils.defaultString(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("dy]__R7whi<", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((Object[]) stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[5];
      char char0 = '5';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("5555", string0);
      assertNotNull(string0);
  }

  @Test
  public void test164()  throws Throwable  {
      int int0 = 2609;
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNull(stringArray0);
      
      char char0 = 'd';
      String string1 = StringUtils.join((Object[]) stringArray0, char0, int0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "~[|{o!~M]\\}Zs";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNull(stringArray0);
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = StringUtils.trimToEmpty(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("56\"jqt`", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split(string1, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "=xNC5-~F??D";
      String string1 = "Mtn&g[[<bIn6D\\z";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test170()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = "...";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.split(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(stringArray0);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = "U";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test172()  throws Throwable  {
      char char0 = 'Q';
      String string0 = "fq?i|=4?SO&0EhfV";
      String string1 = "?";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string0, string1, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      int int0 = 973;
      char char0 = '\u001F';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Forg.apache.commons.lang.StringUtils", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = " ";
      char char0 = ' ';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      char char0 = 'i';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = null;
      char char0 = 'd';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNull(stringArray0);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "_";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "...";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = "^~8";
      String string1 = "??";
      assertNotSame(string1, string0);
      
      int int0 = 2029;
      String string2 = StringUtils.replace(string0, string0, string1, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertEquals("??", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertNull(stringArray0);
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = " is not in the range '0' - '9'";
      String string1 = "The character ";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = "$}}Gs}@a4F%7seCr";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(stringArray0);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "ils";
      String string1 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string0, string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBetween(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = null;
      String string1 = "fNp\\$P[Kmr6}_\\MON";
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("fNp\\$P[Kmr6}_\\MON", string2);
      assertNotNull(string2);
      
      String string3 = "$}}Gs}@a4F%7seCr";
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.substringBetween(string1, string3, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertNull(string4);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string0, string0, string1);
      assertNull(string2);
  }

  @Test
  public void test189()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "\\u000";
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      String string1 = null;
      String string2 = StringUtils.substringBetween(stringArray0[4], string1);
      assertNull(string2);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = "dy]__R7whi<";
      String string1 = StringUtils.defaultString(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("dy]__R7whi<", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = StringUtils.upperCase(string1, locale0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("DY]__R7WHI<", string2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(string3);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = "dy]__R7whi<";
      String string1 = StringUtils.defaultString(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("dy]__R7whi<", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayCountry(locale0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast(string1, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string3);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string3);
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = "_";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast(string1, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = "YYq\"";
      char char0 = 'E';
      String string1 = "4|9(";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.leftPad(string1, (int) char0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(44|9(", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(4|9(44|9(", string3);
      assertNotNull(string3);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = "$}}Gs}@a4F%7seCr";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("$}}Gs}@a4F%7seCr", string2);
      assertNotNull(string2);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "YYq\"";
      char char0 = 'E';
      String string1 = StringUtils.leftPad(string0, (int) char0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYYq\"", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(string1, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "Z)dV=i(";
      String string1 = "{}";
      assertNotSame(string1, string0);
      
      int int0 = 11;
      String string2 = StringUtils.rightPad(string1, int0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("{}{}{}{}{}{", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test
  public void test198()  throws Throwable  {
      String string0 = "<YYa!KZ>dD4cs:1_b?R";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "_";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = "Z)dV=i(";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 11;
      String string2 = StringUtils.rightPad(string1, int0, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Z)dV=i(Z)", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(string2, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test
  public void test201()  throws Throwable  {
      String string0 = "kCV%p`z";
      String string1 = null;
      String string2 = StringUtils.substringBefore(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("kCV%p`z", string2);
      assertNotNull(string2);
  }

  @Test
  public void test202()  throws Throwable  {
      String string0 = "kCV%p`z";
      int int0 = (-1039);
      int int1 = 4;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("k...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertEquals("k...", string2);
      assertNotNull(string2);
  }

  @Test
  public void test203()  throws Throwable  {
      String string0 = "2xU~hgL%J=l'y9";
      char char0 = '`';
      int int0 = (-1370);
      String string1 = StringUtils.mid(string0, int0, (int) char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("2xU~hgL%J=l'y9", string1);
      assertNotNull(string1);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "56\"jqt`";
      char[] charArray0 = new char[3];
      char char0 = '+';
      String string1 = StringUtils.trimToEmpty(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("56\"jqt`", string1);
      assertNotNull(string1);
      
      charArray0[1] = char0;
      String string2 = StringUtils.mid(string1, (int) charArray0[1], (int) charArray0[1]);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertArrayEquals(new char[] {'\u0000', '+', '\u0000'}, charArray0);
      assertNotNull(string2);
  }

  @Test
  public void test205()  throws Throwable  {
      String string0 = "n9?;x;K]BECqwyP";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = linkedList0.size();
      assertEquals(0, int0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      int int1 = (-3276);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.mid(string0, int0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = null;
      char char0 = 'X';
      String string1 = StringUtils.mid(string0, (int) char0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = "J|M1~xR;NtD LhWoB";
      String string1 = StringUtils.reverse(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("BoWhL DtN;Rx~1M|J", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.right(string1, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test208()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string0);
      
      int int0 = (-2918);
      String string1 = StringUtils.right(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string1);
  }

  @Test
  public void test209()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test210()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = StringUtils.right(string0, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = "";
      String string1 = "Minimum abbreviation width with offset is 7";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.length(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
      
      String string2 = StringUtils.left(string1, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      int int0 = (-3589);
      String string1 = StringUtils.left(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.length(string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = "\"Yj.MlG7\"Yj.MlG7";
      int int0 = (-1156);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = "\"Yj.MlG7\"Yj.MlG7";
      char char0 = '\\';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test217()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      char char0 = ' ';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string0);
      
      int int0 = (-1771);
      String string1 = StringUtils.substring(string0, (int) char0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string1);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = "\\u0";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String[] stringArray0 = new String[2];
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNull(string2);
  }

  @Test
  public void test219()  throws Throwable  {
      String string0 = "%co~/@U6J)S@l]]";
      int int0 = 2609;
      String string1 = StringUtils.substring(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = "dy]__R7whi<";
      int int0 = (-632);
      String string1 = StringUtils.substring(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("dy]__R7whi<", string1);
      assertNotNull(string1);
  }

  @Test
  public void test221()  throws Throwable  {
      String string0 = "_";
      String string1 = null;
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("_", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string2, string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.lastIndexOfAny(string2, stringArray0);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals(1, int0);
  }

  @Test
  public void test222()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test223()  throws Throwable  {
      String string0 = "\\@/5j2]";
      String string1 = StringUtils.trim(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("\\@/5j2]", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = "X=(4aqftOn\"@w-x$4";
      String string1 = "-H]_rY";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOf(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      char char0 = 'X';
      String string2 = StringUtils.rightPad(string1, int0, char0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-H]_rY", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      int int1 = StringUtils.indexOfAny(string2, stringArray0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), int1);
  }

  @Test
  public void test225()  throws Throwable  {
      String string0 = "X=(4aqftOn\"@w-x$4";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("X=(4aqftOn\"@w-x$4", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      int int0 = StringUtils.indexOfAny(string1, stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(0, int0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = "\\@/5j2]";
      String string1 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsNone(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test228()  throws Throwable  {
      String string0 = "D=_y7AU,/";
      char[] charArray0 = new char[6];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test229()  throws Throwable  {
      String string0 = null;
      String string1 = "fNp\\$P[Kmr6}_\\MON";
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertEquals("fNp\\$P[Kmr6}_\\MON", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone(string2, string2);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[7];
      boolean boolean0 = StringUtils.containsNone(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = "@w[U)t";
      String string1 = null;
      boolean boolean0 = StringUtils.containsOnly(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test232()  throws Throwable  {
      String string0 = "_ekYn};oaY/]oC";
      int int0 = StringUtils.length(string0);
      assertEquals(14, int0);
      
      char char0 = '9';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("_ekYn};oaY/]oC", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly(string1, charArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test233()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsOnly(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      String string1 = "strings must.ke&meeqp4ct";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAnyBut(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, int0);
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      int int0 = StringUtils.indexOfAnyBut(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = "tw[`*]";
      char char0 = 'V';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("tw[`*]", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly(string1, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAnyBut(string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = "<3QEocP8h wBxKP7";
      String string1 = null;
      boolean boolean0 = StringUtils.containsAny(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = ", Length: ";
      boolean boolean0 = StringUtils.containsAny(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = "ils";
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsAny(string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = "YYq\"";
      char char0 = 'E';
      String string1 = StringUtils.leftPad(string0, (int) char0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYYq\"", string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.containsAny(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = "r`KG^8K6v";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfAny(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = "J|M1~xR;NtD LhWoB";
      String string1 = null;
      int int0 = StringUtils.indexOfAny(string1, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = "4<-h)";
      assertNotSame(string1, string0);
      
      char[] charArray0 = new char[3];
      char char0 = '+';
      charArray0[0] = char0;
      String string2 = StringUtils.trimToEmpty(string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("56\"jqt`", string2);
      assertNotNull(string2);
      
      charArray0[2] = charArray0[0];
      String string3 = StringUtils.repeat(string1, (int) charArray0[2]);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertEquals("4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)4<-h)", string3);
      assertArrayEquals(new char[] {'+', '\u0000', '+'}, charArray0);
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny(string3, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'+', '\u0000', '+'}, charArray0);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = StringUtils.trimToEmpty(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("56\"jqt`", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny(string1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test248()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      int int0 = StringUtils.indexOfAny(string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test249()  throws Throwable  {
      String string0 = "'q55EK";
      String string1 = StringUtils.trimToEmpty(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("'q55EK", string1);
      assertNotNull(string1);
      
      String string2 = " is less than 0: ";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      Object[] objectArray0 = new Object[10];
      objectArray0[0] = (Object) string2;
      assertNotNull(objectArray0[0]);
      
      String string3 = StringUtils.join(objectArray0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" is less than 0: ", string3);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string3, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(boolean0);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils?\"RZ@(T&;";
      String string1 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test251()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      char char0 = ' ';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string0);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test253()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = "...";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.contains(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test255()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains(string0, string0);
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test
  public void test256()  throws Throwable  {
      String string0 = " vs ";
      String string1 = null;
      boolean boolean0 = StringUtils.contains(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test257()  throws Throwable  {
      String string0 = "\"Yj.MlG7\"Yj,.MlG7";
      char char0 = '\"';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertTrue(boolean0);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.contains(string0, charArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test259()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      char char0 = '\u001F';
      boolean boolean0 = StringUtils.contains(string0, char0);
      assertFalse(boolean0);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = null;
      String string1 = "ll";
      char char0 = '\"';
      int int0 = StringUtils.lastIndexOf(string1, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      int int0 = 973;
      char char0 = '\u001F';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001F\u001Forg.apache.commons.lang.StringUtils", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf(string0, string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOf(string1, string1, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(0, int2);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.indexOfAny(string0, stringArray0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf(string0, string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test263()  throws Throwable  {
      String string0 = "n9?;x;K]BECqwyP";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      String string2 = "The Array must not be null";
      assertNotSame(string2, string0);
      
      int int0 = StringUtils.lastIndexOf(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals((-1), int0);
  }

  @Test
  public void test264()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.lastIndexOf(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test266()  throws Throwable  {
      String string0 = "n4eMDV6";
      int int0 = StringUtils.indexOfDifference(string0, string0);
      assertEquals((-1), int0);
      
      String string1 = null;
      char char0 = 'g';
      int int1 = StringUtils.lastIndexOf(string1, char0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test267()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      char char0 = 'b';
      int int0 = StringUtils.indexOf(string0, char0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf(string0, char0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNull(string1);
      
      char char0 = '{';
      int int0 = StringUtils.lastIndexOf(string1, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "@w[U)t";
      char char0 = 'p';
      int int0 = StringUtils.lastIndexOf(string0, char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = "zOn(z";
      String string1 = StringUtils.swapCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ZoN(Z", string1);
      assertNotNull(string1);
      
      String string2 = "";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase(string2, locale0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string3);
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(string3);
      
      char char0 = ')';
      int int0 = StringUtils.indexOf(string1, string3, (int) char0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string3, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
  }

  @Test
  public void test271()  throws Throwable  {
      String string0 = "'4(e>KI";
      String string1 = StringUtils.upperCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("'4(E>KI", string1);
      assertNotNull(string1);
      
      String string2 = "";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf(string0, string2, int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = "_ekYn};oaY/]oC";
      int int0 = StringUtils.length(string0);
      assertEquals(14, int0);
      
      char char0 = '9';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("_ekYn};oaY/]oC", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.chop(string2);
      assertNull(string3);
      
      int int1 = StringUtils.indexOf(string1, string3, (int) char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test273()  throws Throwable  {
      String string0 = "_ekYn};oaY/]oC";
      int int0 = StringUtils.length(string0);
      assertEquals(14, int0);
      
      char char0 = '9';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("_ekYn};oaY/]oC", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf(string1, string1, (int) char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test274()  throws Throwable  {
      String string0 = "MJ64'zn.V{";
      String string1 = null;
      int int0 = StringUtils.indexOfAnyBut(string1, string0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf(string1, string1, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test275()  throws Throwable  {
      String string0 = "YYq\"";
      char char0 = 'E';
      String string1 = StringUtils.leftPad(string0, (int) char0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYq\"YYYq\"", string1);
      assertNotNull(string1);
      
      int int0 = 1;
      int int1 = StringUtils.ordinalIndexOf(string1, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int1);
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = "@w[U)t";
      int int0 = (-4113);
      int int1 = StringUtils.ordinalIndexOf(string0, string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test277()  throws Throwable  {
      String string0 = "2VT72f";
      int int0 = 1081;
      String string1 = null;
      int int1 = StringUtils.ordinalIndexOf(string0, string1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = "YYq\"";
      char char0 = 'E';
      int int0 = StringUtils.ordinalIndexOf(string0, string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = "_";
      int int0 = 2778;
      String string1 = StringUtils.chop(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = null;
      int int1 = StringUtils.ordinalIndexOf(string2, string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.indexOf(string0, string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test281()  throws Throwable  {
      String string0 = "_ekYn};oaY/]oC";
      int int0 = StringUtils.length(string0);
      assertEquals(14, int0);
      
      char char0 = '9';
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf(string1, char0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
  }

  @Test
  public void test282()  throws Throwable  {
      String[] stringArray0 = new String[5];
      char char0 = '6';
      int int0 = StringUtils.indexOf(stringArray0[2], char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = "ph}4qPfqF:YyOcTv";
      String string1 = null;
      String string2 = StringUtils.chop(string0);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("ph}4qPfqF:YyOcT", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = "tils$";
      boolean boolean0 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.equals(string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test287()  throws Throwable  {
      String string0 = "The String must not be empty";
      char char0 = 'T';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("he String must not be empty", string1);
      assertNotNull(string1);
      
      String string2 = null;
      boolean boolean0 = StringUtils.equals(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = "Bec#2HqT]>abw:,fq";
      int int0 = 0;
      String string1 = StringUtils.substring(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("Bec#2HqT]>abw:,fq", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals(string1, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = null;
      String string1 = "fNp\\$P[Kmr6}_\\MON";
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertEquals("fNp\\$P[Kmr6}_\\MON", string2);
      assertNotNull(string2);
      
      String string3 = "";
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.substringsBetween(string3, string1, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(stringArray1);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNull(stringArray1);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = "/n:lv";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = StringUtils.stripToEmpty(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match:", string1);
      assertNotNull(string1);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = "56\"jqt`";
      String string1 = null;
      String string2 = StringUtils.trimToEmpty(string0);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("56\"jqt`", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd(string1, string2);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNull(string3);
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      int int0 = 8192;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsannot pad a negative amount: ", string1);
      assertNotNull(string1);
      
      String string2 = "?g!";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.strip(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEqualsannot pad a negative amount: ", string3);
      assertNotNull(string3);
  }

  @Test
  public void test295()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "\\u000";
      String string1 = "";
      assertNotSame(string1, string0);
      
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[0]);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test
  public void test296()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = " ";
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      int int0 = 8192;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  Cannot pad a negative amount: ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test298()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBefore(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart(string0, string1);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = null;
      int int0 = 1202;
      String string1 = StringUtils.substring(string0, int0);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
      
      String string2 = StringUtils.stripToEmpty(string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = "kCV%p`z";
      int int0 = (-1039);
      int int1 = 4;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("k...", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull(string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("k...", string2);
      assertNotNull(string2);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test304()  throws Throwable  {
      String string0 = "2xU~hgL%J=l'y9";
      String string1 = StringUtils.trimToNull(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("2xU~hgL%J=l'y9", string1);
      assertNotNull(string1);
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = " ArudB_DwPmo:)M{:";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test306()  throws Throwable  {
      String string0 = " ";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test307()  throws Throwable  {
      String string0 = "_ekYn};oaY/]oC";
      int int0 = StringUtils.length(string0);
      assertEquals(14, int0);
      
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test308()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test309()  throws Throwable  {
      String string0 = "X=(4aqftOn\"@w-x$4";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test310()  throws Throwable  {
      String string0 = "PSI9PYa2";
      int int0 = 97;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test311()  throws Throwable  {
      String string0 = "%co~/@U6J)S@l]]";
      int int0 = 2609;
      String string1 = StringUtils.abbreviate(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("%co~/@U6J)S@l]]", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertSame(string1, string0);
      assertNotSame(stringArray0, stringArray1);
      assertSame(string0, string1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(stringArray1);
  }

  @Test
  public void test312()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.difference(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut(string1, string1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center(string1, int0);
      assertNull(string2);
  }

  @Test
  public void test313()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(stringArray0);
  }

  @Test
  public void test314()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      char char0 = '\u001F';
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, (int) char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test315()  throws Throwable  {
      String string0 = "!,\"#";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("!,\"#", string1);
      assertNotNull(string1);
      
      char char0 = '_';
      String string2 = StringUtils.leftPad(string1, (int) char0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("                                                                                           !,\"#", string2);
      assertNotNull(string2);
  }

  @Test
  public void test316()  throws Throwable  {
      String string0 = "_ekYn};oaY/]oC";
      int int0 = StringUtils.length(string0);
      assertEquals(14, int0);
      
      char char0 = '9';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("_ekYn};oaY/]oC", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(string1);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("_ekYn};oaY/]oC", string2);
      assertNotNull(string2);
  }

  @Test
  public void test317()  throws Throwable  {
      String string0 = "050^S/;`B1cR[TPRv3";
      Object[] objectArray0 = new Object[7];
      char char0 = 'b';
      String string1 = StringUtils.join(objectArray0, char0, (int) char0, (int) char0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test318()  throws Throwable  {
      String string0 = "Cannot pad a negative amount: ";
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 7;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test319()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char char0 = 't';
      String string0 = StringUtils.join((Collection<?>) linkedList0, char0);
      assertEquals("", string0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
  }

  @Test
  public void test320()  throws Throwable  {
      String string0 = "ph}4qPfqF:YyOcTv";
      String string1 = StringUtils.reverse(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("vTcOyY:FqfPq4}hp", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test321()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }
}
