/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:24:25 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.AttributedCharacterIterator;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = (-1307);
//       MockDate mockDate0 = new MockDate(int1, int1, int1, int1, int1);
//       assertEquals("Thu May 08 15:13:00 GMT 480", mockDate0.toString());
//       assertNotNull(mockDate0);
//       assertFalse(int1 == int0);
//       
//       String string0 = fastDateFormat0.format((Date) mockDate0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(34, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("Thu May 08 15:13:00 GMT 480", mockDate0.toString());
//       assertNotNull(string0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("0480\u5E745\u67088\u65E5 \u661F\u671F\u56DB \u4E0B\u534803\u65F613\u520600\u79D2 GMT", string0);
//   }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.ITALY;
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertEquals(44, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "";
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(16, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertEquals("mercoled\u00EC 31 dicembre 0002 0.00.00 GMT", stringBuffer1.toString());
//       assertEquals(70, stringBuffer1.capacity());
//       assertEquals(38, stringBuffer1.length());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertEquals(44, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(38, stringBuffer0.length());
//       assertEquals("mercoled\u00EC 31 dicembre 0002 0.00.00 GMT", stringBuffer0.toString());
//       assertEquals(70, stringBuffer0.capacity());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertNotNull(stringBuffer1);
//   }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "C-";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = ":8&kS'SY=";
      assertNotSame(string1, string0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(":8&kS'SY=", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateFormat0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = (-1624);
      String string2 = fastDateFormat0.format((long) int0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(":8&kS'SY=", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(":8&23376SY=", string2);
  }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "M/d/yy h:mm a";
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertEquals("M/d/yy h:mm a", fastDateFormat1.getPattern());
//       assertEquals(21, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       String string0 = "1z";
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertEquals("java.util.SimpleTimeZone[id=1z,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("1z", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertNotNull(simpleTimeZone0);
//       
//       Locale locale0 = Locale.ITALY;
//       assertEquals("", locale0.getVariant());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it_IT", locale0.toString());
//       assertNotNull(locale0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) simpleTimeZone0, locale0);
//       assertEquals("java.util.SimpleTimeZone[id=1z,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("1z", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1z,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=321,ZONE_OFFSET=1,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("", locale0.getVariant());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it_IT", locale0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) mockGregorianCalendar0);
//       assertEquals("java.util.SimpleTimeZone[id=1z,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(1, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("1z", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1z,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=321,ZONE_OFFSET=1,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it_IT", locale0.toString());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "org.apache.commons.lang.time.FastDateFormat";
//       Object object0 = null;
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertEquals(43, stringBuffer0.length());
//       assertEquals(59, stringBuffer0.capacity());
//       assertEquals("org.apache.commons.lang.time.FastDateFormat", stringBuffer0.toString());
//       assertNotNull(stringBuffer0);
//       
//       FieldPosition fieldPosition0 = new FieldPosition(int0);
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertNotNull(fieldPosition0);
//       
//       // Undeclared exception!
//       try {
//         StringBuffer stringBuffer1 = fastDateFormat0.format(object0, stringBuffer0, fieldPosition0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(fastDateFormat0);
      
      int int0 = 14;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertEquals(14, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=14,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try {
        StringBuffer stringBuffer1 = fastDateFormat0.format((Object) string0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
      }
  }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       String string0 = "`3,?O";
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(15, attributedCharacterIterator0.getRunLimit());
//       assertEquals(15, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertNotNull(attributedCharacterIterator0);
//   }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' ahh'\u65F6'mm'\u5206'ss'\u79D2'", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ".x3";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = 14;
      int int1 = 562;
      String string1 = "wF*h";
      assertNotSame(string1, string0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1);
      assertEquals("wF*h", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertNotSame(string1, string0);
      assertNotNull(fastDateFormat0);
      assertFalse(string1.equals((Object)string0));
      
      int int2 = 0;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotSame(string0, string1);
      assertNotNull(stringBuffer0);
      assertFalse(string0.equals((Object)string1));
      
      FieldPosition fieldPosition0 = new FieldPosition(int0);
      assertEquals("java.text.FieldPosition[field=14,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(14, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotNull(fieldPosition0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      Format.Field format_Field0 = fieldPosition0.getFieldAttribute();
      assertEquals("java.text.FieldPosition[field=14,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(14, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNull(format_Field0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      FieldPosition fieldPosition1 = new FieldPosition(format_Field0);
      assertEquals(-1, fieldPosition1.getField());
      assertEquals(0, fieldPosition1.getBeginIndex());
      assertEquals(0, fieldPosition1.getEndIndex());
      assertEquals("java.text.FieldPosition[field=-1,attribute=null,beginIndex=0,endIndex=0]", fieldPosition1.toString());
      assertEquals("java.text.FieldPosition[field=14,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(14, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotSame(fieldPosition1, fieldPosition0);
      assertNotSame(fieldPosition0, fieldPosition1);
      assertNotNull(fieldPosition1);
      assertFalse(fieldPosition1.equals((Object)fieldPosition0));
      assertFalse(fieldPosition0.equals((Object)fieldPosition1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      
      int int3 = 0;
      Long long0 = new Long((long) int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertEquals(14L, (long)long0);
      
      String string2 = "";
      assertNotSame(string2, string1);
      assertSame(string2, string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "s+8v|Mw76cRp";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "qP!ZN6lr";
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "46pO?N-6k^yux4`zc+Y";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "oH:I:zg1jyt/k~U";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = "<\"Ma|n";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "ls}w=_c^/NK7*Az";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "jM0S@<\\us/cg";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test18() {}
//   @Test(timeout = 4000)
//   public void test18()  throws Throwable  {
//       String string0 = "i^jMkQ";
//       int int0 = 17;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=17,MONTH=17,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=17,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=17,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=17,MONTH=17,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=17,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=17,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.TAIWAN;
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: i
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "\"g|lUI";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "e%}hCSb^9=$;XVYM";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "abW(ziW -yU";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test22() {}
//   @Test(timeout = 4000)
//   public void test22()  throws Throwable  {
//       String string0 = "Y}>0^";
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = new Locale(string0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("y}>0^", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("y}>0^", locale0.toString());
//       assertNotNull(locale0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: Y
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "%KsE!ZX";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("%KSE!ZX", locale0.getCountry());
      assertEquals("%kse!zx", locale0.getLanguage());
      assertEquals("%KsE!ZX", locale0.getVariant());
      assertEquals("%kse!zx_%KSE!ZX_%KsE!ZX", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "?HD-WHZf!.A4lWJ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "V1o,z?~Qz@";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "7+7U9?#@-j4RmjBLR$";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = ";*Qt";
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=;*Qt,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(";*Qt", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "^#P[3Z-F-_";
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "`3,?O";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = "No date pattern for locale: ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "Lxe#5b1`}\"";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "1J`hi";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "ICA\"]";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "KGc$o!al\"W)v";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "FasDateFor[mat[";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "\\8C`2>IOa[)]z{{VbJ&";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test37() {}
//   @Test(timeout = 4000)
//   public void test37()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = "]<Bh9(N2h";
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: B
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "-AH5G'0UQl0p]F";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test39() {}
//   @Test(timeout = 4000)
//   public void test39()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat1.getPattern());
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//   }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(fastDateFormat0);
      
      String string1 = locale0.getDisplayLanguage(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u4E2D\u6587", string1);
      
      FastDateFormat fastDateFormat1 = new FastDateFormat(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("", fastDateFormat1.getPattern());
      assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateFormat1);
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(string0.equals((Object)string1));
      
      ChoiceFormat choiceFormat0 = new ChoiceFormat(string1);
      assertEquals(true, choiceFormat0.isGroupingUsed());
      assertEquals(40, choiceFormat0.getMaximumIntegerDigits());
      assertEquals("", choiceFormat0.toPattern());
      assertEquals(0, choiceFormat0.getMinimumFractionDigits());
      assertEquals(false, choiceFormat0.isParseIntegerOnly());
      assertEquals(3, choiceFormat0.getMaximumFractionDigits());
      assertEquals(1, choiceFormat0.getMinimumIntegerDigits());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(string1, string0);
      assertNotNull(choiceFormat0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = 0;
      int int1 = 0;
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int0, int1, locale0);
      assertEquals(34, fastDateFormat2.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(fastDateFormat2, fastDateFormat1);
      assertNotSame(fastDateFormat2, fastDateFormat0);
      assertNotNull(fastDateFormat2);
      assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      
      long long0 = (-5L);
      MockDate mockDate0 = new MockDate(long0);
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDateFormat2.format((Date) mockDate0, stringBuffer0);
      assertEquals(34, stringBuffer0.capacity());
      assertEquals(31, stringBuffer0.length());
      assertEquals("1969\u5E7412\u670831\u65E5 \u661F\u671F\u4E09 \u4E0B\u534811\u664259\u520659\u79D2 GMT", stringBuffer0.toString());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertEquals(34, fastDateFormat2.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat2.getTimeZoneOverridesCalendar());
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat2.getPattern());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(31, stringBuffer1.length());
      assertEquals("1969\u5E7412\u670831\u65E5 \u661F\u671F\u4E09 \u4E0B\u534811\u664259\u520659\u79D2 GMT", stringBuffer1.toString());
      assertEquals(34, stringBuffer1.capacity());
      assertSame(stringBuffer0, stringBuffer1);
      assertNotSame(fastDateFormat2, fastDateFormat1);
      assertNotSame(fastDateFormat2, fastDateFormat0);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      
      boolean boolean0 = false;
      String string2 = "MuhHq}J/>";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat3 = FastDateFormat.getInstance(string2, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.ITALY;
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it_IT", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(44, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("it_IT", locale0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "jwh9sT";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.JAPANESE;
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotNull(zoneInfo1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo1, locale0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotNull(fastDateFormat1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat2.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertNotNull(fastDateFormat2);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       
//       long long0 = 0L;
//       int int1 = zoneInfo0.getOffset(long0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertTrue(int1 == int0);
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       assertEquals(0, int1);
//       
//       String string1 = "";
//       assertNotSame(string1, string0);
//       
//       int[] intArray0 = new int[7];
//       zoneInfo0.setRawOffset(int0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotSame(string0, string1);
//       assertNotSame(zoneInfo0, zoneInfo1);
//       assertFalse(string0.equals((Object)string1));
//       assertTrue(int0 == int1);
//       assertTrue(zoneInfo0.equals((Object)zoneInfo1));
//       
//       intArray0[0] = int0;
//       int int2 = 1;
//       assertFalse(int2 == int1);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo1);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotNull(mockGregorianCalendar0);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(int0 == int2);
//       assertTrue(int0 == int1);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       
//       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
//       assertEquals(22, stringBuffer0.capacity());
//       assertEquals(6, stringBuffer0.length());
//       assertEquals("jwh9sT", stringBuffer0.toString());
//       assertNotSame(string0, string1);
//       assertNotNull(stringBuffer0);
//       assertFalse(string0.equals((Object)string1));
//       
//       StringBuffer stringBuffer1 = fastDateFormat1.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ja", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertEquals(22, stringBuffer0.capacity());
//       assertEquals(19, stringBuffer0.length());
//       assertEquals("jwh9sT20\u664221\u520621\u79D2 GMT", stringBuffer0.toString());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat1.getPattern());
//       assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(15, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("jwh9sT20\u664221\u520621\u79D2 GMT", stringBuffer1.toString());
//       assertEquals(19, stringBuffer1.length());
//       assertEquals(22, stringBuffer1.capacity());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat1, fastDateFormat2);
//       assertNotSame(string0, string1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertNotSame(fastDateFormat0, fastDateFormat2);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotNull(stringBuffer1);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat2));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(int0 == int2);
//       assertTrue(int0 == int1);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       
//       intArray0[2] = int2;
//       intArray0[3] = int0;
//       intArray0[4] = int0;
//       intArray0[5] = int0;
//       int int3 = 0;
//       assertTrue(int3 == int1);
//       
//       intArray0[6] = int3;
//       // Undeclared exception!
//       try {
//         String string2 = fastDateFormat0.parseToken(string1, intArray0);
//         fail("Expecting exception: StringIndexOutOfBoundsException");
//       
//       } catch(StringIndexOutOfBoundsException e) {
//          //
//          // String index out of range: 0
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(fastDateFormat0);
      
      int int1 = fastDateFormat0.getMaxLengthEstimate();
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(31, int1);
      
      MockDate mockDate0 = new MockDate(int0, int1, int0, int0, int0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("Thu Jul 31 00:00:00 GMT 1902", mockDate0.toString());
      assertNotNull(mockDate0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = fastDateFormat0.format((Object) mockDate0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("Thu Jul 31 00:00:00 GMT 1902", mockDate0.toString());
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("Thursday, July 31, 1902", string0);
      
      int int2 = 181;
      assertFalse(int2 == int1);
      
      int int3 = 13;
      assertFalse(int3 == int1);
      
      int int4 = (-985);
      assertFalse(int4 == int1);
      
      String string1 = "TWWWl_ ";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateFormat0);
      
      String string1 = ":8&kS'Sl=";
      assertNotSame(string1, string0);
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0, locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":8&kS'Sl=", fastDateFormat1.getPattern());
      assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(fastDateFormat1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      
      String string2 = "Z$y<#`PsweCoGm1w";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "";
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string3, string2);
      
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getPercentInstance();
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("%", decimalFormat0.getNegativeSuffix());
      assertEquals(100, decimalFormat0.getMultiplier());
      assertEquals("#,##0%", decimalFormat0.toLocalizedPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals("%", decimalFormat0.getPositiveSuffix());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals(0, decimalFormat0.getMaximumFractionDigits());
      assertEquals("#,##0%", decimalFormat0.toPattern());
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertNotNull(decimalFormat0);
      
      int int0 = (-1);
      long long0 = 0L;
      String string4 = fastDateFormat1.format(long0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":8&kS'Sl=", fastDateFormat1.getPattern());
      assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotNull(string4);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertEquals(":8&240Sl=", string4);
  }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.toString();
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(string0);
//       assertEquals("FastDateFormat[yy-M-d ah:mm]", string0);
//   }

  @Test(timeout = 4000)
  public void test46() {}
//   @Test(timeout = 4000)
//   public void test46()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale1 = fastDateFormat0.getLocale();
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("", locale1.getVariant());
//       assertEquals("zho", locale1.getISO3Language());
//       assertEquals("CHN", locale1.getISO3Country());
//       assertEquals("CN", locale1.getCountry());
//       assertEquals("zh", locale1.getLanguage());
//       assertEquals("zh_CN", locale1.toString());
//       assertNotNull(locale1);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getTimeInstance(int0, locale1);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(16, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat1.getPattern());
//       assertEquals("", locale1.getVariant());
//       assertEquals("zho", locale1.getISO3Language());
//       assertEquals("CHN", locale1.getISO3Country());
//       assertEquals("CN", locale1.getCountry());
//       assertEquals("zh", locale1.getLanguage());
//       assertEquals("zh_CN", locale1.toString());
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//   }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "C-";
      String string1 = "";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string1, string0);
      assertNotNull(zoneInfo0);
      assertFalse(string1.equals((Object)string0));
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertNotSame(string1, string0);
      assertNotNull(fastDateFormat0);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = (-1624);
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals("java.text.ParsePosition[index=-1624,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1624, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertNotNull(parsePosition0);
      
      Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(object0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test48() {}
//   @Test(timeout = 4000)
//   public void test48()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", fastDateFormat0.getPattern());
//       assertNotNull(string0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE", string0);
//   }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test50() {}
//   @Test(timeout = 4000)
//   public void test50()  throws Throwable  {
//       String string0 = "R(pfu{]m";
//       int int0 = 60;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=60,MONTH=60,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=60,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=60,HOUR_OF_DAY=60,MINUTE=60,SECOND=60,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=60,MONTH=60,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=60,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=60,HOUR_OF_DAY=60,MINUTE=60,SECOND=60,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: R
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test51() {}
//   @Test(timeout = 4000)
//   public void test51()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = (-3707);
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style -3707
         //
      }
  }

  @Test(timeout = 4000)
  public void test53() {}
//   @Test(timeout = 4000)
//   public void test53()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       long long0 = 0L;
//       Long long1 = new Long(long0);
//       assertTrue(long1.equals((Object)long0));
//       assertEquals(0L, (long)long1);
//       
//       String string0 = fastDateFormat0.format((Object) long1);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertNotNull(string0);
//       assertTrue(long1.equals((Object)long0));
//       assertEquals("70-1-1 \u4E0A\u534812:00", string0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("70-1-1 \u4E0A\u534812:00", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertTrue(long1.equals((Object)long0));
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//   }

  @Test(timeout = 4000)
  public void test54() {}
//   @Test(timeout = 4000)
//   public void test54()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy-M-d ah:mm", fastDateFormat0.getPattern());
//       assertNotNull(string0);
//       assertEquals("14-2-14 \u4E0B\u53488:21", string0);
//   }
}
