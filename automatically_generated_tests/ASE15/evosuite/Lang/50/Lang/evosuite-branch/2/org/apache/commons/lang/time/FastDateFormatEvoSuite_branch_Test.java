/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:41:59 GMT 2014
 */

package org.apache.commons.lang.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.DateFormatSymbols;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
//       
//       String string0 = "~1=.|,8U6\\=aRuf+*'8";
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertNotNull(stringBuffer0);
//       assertEquals(19, stringBuffer0.length());
//       assertEquals(35, stringBuffer0.capacity());
//       assertEquals("~1=.|,8U6\\=aRuf+*'8", stringBuffer0.toString());
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Date) mockDate0, stringBuffer0);
//       assertNotNull(stringBuffer1);
//       assertEquals(56, stringBuffer1.length());
//       assertEquals("~1=.|,8U6\\=aRuf+*'8domenica 31 dicembre 1899 0.00.00 GMT", stringBuffer1.toString());
//       assertEquals(72, stringBuffer1.capacity());
//       assertEquals(72, stringBuffer0.capacity());
//       assertEquals("~1=.|,8U6\\=aRuf+*'8domenica 31 dicembre 1899 0.00.00 GMT", stringBuffer0.toString());
//       assertEquals(56, stringBuffer0.length());
//       assertEquals(45, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE d MMMM yyyy H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//   }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "]{E}kWW(";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=]{E}kWW(,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("]{E}kWW(", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=]{E}kWW(,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("]{E}kWW(", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      
      int int1 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals((-1502057007), int1);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=]{E}kWW(,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("]{E}kWW(", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Locale locale0 = Locale.PRC;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale0);
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      //  // Unstable assertion: assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("]{E}kWW(", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      
      String string1 = fastDateFormat1.format((long) int1);
      //  // Unstable assertion: assertEquals("]{\u661F\u671F\u65E5}1403(", string1);
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("]{E}kWW(", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=]{E}kWW(,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertEquals("]{E}kWW(", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(false, simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("zho", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CHN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("zh_CN", locale0.toString());
      //  // Unstable assertion: assertEquals("zh", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("CN", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
  }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int1 = (-442);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int1, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-442,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals("gioved\u00EC 31 dicembre 0444", string0);
//       assertNotNull(string0);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-76115894400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=444,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//   }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       int int0 = 0;
//       int int1 = 0;
//       int int2 = (-4202);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int2, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-4202,HOUR_OF_DAY=-4202,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int1 == int2);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int0 == int2);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-4202,HOUR_OF_DAY=-4202,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(int1 == int2);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int0 == int2);
//       
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-4202,HOUR_OF_DAY=-4202,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertFalse(int1 == int2);
//       assertFalse(int2 == int0);
//       assertFalse(int2 == int1);
//       assertFalse(int0 == int2);
//       
//       Object object0 = null;
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(object0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       String string0 = "%K";
//       int int0 = (-1403);
//       int int1 = 0;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int1, int0, int0, int1, int1, int1, int0);
//       assertNotNull(simpleTimeZone0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(-1403, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=%K,offset=-1403,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1403,startDay=0,startDayOfWeek=-1403,startTime=-1403,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=-1403,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("%K", simpleTimeZone0.getID());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(-1403, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=%K,offset=-1403,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1403,startDay=0,startDayOfWeek=-1403,startTime=-1403,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=-1403,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("%K", simpleTimeZone0.getID());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("%K", fastDateFormat0.getPattern());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat1);
//       assertEquals("yy. M. d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertFalse(boolean0);
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(-1403, simpleTimeZone0.getRawOffset());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=%K,offset=-1403,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=-1403,startDay=0,startDayOfWeek=-1403,startTime=-1403,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=-1403,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals("%K", simpleTimeZone0.getID());
//       assertEquals("yy. M. d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(5, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("%K", fastDateFormat0.getPattern());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals("yy. M. d a h:mm", string0);
//       assertNotNull(string0);
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) string0);
//       assertFalse(boolean0);
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "bp3";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(true, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(12, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(12, attributedCharacterIterator0.getEndIndex());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       
//       Object object0 = new Object();
//       assertNotNull(object0);
//       
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator(object0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: java.lang.Object
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       String string0 = "bp3";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string1 = "";
//       assertNotSame(string1, string0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1);
//       assertNotNull(fastDateFormat0);
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("", fastDateFormat0.getPattern());
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string1, string0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string0, string1);
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockGregorianCalendar0);
//       assertNotNull(attributedCharacterIterator0);
//       assertEquals(0, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("", fastDateFormat0.getPattern());
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//   }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      String string0 = "";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
      
      AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) mockDate0);
      assertNotNull(attributedCharacterIterator0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals("", fastDateFormat0.getPattern());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(0, attributedCharacterIterator0.getEndIndex());
      assertEquals(0, attributedCharacterIterator0.getIndex());
      assertEquals(0, attributedCharacterIterator0.getRunLimit());
      assertEquals(0, attributedCharacterIterator0.getRunStart());
      assertEquals(0, attributedCharacterIterator0.getBeginIndex());
      assertEquals("Sun Dec 31 00:00:00 GMT 1899", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       String string0 = "w1I-,6c(~}P2";
//       int int0 = 2;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("d-MMM-yyyy", fastDateFormat0.getPattern());
//       
//       boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
//       assertFalse(boolean0);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("d-MMM-yyyy", fastDateFormat0.getPattern());
//       
//       String string1 = "]U:DG-?s2P";
//       assertNotSame(string1, string0);
//       
//       String string2 = "?q|yP_j";
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       String string3 = "g]dXaHs;&}0^[";
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string1);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string3);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: g
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "^xx>QE@Bbt";
      String string1 = "dd/MM/yy h:mm a";
      assertNotSame(string1, string0);
      
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      assertNotNull(dateFormatSymbols0);
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat(string1, dateFormatSymbols0);
      assertNotNull(simpleDateFormat0);
      assertEquals("dd/MM/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("dd/MM/yy h:mm a", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy h:mm a", simpleDateFormat0.toPattern());
      assertEquals("GyMdkHmsSEDFwWahKzZ", dateFormatSymbols0.getLocalPatternChars());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: xx
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "FstDateFormat[";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("fstdateformat[_FSTDATEFORMAT[_FstDateFormat[", locale0.toString());
      assertEquals("FstDateFormat[", locale0.getVariant());
      assertEquals("fstdateformat[", locale0.getLanguage());
      assertEquals("FSTDATEFORMAT[", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test13() {}
//   @Test(timeout = 4000)
//   public void test13()  throws Throwable  {
//       String string0 = "rlC~oPX+/>eP<6~hc";
//       int int0 = (-1);
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=-1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-1,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1,HOUR_OF_DAY=-1,MINUTE=-1,SECOND=-1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: r
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "q)0~D7/1bp";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0);
      assertNotNull(simpleTimeZone0);
      assertEquals("q)0~D7/1bp", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=q)0~D7/1bp,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       int int0 = 1;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       Locale locale0 = Locale.ITALIAN;
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.toString());
//       assertEquals("it", locale0.getLanguage());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       String string0 = "6Zp&4dh!J";
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: p
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "&.o\"M";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "2}7nqU";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "iiKFn'p";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: ii
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "f(tnod`C$,bFF#)*e";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test20() {}
//   @Test(timeout = 4000)
//   public void test20()  throws Throwable  {
//       String string0 = "Zy%e#bTD!P";
//       int int0 = 1036;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1036,MONTH=1036,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1036,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1036,HOUR_OF_DAY=1036,MINUTE=1036,SECOND=1036,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1036,MONTH=1036,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1036,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1036,HOUR_OF_DAY=1036,MINUTE=1036,SECOND=1036,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       Locale locale0 = new Locale(string0);
//       assertNotNull(locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zy%e#btd!p", locale0.getLanguage());
//       assertEquals("zy%e#btd!p", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: e
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      String string0 = "ca=vd$;:X(9?332";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "aEY[M/&cg{_&xx^G";
      int int0 = 4193;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("aEY[M/&cg{_&xx^G", simpleTimeZone0.getID());
      assertEquals(4193, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=aEY[M/&cg{_&xx^G,offset=4193,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "X";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "9mVk0|$l+vJvOqf]\"E";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "1aEUQatH]OA4?^^";
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "The validated collection ih empty";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "43S#2?j9iX6^.UP";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "<QIhE`";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "P ";
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "O\\wGa13`r1v%)3t#pm&";
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "\"WN3Eb9SXC?l1";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test32() {}
//   @Test(timeout = 4000)
//   public void test32()  throws Throwable  {
//       String string0 = "L6%@%bi";
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertNotNull(zoneInfo0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Locale locale0 = Locale.SIMPLIFIED_CHINESE;
//       assertNotNull(locale0);
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: L
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "WJ";
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "\\HIS}=>;u";
      TimeZone timeZone0 = null;
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDateFormat fastDateFormat0 = new FastDateFormat(string0, timeZone0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("\\HIS}=>;u", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
      assertNotNull(zoneInfo0);
      assertEquals("\\HIS}=>;u", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "F'f_({pl?Xo|yws->m";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("F'f_({pl?Xo|yws->m", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      
      String string1 = "yy-MM-dd HH:mm";
      assertNotSame(string1, string0);
      
      Locale locale1 = fastDateFormat0.getLocale();
      assertNotNull(locale1);
      assertEquals("F'f_({pl?Xo|yws->m", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      
      int int0 = 2135;
      String string2 = locale0.getCountry();
      assertEquals("US", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(locale0, locale1);
      
      String string3 = "HS~&";
      assertFalse(string3.equals((Object)string2));
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string1);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getTimeZone(string2);
      assertNotNull(zoneInfo1);
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(locale0, locale1);
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      assertFalse(boolean0);
      assertEquals("F'f_({pl?Xo|yws->m", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(locale0, locale1);
      
      int int1 = 302;
      FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, locale1);
      assertNotNull(fastDateFormat1);
      assertEquals(20, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("F'f_({pl?Xo|yws->m", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals("F'f_({pl?Xo|yws->m", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(20, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(fastDateFormat0.equals((Object)fastDateFormat1));
      assertNotSame(fastDateFormat1, fastDateFormat0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertSame(locale1, locale0);
      assertSame(locale0, locale1);
      
      String string4 = "7:^StwxZBx[f)o!";
      assertFalse(string4.equals((Object)string2));
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(int0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 2135
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "&( &6C}=bp-'xI*`";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "BDlCM<qE-Z|5";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "_A*-yTb\\<$#";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The pattern must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat1);
//       assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertTrue(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.getPattern();
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      
      int int0 = 1;
      fastDateFormat0.init();
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("fr_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      int int1 = 641;
      StringBuffer stringBuffer0 = new StringBuffer(int1);
      //  // Unstable assertion: assertNotNull(stringBuffer0);
      //  // Unstable assertion: assertEquals(641, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(0, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("", stringBuffer0.toString());
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      boolean boolean0 = fastDateFormat0.getTimeZoneOverridesCalendar();
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      
      StringBuffer stringBuffer1 = stringBuffer0.appendCodePoint(int0);
      //  // Unstable assertion: assertNotNull(stringBuffer1);
      //  // Unstable assertion: assertEquals(641, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(1, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("\u0001", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals("\u0001", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals(1, stringBuffer1.length());
      //  // Unstable assertion: assertEquals(641, stringBuffer1.capacity());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      
      int int2 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale1 = new Locale(string0);
      //  // Unstable assertion: assertNotNull(locale1);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      
      int int3 = 0;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int3, (TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(fastDateFormat1);
      //  // Unstable assertion: assertEquals("fr_CA", locale0.toString());
      //  // Unstable assertion: assertEquals("CA", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("CAN", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("EEEE d MMMM yyyy", fastDateFormat1.getPattern());
      //  // Unstable assertion: assertEquals(28, fastDateFormat1.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat1.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(locale0.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(int3 == int0);
      //  // Unstable assertion: assertFalse(int3 == int1);
      //  // Unstable assertion: assertNotSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat1, fastDateFormat0);
      
      int int4 = 0;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale1);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      //  // Unstable assertion: assertNotNull(zoneInfo1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      
      FastDateFormat fastDateFormat2 = FastDateFormat.getDateTimeInstance(int0, int2, (TimeZone) zoneInfo1);
      //  // Unstable assertion: assertNotNull(fastDateFormat2);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(34, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("d MMMM yyyy H.mm.ss z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int3);
      //  // Unstable assertion: assertFalse(int0 == int4);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      
      ZoneInfo zoneInfo2 = (ZoneInfo)fastDateFormat2.getTimeZone();
      //  // Unstable assertion: assertNotNull(zoneInfo2);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo2.getID());
      //  // Unstable assertion: assertEquals(34, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("d MMMM yyyy H.mm.ss z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int3);
      //  // Unstable assertion: assertFalse(int0 == int4);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertSame(zoneInfo2, zoneInfo1);
      //  // Unstable assertion: assertSame(zoneInfo2, zoneInfo0);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo2);
      
      FastDateFormat fastDateFormat3 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo2);
      //  // Unstable assertion: assertNotNull(fastDateFormat3);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals("d MMMM yyyy", fastDateFormat3.getPattern());
      //  // Unstable assertion: assertEquals(19, fastDateFormat3.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat3.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo2.getID());
      //  // Unstable assertion: assertEquals(34, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("d MMMM yyyy H.mm.ss z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int3);
      //  // Unstable assertion: assertFalse(int0 == int4);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo2);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat3);
      //  // Unstable assertion: assertSame(zoneInfo2, zoneInfo1);
      //  // Unstable assertion: assertSame(zoneInfo2, zoneInfo0);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat3);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo2);
      
      int int5 = fastDateFormat3.hashCode();
      //  // Unstable assertion: assertEquals((-26077781), int5);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals("d MMMM yyyy", fastDateFormat3.getPattern());
      //  // Unstable assertion: assertEquals(19, fastDateFormat3.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(true, fastDateFormat3.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo2.getID());
      //  // Unstable assertion: assertEquals(34, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("d MMMM yyyy H.mm.ss z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int5);
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat3.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int3);
      //  // Unstable assertion: assertFalse(int0 == int5);
      //  // Unstable assertion: assertFalse(int0 == int4);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(int5 == int2);
      //  // Unstable assertion: assertFalse(int5 == int3);
      //  // Unstable assertion: assertFalse(int5 == int4);
      //  // Unstable assertion: assertFalse(int5 == int0);
      //  // Unstable assertion: assertFalse(int5 == int1);
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo2);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat3, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat3);
      //  // Unstable assertion: assertSame(zoneInfo2, zoneInfo1);
      //  // Unstable assertion: assertSame(zoneInfo2, zoneInfo0);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat3);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo2);
      
      FastDateFormat fastDateFormat4 = (FastDateFormat)fastDateFormat2.clone();
      //  // Unstable assertion: assertNotNull(fastDateFormat4);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo1.getID());
      //  // Unstable assertion: assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(true, fastDateFormat4.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("d MMMM yyyy H.mm.ss z", fastDateFormat4.getPattern());
      //  // Unstable assertion: assertEquals(34, fastDateFormat4.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(34, fastDateFormat2.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("d MMMM yyyy H.mm.ss z", fastDateFormat2.getPattern());
      //  // Unstable assertion: assertEquals(true, fastDateFormat2.getTimeZoneOverridesCalendar());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getCountry());
      //  // Unstable assertion: assertEquals("yy. m. d a h:mm", locale1.toString());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertFalse(int2 == int1);
      //  // Unstable assertion: assertFalse(int2 == int0);
      //  // Unstable assertion: assertFalse(int2 == int5);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int3);
      //  // Unstable assertion: assertFalse(int0 == int5);
      //  // Unstable assertion: assertFalse(int0 == int4);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat4));
      //  // Unstable assertion: assertFalse(fastDateFormat0.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertTrue(fastDateFormat4.equals((Object)fastDateFormat2));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(fastDateFormat4.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
      //  // Unstable assertion: assertTrue(fastDateFormat2.equals((Object)fastDateFormat4));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
      //  // Unstable assertion: assertFalse(fastDateFormat2.equals((Object)fastDateFormat3));
      //  // Unstable assertion: assertFalse(locale1.equals((Object)locale0));
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo0);
      //  // Unstable assertion: assertSame(zoneInfo1, zoneInfo2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat4);
      //  // Unstable assertion: assertNotSame(fastDateFormat0, fastDateFormat3);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat2);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat3);
      //  // Unstable assertion: assertNotSame(fastDateFormat4, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat1);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat0);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat3);
      //  // Unstable assertion: assertNotSame(fastDateFormat2, fastDateFormat4);
      //  // Unstable assertion: assertNotSame(locale1, locale0);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo1);
      //  // Unstable assertion: assertSame(zoneInfo0, zoneInfo2);
      
      String string1 = ">+wh\\H=bS";
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      int int6 = 0;
      //  // Unstable assertion: assertFalse(int6 == int5);
      
      StringBuffer stringBuffer2 = stringBuffer1.insert(int6, (long) int1);
      //  // Unstable assertion: assertNotNull(stringBuffer2);
      //  // Unstable assertion: assertEquals(641, stringBuffer2.capacity());
      //  // Unstable assertion: assertEquals(4, stringBuffer2.length());
      //  // Unstable assertion: assertEquals("641\u0001", stringBuffer2.toString());
      //  // Unstable assertion: assertEquals(641, stringBuffer0.capacity());
      //  // Unstable assertion: assertEquals(4, stringBuffer0.length());
      //  // Unstable assertion: assertEquals("641\u0001", stringBuffer0.toString());
      //  // Unstable assertion: assertEquals(4, stringBuffer1.length());
      //  // Unstable assertion: assertEquals("641\u0001", stringBuffer1.toString());
      //  // Unstable assertion: assertEquals(641, stringBuffer1.capacity());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int0 == int6);
      //  // Unstable assertion: assertFalse(int0 == int3);
      //  // Unstable assertion: assertFalse(int0 == int5);
      //  // Unstable assertion: assertFalse(int0 == int4);
      //  // Unstable assertion: assertFalse(int0 == int2);
      //  // Unstable assertion: assertFalse(int6 == int1);
      //  // Unstable assertion: assertFalse(int6 == int0);
      //  // Unstable assertion: assertFalse(int6 == int5);
      //  // Unstable assertion: assertFalse(int1 == int3);
      //  // Unstable assertion: assertFalse(int1 == int6);
      //  // Unstable assertion: assertFalse(int1 == int4);
      //  // Unstable assertion: assertFalse(int1 == int2);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int1 == int5);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer2, stringBuffer0);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer0, stringBuffer1);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer2);
      //  // Unstable assertion: assertSame(stringBuffer1, stringBuffer0);
      
      Locale locale2 = new Locale(string1);
      //  // Unstable assertion: assertNotNull(locale2);
      //  // Unstable assertion: assertEquals("", locale2.getISO3Country());
      //  // Unstable assertion: assertEquals(">+wh\\h=bs", locale2.getLanguage());
      //  // Unstable assertion: assertEquals("", locale2.getVariant());
      //  // Unstable assertion: assertEquals(">+wh\\h=bs", locale2.toString());
      //  // Unstable assertion: assertEquals("", locale2.getCountry());
      //  // Unstable assertion: assertFalse(locale2.equals((Object)locale0));
      //  // Unstable assertion: assertFalse(locale2.equals((Object)locale1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertNotSame(locale2, locale0);
      //  // Unstable assertion: assertNotSame(locale2, locale1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat5 = FastDateFormat.getInstance(string1, locale2);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "]{E}kWW(";
      int int0 = 0;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = locale0.getDisplayScript();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("]{E}kWW(", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string0, string1);
      
      int int1 = 1;
      TimeZone timeZone0 = null;
      FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int1, timeZone0, locale0);
      assertNotNull(fastDateFormat1);
      assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat1.getPattern());
      assertEquals(false, fastDateFormat1.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
      assertFalse(int1 == int0);
      assertNotSame(fastDateFormat1, fastDateFormat0);
      
      String string2 = fastDateFormat0.format((long) int1);
      assertEquals("]{\u661F\u671F\u56DB}2401(", string2);
      assertNotNull(string2);
      assertEquals("]{E}kWW(", fastDateFormat0.getPattern());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(fastDateFormat0, fastDateFormat1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      
      int int2 = 407;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat2 = FastDateFormat.getTimeInstance(int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 407
         //
      }
  }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       int int0 = (-1571);
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0, int0);
//       assertNotNull(mockDate0);
//       assertEquals("Tue Aug 07 10:22:49 GMT 193", mockDate0.toString());
//       
//       String string0 = fastDateFormat0.format((Date) mockDate0);
//       assertEquals("93. 8. 7 AM 10:22", string0);
//       assertNotNull(string0);
//       assertEquals("Tue Aug 07 10:22:49 GMT 193", mockDate0.toString());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//   }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "dd/MM/yy h:mm a";
      String string1 = "HWZ";
      assertNotSame(string1, string0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1);
      assertNotNull(fastDateFormat0);
      assertEquals("HWZ", fastDateFormat0.getPattern());
      assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       
//       String string0 = fastDateFormat0.toString();
//       assertEquals("FastDateFormat[EEEE d MMMM yyyy]", string0);
//       assertNotNull(string0);
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
      assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals("yy. M. d a h:mm", string0);
//       assertNotNull(string0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       int int0 = 1;
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertNotNull(parsePosition0);
//       assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(1, parsePosition0.getIndex());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertNull(object0);
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getErrorIndex());
//   }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
      assertNotNull(fastDateFormat0);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("EEEE, MMMM d, yyyy h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
      assertEquals(58, fastDateFormat0.getMaxLengthEstimate());
      assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "G43^R_1 SH!%d";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test(timeout = 4000)
  public void test50() {}
//   @Test(timeout = 4000)
//   public void test50()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       
//       int int0 = fastDateFormat0.getMaxLengthEstimate();
//       assertEquals(23, int0);
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test(timeout = 4000)
  public void test51() {}
//   @Test(timeout = 4000)
//   public void test51()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertNotNull(fastDateFormat0);
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       
//       String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals("mercoled\u00EC 31 dicembre 0002", string0);
//       assertNotNull(string0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//   }

  @Test(timeout = 4000)
  public void test52() {}
//   @Test(timeout = 4000)
//   public void test52()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertNotNull(fastDateFormat0);
//       assertEquals("yy. M. d a h:mm", fastDateFormat0.getPattern());
//       assertEquals(23, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(false, fastDateFormat0.getTimeZoneOverridesCalendar());
//       
//       long long0 = 0L;
//       Long long1 = new Long(long0);
//       assertEquals(0L, (long)long1);
//       assertTrue(long1.equals((Object)long0));
//       
//       StringBuffer stringBuffer0 = null;
//       FieldPosition fieldPosition0 = null;
//       // Undeclared exception!
//       try {
//         StringBuffer stringBuffer1 = fastDateFormat0.format((Object) long1, stringBuffer0, fieldPosition0);
//         fail("Expecting exception: NullPointerException");
//       
//       } catch(NullPointerException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "DlCM<qE-Z|5";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }
}
