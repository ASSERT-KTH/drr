/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:00 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateParserEvoSuite_branch_Test   {

  //@Test
  public void test00()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = "_";
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("_", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(fastDateParser0);
  }

  //@Test
  public void test01()  throws Throwable  {
      String string0 = "@lEokJIV!Zv}%dyv9~E";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("@lEokJIV!Zv}%dyv9~E", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  //@Test
  public void test02()  throws Throwable  {
      String string0 = ">EyIuTV,9rU";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals(">EyIuTV,9rU", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(fastDateParser0);
  }

  //@Test
  public void test03()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "`dzw;{03?D<2;2";
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("`dzw;{03?D<2;2", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "7L&KZo`q|gkP{HM";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("7L&KZo`q|gkP{HM", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=7L&KZo`q|gkP{HM,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("7L&KZo`q|gkP{HM", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=7L&KZo`q|gkP{HM,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("7L&KZo`q|gkP{HM", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "HH0~W[7NC5mK\\";
      int int0 = 21;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(21, simpleTimeZone0.getRawOffset());
      assertEquals("HH0~W[7NC5mK\\", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=HH0~W[7NC5mK\\,offset=21,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals("HH0~W[7NC5mK\\", fastDateParser0.getPattern());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals(21, simpleTimeZone0.getRawOffset());
      assertEquals("HH0~W[7NC5mK\\", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=HH0~W[7NC5mK\\,offset=21,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = ".\"]Q|z4~iMwkHE-R7c";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(".\"]Q|z4~iMwkHE-R7c", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "$yy[Zh\\z(%J";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = "-^D=h(eDu^w<hz2m6c5O";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertEquals("-^D=h(eDu^w<hz2m6c5O", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
  }

  //@Test
  public void test08()  throws Throwable  {
      String string0 = ",s/qZ%ftn ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(",s/qZ%ftn ", fastDateParser0.getPattern());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(fastDateParser0);
  }

  //@Test
  public void test09()  throws Throwable  {
      String string0 = "*3n";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("*3n", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "^6#!=/D2w/PO68%~";
      int int0 = (-1207);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(-1207, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=^6#!=/D2w/PO68%~,offset=-1207,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("^6#!=/D2w/PO68%~", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals(-1207, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=^6#!=/D2w/PO68%~,offset=-1207,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("^6#!=/D2w/PO68%~", simpleTimeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("^6#!=/D2w/PO68%~", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(793, int1);
      assertEquals(-1207, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=^6#!=/D2w/PO68%~,offset=-1207,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("^6#!=/D2w/PO68%~", simpleTimeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("^6#!=/D2w/PO68%~", fastDateParser0.getPattern());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  //@Test
  public void test11()  throws Throwable  {
      String string0 = "8}lS`eJ<$D{Xl;3J";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("8}lS`eJ<$D{Xl;3J", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertNotNull(fastDateParser0);
      
      int int0 = fastDateParser0.hashCode();
      assertEquals(560332334, int0);
      assertEquals("8}lS`eJ<$D{Xl;3J", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(560334234, int1);
      assertEquals("8}lS`eJ<$D{Xl;3J", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "^%amd(Ka#+8WM";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("^%amd(ka#+8wm", locale0.getLanguage());
      assertEquals("^%amd(Ka#+8WM", locale0.getVariant());
      assertEquals("^%amd(ka#+8wm_^%AMD(KA#+8WM_^%amd(Ka#+8WM", locale0.toString());
      assertEquals("^%AMD(KA#+8WM", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("^%amd(Ka#+8WM", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("^%amd(ka#+8wm", locale0.getLanguage());
      assertEquals("^%amd(Ka#+8WM", locale0.getVariant());
      assertEquals("^%amd(ka#+8wm_^%AMD(KA#+8WM_^%amd(Ka#+8WM", locale0.toString());
      assertEquals("^%AMD(KA#+8WM", locale0.getCountry());
      assertNotNull(fastDateParser0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "$yy[Zh\\z(%J";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("$yy[Zh\\z(%J", fastDateParser0.getPattern());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
  }

  //@Test
  public void test14()  throws Throwable  {
      String string0 = "?w$axD^e.";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("?w$axD^e.", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }

  //@Test
  public void test15()  throws Throwable  {
      String string0 = "8}lS`eJ<$D{Xl;3J";
      String string1 = "1s1Guls04gvh4~f`h";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("1s1Guls04gvh4~f`h", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotNull(fastDateParser0);
      
      int int0 = fastDateParser0.hashCode();
      assertEquals(1535189884, int0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("1s1Guls04gvh4~f`h", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=8}lS`eJ<$D{Xl;3J,offset=1535189884,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("8}lS`eJ<$D{Xl;3J", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(1535189884, simpleTimeZone0.getRawOffset());
      assertEquals("1s1Guls04gvh4~f`h", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(simpleTimeZone0);
      
      Locale locale1 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("JP", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      FastDateParser fastDateParser1 = new FastDateParser(string0, simpleTimeZone0, locale1);
      assertEquals("JP", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=8}lS`eJ<$D{Xl;3J,offset=1535189884,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("8}lS`eJ<$D{Xl;3J", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(1535189884, simpleTimeZone0.getRawOffset());
      assertEquals("1s1Guls04gvh4~f`h", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("8}lS`eJ<$D{Xl;3J", fastDateParser1.getPattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotSame(string0, string1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(string1, string0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotNull(fastDateParser1);
      
      try {
        Date date0 = fastDateParser1.parse(string1);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // (The ja_JP_JP_#u-ca-japanese locale does not support dates before 1868 AD)
         // Unparseable date: \"1s1Guls04gvh4~f`h\" does not match 8\\}
         //
      }
  }

  //@Test
  public void test16()  throws Throwable  {
      String string0 = "1s1Guls04gvh4~f`h";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("1s1Guls04gvh4~f`h", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(fastDateParser0);
      
      try {
        Date date0 = fastDateParser0.parse(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"1s1Guls04gvh4~f`h\" does not match 1(\\p{IsNd}{1}+)1(AD|AD|BC|BC)
         //
      }
  }

  //@Test
  public void test17()  throws Throwable  {
      String string0 = "F6erQqUw~";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("F6erQqUw~", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(fastDateParser0);
      
      Locale locale1 = Locale.KOREAN;
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      
      FastDateParser fastDateParser1 = new FastDateParser(string0, zoneInfo0, locale1);
      assertEquals("F6erQqUw~", fastDateParser1.getPattern());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(locale1, locale0);
      assertNotNull(fastDateParser1);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(boolean0);
      assertEquals("F6erQqUw~", fastDateParser0.getPattern());
      assertEquals("F6erQqUw~", fastDateParser1.getPattern());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getVariant());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "5y3j5VE>X=>sQ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("5y3j5VE>X=>sQ", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      int int0 = (-839);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(-839, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=5y3j5VE>X=>sQ,offset=-839,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("5y3j5VE>X=>sQ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertEquals(-839, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=5y3j5VE>X=>sQ,offset=-839,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("5y3j5VE>X=>sQ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("5y3j5VE>X=>sQ", fastDateParser1.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotNull(fastDateParser1);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(boolean0);
      assertEquals(-839, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=5y3j5VE>X=>sQ,offset=-839,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("5y3j5VE>X=>sQ", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("5y3j5VE>X=>sQ", fastDateParser1.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("5y3j5VE>X=>sQ", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser0, fastDateParser1);
  }

  //@Test
  public void test19()  throws Throwable  {
      String string0 = "Kwa";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Kwa", fastDateParser0.getPattern());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(fastDateParser0);
      
      String string1 = "41hU10)nD,6";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("41hU10)nD,6", fastDateParser1.getPattern());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string1, string0);
      assertNotNull(fastDateParser1);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(boolean0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("41hU10)nD,6", fastDateParser1.getPattern());
      assertEquals("Kwa", fastDateParser0.getPattern());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "5y3j5VE>X=>sQ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("5y3j5VE>X=>sQ", fastDateParser0.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertNotNull(fastDateParser0);
      
      boolean boolean0 = fastDateParser0.equals((Object) zoneInfo0);
      assertFalse(boolean0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("5y3j5VE>X=>sQ", fastDateParser0.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "5y3j5VE>X=>sQ";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("5y3j5VE>X=>sQ", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(fastDateParser0);
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertTrue(boolean0);
      assertEquals("5y3j5VE>X=>sQ", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
  }

  //@Test
  public void test22()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = "Invalid patterd1n";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  //@Test
  public void test23()  throws Throwable  {
      String string0 = "Kwa";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Kwa", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
      
      Locale locale1 = fastDateParser0.getLocale();
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Kwa", fastDateParser0.getPattern());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
  }

  //@Test
  public void test24()  throws Throwable  {
      String string0 = "WogA5lW";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("WogA5lW", locale0.getVariant());
      assertEquals("woga5lw", locale0.getLanguage());
      assertEquals("WOGA5LW", locale0.getCountry());
      assertEquals("woga5lw_WOGA5LW_WogA5lW", locale0.toString());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("WogA5lW", fastDateParser0.getPattern());
      assertEquals("WogA5lW", locale0.getVariant());
      assertEquals("woga5lw", locale0.getLanguage());
      assertEquals("WOGA5LW", locale0.getCountry());
      assertEquals("woga5lw_WOGA5LW_WogA5lW", locale0.toString());
      assertNotNull(fastDateParser0);
      
      int int0 = 1;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      Object object0 = fastDateParser0.parseObject(string0, parsePosition0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("WogA5lW", fastDateParser0.getPattern());
      assertEquals("WogA5lW", locale0.getVariant());
      assertEquals("woga5lw", locale0.getLanguage());
      assertEquals("WOGA5LW", locale0.getCountry());
      assertEquals("woga5lw_WOGA5LW_WogA5lW", locale0.toString());
      assertNull(object0);
  }

  //@Test
  public void test25()  throws Throwable  {
      String string0 = "F6erQqUw~";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = FastDateParser.JAPANESE_IMPERIAL;
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("F6erQqUw~", fastDateParser0.getPattern());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[F6erQqUw~,ja_JP_JP_#u-ca-japanese,GMT]", string1);
      assertEquals("F6erQqUw~", fastDateParser0.getPattern());
      assertEquals("ja_JP_JP_#u-ca-japanese", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
  }

  //@Test
  public void test26()  throws Throwable  {
      String string0 = "9z G8$Kz:c6I8V+KT{u";
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("9z G8$Kz:c6I8V+KT{u", fastDateParser0.getPattern());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      String string1 = fastDateParser0.getPattern();
      assertEquals("9z G8$Kz:c6I8V+KT{u", string1);
      assertEquals("9z G8$Kz:c6I8V+KT{u", fastDateParser0.getPattern());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  //@Test
  public void test27()  throws Throwable  {
      String string0 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)fastDateParser0.getTimeZone();
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++", fastDateParser0.getPattern());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      assertSame(zoneInfo1, zoneInfo0);
      assertSame(zoneInfo0, zoneInfo1);
      assertNotNull(zoneInfo1);
  }

  //@Test
  public void test28()  throws Throwable  {
      String string0 = "Kwa";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Kwa", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(fastDateParser0);
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Kwa", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, pattern0.flags());
      assertEquals("(\\p{IsNd}{1}+)(\\p{IsNd}++)(\u4E0A\u5348|\u4E0B\u5348)", pattern0.pattern());
      assertEquals("(\\p{IsNd}{1}+)(\\p{IsNd}++)(\u4E0A\u5348|\u4E0B\u5348)", pattern0.toString());
      assertNotNull(pattern0);
  }

  //@Test
  public void test29()  throws Throwable  {
      String string0 = "/{P#J0&w";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("/{P#J0&w", fastDateParser0.getPattern());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      Date date0 = (Date)fastDateParser0.parseObject(string0);
      assertEquals("/{P#J0&w", fastDateParser0.getPattern());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertNotNull(date0);
  }

  //@Test
  public void test30()  throws Throwable  {
      String string0 = "WogA5lW";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("WOGA5LW", locale0.getCountry());
      assertEquals("woga5lw", locale0.getLanguage());
      assertEquals("woga5lw_WOGA5LW_WogA5lW", locale0.toString());
      assertEquals("WogA5lW", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("WogA5lW", fastDateParser0.getPattern());
      assertEquals("WOGA5LW", locale0.getCountry());
      assertEquals("woga5lw", locale0.getLanguage());
      assertEquals("woga5lw_WOGA5LW_WogA5lW", locale0.toString());
      assertEquals("WogA5lW", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateParser0);
      
      int int0 = 1;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(1, parsePosition0.getIndex());
      assertNotNull(parsePosition0);
      
      String string1 = "96k<|XeS(3*n(";
      assertNotSame(string1, string0);
      
      Date date0 = fastDateParser0.parse(string1, parsePosition0);
      assertEquals("Sun Feb 01 00:00:00 GMT 1970", date0.toString());
      assertEquals("WogA5lW", fastDateParser0.getPattern());
      assertEquals("WOGA5LW", locale0.getCountry());
      assertEquals("woga5lw", locale0.getLanguage());
      assertEquals("woga5lw_WOGA5LW_WogA5lW", locale0.toString());
      assertEquals("WogA5lW", locale0.getVariant());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(2, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(date0);
  }

  //@Test
  public void test31()  throws Throwable  {
      String string0 = ")Emyz+YQXO$F";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(")Emyz+YQXO$F", fastDateParser0.getPattern());
      assertNotNull(fastDateParser0);
  }
}
