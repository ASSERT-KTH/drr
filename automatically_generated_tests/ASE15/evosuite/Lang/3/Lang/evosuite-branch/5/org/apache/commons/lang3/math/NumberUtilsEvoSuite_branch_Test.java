/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:32:45 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "9f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "-L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "5.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "-e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "--gFwN_gF";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "+!Dm@v0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "ecL6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "3E\\";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0xA blank string is not a valid number";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x9f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0xorg.apache.commons.lang3.math.NumberUtils";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "0IF";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "1";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)68;
      byte byte1 = (byte) (-43);
      byte byte2 = NumberUtils.max(byte1, byte1, byte0);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertEquals((byte)68, byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)120;
      byteArray0[1] = byte0;
      byte byte1 = (byte)24;
      byte byte2 = NumberUtils.max(byte1, byteArray0[1], byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertEquals((byte)120, byte2);
      assertArrayEquals(new byte[] {(byte)0, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short) (-226);
      short short1 = (short)2;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertEquals((short)2, short2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte)0;
      short short0 = (short)3382;
      short short1 = NumberUtils.max((short) byte0, short0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)3382, short1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = (-290);
      int int1 = 8;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(8, int2);
  }

  @Test
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short)684;
      shortArray0[0] = short0;
      byte byte0 = (byte)0;
      int int0 = NumberUtils.max((int) byte0, (int) shortArray0[0], (int) short0);
      assertEquals(684, int0);
      assertArrayEquals(new short[] {(short)684}, shortArray0);
  }

  @Test
  public void test028()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short) (-1425);
      shortArray0[2] = short0;
      long long0 = NumberUtils.max((long) short0, (long) shortArray0[2], (long) shortArray0[4]);
      assertEquals(0L, long0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-1425), (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)66;
      long long0 = NumberUtils.max((long) byte0, (long) byte1, (long) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(66L, long0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)52;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)68;
      byte byte1 = (byte) (-43);
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte) (-43), byte2);
  }

  @Test
  public void test032()  throws Throwable  {
      short short0 = (short)256;
      short short1 = (short) (-2356);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertEquals((short) (-2356), short2);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short)256;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)0, short2);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 122;
      int int1 = (-2377);
      int int2 = NumberUtils.min(int0, int0, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-2377), int2);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = (-290);
      short short0 = (short) (-7);
      byte byte0 = (byte)0;
      int int1 = NumberUtils.min((int) short0, int0, (int) byte0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-290), int1);
  }

  @Test
  public void test036()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      long long0 = 1074L;
      long long1 = NumberUtils.min(long0, (long) byteArray0[1], (long) byteArray0[0]);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test037()  throws Throwable  {
      long long0 = 1502L;
      short[] shortArray0 = new short[1];
      long long1 = NumberUtils.min(long0, long0, (long) shortArray0[0]);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0L, long1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = 364.0F;
      floatArray0[7] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertTrue(float1 == float0);
      assertEquals(364.0F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 364.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = 2087.17665861;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals(2087.17665861, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 2087.17665861, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte) (-9);
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte) (-9), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = (short)46;
      shortArray0[7] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)46, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)46}, shortArray0);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = 122;
      int[] intArray0 = new int[10];
      intArray0[2] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertEquals(122, int1);
      assertArrayEquals(new int[] {0, 0, 122, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = new long[8];
      long long0 = 734L;
      longArray0[4] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertTrue(long1 == long0);
      assertEquals(734L, long1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 734L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test051()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = (-749.1435F);
      floatArray0[4] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertTrue(float1 == float0);
      assertEquals((-749.1435F), float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, (-749.1435F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[6] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      double double1 = 1.0;
      doubleArray0[0] = double1;
      double double2 = NumberUtils.min(doubleArray0);
      assertFalse(double2 == double1);
      assertTrue(double2 == double0);
      assertEquals(0.0, double2, 0.01D);
      assertArrayEquals(new double[] {1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-38);
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-38), byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-38), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      short short0 = (short)1015;
      short short1 = NumberUtils.max(short0, short0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)1015, short1);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = short1;
      short short2 = NumberUtils.min(shortArray0);
      assertFalse(short2 == short1);
      assertFalse(short2 == short0);
      assertEquals((short)0, short2);
      assertArrayEquals(new short[] {(short)1015, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-1079);
      intArray0[2] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertTrue(int1 == int0);
      assertEquals((-1079), int1);
      assertArrayEquals(new int[] {0, 0, (-1079), 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test062()  throws Throwable  {
      long[] longArray0 = new long[10];
      long long0 = (-2024L);
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertEquals((-2024L), long1);
      assertArrayEquals(new long[] {0L, 0L, (-2024L), 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test063()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "0enLh0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "0e0";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "XZkuaL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // XZkuaL is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "9f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(9.0F, (float)float0, 0.01F);
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IllegalArgumentException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "MFwNgF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // MFwNgF is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "JHF9+cHD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // JHF9+cHD is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "0Eh";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0Eh is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "0E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "-L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -L is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "| FAsf,eEwXA";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // | FAsf,eEwXA is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "Strings us nt be ull";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings us nt be ull is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "5.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(5.0F, (float)float0, 0.01F);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-.&u\\'sX-Un&3<je";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -.&u\\'sX-Un&3<je is not a valid number.
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "-0X-L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0Xorg.apache.commons.lang3.math.NumberUtis";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"org.apache.commons.lang3.math.NumberUtis\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "-0xXZkuL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-XZkuL\"
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "0xI`FwNg_";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"I`FwNg_\"
         //
      }
  }

  @Test
  public void test090() {}
//   @Test
//   public void test090()  throws Throwable  {
//       String string0 = "--gFwN_gF";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "+!Dm@v0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"!Dm@v0\"
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "-";
      byte byte0 = (byte)0;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "0IF";
      short short0 = (short)1015;
      double double0 = NumberUtils.toDouble(string0, (double) short0);
      assertEquals(1015.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      short[] shortArray0 = new short[8];
      short short0 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) short0);
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      float float0 = 364.0F;
      float float1 = NumberUtils.max(float0, float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(364.0F, float1, 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "..";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test104()  throws Throwable  {
      int int0 = 122;
      long long0 = NumberUtils.max((long) int0, (long) int0, (long) int0);
      assertEquals(122L, long0);
      
      short short0 = (short) (-1);
      float float0 = NumberUtils.min((float) short0, (float) short0, (float) long0);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      short short0 = (short)1015;
      double double0 = NumberUtils.min((double) short0, (double) short0, (double) short0);
      assertEquals(1015.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "-e";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test108()  throws Throwable  {
      short short0 = (short)1015;
      double double0 = NumberUtils.max((double) short0, (double) short0, (double) short0);
      assertEquals(1015.0, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "d";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "gTAdqMk,n";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
