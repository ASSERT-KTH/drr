/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:22:04 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "8L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = ".F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "5d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "8EL";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "33E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "*";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "e7b[.(y{g";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "8E+w^w";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "--]8&&\\7e5grJzLKy";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "0xE4k";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "0x!Hj87s7k>fg";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "0x3319";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "-0xdx5BIruL@3";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "8f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "0e2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      long long0 = 0L;
      long long1 = NumberUtils.maximum(long0, long0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      float float0 = (-2772.349F);
      int int0 = NumberUtils.compare((float) long1, float0);
      assertEquals(1, int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 0;
      int int1 = 48;
      int int2 = NumberUtils.compare((float) int0, (float) int1);
      assertEquals((-1), int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test
  public void test25()  throws Throwable  {
      long long0 = 300L;
      int int0 = NumberUtils.compare((float) long0, (float) long0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.compare((double) long0, (double) int0);
      assertEquals(1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 0;
      int int1 = 48;
      int int2 = NumberUtils.compare((double) int0, (double) int1);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test27()  throws Throwable  {
      float float0 = (-2322.0F);
      int int0 = NumberUtils.compare((double) float0, (double) float0);
      assertEquals(0, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 48;
      int int2 = NumberUtils.maximum(int0, int0, int1);
      assertEquals(48, int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 0;
      int int1 = 14;
      int int2 = NumberUtils.maximum(int0, int1, int0);
      assertEquals(14, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 0;
      int int1 = NumberUtils.minimum(int0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = NumberUtils.maximum(int1, int1, int0);
      assertEquals(0, int2);
      assertTrue(int1 == int2);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertTrue(int0 == int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = (-15L);
      long long1 = 300L;
      long long2 = NumberUtils.maximum(long0, long0, long1);
      assertEquals(300L, long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = (-15L);
      long long1 = 20L;
      long long2 = NumberUtils.maximum(long0, long1, long0);
      assertEquals(20L, long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      int int2 = NumberUtils.minimum(int0, int0, int1);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = (-15L);
      int int0 = NumberUtils.compare((float) long0, (float) long0);
      assertEquals(0, int0);
      
      int int1 = (-1068);
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.minimum(int0, int1, int1);
      assertEquals((-1068), int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = 267L;
      long long1 = (-1508L);
      long long2 = NumberUtils.minimum(long0, long0, long1);
      assertEquals((-1508L), long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test36()  throws Throwable  {
      long long0 = 267L;
      long long1 = 0L;
      long long2 = NumberUtils.minimum(long0, long1, long0);
      assertEquals(0L, long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "ZjP`/!Rhl.]lYq~msM3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "0e2";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "-9L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals((-9L), (long)long0);
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "-L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -L is not a valid number.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "Strings must no6 be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must no6 be null is not a valid number.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "8f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(8.0F, (float)float0, 0.01F);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "5d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(5.0, (double)double0, 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = ",KsQJ`L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,KsQJ`L is not a valid number.
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = ".Fg}oI\"|. ->7D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .Fg}oI\"|. ->7D is not a valid number.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "0E2:(2GC-JY";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E2:(2GC-JY is not a valid number.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "0.Dl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.Dl is not a valid number.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "33E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 33E is not a valid number.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang.StringUtils is not a valid number.
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "e7b[.(y{g";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e7b[.(y{g is not a valid number.
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "-0xdx5BIruL@3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-dx5BIruL@3\"
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "--\"L(m8=5+";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "7";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(7, (int)integer0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "*";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // * is not a valid number.
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test59()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "0F";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test61()  throws Throwable  {
      String string0 = "3eE9";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"3eE9\"
         //
      }
  }

  @Test
  public void test62()  throws Throwable  {
      String string0 = "0.9";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.9F, (float)float0, 0.01F);
  }
}
