/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:01:26 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "-0E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "--0xString/ must not be null";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "Mimum abreiatin widh is 4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "eWKjS`;A.j()1UggWd7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "3eEy";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "3Ey";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "0x1+j=SyO";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "0x6";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "0xAa}";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "+vUp";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      float float0 = 19.976254F;
      int int1 = NumberUtils.compare((float) int0, float0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = NumberUtils.compare(float0, float0);
      assertEquals(0, int0);
      
      int int1 = 834;
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.compare((double) int1, (double) int0);
      assertEquals(1, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 11;
      double double0 = 4618.4498;
      int int1 = NumberUtils.compare((double) int0, double0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = NumberUtils.maximum(int0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = 3;
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.maximum(int1, int0, int2);
      assertEquals(3, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertTrue(int1 == int0);
      assertFalse(int1 == int3);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = null;
      int int0 = (-3423);
      int int1 = NumberUtils.stringToInt(string0, int0);
      assertEquals((-3423), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      
      int int2 = 2667;
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.maximum(int2, int2, int2);
      assertEquals(2667, int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int3);
      
      int int4 = NumberUtils.maximum(int1, int3, int1);
      assertEquals(2667, int4);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertTrue(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int4);
      assertTrue(int2 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertTrue(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "f";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      float float0 = 1.0F;
      int int1 = NumberUtils.compare(float0, (float) int0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      long long0 = NumberUtils.maximum((long) int0, (long) int1, (long) int0);
      assertEquals(1L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 11;
      int int1 = NumberUtils.compare((double) int0, (double) int0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      long long0 = NumberUtils.maximum((long) int1, (long) int1, (long) int0);
      assertEquals(11L, long0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 1195;
      int int1 = 0;
      int int2 = NumberUtils.minimum(int0, int0, int1);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 1195;
      int int1 = 48;
      int int2 = NumberUtils.minimum(int0, int1, int0);
      assertEquals(48, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = NumberUtils.compare(float0, float0);
      assertEquals(0, int0);
      
      long long0 = (-1L);
      long long1 = NumberUtils.minimum((long) int0, (long) int0, long0);
      assertEquals((-1L), long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float float0 = 0.0F;
      int int0 = NumberUtils.compare(float0, float0);
      assertEquals(0, int0);
      
      int int1 = 834;
      assertFalse(int1 == int0);
      
      long long0 = NumberUtils.minimum((long) int1, (long) int0, (long) int0);
      assertEquals(0L, long0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = ".l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .l is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = ",(A5as3TJ1sl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,(A5as3TJ1sl is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "1f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "}@B99xuyd";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // }@B99xuyd is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "wocF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // wocF is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "1D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(1.0, (double)double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "0.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0. is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "GCL!SrT3P-m3bge";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // GCL!SrT3P-m3bge is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "is not a alid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // is not a alid number. is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "0.6cfe_yZc";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.6cfe_yZc is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "0x6";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(6, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "--0xString/ must not be null";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "6";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(6, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = "eWKjS`;A.j()1UggWd7";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "Mimum abreiatin widh is 4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "0.6";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.6F, (float)float0, 0.01F);
  }
}
