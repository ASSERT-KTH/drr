/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:30:28 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "6l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "4d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "00E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "+=YG";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "1eetv0XwtGWGq}\"";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "eA`z?fW";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = ".tbings must ot be null";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "0E-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "-0xxTGOegD";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "0x0E0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "-0xf.:TG`egfP`D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "0E-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "-2F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      float float0 = 3692.885F;
      float float1 = 0.0F;
      int int0 = NumberUtils.compare(float0, float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals(1, int0);
  }

  @Test
  public void test24()  throws Throwable  {
      float float0 = (-255.0859F);
      float float1 = 0.0F;
      int int0 = NumberUtils.compare(float0, float1);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
      assertEquals((-1), int0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      int int1 = NumberUtils.compare((float) int0, (float) int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 1835;
      double double0 = 1916.0;
      int int1 = NumberUtils.compare((double) int0, double0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-44);
      int int1 = 159;
      int int2 = NumberUtils.maximum(int0, int0, int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(159, int2);
  }

  @Test
  public void test28()  throws Throwable  {
      int int0 = 1957;
      int int1 = 3890;
      int int2 = NumberUtils.maximum(int0, int1, int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(3890, int2);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 2;
      long long0 = (-18L);
      long long1 = NumberUtils.maximum(long0, long0, (long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(2L, long1);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 1835;
      int int1 = NumberUtils.compare((double) int0, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      
      long long0 = (-1163L);
      long long1 = NumberUtils.minimum((long) int1, long0, long0);
      assertTrue(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(long1 == long0);
      assertEquals((-1163L), long1);
      
      long long2 = NumberUtils.maximum(long1, (long) int1, (long) int1);
      assertFalse(long2 == long0);
      assertFalse(long2 == long1);
      assertTrue(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(long1 == long0);
      assertFalse(long1 == long2);
      assertEquals(0L, long2);
  }

  @Test
  public void test31()  throws Throwable  {
      float float0 = (-3191.4897F);
      double double0 = 0.0;
      int int0 = NumberUtils.compare(double0, (double) float0);
      assertEquals(1, int0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.minimum(int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(0, int2);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = 667;
      int int1 = 0;
      int int2 = NumberUtils.minimum(int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(0, int2);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 1835;
      int int1 = NumberUtils.compare((double) int0, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      
      long long0 = (-1163L);
      long long1 = NumberUtils.minimum((long) int1, (long) int1, long0);
      assertFalse(int1 == int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertFalse(int0 == int1);
      assertEquals((-1163L), long1);
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "0E0";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "0F";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "tzU6HhFlwoBZdTacyf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // tzU6HhFlwoBZdTacyf is not a valid number.
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "4d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(4.0, (double)double0, 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "`f`D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `f`D is not a valid number.
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "0E)p-";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E)p- is not a valid number.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "0E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0E is not a valid number.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "/e97EL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // /e97EL is not a valid number.
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = ".tbings must ot be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .tbings must ot be null is not a valid number.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = ".3";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.3F, (float)float0, 0.01F);
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "-0xzG|T*@2'8joR`pYrv";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-zG|T*@2'8joR`pYrv\"
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "0x0E";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(14, (int)integer0);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "9";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(9, (int)integer0);
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "-";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // - is not a valid number.
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "0Ew";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test54()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "0E-";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "0E-0";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = "6l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(6L, (long)long0);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = "-2F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals((-2.0F), (float)float0, 0.01F);
  }
}
