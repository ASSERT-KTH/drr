/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:11:45 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "8l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "-L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "4d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "0e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "--\"\" is(otDa valid nuBer.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "+>3-o.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "e\"W9}";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "8El";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "'V";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "0e1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "0xuwm(";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "0xEa#\\?7R$Jl";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "-0x2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "--";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "-0f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      float float0 = 1995.1584F;
      float float1 = 1772.36F;
      int int0 = NumberUtils.compare(float0, float1);
      assertEquals(1, int0);
      assertFalse(float0 == float1);
      assertFalse(float1 == float0);
  }

  @Test
  public void test25()  throws Throwable  {
      int int0 = 0;
      int int1 = NumberUtils.maximum(int0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      int int2 = 2303;
      assertFalse(int2 == int1);
      
      int int3 = NumberUtils.compare((float) int1, (float) int2);
      assertEquals((-1), int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertTrue(int0 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
  }

  @Test
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1551.0);
      int int0 = NumberUtils.compare(double0, double1);
      assertEquals(1, int0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-1163);
      int int1 = 108;
      int int2 = NumberUtils.compare((double) int0, (double) int1);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
  }

  @Test
  public void test28()  throws Throwable  {
      double double0 = (-1.0);
      int int0 = NumberUtils.compare(double0, double0);
      assertEquals(0, int0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 406;
      int int1 = 946;
      int int2 = NumberUtils.maximum(int0, int0, int1);
      assertEquals(946, int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 406;
      int int1 = (-2204);
      int int2 = NumberUtils.maximum(int1, int0, int0);
      assertEquals(406, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = (-371);
      long long0 = 1991L;
      long long1 = NumberUtils.maximum((long) int0, (long) int0, long0);
      assertEquals(1991L, long1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test32()  throws Throwable  {
      long long0 = (-1709L);
      int int0 = 406;
      int int1 = (-2204);
      long long1 = NumberUtils.maximum((long) int1, (long) int0, long0);
      assertEquals(406L, long1);
      assertFalse(long0 == long1);
      assertFalse(int1 == int0);
      assertFalse(long1 == long0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = (-1163);
      int int1 = 108;
      int int2 = NumberUtils.minimum(int1, int1, int0);
      assertEquals((-1163), int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = 0L;
      long long1 = NumberUtils.minimum(long0, long0, long0);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int0 = NumberUtils.compare((float) long1, (float) long1);
      assertEquals(0, int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      
      int int1 = 112;
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.minimum(int1, int0, int1);
      assertEquals(0, int2);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1538L);
      long long2 = NumberUtils.minimum(long0, long0, long1);
      assertEquals((-1538L), long2);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }

  @Test
  public void test36()  throws Throwable  {
      long long0 = (-1709L);
      int int0 = 406;
      int int1 = NumberUtils.maximum(int0, int0, int0);
      assertEquals(406, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      
      long long1 = NumberUtils.minimum((long) int1, long0, (long) int0);
      assertEquals((-1709L), long1);
      assertTrue(int0 == int1);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "-4L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals((-4L), (long)long0);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "Strinns must no3 ~e nAll";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strinns must no3 ~e nAll is not a valid number.
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = ".B!29L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .B!29L is not a valid number.
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "4d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(4.0, (double)double0, 0.01D);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "-|hvL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -|hvL is not a valid number.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "2}I2o3Ley,^F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2}I2o3Ley,^F is not a valid number.
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "N.u).'DLJvQD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // N.u).'DLJvQD is not a valid number.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "0e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "0e1";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StringUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang.StringUtils is not a valid number.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = " is not a valid numer.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid numer. is not a valid number.
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = ".1";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.1F, (float)float0, 0.01F);
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "0xuwm(";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"uwm(\"
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "--Strinns ust not be nAbl";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "2";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(2, (int)integer0);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "\n";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 
         //  is not a valid number.
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "F";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test56()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = "0e1";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e1\"
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = "-0x2";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals((-2), (int)integer0);
  }

  @Test
  public void test59()  throws Throwable  {
      String string0 = "8l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(8L, (long)long0);
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "-0f";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
  }
}
