/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:51:08 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigInteger;
import org.apache.commons.lang.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "2f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "+&LnU<\"ln49&";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "3E.;\"mUb0YSDtBk-dv";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "7e/";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "0xEr-<+Z7%@4ev\\PXYb1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "0x0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "-0xe,b<F'.E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "-0-n N:";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "-8L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "Er-<+Z7@4ev\\PXYGub1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "-0x";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      long long0 = 3998L;
      int int1 = NumberUtils.compare((float) long0, (float) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = 31;
      float float0 = 3570.31F;
      int int1 = NumberUtils.compare((float) int0, float0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.compare((float) int0, (float) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      double double0 = 2236.38415;
      int int1 = NumberUtils.compare(double0, (double) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(1, int1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      int int1 = 2196;
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.compare((double) int0, (double) int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-1), int2);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.compare((double) int0, (double) int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 2969;
      String string0 = "...";
      int int1 = NumberUtils.stringToInt(string0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = NumberUtils.maximum(int1, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2969, int2);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 1559;
      int int1 = 27;
      int int2 = NumberUtils.maximum(int0, int0, int1);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(1559, int2);
      
      long long0 = NumberUtils.maximum((long) int1, (long) int1, (long) int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals(1559L, long0);
  }

  @Test
  public void test31()  throws Throwable  {
      int int0 = 2;
      long long0 = 2223L;
      long long1 = NumberUtils.maximum((long) int0, long0, (long) int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(2223L, long1);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      int int1 = 2196;
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.maximum(int0, int0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(2196, int2);
      
      int int3 = NumberUtils.minimum(int2, int2, int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertTrue(int0 == int3);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertEquals(0, int3);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "-0x";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
      
      int int1 = (-2548);
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.minimum(int0, int1, int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-2548), int2);
  }

  @Test
  public void test34()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-4143L);
      long long2 = NumberUtils.minimum(long0, long1, long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals((-4143L), long2);
  }

  @Test
  public void test35()  throws Throwable  {
      long long0 = 10L;
      int int0 = 1559;
      int int1 = NumberUtils.maximum(int0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(1559, int1);
      
      long long1 = NumberUtils.minimum((long) int1, (long) int1, long0);
      assertTrue(int1 == int0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertTrue(int0 == int1);
      assertEquals(10L, long1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "P\\S6(0E7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "-hL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -hL is not a valid number.
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "2L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(2L, (long)long0);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "~.=6jr!57,NYeL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ~.=6jr!57,NYeL is not a valid number.
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "St{igsKusX no e F4ll";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // St{igsKusX no e F4ll is not a valid number.
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "8f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(8.0F, (float)float0, 0.01F);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "6Fd";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(6.0, (double)double0, 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "8D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(8.0, (double)double0, 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "Er-";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Er- is not a valid number.
         //
      }
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "e,b<F'.E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // e,b<F'.E is not a valid number.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "\"\" s not a[valid ber.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" s not a[valid ber. is not a valid number.
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = "Rx. .>.iYHF[38]&4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "0x vjse";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \" vjse\"
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "--PhTw+Mqph5fkpiYd";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test50()  throws Throwable  {
      String string0 = "w";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // w is not a valid number.
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "3";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(3, (int)integer0);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \"\" is not a valid number.
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test54()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "D";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"D\"
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      String string0 = "-0xe,b<F'.E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-e,b<F'.E\"
         //
      }
  }

  @Test
  public void test57()  throws Throwable  {
      String string0 = "-8L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals((-8L), (long)long0);
  }

  @Test
  public void test58()  throws Throwable  {
      String string0 = "<mf*5bo4<,Qb2F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // <mf*5bo4<,Qb2F is not a valid number.
         //
      }
  }
}
