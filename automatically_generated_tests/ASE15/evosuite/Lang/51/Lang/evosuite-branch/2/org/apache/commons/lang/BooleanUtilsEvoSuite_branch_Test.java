/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:42:07 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.Arrays;
import org.apache.commons.lang.BooleanUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class BooleanUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Boolean[] booleanArray0 = null;
      // Undeclared exception!
      try {
        Boolean boolean0 = BooleanUtils.xor(booleanArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 2504;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0);
      assertTrue(boolean0);
      
      Boolean[] booleanArray0 = new Boolean[2];
      booleanArray0[0] = boolean0;
      booleanArray0[1] = boolean0;
      Boolean boolean1 = BooleanUtils.xor(booleanArray0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertNotSame(boolean1, boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test02()  throws Throwable  {
      boolean boolean0 = false;
      Boolean[] booleanArray0 = new Boolean[10];
      booleanArray0[0] = (Boolean) boolean0;
      booleanArray0[1] = (Boolean) boolean0;
      booleanArray0[2] = (Boolean) boolean0;
      booleanArray0[3] = (Boolean) boolean0;
      booleanArray0[4] = booleanArray0[2];
      booleanArray0[5] = (Boolean) boolean0;
      Boolean boolean1 = BooleanUtils.negate((Boolean) boolean0);
      assertFalse(boolean1.equals((Object)boolean0));
      assertTrue(boolean1);
      
      booleanArray0[6] = boolean1;
      booleanArray0[7] = (Boolean) boolean0;
      booleanArray0[8] = (Boolean) boolean0;
      booleanArray0[9] = (Boolean) boolean0;
      Boolean boolean2 = BooleanUtils.xor(booleanArray0);
      assertFalse(boolean2.equals((Object)boolean0));
      assertSame(boolean2, boolean1);
      assertTrue(boolean2);
  }

  @Test
  public void test03()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[1];
      boolean boolean0 = BooleanUtils.xor(booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "]-gN)ck}X-z+l0";
      String string1 = "The Integer did not match either specified value";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(string0, string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = BooleanUtils.toStringOnOff(boolean0);
      assertNotNull(string0);
      assertEquals("off", string0);
      
      String string1 = null;
      boolean boolean1 = BooleanUtils.toBoolean(string0, string1, string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = null;
      String string1 = "i&I</%1i+&-c";
      boolean boolean0 = BooleanUtils.toBoolean(string0, string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "@";
      String string1 = null;
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(string1, string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match either specified value
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = BooleanUtils.toStringOnOff(boolean0);
      assertNotNull(string0);
      assertEquals("off", string0);
      
      boolean boolean1 = BooleanUtils.toBoolean(string0, string0, string0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "off";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "yes";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "yea";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "YC\"";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "O[";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "on";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "=fT9Bv@q";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "WEFF";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test18()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      boolean boolean1 = BooleanUtils.toBoolean(string0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertNotNull(string0);
      assertEquals("true", string0);
      
      String string1 = "}zU1-tfGKusT";
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(string0, string1, string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = ")i~}";
      Boolean boolean0 = Boolean.valueOf(string0);
      assertFalse(boolean0);
      
      String string1 = BooleanUtils.toStringTrueFalse(boolean0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("false", string1);
      
      // Undeclared exception!
      try {
        Boolean boolean1 = BooleanUtils.toBooleanObject(string1, string0, string0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = null;
      String string1 = "K37$\"EC";
      // Undeclared exception!
      try {
        Boolean boolean0 = BooleanUtils.toBooleanObject(string0, string1, string1, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The String did not match any specified value
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "a%U";
      String string1 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(string1, string0, string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(string1, string1, string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "no";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "yes";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "off";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "on";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "false";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 1157;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1157, (int)integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, (Integer) int0, (Integer) int0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      String string0 = boolean0.toString();
      assertNotNull(string0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals("true", string0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject(string0);
      assertTrue(integer0.equals((Object)int0));
      assertSame(boolean1, boolean0);
      assertSame(boolean0, boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(0, (int)integer0);
      
      int int0 = 82;
      Integer integer1 = new Integer(int0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotSame(integer1, integer0);
      assertEquals(82, (int)integer1);
      
      Integer integer2 = new Integer((int) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertNotSame(integer0, integer1);
      assertNotSame(integer0, integer2);
      assertNotSame(integer2, integer0);
      assertNotSame(integer2, integer1);
      assertEquals(0, (int)integer2);
      
      boolean boolean1 = BooleanUtils.toBoolean(integer0, integer1, integer2);
      assertTrue(boolean1 == boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(boolean0 == boolean1);
      assertNotSame(integer0, integer1);
      assertNotSame(integer0, integer2);
      assertNotSame(integer2, integer0);
      assertNotSame(integer2, integer1);
      assertNotSame(integer1, integer2);
      assertNotSame(integer1, integer0);
      assertFalse(boolean1);
      
      Integer integer3 = BooleanUtils.toIntegerObject((Boolean) boolean1, integer2, integer1, integer0);
      assertTrue(boolean1 == boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer3));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(boolean0 == boolean1);
      assertNotSame(integer0, integer3);
      assertNotSame(integer0, integer1);
      assertNotSame(integer0, integer2);
      assertSame(integer3, integer1);
      assertNotSame(integer3, integer0);
      assertNotSame(integer3, integer2);
      assertNotSame(integer2, integer0);
      assertNotSame(integer2, integer1);
      assertNotSame(integer2, integer3);
      assertNotSame(integer1, integer2);
      assertNotSame(integer1, integer0);
      assertSame(integer1, integer3);
      assertEquals(82, (int)integer3);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0);
  }

  @Test
  public void test32()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      int int0 = 3967;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3967, (int)integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertSame(integer0, integer1);
      assertSame(integer1, integer0);
      assertEquals(3967, (int)integer1);
  }

  @Test
  public void test33()  throws Throwable  {
      boolean boolean0 = true;
      int int0 = (-501);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-501), (int)integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, (Integer) int0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertSame(integer0, integer1);
      assertSame(integer1, integer0);
      assertEquals((-501), (int)integer1);
  }

  @Test
  public void test34()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-186);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-186), (int)integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer0.equals((Object)int0));
      assertSame(integer1, integer0);
      assertSame(integer0, integer1);
      assertEquals((-186), (int)integer1);
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = "{}";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
      
      int int0 = 2504;
      int int1 = BooleanUtils.toInteger((Boolean) boolean0, int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(2504, int1);
  }

  @Test
  public void test36()  throws Throwable  {
      int int0 = 61;
      String string0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      int int1 = BooleanUtils.toInteger(boolean0, int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(61, int1);
  }

  @Test
  public void test37()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      int int0 = 3967;
      int int1 = BooleanUtils.toInteger(boolean0, int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(3967, int1);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = null;
      int int0 = (-186);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-186), (int)integer0);
      
      boolean boolean0 = BooleanUtils.toBoolean(string0, string0, string0);
      assertTrue(boolean0);
      
      int int1 = BooleanUtils.toInteger(boolean0, (int) integer0, (int) integer0);
      assertTrue(int1 == int0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(int0 == int1);
      assertEquals((-186), int1);
  }

  @Test
  public void test39()  throws Throwable  {
      int int0 = 0;
      boolean boolean0 = false;
      int int1 = BooleanUtils.toInteger(boolean0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0);
      assertFalse(boolean0);
      
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
  }

  @Test
  public void test41()  throws Throwable  {
      Integer integer0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, integer0, integer0);
      assertTrue(boolean0);
      
      Integer integer1 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(1, (int)integer1);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = "-t$u];s";
      assertNotSame(string1, string0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(string1, string0, string1, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      
      int int0 = BooleanUtils.toInteger((boolean) boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int0);
  }

  @Test
  public void test43()  throws Throwable  {
      int int0 = (-756);
      String string0 = "";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-756), (int)integer1);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject((Integer) int0, integer0, integer0, integer1);
      assertTrue(integer1.equals((Object)int0));
  }

  @Test
  public void test44()  throws Throwable  {
      int int0 = 668;
      String string0 = "', is neither of type Map.Entry nor an Array";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0, string0, string0, string0);
      assertTrue(boolean0);
      
      int int1 = BooleanUtils.toInteger((boolean) boolean0);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Integer integer0 = new Integer(int0);
      assertFalse(int0 == int1);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertEquals(668, (int)integer0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject((Integer) int1, integer0, (Integer) int1, integer0);
      assertFalse(int0 == int1);
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotSame(boolean1, boolean0);
      assertNotSame(boolean0, boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test45()  throws Throwable  {
      int int0 = (-756);
      String string0 = "";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      // Undeclared exception!
      try {
        Boolean boolean1 = BooleanUtils.toBooleanObject((Integer) int0, integer0, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      int int0 = (-4317);
      Integer integer0 = null;
      Integer integer1 = new Integer(int0);
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-4317), (int)integer1);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer1, integer1, integer0);
      assertTrue(integer1.equals((Object)int0));
  }

  @Test
  public void test47()  throws Throwable  {
      int int0 = 3967;
      Integer integer0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, (Integer) int0, integer0, (Integer) int0);
      assertFalse(boolean0);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 3967;
      Integer integer0 = null;
      // Undeclared exception!
      try {
        Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, (Integer) int0, (Integer) int0, (Integer) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      int int0 = 0;
      int int1 = (-965);
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0, int1, int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test50()  throws Throwable  {
      int int0 = (-604);
      int int1 = (-2537);
      // Undeclared exception!
      try {
        Boolean boolean0 = BooleanUtils.toBooleanObject(int1, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match any specified value
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      int int0 = 3967;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3967, (int)integer0);
      
      Integer integer1 = BooleanUtils.toIntegerObject((boolean) boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotSame(integer1, integer0);
      assertEquals(1, (int)integer1);
      
      // Undeclared exception!
      try {
        boolean boolean1 = BooleanUtils.toBoolean(integer0, integer1, integer1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      int int0 = 46;
      String string0 = "yA\\";
      Integer integer0 = Integer.valueOf(int0);
      assertEquals(46, (int)integer0);
      
      Integer integer1 = Integer.getInteger(string0);
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(integer1, integer0, integer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
      }
  }

  @Test
  public void test53()  throws Throwable  {
      int int0 = 1157;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1157, (int)integer0);
      
      Integer integer1 = null;
      boolean boolean0 = BooleanUtils.toBoolean(integer1, integer0, integer1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
  }

  @Test
  public void test54()  throws Throwable  {
      Integer integer0 = null;
      boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(boolean0);
  }

  @Test
  public void test55()  throws Throwable  {
      int int0 = 3967;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3967, (int)integer0);
      
      boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = (-501);
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-501), (int)integer0);
      
      int int1 = 0;
      boolean boolean0 = BooleanUtils.toBoolean(int1, (int) integer0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean0);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = 61;
      boolean boolean0 = BooleanUtils.toBoolean(int0, int0, int0);
      assertTrue(boolean0);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = (-501);
      int int1 = 0;
      // Undeclared exception!
      try {
        boolean boolean0 = BooleanUtils.toBoolean(int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Integer did not match either specified value
         //
      }
  }

  @Test
  public void test59()  throws Throwable  {
      int int0 = 0;
      Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) int0);
      assertFalse(boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      Integer integer0 = null;
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0);
  }

  @Test
  public void test61()  throws Throwable  {
      boolean boolean0 = false;
      Integer integer0 = BooleanUtils.toIntegerObject(boolean0);
      assertEquals(0, (int)integer0);
      
      boolean boolean1 = BooleanUtils.toBoolean((int) integer0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test62()  throws Throwable  {
      int int0 = 2810;
      boolean boolean0 = BooleanUtils.toBoolean(int0);
      assertTrue(boolean0);
  }

  @Test
  public void test63()  throws Throwable  {
      int int0 = 126;
      Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) int0);
      assertTrue(boolean0);
      
      boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull(boolean0, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1);
  }

  @Test
  public void test64()  throws Throwable  {
      String string0 = ")i~}";
      Boolean boolean0 = Boolean.valueOf(string0);
      assertFalse(boolean0);
      
      Boolean boolean1 = null;
      boolean boolean2 = BooleanUtils.toBooleanDefaultIfNull(boolean1, (boolean) boolean0);
      assertTrue(boolean0.equals((Object)boolean2));
      assertFalse(boolean2);
  }

  @Test
  public void test65()  throws Throwable  {
      String string0 = "{}";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
      
      boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull((Boolean) boolean0, boolean0);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test66()  throws Throwable  {
      int int0 = (-4317);
      int int1 = 88;
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0, int1, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(boolean0);
      
      boolean boolean1 = BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(boolean1);
  }

  @Test
  public void test67()  throws Throwable  {
      Boolean boolean0 = null;
      boolean boolean1 = BooleanUtils.toBoolean(boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test68()  throws Throwable  {
      int int0 = (-4317);
      Boolean boolean0 = BooleanUtils.toBooleanObject(int0, int0, int0, int0);
      assertTrue(boolean0);
      
      boolean boolean1 = BooleanUtils.toBoolean(boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1);
  }

  @Test
  public void test69()  throws Throwable  {
      int int0 = 126;
      Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) int0);
      assertTrue(boolean0);
      
      Boolean boolean1 = BooleanUtils.toBooleanObject((boolean) boolean0);
      assertSame(boolean1, boolean0);
      assertSame(boolean0, boolean1);
      assertTrue(boolean1);
  }

  @Test
  public void test70()  throws Throwable  {
      boolean boolean0 = false;
      Boolean boolean1 = BooleanUtils.toBooleanObject(boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test71()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1);
  }

  @Test
  public void test72()  throws Throwable  {
      String string0 = null;
      String string1 = "HMgW!RQR[<I+ YX:VW";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0, string1, string1, string0);
      boolean boolean1 = BooleanUtils.isFalse(boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test73()  throws Throwable  {
      String string0 = "Array is empty";
      Boolean boolean0 = Boolean.valueOf(string0);
      assertFalse(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotFalse(boolean0);
      assertTrue(boolean0.equals((Object)boolean1));
      assertFalse(boolean1);
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = "Array is empty";
      Boolean boolean0 = Boolean.valueOf(string0);
      assertFalse(boolean0);
      
      boolean boolean1 = BooleanUtils.isNotTrue(boolean0);
      assertFalse(boolean0.equals((Object)boolean1));
      assertTrue(boolean1);
  }

  @Test
  public void test75()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = BooleanUtils.isNotTrue((Boolean) boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test76()  throws Throwable  {
      String string0 = "";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0);
      boolean boolean1 = BooleanUtils.isTrue(boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test77()  throws Throwable  {
      int int0 = 1157;
      Integer integer0 = new Integer(int0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1157, (int)integer0);
      
      Boolean boolean0 = BooleanUtils.toBooleanObject(integer0, integer0, (Integer) int0, (Integer) int0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      
      Boolean boolean1 = BooleanUtils.negate(boolean0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(boolean1.equals((Object)boolean0));
      assertFalse(boolean0.equals((Object)boolean1));
      assertNotSame(boolean1, boolean0);
      assertNotSame(boolean0, boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test78()  throws Throwable  {
      Boolean boolean0 = null;
      Boolean boolean1 = BooleanUtils.negate(boolean0);
  }

  @Test
  public void test79()  throws Throwable  {
      String string0 = "{}";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
      
      String string1 = BooleanUtils.toStringYesNo((Boolean) boolean0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("no", string1);
  }

  @Test
  public void test80()  throws Throwable  {
      String string0 = "a%U";
      Boolean boolean0 = BooleanUtils.toBooleanObject(string0, string0, string0, string0);
      assertTrue(boolean0);
      
      String string1 = BooleanUtils.toStringOnOff(boolean0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("on", string1);
  }

  @Test
  public void test81()  throws Throwable  {
      String string0 = "yA\\";
      boolean boolean0 = BooleanUtils.toBoolean(string0);
      assertFalse(boolean0);
      
      String string1 = BooleanUtils.toStringYesNo(boolean0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("no", string1);
  }

  @Test
  public void test82()  throws Throwable  {
      BooleanUtils booleanUtils0 = new BooleanUtils();
      assertNotNull(booleanUtils0);
  }

  @Test
  public void test83()  throws Throwable  {
      Boolean boolean0 = null;
      String string0 = BooleanUtils.toStringTrueFalse(boolean0);
      assertNull(string0);
  }
}
