/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:30:17 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "--";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "1f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "--<dc2Yj{T-ao";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "+dJz";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "E{u";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "e:nNyKV~";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x2c>Ja@nl";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x).L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "-0xE{ucGB{}";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = ",pm`";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "01";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte) (-114);
      byte byte1 = (byte)48;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)48, byte2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-114);
      byte byte1 = (byte) (-82);
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte) (-82), byte2);
  }

  @Test
  public void test026()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)24;
      byteArray0[7] = byte0;
      short short0 = NumberUtils.max((short) byteArray0[6], (short) byteArray0[6], (short) byteArray0[7]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)24, (byte)0}, byteArray0);
      assertEquals((short)24, short0);
  }

  @Test
  public void test027()  throws Throwable  {
      short short0 = (short) (-39);
      short short1 = (short)4693;
      short short2 = NumberUtils.max(short0, short1, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short)4693, short2);
  }

  @Test
  public void test028()  throws Throwable  {
      short short0 = (short)0;
      byte byte0 = (byte) (-16);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-16), byte1);
      
      int int0 = NumberUtils.max((int) byte1, (int) byte1, (int) short0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test029()  throws Throwable  {
      short short0 = (short)0;
      byte byte0 = (byte) (-16);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-16), byte1);
      
      int int0 = NumberUtils.max((int) byte1, (int) short0, (int) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals(0, int0);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)43;
      long long0 = (-707L);
      long long1 = NumberUtils.max(long0, long0, (long) short0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(43L, long1);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)43;
      long long0 = (-707L);
      long long1 = NumberUtils.max(long0, (long) short0, (long) short0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(43L, long1);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)2;
      int int0 = NumberUtils.min((int) byte0, (int) byte0, (int) byte0);
      assertEquals(2, int0);
      
      long long0 = NumberUtils.max((long) byte0, (long) byte0, (long) int0);
      assertEquals(2L, long0);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)16;
      byte byte1 = (byte) (-97);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte) (-97), byte2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)16;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test035()  throws Throwable  {
      short short0 = (short)85;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short0, short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertEquals((short)0, short2);
  }

  @Test
  public void test036()  throws Throwable  {
      short short0 = (short)625;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertEquals((short)0, short2);
  }

  @Test
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)24;
      byteArray0[7] = byte0;
      int int0 = NumberUtils.min((int) byteArray0[7], (int) byteArray0[7], (int) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)24, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test038()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)30;
      int int0 = NumberUtils.min((int) byte1, (int) byte0, (int) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(0, int0);
  }

  @Test
  public void test039()  throws Throwable  {
      long long0 = 367L;
      long long1 = (-1462L);
      long long2 = NumberUtils.min(long0, long0, long1);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertEquals((-1462L), long2);
  }

  @Test
  public void test040()  throws Throwable  {
      long long0 = 367L;
      long long1 = 0L;
      long long2 = NumberUtils.min(long0, long1, long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertEquals(0L, long2);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[10];
      long long0 = (-119L);
      floatArray0[0] = (float) long0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {(-119.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[9] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test043()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      short short0 = (short)137;
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) short0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 137.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(137.0, double0, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)24;
      byteArray0[7] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)24, (byte)0}, byteArray0);
      assertEquals((byte)24, byte1);
  }

  @Test
  public void test048()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)2355;
      shortArray0[4] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)2355}, shortArray0);
      assertEquals((short)2355, short1);
  }

  @Test
  public void test049()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 2746;
      intArray0[9] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 2746}, intArray0);
      assertEquals(2746, int1);
  }

  @Test
  public void test051()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = 274L;
      longArray0[1] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 274L, 0L}, longArray0);
      assertEquals(274L, long1);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = Float.NaN;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      int int0 = 2816;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) int0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {2816.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-13);
      byteArray0[4] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-13), (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-13), byte1);
  }

  @Test
  public void test060()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      short[] shortArray0 = new short[11];
      short short0 = (short) (-2528);
      shortArray0[1] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short) (-2528), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short) (-2528), short1);
  }

  @Test
  public void test062()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      short short0 = (short) (-39);
      int[] intArray0 = new int[12];
      intArray0[1] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, (-39), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals((-39), int0);
  }

  @Test
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = (-1077L);
      longArray0[4] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1077L)}, longArray0);
      assertEquals((-1077L), long1);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "kHf@Ep2";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "The Array ust not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array ust not be null is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "2c>Ja@nl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 2c>Ja@nl is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "1f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = ".?d";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .?d is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "`;s#3F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // `;s#3F is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "H=+D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // H=+D is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "^g,7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"^g,7\"
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "0e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0e is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "k'/rC)g;e7-e90YEI";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // k'/rC)g;e7-e90YEI is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "v:.tiQyiSeD*n[";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // v:.tiQyiSeD*n[ is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "Array cannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Array cannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "org.apache.coZmons.vazg3.S/ringUEils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.coZmons.vazg3.S/ringUEils is not a valid number.
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0X-0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "-0x1f";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals((-31), (int)integer0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "0x2c>Ja@nl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"2c>Ja@nl\"
         //
      }
  }

  @Test
  public void test090() {}
//   @Test
//   public void test090()  throws Throwable  {
//       String string0 = "--GOj,x)NufDy'-Q=Xm";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "-0Xorg.apache.commons.lang3.StringUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-org.apache.commons.lang3.StringUtils\"
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[4];
      short short0 = NumberUtils.toShort(string0, (short) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "+dJz";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test096()  throws Throwable  {
      float float0 = 0.0F;
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) float0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      byte byte0 = (byte) (-16);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-16), byte1);
      
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      float float0 = NumberUtils.toFloat(string0, (float) byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((-16.0F), float0, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      short short0 = (short) (-621);
      short short1 = NumberUtils.min(short0, short0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-621), short1);
      
      String string0 = "o";
      long long0 = NumberUtils.toLong(string0, (long) short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((-621L), long0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "+.ER>gMJ";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      long long0 = 0L;
      byte byte0 = (byte)0;
      float float0 = NumberUtils.max((float) long0, (float) long0, (float) byte0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test104()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = (-1077L);
      float float0 = NumberUtils.min((float) longArray0[0], (float) long0, (float) long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-1077.0F), float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      int int0 = 954;
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(954, int1);
      
      double double0 = NumberUtils.min((double) int0, (double) int1, (double) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(954.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = ".";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test108()  throws Throwable  {
      double double0 = 0.0;
      double double1 = NumberUtils.max(double0, double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "01";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(1, int0);
  }
}
