/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:53:37 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.DataTruncation;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.sql.SQLWarning;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Locale;
import java.util.Map;
import java.util.Stack;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "sun.text.normalizer is not availabe";
      byte[] byteArray0 = new byte[6];
      try {
        String string1 = StringUtils.toString(byteArray0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // sun.text.normalizer is not availabe
         //
      }
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Array element", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string1, (CharSequence[]) stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "Vdy`";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string1, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.normalizeSpace(string0);
      assertNull(string1);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "'oOFe_uCrElePb";
      String string1 = StringUtils.normalizeSpace(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("'oOFe_uCrElePb", string1);
      assertNotNull(string1);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = null;
      String string1 = "InvocationTargetException occurred";
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "|@{In;:";
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.toLanguageTag();
      assertEquals("fr-FR", string0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals(5, charSequenceArray0[0].length());
      assertEquals("fr-FR", charSequenceArray0[0].toString());
      assertNotNull(charSequenceArray0[0]);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, charSequenceArray0);
      assertTrue(boolean0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
  }

  @Test
  public void test008()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.startsWithAny(charSequence0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      String string1 = null;
      boolean boolean0 = StringUtils.startsWith((CharSequence) string1, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "+'W ";
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripAccents(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertTrue(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "zJ\\";
      String string1 = StringUtils.strip(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("zJ\\", string1);
      assertNotNull(string1);
      
      String string2 = "null/empty items";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = 0;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1, int0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "zJ\\";
      String string1 = StringUtils.strip(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("zJ\\", string1);
      assertNotNull(string1);
      
      String string2 = "null/empty items";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = 4326;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals(16, int1);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "a~s.Ig%\\Wla";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("A~S.IG%\\WLA", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string1);
      
      int int0 = (-3963);
      String string2 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = 0;
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, int1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string2, int2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, int3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = null;
      int int0 = 862;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try {
        int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, (int) charArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "IH'";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("IH'", string1);
      assertNotNull(string1);
      
      SQLException sQLException0 = new SQLException();
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertNotNull(sQLException0);
      
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string1, (Throwable) sQLException0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: IH'", sQLTransientConnectionException0.toString());
      assertEquals("IH'", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(sQLTransientConnectionException0);
      
      String string2 = sQLTransientConnectionException0.toString();
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("java.sql.SQLTransientConnectionException: IH'", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: IH'", sQLTransientConnectionException0.toString());
      assertEquals("IH'", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals(42, int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNull(sQLException0.getSQLState());
      assertEquals(0, sQLException0.getErrorCode());
      assertEquals("java.sql.SQLException", sQLException0.toString());
      assertNull(sQLException0.getMessage());
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertEquals("java.sql.SQLTransientConnectionException: IH'", sQLTransientConnectionException0.toString());
      assertEquals("IH'", sQLTransientConnectionException0.getMessage());
      assertNull(sQLTransientConnectionException0.getSQLState());
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "null/empty items";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(16, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils$InitStripAccents";
      String string1 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertNotNull(string2);
  }

  @Test
  public void test020()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("", string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", charSequenceArray0[0].toString());
      assertEquals(0, charSequenceArray0[0].length());
      assertNotNull(charSequenceArray0[0]);
      
      charSequenceArray0[1] = (CharSequence) string0;
      assertEquals("", charSequenceArray0[1].toString());
      assertEquals(0, charSequenceArray0[1].length());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(charSequenceArray0[1]);
      
      charSequenceArray0[2] = (CharSequence) string0;
      assertEquals(0, charSequenceArray0[2].length());
      assertEquals("", charSequenceArray0[2].toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(charSequenceArray0[2]);
      
      charSequenceArray0[3] = (CharSequence) string0;
      assertEquals("", charSequenceArray0[3].toString());
      assertEquals(0, charSequenceArray0[3].length());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(charSequenceArray0[3]);
      
      charSequenceArray0[4] = (CharSequence) string0;
      assertEquals("", charSequenceArray0[4].toString());
      assertEquals(0, charSequenceArray0[4].length());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(charSequenceArray0[4]);
      
      charSequenceArray0[5] = (CharSequence) string0;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", charSequenceArray0[5].toString());
      assertEquals(0, charSequenceArray0[5].length());
      assertNotNull(charSequenceArray0[5]);
      
      charSequenceArray0[6] = (CharSequence) string0;
      assertEquals("", charSequenceArray0[6].toString());
      assertEquals(0, charSequenceArray0[6].length());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(charSequenceArray0[6]);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("", string0);
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string0;
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", charSequenceArray0[0].toString());
      assertEquals(0, charSequenceArray0[0].length());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "&S}*<|S},cSW^%]o{";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = "8[5@oO@";
      char char0 = 'L';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("8[5@oO@", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test025()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      String string0 = sQLRecoverableException0.getSQLState();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(string0);
      
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      
      String string1 = "', has a length less than 2";
      int int2 = 560;
      assertFalse(int2 == int1);
      
      String string2 = StringUtils.mid(string1, int1, int2);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertEquals("', has a length less than 2", string2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(string2);
      
      String string3 = "";
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.difference(string2, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertEquals("", string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(string4);
  }

  @Test
  public void test026()  throws Throwable  {
      String string0 = "8[5@oO@";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp(string0, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test027()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "R\\.ABK:{";
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, charSequence0);
      assertEquals(0, int0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      int int0 = 1660;
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      char char0 = 'n';
      String string1 = StringUtils.center(string0, int1, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("Array and element cannot both be null", string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int2 = StringUtils.indexOfDifference(charSequenceArray0[0], (CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = " |4X:rH}\"{uirCP";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultString(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("Array element ", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference(string2, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertEquals(" |4X:rH}\"{uirCP", string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test031()  throws Throwable  {
      char char0 = '6';
      byte[] byteArray0 = new byte[3];
      String string0 = null;
      String string1 = StringUtils.toString(byteArray0, string0);
      assertEquals("\u0000\u0000\u0000", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle(string1, string1, (int) char0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("\u0000\u0000\u0000", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(8, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.abbreviateMiddle(string0, string1, int0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("R\\.ABK:{", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertNull(string1);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "csvpMG(*E";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("csvpMG(*E", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 5;
      // Undeclared exception!
      try {
        String string2 = StringUtils.abbreviate(string1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
      }
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "java.sql.SQLNonTransientConnectionExceptionW}LYr6<mE|}java.sql.SQLClientInfoException:  W}LYr6<mE|}java.sql.SQLNonTransientConnectionException8[5@oO@";
      int int0 = 1190;
      int int1 = 32;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("...entConnectionException8[5@oO@", string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      int int0 = (-1099);
      int int1 = 127;
      String string1 = StringUtils.abbreviate(string0, int0, int1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("The stripAccents(CharSequence) method requires at least Java6, but got: ", string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNotNull(string1);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "+#|~#eIObq1m";
      int int0 = (-2202);
      String string1 = StringUtils.substring(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("+#|~#eIObq1m", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.abbreviate(string1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate(string1, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(string2);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertNull(string1);
      
      String string2 = StringUtils.reverse(string1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertNull(string2);
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = "%QcP6F\\x ;n.FXY";
      String string1 = StringUtils.reverse(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("YXF.n; x\\F6PcQ%", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test041()  throws Throwable  {
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException();
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertNotNull(sQLNonTransientException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException((Throwable) sQLNonTransientException0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientException", sQLSyntaxErrorException0.toString());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string0 = sQLSyntaxErrorException0.getSQLState();
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientException", sQLSyntaxErrorException0.toString());
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) string0, (CharSequence) string0);
      assertNull(sQLNonTransientException0.getMessage());
      assertNull(sQLNonTransientException0.getSQLState());
      assertEquals(0, sQLNonTransientException0.getErrorCode());
      assertEquals("java.sql.SQLNonTransientException", sQLNonTransientException0.toString());
      assertEquals("java.sql.SQLNonTransientException", sQLSyntaxErrorException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertNull(sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: java.sql.SQLNonTransientException", sQLSyntaxErrorException0.toString());
      assertNull(charSequence0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("Index: ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      String string2 = StringUtils.defaultString(string1);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test045()  throws Throwable  {
      byte byte0 = (byte)0;
      String string0 = "InvocationTargetException occurred";
      SQLDataException sQLDataException0 = new SQLDataException();
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLDataException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string0, (int) byte0, (Throwable) sQLDataException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: InvocationTargetException occurred", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("InvocationTargetException occurred", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("InvocationTargetException occurred", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string1 = sQLNonTransientConnectionException0.getLocalizedMessage();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("InvocationTargetException occurred", string1);
      assertEquals("java.sql.SQLNonTransientConnectionException: InvocationTargetException occurred", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("InvocationTargetException occurred", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("InvocationTargetException occurred", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
      assertEquals("java.sql.SQLNonTransientConnectionException: InvocationTargetException occurred", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("InvocationTargetException occurred", sQLNonTransientConnectionException0.getSQLState());
      assertEquals("InvocationTargetException occurred", sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, sQLDataException0.getErrorCode());
      assertEquals("java.sql.SQLDataException", sQLDataException0.toString());
      assertNull(sQLDataException0.getSQLState());
      assertNull(sQLDataException0.getMessage());
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = null;
      int int0 = 862;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "f8HX";
      String string1 = StringUtils.lowerCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("f8hx", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "c";
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string0);
      assertTrue(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = "'oOFe_uCrElePb";
      int int0 = 3476;
      String string1 = StringUtils.left(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("'oOFe_uCrElePb", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "8AHH{";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("8AHH{", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = "nectionExceptionnectionException";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = "4,R.V~Z#8r";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("4,R.V~Z#8r", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isNumeric(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(sQLRecoverableException0);
      
      String string0 = sQLRecoverableException0.getSQLState();
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(string0);
      
      String string1 = "6d88d>zR$:!a6";
      String string2 = StringUtils.removeStartIgnoreCase(string1, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("6d88d>zR$:!a6", string2);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string2);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertFalse(boolean0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      int int0 = (-446);
      boolean boolean0 = true;
      String string0 = "&S}*<|S},cSW^%]o{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string0, int0);
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(int0, boolean0, boolean0, int0, int0, (Throwable) sQLTransactionRollbackException0);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertNotNull(dataTruncation0);
      
      String string1 = dataTruncation0.getMessage();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Data truncation", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      int int0 = 1660;
      char char0 = 'n';
      String string1 = StringUtils.center(string0, int0, char0);
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "Sk";
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string0 = "W}LYr6<mE|}";
      String string1 = StringUtils.join((Iterable<?>) sQLNonTransientConnectionException0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("java.sql.SQLNonTransientConnectionException", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
  }

  @Test
  public void test070()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "Cloneable type ";
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("R\\.ABK:{", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "k";
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Array element", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = null;
      int int0 = 862;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("IllegalArgumentException occurred", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string1, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertEquals(1, int0);
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test077()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "_O";
      int int0 = StringUtils.countMatches((CharSequence) string0, charSequence0);
      assertEquals(0, int0);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "8[5@oO@";
      String string1 = StringUtils.swapCase(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("8[5@Oo@", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test080()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNotNull(sQLWarning0);
      
      String string0 = sQLWarning0.getMessage();
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(sQLWarning0.getSQLState());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(string1);
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNull(string1);
  }

  @Test
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = "|=";
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("|=", string1);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(string1);
  }

  @Test
  public void test084()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = (-497);
      int int1 = StringUtils.indexOf(charSequence0, charSequence0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      String string0 = "4,R.V~Z#8r";
      Object[] objectArray0 = new Object[5];
      String string1 = StringUtils.join(objectArray0, string0, int1, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.remove(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertNull(string3);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase(string3, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNull(string4);
  }

  @Test
  public void test085()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNotNull(sQLRecoverableException0);
      
      String string0 = sQLRecoverableException0.getSQLState();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(string0);
      
      String string1 = StringUtils.upperCase(string0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertNull(string1);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "KDR*t+hU8]@C#i";
      int int0 = 10;
      String string1 = StringUtils.center(string0, int0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("KDR*t+hU8]@C#i", string1);
      assertNotNull(string1);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      objectArray0[1] = (Object) string0;
      assertNotNull(objectArray0[1]);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("IllegalArgumentException occurredIllegalArgumentException occurred", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      String string2 = StringUtils.center(string1, int0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("IllegalArgumentException occurredIllegalArgumentException occurred", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      int int0 = 862;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNull(string1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "sun.text.Normalizer is not availabe";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("sun.text.Normalizerisnotavailabe", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)13;
      byteArray0[1] = byte0;
      String string2 = StringUtils.center(string1, (int) byteArray0[1]);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("sun.text.Normalizerisnotavailabe", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)13, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string2);
  }

  @Test
  public void test090()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = (-497);
      int int1 = StringUtils.indexOf(charSequence0, charSequence0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string0 = null;
      String string1 = StringUtils.center(string0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(string1);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "E'u(w)'P ";
      int int0 = 3897;
      char char0 = 'a';
      String string1 = StringUtils.rightPad(string0, int0, char0);
      int int1 = StringUtils.length((CharSequence) string1);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.leftPad(string1, int0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      char char0 = 'k';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertNull(string1);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "%QcP6F\\x ;n.FXY";
      char char0 = '6';
      String string1 = StringUtils.center(string0, (int) char0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("%QcP6F\\x ;n.FXY%Qc%QcP6F\\x ;n.FXY%QcP6F\\x ;n.FXY%Qc", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test095()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = 1682;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test096()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNotNull(sQLWarning0);
      
      String string0 = sQLWarning0.getMessage();
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = locale0.toLanguageTag();
      assertEquals("fr-FR", string1);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad(string1, int0, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertEquals("fr-FR", string2);
      assertNull(sQLWarning0.getSQLState());
      assertNull(sQLWarning0.getMessage());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(string2);
  }

  @Test
  public void test097()  throws Throwable  {
      char char0 = '-';
      String string0 = null;
      String string1 = StringUtils.difference(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad(string1, (int) char0, string0);
      assertNull(string2);
  }

  @Test
  public void test098()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = "c";
      String string1 = StringUtils.lowerCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("c", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad(string1, int0);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("c", string2);
      assertNotNull(string2);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 3476;
      String string0 = null;
      String string1 = StringUtils.rightPad(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "ccurred";
      char[] charArray0 = new char[7];
      String string1 = null;
      String string2 = StringUtils.repeat(string0, string1, (int) charArray0[3]);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string2);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "\\";
      String string1 = "L1^$XKIL";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("\\", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
      
      char char0 = '%';
      String string3 = StringUtils.repeat(string2, string2, (int) char0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertNotNull(string3);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      int int0 = 13;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{R\\.ABK:{", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "d";
      String string1 = null;
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat(string1, string1, int0);
      assertNull(string2);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "9";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "9";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("9", string1);
      assertNotNull(string1);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "Cloneable type ";
      char char0 = 'u';
      int int0 = 2;
      String string1 = StringUtils.overlay(string0, string0, (int) char0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("ClCloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "noyK{Gngt6qqLbDa";
      int int0 = (-113);
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("noyK{Gngt6qqLbDanoyK{Gngt6qqLbDa", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "d";
      String string1 = null;
      int int0 = 430;
      String string2 = StringUtils.overlay(string0, string1, int0, int0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertEquals("d", string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = null;
      String string2 = StringUtils.overlay(string1, string1, int0, int0);
      assertNull(string2);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = "`s*a~,KH#>#`(Pm";
      assertNotSame(string2, string0);
      
      String string3 = StringUtils.difference(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertEquals("`s*a~,KH#>#`(Pm", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars(string3, string3, string0);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string4);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(string4);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "h`)^P";
      String string1 = "9o";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.replaceChars(string0, string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("h`)^P", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = "csvpMG(*E";
      String string1 = null;
      String string2 = StringUtils.replaceChars(string0, string1, string0);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("csvpMG(*E", string2);
      assertNotNull(string2);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = "_O";
      char char0 = '1';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("_O", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars(string1, char0, char0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("_O", string2);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "\\HoCGtI>(Jg)0:M3<x";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\\HoCGtI>(Jg)0:M3<x", string1);
      assertNotNull(string1);
      
      String string2 = "is not in the ra(ge '0' - '9'";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals("\\HoCGtI>(Jg)0:M3<x", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string3));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string3));
      assertNotNull(string3);
  }

  @Test
  public void test116()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string0 = stack0.toString();
      assertEquals("[]", string0);
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(string0);
      
      String string1 = "";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[3] = string0;
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stringArray0[3]);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
      }
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "\\HoCGtI>(Jg)0:M3<x";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\\HoCGtI>(Jg)0:M3<x", string1);
      assertNotNull(string1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0, string0);
      assertSame(string0, string1);
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getSQLState());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      String string2 = sQLTimeoutException0.toString();
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getSQLState());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string3));
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getSQLState());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(string3);
  }

  @Test
  public void test118()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = stack0.toString();
      assertEquals("[]", string0);
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(string0);
      
      String string1 = "B?j;GHFb98<<o";
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      String string2 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("[]", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals(true, stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.isEmpty());
      assertNotNull(string2);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = "\\";
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[6];
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEach(string0, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
      }
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[4];
      String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
      assertNull(string1);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultIfBlank(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      int int0 = Integer.MAX_VALUE;
      String string2 = StringUtils.replace(string0, string0, string1, int0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = "h`)^P";
      String string1 = StringUtils.trimToNull(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("h`)^P", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.replace(string0, string1, string0, int0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("h`)^P", string2);
      assertNotNull(string2);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      String string1 = null;
      String string2 = StringUtils.removeStartIgnoreCase(string1, string1);
      assertNull(string2);
      
      String string3 = "_b";
      assertNotSame(string3, string0);
      
      String string4 = StringUtils.replaceOnce(string3, string0, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string4, string3);
      assertNotSame(string4, string0);
      assertEquals("_b", string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "%QcP6F\\x ;n.FXY";
      char char0 = '6';
      String string1 = StringUtils.remove(string0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("%QcPF\\x ;n.FXY", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test125()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils$InitStripAccents";
      char char0 = '_';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("org.apache.commons.lang3.StringUtils$InitStripAccents", string1);
      assertNotNull(string1);
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNull(string1);
      
      char char0 = 'U';
      String string2 = StringUtils.remove(string1, char0);
      assertNull(string2);
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "IllegalAccessException occurredtUB;4=H";
      int int0 = 1844;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("IllegalAccessException occurredtUB;4=H", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      String string1 = StringUtils.remove(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "\\HoCGtI>(Jg)0:M3<x";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("\\HoCGtI>(Jg)0:M3<x", string1);
      assertNotNull(string1);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0, string0);
      assertSame(string0, string1);
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.toString());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      String string2 = sQLTimeoutException0.toString();
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.toString());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getSQLState());
      assertNotNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase(string1, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string2);
      assertSame(string3, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string3);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertEquals("\\HoCGtI>(Jg)0:M3<x", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: \\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.toString());
      assertEquals("\\HoCGtI>(Jg)0:M3<x", sQLTimeoutException0.getSQLState());
      assertNotNull(string3);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = "8[5@oO@";
      String string1 = "Exception cloning Cloneable type ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string1, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertEquals("8[5@oO@", string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart(string3, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string4);
      assertSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string3, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertSame(string4, string3);
      assertSame(string4, string0);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertEquals("8[5@oO@", string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "C\"*n~bF0@ck=L";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
  }

  @Test
  public void test134()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = null;
      String string1 = StringUtils.toString(byteArray0, string0);
      assertEquals("\u0000\u0000\u0000", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      Iterable<Object> iterable0 = null;
      String string2 = StringUtils.join(iterable0, string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(string2);
  }

  @Test
  public void test135()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string0 = "W}LYr6<mE|}";
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException(string0, (Map<String, ClientInfoStatus>) hashMap0, (Throwable) sQLNonTransientConnectionException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("W}LYr6<mE|}", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: W}LYr6<mE|}", sQLClientInfoException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertNotNull(sQLClientInfoException0);
      
      sQLNonTransientConnectionException0.setNextException((SQLException) sQLClientInfoException0);
      assertEquals(0, sQLClientInfoException0.getErrorCode());
      assertEquals("W}LYr6<mE|}", sQLClientInfoException0.getMessage());
      assertNull(sQLClientInfoException0.getSQLState());
      assertEquals("java.sql.SQLClientInfoException: W}LYr6<mE|}", sQLClientInfoException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      String string1 = StringUtils.join((Iterable<?>) sQLNonTransientConnectionException0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("java.sql.SQLNonTransientConnectionExceptionW}LYr6<mE|}java.sql.SQLClientInfoException: W}LYr6<mE|}W}LYr6<mE|}java.sql.SQLNonTransientConnectionException", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(string1);
  }

  @Test
  public void test136()  throws Throwable  {
      Iterator<CharBuffer> iterator0 = null;
      String string0 = ", Length: ";
      String string1 = StringUtils.join(iterator0, string0);
      assertNull(string1);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "{ge&U*(d=Y$y.\"\"X5ns=187";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("{ge&U*(d=Y$y.\"\"X5ns=187", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      Throwable throwable0 = null;
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException(throwable0);
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(string1, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: {ge&U*(d=Y$y.\"\"X5ns=187", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("{ge&U*(d=Y$y.\"\"X5ns=187", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string1, (Throwable) sQLTransientException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: {ge&U*(d=Y$y.\"\"X5ns=187", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("{ge&U*(d=Y$y.\"\"X5ns=187", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("{ge&U*(d=Y$y.\"\"X5ns=187", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: {ge&U*(d=Y$y.\"\"X5ns=187", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(sQLNonTransientConnectionException0);
      
      char char0 = '*';
      String string2 = StringUtils.join((Iterable<?>) sQLNonTransientConnectionException0, char0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("java.sql.SQLNonTransientConnectionException: {ge&U*(d=Y$y.\"\"X5ns=187*java.sql.SQLTransientException: {ge&U*(d=Y$y.\"\"X5ns=187*java.sql.SQLInvalidAuthorizationSpecException", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNull(sQLTransientException0.getSQLState());
      assertEquals("java.sql.SQLTransientException: {ge&U*(d=Y$y.\"\"X5ns=187", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertEquals("{ge&U*(d=Y$y.\"\"X5ns=187", sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("{ge&U*(d=Y$y.\"\"X5ns=187", sQLNonTransientConnectionException0.getMessage());
      assertEquals("java.sql.SQLNonTransientConnectionException: {ge&U*(d=Y$y.\"\"X5ns=187", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNotNull(string2);
  }

  @Test
  public void test138()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(iterator0);
      
      char char0 = 'Q';
      String string0 = StringUtils.join(iterator0, char0);
      assertEquals("", string0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "C\"*n~bF0@ck=L";
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string0);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, string0);
      assertNull(string1);
  }

  @Test
  public void test140()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      char char0 = '*';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("******", string0);
      assertNotNull(string0);
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "&S}*<|S},cSW^%]o{";
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test142()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      String string0 = sQLWarning0.getMessage();
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNull(sQLWarning0.getMessage());
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getSQLState());
      assertNull(stringArray0);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("IllegalArgumentException occurred", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "b0uD>0?>o;rSpxZA&O";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.countMatches((CharSequence) string2, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals(0, int0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string2, int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "\\p{InCombxningDiacrOticNlMarks}+";
      String string1 = "O";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "c";
      int int0 = 4126;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test146()  throws Throwable  {
      int int0 = 1;
      String string0 = "java.text.Normalizer is not available";
      String string1 = null;
      String string2 = StringUtils.removeStartIgnoreCase(string1, string0);
      assertNull(string2);
      
      String string3 = "=1sO7 T&96lS{8*.O*";
      assertNotSame(string3, string0);
      
      String[] stringArray0 = StringUtils.split(string3, string2, int0);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = "Cannot store  has no clone method";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0);
      assertNull(stringArray0);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = "gY7=/J";
      char char0 = 'J';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test150()  throws Throwable  {
      int int0 = 1568;
      char char0 = 'q';
      String string0 = StringUtils.repeat(char0, int0);
      String string1 = StringUtils.reverseDelimited(string0, char0);
  }

  @Test
  public void test151()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      char char0 = '\"';
      String string0 = StringUtils.join((Iterable<?>) sQLTransientException0, char0);
      assertEquals("java.sql.SQLTransientException", string0);
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertNotNull(string0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(arrayList0);
      
      Iterator<Integer> iterator0 = arrayList0.iterator();
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(string1);
      
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNull(sQLTransientException0.getMessage());
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(sQLTransientException0.getSQLState());
      assertEquals(true, arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", arrayList0.toString());
      assertNotNull(string2);
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = "E'u(w)'P ";
      int int0 = 3897;
      char char0 = 'a';
      String string1 = StringUtils.rightPad(string0, int0, char0);
      int int1 = 1;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1, int1);
  }

  @Test
  public void test153()  throws Throwable  {
      char char0 = 'y';
      String string0 = "; or a unaJVM: ; or a unaJVM: ";
      String string1 = " ";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "<T!V\"QKi";
      int int0 = 0;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = "csvpMG(*E";
      int int0 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test156()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test157()  throws Throwable  {
      String string0 = "";
      int int0 = (-3157);
      int int1 = StringUtils.indexOf((CharSequence) string0, int0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string1, string1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(stringArray0);
  }

  @Test
  public void test158()  throws Throwable  {
      String string0 = "Cloneable type ";
      String string1 = "Ew[L;z1%(.R.DK>Y";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
  }

  @Test
  public void test159()  throws Throwable  {
      String string0 = "C\"*n~bF0@ck=L";
      String string1 = "3<Eo5{;Z";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = "\\HoCGtI>(Jg)0:M3<x";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\\HoCGtI>(Jg)0:M3<x", string1);
      assertNotNull(string1);
      
      String string2 = "";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween(string2, string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(stringArray0);
  }

  @Test
  public void test161()  throws Throwable  {
      String string0 = "8[5@oO@";
      String string1 = "Exception cloning Cloneable type ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.chomp(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("8[5@oO@", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNull(stringArray0);
  }

  @Test
  public void test162()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
      
      String string2 = "";
      String string3 = StringUtils.replaceChars(string2, string2, string2);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertEquals("", string3);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween(string3, string1, string1);
      assertSame(string3, string2);
      assertSame(string2, string3);
      assertNull(stringArray0);
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = "8[5@oO@";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = null;
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string0);
      assertNull(stringArray0);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "c";
      String string1 = "f8HX";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.lowerCase(string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("f8hx", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(string3);
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.substringBetween(string1, string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(string3);
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = null;
      String string1 = "InvocationTargetException occurred";
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace(string1);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertEquals("InvocationTargetExceptionoccurred", string3);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween(string3, string0, string2);
      assertNotSame(string1, string3);
      assertNotSame(string3, string1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertNull(string4);
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "*xzT;=h7Yo4";
      String string1 = null;
      String string2 = StringUtils.substringBetween(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = ", Length: ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = "<T!V\"QKi";
      int int0 = 0;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast(string1, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = "org.apache.commons.lang3.StringUtils";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = "IllegalAccessException occurredtUB;4=H";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBeforeLast(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("IllegalAccessException occurredtUB;4=H", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(string1, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = "nectionExceptionnectionException";
      String string1 = "b1Qm.9B#+";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = "+'W ";
      String string1 = null;
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "0cjwG+kE?{";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = 16;
      StackTraceElement stackTraceElement0 = new StackTraceElement(string0, string0, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, stackTraceElement0.isNativeMethod());
      assertEquals("0cjwG+kE?{", stackTraceElement0.getClassName());
      assertEquals("0cjwG+kE?{.0cjwG+kE?{(:16)", stackTraceElement0.toString());
      assertEquals("0cjwG+kE?{", stackTraceElement0.getMethodName());
      assertEquals(16, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getFileName());
      assertNotNull(stackTraceElement0);
      
      String string2 = stackTraceElement0.getClassName();
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("0cjwG+kE?{", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, stackTraceElement0.isNativeMethod());
      assertEquals("0cjwG+kE?{", stackTraceElement0.getClassName());
      assertEquals("0cjwG+kE?{.0cjwG+kE?{(:16)", stackTraceElement0.toString());
      assertEquals("0cjwG+kE?{", stackTraceElement0.getMethodName());
      assertEquals(16, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getFileName());
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string2, string3);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertEquals("", string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, stackTraceElement0.isNativeMethod());
      assertEquals("0cjwG+kE?{", stackTraceElement0.getClassName());
      assertEquals("0cjwG+kE?{.0cjwG+kE?{(:16)", stackTraceElement0.toString());
      assertEquals("0cjwG+kE?{", stackTraceElement0.getMethodName());
      assertEquals(16, stackTraceElement0.getLineNumber());
      assertEquals("", stackTraceElement0.getFileName());
      assertNotNull(string3);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultIfBlank(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String string2 = "'L^'@:lkyu0!<'";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBefore(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertEquals("'L^'@:lkyu0!<'", string3);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("IllegalArgumentException occurred", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string1, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      String string1 = null;
      String string2 = StringUtils.substringBefore(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("java.text.Normalizer is not available", string2);
      assertNotNull(string2);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test183()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(sQLRecoverableException0);
      
      String string0 = sQLRecoverableException0.getSQLState();
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(string0);
      
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      
      String string1 = "', has a length less than 2";
      String string2 = StringUtils.mid(string1, int1, int0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNotNull(string2);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "4,R.V~Z#8r";
      int int0 = 0;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      int int0 = (-1196);
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("InvocationTargetExceptionoccurred", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.mid(string1, int0, int0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "'oOFe_uCrElePb";
      int int0 = 10;
      String string1 = StringUtils.right(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("_uCrElePb", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = "8[5@oO@Exception cloning Cloneable type ";
      int int0 = (-838);
      String string1 = StringUtils.right(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      String string1 = StringUtils.right(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = "'oOFe_uCrElePb";
      int int0 = 3476;
      String string1 = StringUtils.left(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("'oOFe_uCrElePb", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.right(string1, int0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("'oOFe_uCrElePb", string2);
      assertNotNull(string2);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = "+#|~#eIObq1m";
      int int0 = (-2202);
      String string1 = StringUtils.left(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.left(string1, int0);
      assertNull(string2);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = "Cloneable type ";
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string1 = charset0.toString();
      assertNotSame(string1, string0);
      assertEquals("UTF-8", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(string1);
      
      int int0 = 222;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, int0);
      assertNotSame(string1, string0);
      assertEquals(0, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      String string2 = StringUtils.substring(string0, int1, int0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("Cloneable type ", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(string2);
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = "Cannot store  has no clone method";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-2232);
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNull(string1);
      
      int int0 = (-1196);
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNull(string2);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast(string1, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "; or a Sun JVM: ";
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertEquals(2, int0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      
      String string4 = StringUtils.substring(string2, int0);
      assertSame(string4, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string4, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertSame(string2, string4);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = null;
      int int0 = 48;
      String string1 = StringUtils.substring(string0, int0);
      assertNull(string1);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) stringArray0[4], (CharSequence[]) stringArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test198()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.lastIndexOfAny(charSequence0, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "rHA'*p*v4{)";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getName();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("rHA'*p*v4{)", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) string0;
      assertEquals("rHA'*p*v4{)", charSequenceArray0[1].toString());
      assertEquals(12, charSequenceArray0[1].length());
      assertNotNull(charSequenceArray0[1]);
      
      charSequenceArray0[2] = (CharSequence) string1;
      assertEquals("rHA'*p*v4{)", charSequenceArray0[2].toString());
      assertEquals(12, charSequenceArray0[2].length());
      assertNotNull(charSequenceArray0[2]);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = "rHA'*p*v4{)";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      String string1 = mockFile0.getName();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("rHA'*p*v4{)", string1);
      assertNotNull(string1);
      
      char char0 = 'g';
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string2 = "W703W|~W8|!/;9(MO";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      SQLTransientException sQLTransientException0 = new SQLTransientException(string1, string0, (int) char0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getMessage());
      assertEquals(103, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: rHA'*p*v4{)", sQLTransientException0.toString());
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getSQLState());
      assertNotNull(sQLTransientException0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string2, string2, (Throwable) sQLTransientException0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getMessage());
      assertEquals(103, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: rHA'*p*v4{)", sQLTransientException0.toString());
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getSQLState());
      assertEquals("W703W|~W8|!/;9(MO", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: W703W|~W8|!/;9(MO", sQLTimeoutException0.toString());
      assertEquals("W703W|~W8|!/;9(MO", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(sQLTimeoutException0);
      
      String string3 = sQLTimeoutException0.getSQLState();
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("W703W|~W8|!/;9(MO", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getMessage());
      assertEquals(103, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: rHA'*p*v4{)", sQLTransientException0.toString());
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getSQLState());
      assertEquals("W703W|~W8|!/;9(MO", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: W703W|~W8|!/;9(MO", sQLTimeoutException0.toString());
      assertEquals("W703W|~W8|!/;9(MO", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) string3;
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getMessage());
      assertEquals(103, sQLTransientException0.getErrorCode());
      assertEquals("java.sql.SQLTransientException: rHA'*p*v4{)", sQLTransientException0.toString());
      assertEquals("rHA'*p*v4{)", sQLTransientException0.getSQLState());
      assertEquals("W703W|~W8|!/;9(MO", sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLTimeoutException: W703W|~W8|!/;9(MO", sQLTimeoutException0.toString());
      assertEquals("W703W|~W8|!/;9(MO", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals(17, charSequenceArray0[0].length());
      assertEquals("W703W|~W8|!/;9(MO", charSequenceArray0[0].toString());
      assertNotNull(charSequenceArray0[0]);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charSequenceArray0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
  }

  @Test
  public void test201()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = StringUtils.indexOfAny(charSequence0, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test202()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.swapCase(string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test203()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(sQLNonTransientConnectionException0);
      
      String string0 = "W}LYr6<mE|}";
      String string1 = StringUtils.join((Iterable<?>) sQLNonTransientConnectionException0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("java.sql.SQLNonTransientConnectionException", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getMessage());
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test205()  throws Throwable  {
      char[] charArray0 = new char[3];
      String string0 = "Vdy`";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = null;
      String string1 = "f";
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test207()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "4,R.V~Z#8r";
      boolean boolean0 = StringUtils.containsOnly(charSequence0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test208()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = "\\u";
      String string1 = "";
      assertNotSame(string1, string0);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) stringArray0[1], string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test209()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.strip(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = null;
      char char0 = '[';
      String string1 = "\\p{InCombiningDiacriticalMarks}+";
      String string2 = StringUtils.reverseDelimited(string0, char0);
      assertNull(string2);
      
      String string3 = " in an array of ";
      assertNotSame(string3, string1);
      
      String string4 = StringUtils.replaceOnce(string1, string2, string1);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertEquals("\\p{InCombiningDiacriticalMarks}+", string4);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string4, (CharSequence) string3);
      assertNotSame(string1, string3);
      assertSame(string1, string4);
      assertSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string3, string1);
      assertNotSame(string3, string4);
      assertEquals(0, int0);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = null;
      String string1 = "|@{In;:";
      String string2 = StringUtils.stripToEmpty(string1);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("|@{In;:", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string2, (CharSequence) string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals((-1), int0);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = "d";
      String string1 = null;
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = "', has a length less than 2";
      char[] charArray0 = new char[10];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test215()  throws Throwable  {
      int int0 = (-446);
      boolean boolean0 = true;
      String string0 = "&S}*<|S},cSW^%]o{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string0, int0);
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertNotNull(sQLTransactionRollbackException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(int0, boolean0, boolean0, int0, int0, (Throwable) sQLTransactionRollbackException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertNotNull(dataTruncation0);
      
      String string1 = dataTruncation0.getMessage();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Data truncation", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = null;
      int int0 = (-464);
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNull(string1);
      
      char[] charArray0 = new char[9];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string1, charArray0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test217()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.containsAny(charSequence0, charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = "qoU3r?";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test219()  throws Throwable  {
      String string0 = "Exception cloning Cloneable type Exception cloning Cloneable type ";
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test
  public void test221()  throws Throwable  {
      String string0 = ",'gKG`gpv";
      char[] charArray0 = new char[9];
      char char0 = '\'';
      charArray0[8] = char0;
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\''}, charArray0);
  }

  @Test
  public void test222()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(" ", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test223()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.getCountry();
      assertEquals("", string0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charArray0);
      assertEquals((-1), int0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = "Threshold must not be negative";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test225()  throws Throwable  {
      String string0 = null;
      int int0 = Integer.MAX_VALUE;
      int[] intArray0 = new int[10];
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0, intArray0[7]);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string0, string0, int0, intArray0, (Throwable) sQLIntegrityConstraintViolationException0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(2147483647, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(batchUpdateException0);
      
      String string1 = batchUpdateException0.getLocalizedMessage();
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(2147483647, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string1);
      assertFalse(boolean0);
      assertNull(batchUpdateException0.getSQLState());
      assertNull(batchUpdateException0.getMessage());
      assertEquals("java.sql.BatchUpdateException", batchUpdateException0.toString());
      assertEquals(2147483647, batchUpdateException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException", sQLIntegrityConstraintViolationException0.toString());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertNull(sQLIntegrityConstraintViolationException0.getMessage());
      assertNull(sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = "*xzT;=h7Yo4";
      int int0 = 23;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("*xzT;*xzT;=h7Yo4*xzT;=", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = "The stripAccents(CharSequence) method requires at least Java6, but got: ";
      String string1 = "Ae,cx2| ENG3A";
      assertNotSame(string1, string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test228()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string0 = charset0.toString();
      assertEquals("UTF-8", string0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
      assertEquals(true, charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(true, charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
  }

  @Test
  public void test229()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.containsIgnoreCase(charSequence0, charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      String string2 = "; or a Sun JVM: ";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      int int0 = 1660;
      char char0 = 'n';
      String string1 = StringUtils.center(string0, int0, char0);
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[6] = (CharSequence) string1;
      boolean boolean0 = StringUtils.contains(charSequenceArray0[6], charSequenceArray0[4]);
  }

  @Test
  public void test232()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test233()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = (-446);
      boolean boolean0 = true;
      String string0 = "&S}*<|S},cSW^%]o{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string0, int0);
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(int0, boolean0, boolean0, int0, int0, (Throwable) sQLTransactionRollbackException0);
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(dataTruncation0);
      
      String string1 = dataTruncation0.getMessage();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Data truncation", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains(charSequence0, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals(0, dataTruncation0.getErrorCode());
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
      
      int int0 = 2560;
      boolean boolean0 = StringUtils.contains((CharSequence) string1, int0);
      assertFalse(boolean0);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "Cloneable type ";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Cloneable type ", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      char char0 = 'u';
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(boolean0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = "8[5@oO@Exception cloning Cloneable type ";
      String string1 = "tH-'(Ni7W1&oW@<C]J%";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = "E'u(w)'P ";
      int int0 = 3897;
      char char0 = 'a';
      String string1 = StringUtils.rightPad(string0, int0, char0);
      String string2 = StringUtils.removeStartIgnoreCase(string0, string0);
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string2, (CharSequence) string1, (int) char0);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = "Index: ";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
      
      int int0 = 2560;
      String string2 = "The character ";
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string2, (CharSequence) string1, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test240()  throws Throwable  {
      SQLTransientException sQLTransientException0 = new SQLTransientException();
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(sQLTransientException0);
      
      char char0 = '\"';
      String string0 = StringUtils.join((Iterable<?>) sQLTransientException0, char0);
      assertEquals("java.sql.SQLTransientException", string0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string2);
      assertEquals((-1), int0);
      assertEquals("java.sql.SQLTransientException", sQLTransientException0.toString());
      assertNull(sQLTransientException0.getSQLState());
      assertNull(sQLTransientException0.getMessage());
      assertEquals(0, sQLTransientException0.getErrorCode());
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim(string0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = null;
      String string2 = StringUtils.chomp(string1);
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string2, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test243()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.join(objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      int int0 = 1660;
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[4], charSequenceArray0[4], int1);
      assertEquals((-1), int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      CharSequence charSequence0 = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeStart(string0, string0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(8, int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test248()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, int0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test249()  throws Throwable  {
      Iterable<Object> iterable0 = null;
      char char0 = 's';
      String string0 = StringUtils.join(iterable0, char0);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = ":uOd>|/";
      String string1 = StringUtils.stripToNull(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(":uOd>|/", string1);
      assertNotNull(string1);
      
      String string2 = "i";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: i", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(sQLTimeoutException0);
      
      String string3 = sQLTimeoutException0.getMessage();
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("i", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: i", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string3);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals((-1), int0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: i", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
  }

  @Test
  public void test251()  throws Throwable  {
      String string0 = "null/empty items";
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = (-1);
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = "%QcP6F\\x ;n.FXY";
      byte byte0 = (byte)2;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, (int) byte0);
      assertEquals((-1), int0);
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = "null/empty items";
      int int0 = (-1);
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = "+'W ";
      String string1 = null;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test255()  throws Throwable  {
      String string0 = "ccurred";
      char[] charArray0 = new char[7];
      char char0 = '$';
      charArray0[0] = char0;
      charArray0[4] = charArray0[0];
      int int0 = StringUtils.ordinalIndexOf((CharSequence) string0, (CharSequence) string0, (int) charArray0[4]);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'$', '\u0000', '\u0000', '\u0000', '$', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test256()  throws Throwable  {
      int int0 = 1;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      String string0 = byteArrayOutputStream0.toString();
      assertEquals("", string0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(string0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test
  public void test257()  throws Throwable  {
      String string0 = "zJ\\";
      int int0 = 4326;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      char char0 = '}';
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string1, (CharSequence) string1, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = "', has a length less than 2";
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = locale0.toLanguageTag();
      assertNotSame(string1, string0);
      assertEquals("it-IT", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(string1);
      
      int int0 = 2048;
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
  }

  @Test
  public void test259()  throws Throwable  {
      String string0 = "Sk";
      CharSequence charSequence0 = null;
      int int0 = 2;
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string0, charSequence0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = null;
      char char0 = '[';
      int int0 = StringUtils.ordinalIndexOf((CharSequence) string0, (CharSequence) string0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = null;
      String string1 = "InvocationTargetException occurred";
      int int0 = (-1196);
      int int1 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = "";
      int int0 = 3945;
      int int1 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test263()  throws Throwable  {
      String string0 = "$=(ev?g";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = null;
      int int0 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test264()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = "h`)^P";
      int int0 = 3559;
      char char0 = 'K';
      int int1 = StringUtils.indexOf((CharSequence) string0, int0, (int) char0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test266()  throws Throwable  {
      String string0 = "<T!V\"QKi";
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test267()  throws Throwable  {
      String string0 = "d";
      String string1 = null;
      String string2 = StringUtils.upperCase(string0);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertEquals("D", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("Array element", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test269()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test
  public void test270()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "'oOFe_uCrElePb";
      boolean boolean0 = StringUtils.equals(charSequence0, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test271()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.equals(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = "8[5@oO@";
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test273()  throws Throwable  {
      int int0 = (-446);
      boolean boolean0 = true;
      String string0 = "&S}*<|S},cSW^%]o{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string0, int0);
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertNotNull(sQLTransactionRollbackException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(int0, boolean0, boolean0, int0, int0, (Throwable) sQLTransactionRollbackException0);
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(dataTruncation0);
      
      String string1 = dataTruncation0.getMessage();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Data truncation", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents(string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("Data truncation", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertNotNull(string2);
  }

  @Test
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      String string0 = null;
      String string1 = StringUtils.toString(byteArray0, string0);
      assertEquals("\u0000\u0000\u0000", string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split(string1, string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(stringArray1);
  }

  @Test
  public void test275()  throws Throwable  {
      String string0 = "U_IO2`It&@";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test276()  throws Throwable  {
      String string0 = "E'u(w)'P ";
      String[] stringArray0 = new String[5];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(stringArray1);
  }

  @Test
  public void test277()  throws Throwable  {
      String string0 = "h`)^P";
      String string1 = "9o";
      assertNotSame(string1, string0);
      
      char char0 = 'K';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, string1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(stringArray1);
  }

  @Test
  public void test278()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("IllegalArgumentException occurred", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "pK~g(bK8wL1v($";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.stripStart(string2, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertEquals("K~g(bK8wL1v($", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertNotNull(string3);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) string0;
      assertNotNull(objectArray0[0]);
      
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("IllegalArgumentException occurred", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart(string1, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test280()  throws Throwable  {
      String string0 = "IllegalArgumentException occurred";
      Object[] objectArray0 = new Object[2];
      String string1 = StringUtils.join(objectArray0);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart(string0, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("IllegalArgumentException occurred", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test
  public void test281()  throws Throwable  {
      String string0 = "null/empty items";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.stripStart(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test282()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.trimToEmpty(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      assertNotNull(string1);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = "'oOFe_uCrElePb";
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test287()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isNotBlank(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test288()  throws Throwable  {
      String string0 = "csvpMG(*E";
      String string1 = " puS:vo?i@7";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.defaultIfBlank(string1, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isBlank((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = "Array element ";
      String string1 = null;
      String string2 = StringUtils.defaultIfBlank(string1, string0);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("Array element ", string2);
      assertNotNull(string2);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = "_O";
      char char0 = '1';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("_O", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(boolean0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test292()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isNotEmpty(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = "', has a length less than 2";
      int int0 = (-1294);
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string1 = locale0.toLanguageTag();
      assertNotSame(string1, string0);
      assertEquals("it-IT", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertNotNull(string1);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string0, (CharSequence) string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = "";
      int int0 = (-3157);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertNotNull(sQLIntegrityConstraintViolationException0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string0, (Throwable) sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotNull(sQLSyntaxErrorException0);
      
      String string1 = sQLSyntaxErrorException0.getMessage();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad(string1, int0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("", string2);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: ", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("", sQLSyntaxErrorException0.getSQLState());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertNotNull(string2);
  }

  @Test
  public void test295()  throws Throwable  {
      String[] stringArray0 = new String[8];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) stringArray0[6], (CharSequence) stringArray0[6]);
      assertEquals((-1), int0);
  }

  @Test
  public void test296()  throws Throwable  {
      String string0 = "R\\.ABK:{";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = "Array element ";
      int int0 = 1;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, int0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test298()  throws Throwable  {
      String string0 = ",'gKG`gpv";
      char[] charArray0 = new char[9];
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string0, (int) charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test299()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = "'oOFe_uCrElePb";
      int int0 = 3476;
      String string1 = StringUtils.left(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("'oOFe_uCrElePb", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = "+'W ";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = null;
      char char0 = 'K';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNull(stringArray0);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      int int0 = 1660;
      char char0 = 'n';
      String string1 = StringUtils.center(string0, int0, char0);
      String[] stringArray0 = StringUtils.split(string1);
  }

  @Test
  public void test304()  throws Throwable  {
      SQLWarning sQLWarning0 = new SQLWarning();
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNotNull(sQLWarning0);
      
      String string0 = sQLWarning0.getMessage();
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
      assertEquals(0, sQLWarning0.getErrorCode());
      assertEquals("java.sql.SQLWarning", sQLWarning0.toString());
      assertNull(sQLWarning0.getMessage());
      assertNull(sQLWarning0.getSQLState());
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = "j]tdT,(?7wpoj=vFj^G?H";
      int int0 = 10;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("...poj=...", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test306()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils$InitStripAccents";
      String string1 = StringUtils.replaceOnce(string0, string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("org.apache.commons.lang3.StringUtils$InitStripAccents", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test
  public void test307()  throws Throwable  {
      String string0 = "'oOFe_uCrElePb";
      int int0 = 3476;
      String string1 = StringUtils.left(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("'oOFe_uCrElePb", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test308()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.split(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test309()  throws Throwable  {
      int int0 = (-446);
      boolean boolean0 = true;
      String string0 = "&S}*<|S},cSW^%]o{";
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string0, int0);
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertNotNull(sQLTransactionRollbackException0);
      
      DataTruncation dataTruncation0 = new DataTruncation(int0, boolean0, boolean0, int0, int0, (Throwable) sQLTransactionRollbackException0);
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertNotNull(dataTruncation0);
      
      String string1 = dataTruncation0.getMessage();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Data truncation", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertNotNull(string1);
      
      String string2 = StringUtils.replace(string0, string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertEquals("&S}*<|S},cSW^%]o{", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Data truncation", dataTruncation0.getMessage());
      assertEquals("01004", dataTruncation0.getSQLState());
      assertEquals(0, dataTruncation0.getErrorCode());
      assertEquals("java.sql.DataTruncation: Data truncation", dataTruncation0.toString());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: &S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.toString());
      assertEquals(-446, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("&S}*<|S},cSW^%]o{", sQLTransactionRollbackException0.getMessage());
      assertNotNull(string2);
  }
}
