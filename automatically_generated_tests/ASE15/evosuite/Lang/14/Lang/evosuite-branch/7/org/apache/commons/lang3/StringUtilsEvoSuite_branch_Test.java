/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:16:36 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.File;
import java.io.UnsupportedEncodingException;
import java.nio.CharBuffer;
import java.sql.BatchUpdateException;
import java.sql.ClientInfoStatus;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLRecoverableException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.Vector;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.lang.MockIllegalStateException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

 
public class StringUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      String string0 = null;
      String string1 = StringUtils.toString(byteArray0, string0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertNotNull(string1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test001()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = "A/`=;w=6n,=";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      try {
        String string2 = StringUtils.toString(byteArray0, string1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
         //
         // 
         //
      }
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "java.text.Nor>alizer$Form";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[0]);
      assertEquals(25, charSequenceArray0[0].length());
      assertEquals("java.text.Nor>alizer$Form", charSequenceArray0[0].toString());
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string1, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.normalizeSpace(string0);
      assertNull(string1);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "";
      String string1 = null;
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) string2, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.endsWith(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = "normalize";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals(" >6p*~(;'9iMSlS", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) string2;
      assertNotNull(charSequenceArray0[0]);
      assertEquals(15, charSequenceArray0[0].length());
      assertEquals(" >6p*~(;'9iMSlS", charSequenceArray0[0].toString());
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string2, charSequenceArray0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertTrue(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = "normalize";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" >6p*~(;'9iMSlS", string2);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) string2, charSequenceArray0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.startsWithAny(charSequence0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.startsWith(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "Z]p*-rk={}WV%";
      String string1 = StringUtils.defaultString(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("Z]p*-rk={}WV%", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "Z]p*-rk={}WV%";
      int int0 = (-1);
      String string1 = StringUtils.substring(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("%", string1);
      assertNotNull(string1);
      
      int int1 = 0;
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertTrue(int0 == int2);
      assertEquals((-1), int2);
  }

  @Test
  public void test013() {}
//   @Test
//   public void test013()  throws Throwable  {
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       String string0 = locale0.getDisplayName();
//       assertEquals("inglese (Canada)", string0);
//       assertNotNull(string0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       char[] charArray0 = new char[5];
//       char char0 = '=';
//       charArray0[3] = char0;
//       String string1 = locale0.getDisplayScript(locale0);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("", string1);
//       assertNotNull(string1);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       
//       int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1, (int) charArray0[3]);
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertEquals(16, int0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '=', '\u0000'}, charArray0);
//   }

  @Test
  public void test014() {}
//   @Test
//   public void test014()  throws Throwable  {
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       
//       String string0 = locale0.getDisplayName();
//       assertEquals("inglese (Canada)", string0);
//       assertNotNull(string0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       
//       char[] charArray0 = new char[5];
//       Stack<Integer> stack0 = new Stack<Integer>();
//       assertNotNull(stack0);
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.empty());
//       
//       ListIterator<Integer> listIterator0 = stack0.listIterator();
//       assertNotNull(listIterator0);
//       assertEquals(false, listIterator0.hasNext());
//       assertEquals(-1, listIterator0.previousIndex());
//       assertEquals(0, listIterator0.nextIndex());
//       assertEquals(false, listIterator0.hasPrevious());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.empty());
//       
//       String string1 = StringUtils.join((Iterator<?>) listIterator0, charArray0[0]);
//       assertNotSame(string1, string0);
//       assertFalse(string1.equals((Object)string0));
//       assertEquals("", string1);
//       assertNotNull(string1);
//       assertEquals(false, listIterator0.hasNext());
//       assertEquals(-1, listIterator0.previousIndex());
//       assertEquals(0, listIterator0.nextIndex());
//       assertEquals(false, listIterator0.hasPrevious());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.empty());
//       assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
//       
//       int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string1, (int) charArray0[3]);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string1.equals((Object)string0));
//       assertEquals((-1), int0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals(false, listIterator0.hasNext());
//       assertEquals(-1, listIterator0.previousIndex());
//       assertEquals(0, listIterator0.nextIndex());
//       assertEquals(false, listIterator0.hasPrevious());
//       assertEquals(true, stack0.isEmpty());
//       assertEquals("[]", stack0.toString());
//       assertEquals(10, stack0.capacity());
//       assertEquals(0, stack0.size());
//       assertEquals(true, stack0.empty());
//       assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
//   }

  @Test
  public void test015()  throws Throwable  {
      byte byte0 = (byte)0;
      String string0 = "A/`=;w=6n,=";
      String string1 = StringUtils.removeStart(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, (int) byte0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = "";
      assertNotSame(string1, string0);
      
      char char0 = 'I';
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test017()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      String string2 = locale0.toString();
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string0));
      assertEquals("zh_CN", string2);
      assertNotNull(string2);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string1, (int) charArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  //@Test
  public void test018()  throws Throwable  {
      String string0 = "e<yk";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string0, string0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: e<yk", sQLNonTransientConnectionException0.toString());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getMessage());
      
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string0, string0, (Throwable) sQLNonTransientConnectionException0);
      assertNotNull(sQLTransactionRollbackException0);
      assertEquals("java.sql.SQLNonTransientConnectionException: e<yk", sQLNonTransientConnectionException0.toString());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getMessage());
      assertEquals("e<yk", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: e<yk", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("e<yk", sQLTransactionRollbackException0.getMessage());
      
      MockThrowable mockThrowable0 = new MockThrowable(string0, (Throwable) sQLTransactionRollbackException0);
      assertNotNull(mockThrowable0);
      assertEquals("java.sql.SQLNonTransientConnectionException: e<yk", sQLNonTransientConnectionException0.toString());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getMessage());
      assertEquals("e<yk", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: e<yk", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("e<yk", sQLTransactionRollbackException0.getMessage());
      
      String string1 = mockThrowable0.getLocalizedMessage();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("e<yk", string1);
      assertNotNull(string1);
      assertEquals("java.sql.SQLNonTransientConnectionException: e<yk", sQLNonTransientConnectionException0.toString());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getMessage());
      assertEquals("e<yk", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: e<yk", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("e<yk", sQLTransactionRollbackException0.getMessage());
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(0, int0);
      assertEquals("java.sql.SQLNonTransientConnectionException: e<yk", sQLNonTransientConnectionException0.toString());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals("e<yk", sQLNonTransientConnectionException0.getMessage());
      assertEquals("e<yk", sQLTransactionRollbackException0.getSQLState());
      assertEquals("java.sql.SQLTransactionRollbackException: e<yk", sQLTransactionRollbackException0.toString());
      assertEquals(0, sQLTransactionRollbackException0.getErrorCode());
      assertEquals("e<yk", sQLTransactionRollbackException0.getMessage());
      
      MockThrowable mockThrowable1 = new MockThrowable();
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNotNull(mockThrowable1);
      
      String string2 = mockThrowable1.getMessage();
      assertNotSame(mockThrowable1, mockThrowable0);
      assertFalse(mockThrowable1.equals((Object)mockThrowable0));
      assertNull(string2);
      
      // Undeclared exception!
      try {
        int int1 = StringUtils.getLevenshteinDistance((CharSequence) string2, (CharSequence) string2, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "$nUMW";
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test
  public void test020()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "YlM]ek\\+-";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("YlM]ek\\+-", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, charSequence0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        int int0 = StringUtils.getLevenshteinDistance((CharSequence) string0, (CharSequence) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6w+j{1";
      int int0 = Integer.MAX_VALUE;
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("/3=[#^<{>|RPTg|(L6w+j{1/3=[#^<{>|RPTg|(L6w+j{1", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string1;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      assertEquals("/3=[#^<{>|RPTg|(L6w+j{1", string2);
      assertNotNull(string2);
  }

  @Test
  public void test024()  throws Throwable  {
      String string0 = "bx!Hb:1L4";
      int int0 = 0;
      char char0 = ';';
      String string1 = StringUtils.leftPad(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("bx!Hb:1L4", string1);
      assertNotNull(string1);
      
      String string2 = "org.apache.commons.lang3.StringUtils$InitStripAccents";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = string1;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string1;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string2;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string2;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string1;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string1;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = string0;
      assertNotNull(stringArray0[7]);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = ",jHE0";
      String[] stringArray0 = new String[10];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = string0;
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = string0;
      assertNotNull(stringArray0[5]);
      
      stringArray0[6] = string0;
      assertNotNull(stringArray0[6]);
      
      stringArray0[7] = stringArray0[6];
      assertNotNull(stringArray0[7]);
      
      stringArray0[8] = string0;
      assertNotNull(stringArray0[8]);
      
      stringArray0[9] = string0;
      assertNotNull(stringArray0[9]);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertSame(string1, string0);
      assertEquals(",jHE0", string1);
      assertNotNull(string1);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = 1375;
      HashSet<Object> hashSet0 = new HashSet<Object>(int0, int0);
      assertNotNull(hashSet0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      char char0 = 'h';
      String string0 = StringUtils.join((Iterable<?>) hashSet0, char0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[0]);
      assertEquals(0, charSequenceArray0[0].length());
      assertEquals("", charSequenceArray0[0].toString());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      charSequenceArray0[1] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[1]);
      assertEquals(0, charSequenceArray0[1].length());
      assertEquals("", charSequenceArray0[1].toString());
      assertEquals("[]", hashSet0.toString());
      assertEquals(true, hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "$nUMW";
      String[] stringArray0 = new String[4];
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, stringArray0[2]);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = StringUtils.strip(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
  }

  @Test
  public void test029()  throws Throwable  {
      String[] stringArray0 = new String[4];
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "+|/^3";
      int int0 = 1151;
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      
      stack0.addElement((Integer) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[-1]", stack0.toString());
      
      String string1 = StringUtils.join((Iterable<?>) stack0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1", string1);
      assertNotNull(string1);
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[-1]", stack0.toString());
      
      String string2 = StringUtils.uncapitalize(string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertEquals("-1", string2);
      assertNotNull(string2);
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[-1]", stack0.toString());
      
      int int2 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertEquals((-1), int2);
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      assertEquals("[-1]", stack0.toString());
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = "java.text.Nor>alizer$Form";
      String string1 = "D'";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.difference(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("D'", string2);
      assertNotNull(string2);
  }

  @Test
  public void test032()  throws Throwable  {
      int[] intArray0 = new int[2];
      String string0 = "J.B@7Rv";
      String string1 = StringUtils.substringAfter(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string1, intArray0[0]);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string0, string0, intArray0[0], (Throwable) sQLIntegrityConstraintViolationException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(intArray0, (Throwable) sQLSyntaxErrorException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(batchUpdateException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException((Throwable) batchUpdateException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      String string2 = sQLNonTransientConnectionException0.getSQLState();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string2, (CharSequence) string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals(0, batchUpdateException0.getErrorCode());
      assertNull(batchUpdateException0.getSQLState());
      assertEquals(0, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("", sQLIntegrityConstraintViolationException0.getSQLState());
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "java.text.Nor>alizer$Form";
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getCountry();
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.difference(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      String string1 = null;
      String string2 = StringUtils.difference(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("InvocationTargetException occurred", string2);
      assertNotNull(string2);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = ")";
      String string1 = "The character must not be null";
      assertNotSame(string1, string0);
      
      int int0 = 16;
      String string2 = StringUtils.abbreviateMiddle(string1, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("The char)be null", string2);
      assertNotNull(string2);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
      
      int int0 = 1675;
      String string2 = StringUtils.abbreviateMiddle(string1, string1, int0);
      assertNull(string2);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "F_;kQv#+Db.F}[ #";
      int int0 = 10;
      String string1 = StringUtils.abbreviate(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("...b.F}[ #", string1);
      assertNotNull(string1);
  }

  @Test
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = " is not in the range '0' - '9'";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[3] = stringArray0[0];
      assertNotNull(stringArray0[3]);
      
      int int0 = 128;
      int int1 = 4;
      // Undeclared exception!
      try {
        String string1 = StringUtils.abbreviate(stringArray0[3], int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width with offset is 7
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "F_;kQv#+Db.F}[ #";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("f_;kqv#+db.f}[ #_F_;KQV#+DB.F}[ #_F_;kQv#+Db.F}[ #", locale0.toString());
      assertEquals("f_;kqv#+db.f}[ #", locale0.getLanguage());
      assertEquals("F_;kQv#+Db.F}[ #", locale0.getVariant());
      assertEquals("F_;KQV#+DB.F}[ #", locale0.getCountry());
      
      String string1 = locale0.getDisplayName(locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("f_;kqv#+db.f}[ # (F_;KQV#+DB.F}[ #,F,;kQv#+Db.F}[ #)", string1);
      assertNotNull(string1);
      assertEquals("f_;kqv#+db.f}[ #_F_;KQV#+DB.F}[ #_F_;kQv#+Db.F}[ #", locale0.toString());
      assertEquals("f_;kqv#+db.f}[ #", locale0.getLanguage());
      assertEquals("F_;kQv#+Db.F}[ #", locale0.getVariant());
      assertEquals("F_;KQV#+DB.F}[ #", locale0.getCountry());
      
      char[] charArray0 = new char[3];
      char char0 = 'd';
      charArray0[2] = char0;
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, int0);
      assertEquals("f_;kqv#+db.f}[ #_F_;KQV#+DB.F}[ #_F_;kQv#+Db.F}[ #", locale0.toString());
      assertEquals("f_;kqv#+db.f}[ #", locale0.getLanguage());
      assertEquals("F_;kQv#+Db.F}[ #", locale0.getVariant());
      assertEquals("F_;KQV#+DB.F}[ #", locale0.getCountry());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'd'}, charArray0);
      
      String string2 = StringUtils.abbreviate(string1, int0, int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("...db...", string2);
      assertNotNull(string2);
      assertEquals("f_;kqv#+db.f}[ #_F_;KQV#+DB.F}[ #_F_;kQv#+Db.F}[ #", locale0.toString());
      assertEquals("f_;kqv#+db.f}[ #", locale0.getLanguage());
      assertEquals("F_;kQv#+Db.F}[ #", locale0.getVariant());
      assertEquals("F_;KQV#+DB.F}[ #", locale0.getCountry());
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'd'}, charArray0);
  }

  @Test
  public void test040()  throws Throwable  {
      String string0 = ", '";
      int int0 = 888;
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(", '", string1);
      assertNotNull(string1);
      
      int int1 = (-4350);
      char char0 = '{';
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string1, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try {
        String string2 = StringUtils.abbreviate(string1, int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      String string0 = ", '";
      int int0 = 888;
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(", '", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate(string1, int0, int0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertEquals(", '", string2);
      assertNotNull(string2);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = null;
      char char0 = 'Z';
      String string1 = StringUtils.abbreviate(string0, (int) char0);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertNull(string2);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.reverse(string0);
      assertNull(string1);
  }

  @Test
  public void test044()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.reverse(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty(string0, string1);
      assertNull(string2);
  }

  @Test
  public void test046()  throws Throwable  {
      String string0 = "Jnr@izBS~";
      String string1 = StringUtils.defaultIfEmpty(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("Jnr@izBS~", string1);
      assertNotNull(string1);
  }

  @Test
  public void test047()  throws Throwable  {
      String string0 = "3=FC{*jhR8N";
      String string1 = StringUtils.defaultIfBlank(string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("3=FC{*jhR8N", string1);
      assertNotNull(string1);
  }

  @Test
  public void test048()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString(string0, string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test049()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "The Array must not be null";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString(string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("The Array must not be null", string2);
      assertNotNull(string2);
  }

  @Test
  public void test051()  throws Throwable  {
      String string0 = "S";
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "AeJS7jpj\\x.)(78";
      String string1 = StringUtils.remove(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test053() {}
//   @Test
//   public void test053()  throws Throwable  {
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CA", locale0.getCountry());
//       
//       String string0 = locale0.getDisplayName();
//       assertEquals("inglese (Canada)", string0);
//       assertNotNull(string0);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CA", locale0.getCountry());
//       
//       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string0);
//       assertFalse(boolean0);
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CA", locale0.getCountry());
//   }

  @Test
  public void test054()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertNull(string0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) string0);
      assertFalse(boolean0);
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
  }

  @Test
  public void test055()  throws Throwable  {
      String string0 = "The character must not be null";
      int int0 = 10;
      String string1 = StringUtils.substring(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ter must not be null", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      String string0 = "&*v`)^e }lIn`kK+";
      String string1 = StringUtils.trim(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("&*v`)^e }lIn`kK+", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException();
      assertNotNull(sQLTransientConnectionException0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      
      String string0 = sQLTransientConnectionException0.getSQLState();
      assertNull(string0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) string0);
      assertFalse(boolean0);
      assertEquals(0, sQLTransientConnectionException0.getErrorCode());
      assertNull(sQLTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLTransientConnectionException", sQLTransientConnectionException0.toString());
      assertNull(sQLTransientConnectionException0.getMessage());
  }

  @Test
  public void test058()  throws Throwable  {
      String string0 = "w=,lWMpY@awi?w=,lWMpY@awi?";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      String string{}";
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.exception.CloneFailedException";
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string1);
      assertFalse(boolean0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "J.B@7Rv";
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isNumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String string1 = "w+j{1";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string0, string1);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("/3=[#^<{>|RPTg|(L6", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "The character The character ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertTrue(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "-U'-U'";
      String string1 = StringUtils.upperCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("-U'-U'", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "iv6";
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "`[W>rZcqB&";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlphanumeric(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test076() {}
//   @Test
//   public void test076()  throws Throwable  {
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       
//       String string0 = locale0.getDisplayName();
//       assertEquals("inglese (Canada)", string0);
//       assertNotNull(string0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       
//       boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string0);
//       assertFalse(boolean0);
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//   }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "YDRGytVlcfMh";
      String string1 = StringUtils.stripAccents(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("YDRGytVlcfMh", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "RT";
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               {}";
      boolean boolean0 = StringUtils.isAlpha((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test081()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.isAlpha(charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "dp=;Qtq6`q";
      int int0 = StringUtils.countMatches((CharSequence) string0, (CharSequence) string0);
      assertEquals(1, int0);
  }

  @Test
  public void test083()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "uaToZm.?<#SecurityException occurred";
      int int0 = StringUtils.countMatches((CharSequence) string0, charSequence0);
      assertEquals(0, int0);
  }

  @Test
  public void test084()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.countMatches(charSequence0, charSequence0);
      assertEquals(0, int0);
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "The Array must not be null";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("The Array must not be null", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertEquals("tHE aRRAY MUST NOT BE NULL", string2);
      assertNotNull(string2);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.swapCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "w=,lWMpY@awi?w=,lWMpY@awi?";
      String string1 = StringUtils.removeEndIgnoreCase(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize(string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.uncapitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "iv6";
      String string1 = StringUtils.substringBeforeLast(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize(string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "(7TAycwV^4c{Rf,Dq";
      String string1 = StringUtils.capitalize(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("(7TAycwV^4c{Rf,Dq", string1);
      assertNotNull(string1);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.capitalize(string0);
      assertNull(string1);
  }

  @Test
  public void test092()  throws Throwable  {
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      String string0 = priorityQueue0.toString();
      assertEquals("[]", string0);
      assertNotNull(string0);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      
      String string1 = StringUtils.lowerCase(string0, locale0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("[]", string1);
      assertNotNull(string1);
      assertEquals("[]", priorityQueue0.toString());
      assertEquals(0, priorityQueue0.size());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "J.B@7Rv";
      String string1 = StringUtils.lowerCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test
  public void test094()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String string0 = sQLRecoverableException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String string1 = StringUtils.upperCase(string0);
      assertNull(string1);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "-U'-U'";
      String string1 = StringUtils.upperCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("-U'-U'", string1);
      assertNotNull(string1);
      
      int int0 = (-1544);
      String string2 = StringUtils.center(string1, int0, string0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("-U'-U'", string2);
      assertNotNull(string2);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
      
      int int0 = 1675;
      String string2 = StringUtils.center(string1, int0, string1);
      assertNull(string2);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "InvocationTarLetException occurred";
      int int0 = 1;
      String string1 = StringUtils.center(string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("InvocationTarLetException occurred", string1);
      assertNotNull(string1);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "PIxM2|?UHun>+19w";
      int int0 = 0;
      char char0 = 'v';
      String string1 = StringUtils.center(string0, int0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("PIxM2|?UHun>+19w", string1);
      assertNotNull(string1);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = null;
      int int0 = 127;
      char char0 = 'b';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNull(string1);
  }

  @Test
  public void test100()  throws Throwable  {
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException();
      assertNotNull(sQLFeatureNotSupportedException0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      String string0 = sQLFeatureNotSupportedException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
      
      int int0 = StringUtils.length((CharSequence) string0);
      assertEquals(0, int0);
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertNull(sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("java.sql.SQLFeatureNotSupportedException", sQLFeatureNotSupportedException0.toString());
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      int int0 = StringUtils.length((CharSequence) string0);
      assertEquals(18, int0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "The character The character ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 64;
      String string2 = StringUtils.center(string1, int0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                ", string2);
      assertNotNull(string2);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "YDRGytVlcfMh";
      String string1 = StringUtils.stripAccents(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("YDRGytVlcfMh", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.leftPad(string1, int0, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("YDRGytVlcfMh", string2);
      assertNotNull(string2);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = null;
      int int0 = 97;
      String string1 = StringUtils.leftPad(string0, int0, string0);
      assertNull(string1);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.exception.CloneFailedException";
      int int0 = 32;
      String string1 = StringUtils.leftPad(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string1);
      assertNotNull(string1);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      char char0 = 'h';
      String string2 = StringUtils.leftPad(string1, (int) char0, char0);
      assertNull(string2);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "`[W>rZcqB&";
      int int0 = 164;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZc`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZcqB&`[W>rZc", string1);
      assertNotNull(string1);
  }

  @Test
  public void test108()  throws Throwable  {
      char char0 = '^';
      String string0 = "";
      String string1 = StringUtils.chomp(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad(string1, (int) char0, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("                                                                                              ", string2);
      assertNotNull(string2);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad(string1, int0, string1);
      assertNull(string2);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "$nUMW";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      char char0 = '.';
      String string1 = StringUtils.rightPad(stringArray0[0], int0, char0);
      assertNull(string1);
  }

  @Test
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[4];
      char char0 = ',';
      charArray0[2] = char0;
      String string0 = "mX";
      String string1 = StringUtils.swapCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Mx", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat(string1, (int) charArray0[2]);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("MxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMxMx", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', ',', '\u0000'}, charArray0);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "`[W>rZcqB&";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 164;
      String string2 = StringUtils.repeat(string1, int0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = null;
      String string1 = "upw{OG7]k`7@mBK<J";
      int int0 = 1;
      String string2 = StringUtils.repeat(string1, string0, int0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertEquals("upw{OG7]k`7@mBK<J", string2);
      assertNotNull(string2);
  }

  @Test
  public void test114()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "=LV+ 1v#QV%.";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(12, int0);
      
      String string3 = StringUtils.repeat(string2, string2, int0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.=LV+ 1v#QV%.", string3);
      assertNotNull(string3);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = null;
      char char0 = '`';
      String string1 = StringUtils.repeat(string0, string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.chop(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chop(string0);
      assertNull(string1);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "\"^*8cA%rmTe#";
      String string1 = StringUtils.chop(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"^*8cA%rmTe", string1);
      assertNotNull(string1);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = "W";
      String string1 = StringUtils.chomp(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("W", string1);
      assertNotNull(string1);
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = "iv6";
      char[] charArray0 = new char[9];
      char char0 = '\'';
      charArray0[2] = char0;
      String string1 = StringUtils.trim(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("iv6", string1);
      assertNotNull(string1);
      
      int int0 = (-2394);
      String string2 = StringUtils.overlay(string1, string1, (int) charArray0[2], int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertEquals("iv6", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\'', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "-U'-U'";
      String string1 = StringUtils.upperCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("-U'-U'", string1);
      assertNotNull(string1);
      
      int int0 = (-1544);
      String string2 = StringUtils.overlay(string1, string1, int0, int0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-U'-U'-U'-U'", string2);
      assertNotNull(string2);
  }

  @Test
  public void test122()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = 'g';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("ggg", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.overlay(string0, string1, (int) char0, (int) char0);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertEquals("ggg", string2);
      assertNotNull(string2);
  }

  @Test
  public void test123()  throws Throwable  {
      String string0 = "";
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      String string1 = null;
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertNull(string2);
      
      String string3 = StringUtils.overlay(string2, string0, int0, int0);
      assertNull(string3);
  }

  @Test
  public void test124()  throws Throwable  {
      String string0 = "\\s+";
      String string1 = "BD*(V]zeoq}CbN4^cU";
      assertNotSame(string1, string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sQLRecoverableException0);
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      String string2 = sQLRecoverableException0.getSQLState();
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("BD*(V]zeoq}CbN4^cU", string2);
      assertNotNull(string2);
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      
      String string3 = StringUtils.replaceChars(string2, string0, string0);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string1, string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("BD*(V]zeoq}CbN4^cU", string3);
      assertNotNull(string3);
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
  }

  @Test
  public void test125()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      String string0 = sQLRecoverableException0.getLocalizedMessage();
      assertNull(string0);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      
      String string1 = "\\u";
      String string2 = StringUtils.replaceChars(string1, string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
  }

  @Test
  public void test126()  throws Throwable  {
      String string0 = "\\s+";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string0, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      String string1 = sQLRecoverableException0.getSQLState();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("\\s+", string1);
      assertNotNull(string1);
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      String string2 = StringUtils.replaceChars(string1, string1, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertEquals("\\s+", string2);
      assertNotNull(string2);
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = null;
      char char0 = 'h';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertNull(string1);
  }

  @Test
  public void test128()  throws Throwable  {
      String string0 = "', has a length less than 2";
      String[] stringArray0 = new String[8];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      String string2 = StringUtils.replaceEach(string0, stringArray0, stringArray0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertEquals("', has a length less than 2", string2);
      assertNotNull(string2);
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      String string1 = "L?#ui.{xIKV1q";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.normalizeSpace(string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L?#ui.{xIKV1q", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("L?#ui.{xIKV1q", string3);
      assertNotNull(string3);
  }

  @Test
  public void test130()  throws Throwable  {
      String string0 = "\\s+";
      String string1 = "BD*(V]zeoq}CbN4^cU";
      assertNotSame(string1, string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      
      String string2 = sQLRecoverableException0.getSQLState();
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("BD*(V]zeoq}CbN4^cU", string2);
      assertNotNull(string2);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      String string3 = StringUtils.replaceEach(string2, stringArray0, stringArray0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string2, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals("BD*(V]zeoq}CbN4^cU", string3);
      assertNotNull(string3);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = "Cloneable type ";
      int int0 = 1041;
      char char0 = '6';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsloneable typestring1);
      assertNotNull(string1);
      
      String[] stringArray0 = new String[8];
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEqualsloneable typestring2);
      assertNotNull(string2);
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[6];
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
      }
  }

  @Test
  public void test133()  throws Throwable  {
      String string0 = null;
      String string1 = "upw{OG7]k`7@mBK<J";
      int int0 = 0;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1, int0);
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertEquals("upw{OG7]k`7@mBK<J", string2);
      assertNotNull(string2);
  }

  @Test
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[10];
      String string0 = "java.text.Normalizer$Form";
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[7] = stringArray0[4];
      assertNotNull(stringArray0[7]);
      
      String string1 = StringUtils.difference(stringArray0[7], stringArray0[7]);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEach(string1, stringArray0, stringArray0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test135()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = StringUtils.split(string0);
      assertNotNull(stringArray0);
      
      // Undeclared exception!
      try {
        String string1 = StringUtils.replaceEachRepeatedly(string0, stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
      }
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = "AeJS7jpj\\x.)(78";
      String string1 = StringUtils.remove(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce(string0, string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test137()  throws Throwable  {
      String string0 = "$nUMW";
      int int0 = 2972;
      String string1 = StringUtils.replace(string0, string0, string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("$nUMW", string1);
      assertNotNull(string1);
  }

  @Test
  public void test138()  throws Throwable  {
      String string0 = "$nUMW";
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.replace(string0, string0, string0, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertEquals("$nUMW", string1);
      assertNotNull(string1);
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "ad:NQ=zKqqXLYT.F*e_";
      int int0 = 32;
      String string1 = StringUtils.leftPad(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("             ad:NQ=zKqqXLYT.F*e_", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace(string0, string1, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ad:NQ=zKqqXLYT.F*e_", string2);
      assertNotNull(string2);
  }

  @Test
  public void test140()  throws Throwable  {
      String string0 = "{}";
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("{}", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      int int0 = 0;
      String string2 = StringUtils.replace(string1, string1, string1, int0);
      assertSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("{}", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test
  public void test141()  throws Throwable  {
      String string0 = "ad:NQ=zKqqXLYT.F*e_";
      String string1 = null;
      String string2 = StringUtils.replaceOnce(string0, string0, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertEquals("ad:NQ=zKqqXLYT.F*e_", string2);
      assertNotNull(string2);
  }

  @Test
  public void test142()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replace(string0, string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("/3=[#^<{>|RPTg|(L6", string2);
      assertNotNull(string2);
  }

  @Test
  public void test143()  throws Throwable  {
      String string0 = ")\")J4p2s+/";
      char char0 = ')';
      String string1 = StringUtils.remove(string0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("\"J4p2s+/", string1);
      assertNotNull(string1);
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "ad:NQ=zKqqXLYT.F*e_";
      char char0 = '3';
      String string1 = StringUtils.remove(string0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("ad:NQ=zKqqXLYT.F*e_", string1);
      assertNotNull(string1);
  }

  @Test
  public void test145()  throws Throwable  {
      String string0 = "Cloneable type ";
      int int0 = 1041;
      char char0 = '6';
      String string1 = StringUtils.center(string0, int0, char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEqualsloneable typestring1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd(string1, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.remove(string2, char0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test
  public void test146()  throws Throwable  {
      String string0 = "The character must not be null";
      char char0 = '^';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("The character must not be null", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.remove(string1, string2);
      assertSame(string0, string3);
      assertSame(string0, string1);
      assertSame(string1, string3);
      assertSame(string1, string0);
      assertSame(string3, string1);
      assertSame(string3, string0);
      assertEquals("The character must not be null", string3);
      assertNotNull(string3);
  }

  @Test
  public void test147()  throws Throwable  {
      String string0 = "(7TAycwV^4c{Rf,Dq";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "$nUMW";
      String string1 = " VMfw {,YfV</L~h";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$nUMW", string2);
      assertNotNull(string2);
  }

  @Test
  public void test149()  throws Throwable  {
      String string0 = "";
      String string1 = "Z?{N_\"x\"M\\g@m9\"oc";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, string0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Z?{N_\"x\"M\\g@m9\"oc", string2);
      assertNotNull(string2);
  }

  @Test
  public void test150()  throws Throwable  {
      String string0 = "The character must not be null";
      String string1 = null;
      String string2 = StringUtils.chomp(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("The character must not be null", string2);
      assertNotNull(string2);
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = "mEfa";
      Object[] objectArray0 = new Object[3];
      String string1 = StringUtils.join(objectArray0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("mEfamEfa", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("mEfa", string2);
      assertNotNull(string2);
  }

  @Test
  public void test152()  throws Throwable  {
      String string0 = "518vp,#!HW";
      String string1 = StringUtils.uncapitalize(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("518vp,#!HW", string1);
      assertNotNull(string1);
      
      String string2 = null;
      String string3 = StringUtils.removeStartIgnoreCase(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string0);
      assertSame(string3, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string3);
      assertTrue(string0.equals((Object)string3));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("518vp,#!HW", string3);
      assertNotNull(string3);
  }

  @Test
  public void test153()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String string1 = "w+j{1";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeEnd(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("/3=[#^<{>|RPTg|(L6", string2);
      assertNotNull(string2);
      
      String string3 = "=LV+ 1v#QV%.";
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.removeStart(string3, string2);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string4);
      assertNotSame(string4, string2);
      assertSame(string4, string3);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string2);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=LV+ 1v#QV%.", string4);
      assertNotNull(string4);
  }

  @Test
  public void test154()  throws Throwable  {
      String string0 = "w=,lWMpY@awi?";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.removeStart(string0, string1);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test
  public void test155()  throws Throwable  {
      String string0 = "Strings must not be null";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("Stringsmustnotbenull", string1);
      assertNotNull(string1);
  }

  @Test
  public void test156()  throws Throwable  {
      String string0 = "uaToZm.?<#SecurityException occurred";
      int int0 = 855;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace(string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test157()  throws Throwable  {
      char char0 = '6';
      Iterable<ClientInfoStatus> iterable0 = null;
      String string0 = StringUtils.join(iterable0, char0);
      assertNull(string0);
  }

  @Test
  public void test158()  throws Throwable  {
      String string0 = "+|/^3";
      int int0 = 1151;
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(true, stack0.isEmpty());
      assertEquals(true, stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      stack0.addElement((Integer) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[-1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      
      boolean boolean0 = stack0.add((Integer) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertTrue(boolean0);
      assertEquals(2, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals("[-1, -1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
      
      String string1 = StringUtils.join((Iterable<?>) stack0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1+|/^3-1", string1);
      assertNotNull(string1);
      assertEquals(2, stack0.size());
      assertEquals(false, stack0.empty());
      assertEquals("[-1, -1]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(false, stack0.isEmpty());
  }

  @Test
  public void test159()  throws Throwable  {
      String string0 = "The character The character ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Iterator<Integer> iterator0 = null;
      String string2 = StringUtils.join(iterator0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
  }

  @Test
  public void test160()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedHashSet0.add(object0);
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
      
      char char0 = 'o';
      String string0 = StringUtils.join(iterator0, char0);
      assertNotNull(string0);
      assertEquals(1, linkedHashSet0.size());
      assertEquals(false, linkedHashSet0.isEmpty());
  }

  @Test
  public void test161()  throws Throwable  {
      Iterator<Integer> iterator0 = null;
      char char0 = 'L';
      String string0 = StringUtils.join(iterator0, char0);
      assertNull(string0);
  }

  @Test
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "SdcK|CeCJ3BskT@";
      stringArray0[2] = string0;
      assertNotNull(stringArray0[2]);
      
      String string1 = StringUtils.join(stringArray0);
      assertNotSame(string1, string0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("SdcK|CeCJ3BskT@", string1);
      assertNotNull(string1);
  }

  @Test
  public void test163()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = StringUtils.strip(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 1202;
      String string2 = StringUtils.join(objectArray0, string1, int0, int0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test164()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNull(stringArray0);
      
      char char0 = 'k';
      String string1 = StringUtils.join((Object[]) stringArray0, char0, (int) char0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "7N{=wN2ZPo'#-&";
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "uaToZm.?<#java.text.Normalizer$Form";
      int int0 = 5;
      String string1 = StringUtils.center(string0, int0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("uaToZm.?<#java.text.Normalizer$Form", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test167()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.splitByCharacterType(string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test168()  throws Throwable  {
      String string0 = "ad:NQ=zKqqXLYT.F*e_";
      int int0 = 32;
      String string1 = "s!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1ss!>DANW(-QNfj1s!>DANW(-QNfj1s";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.split(string1, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test169()  throws Throwable  {
      char char0 = 'N';
      String string0 = "N";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0, (int) char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test170()  throws Throwable  {
      String string0 = "isV";
      String string1 = "v";
      assertNotSame(string1, string0);
      
      int int0 = 398;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               {}";
      String string1 = null;
      String string2 = StringUtils.chomp(string1);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split(string0, string2);
      assertNotNull(stringArray0);
  }

  @Test
  public void test172()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string0 = locale0.getDisplayVariant();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      String string1 = null;
      String[] stringArray0 = StringUtils.split(string1, string0);
      assertNull(stringArray0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
  }

  @Test
  public void test173()  throws Throwable  {
      String string0 = "P|/sd[cOEFMDV`uUIdI";
      char char0 = 'I';
      String string1 = StringUtils.reverseDelimited(string0, char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("dIP|/sd[cOEFMDV`uU", string1);
      assertNotNull(string1);
  }

  @Test
  public void test174()  throws Throwable  {
      String string0 = "+|/^3";
      char char0 = '+';
      String[] stringArray0 = StringUtils.split(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test175()  throws Throwable  {
      String string0 = "\\s+";
      String string1 = "BD*(V]zeoq}CbN4^cU";
      assertNotSame(string1, string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLRecoverableException0);
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      String string2 = sQLRecoverableException0.getSQLState();
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("BD*(V]zeoq}CbN4^cU", string2);
      assertNotNull(string2);
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      char[] charArray0 = new char[5];
      char char0 = '*';
      charArray0[4] = char0;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string2, charArray0[4]);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(stringArray0);
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '*'}, charArray0);
  }

  @Test
  public void test176()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripStart(string0, string0);
      assertNull(string1);
      
      char char0 = 'U';
      String[] stringArray0 = StringUtils.split(string1, char0);
      assertNull(stringArray0);
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "ad:NQ=zKqqXLYT.F*e_";
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test178()  throws Throwable  {
      String string0 = "PIxM2|?UHun>+19w";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char char0 = 'v';
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(stringArray0);
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "ad:NQ=zKqqXLYT.F*e_";
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, string1);
      assertNotNull(stringArray0);
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "The character must not be null";
      char char0 = '^';
      String string1 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string0, (int) char0);
      assertNull(stringArray0);
  }

  @Test
  public void test181()  throws Throwable  {
      String string0 = "-U'-U'";
      String string1 = StringUtils.upperCase(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("-U'-U'", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      
      String string2 = locale0.getDisplayName(locale0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("italiano (Italia)", string2);
      assertNotNull(string2);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      
      String[] stringArray0 = StringUtils.substringsBetween(string2, string1, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNull(stringArray0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "uaToZm.?<#SecurityException occurred";
      String string1 = "USZ]I{HA,I|oPgp3\\k";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string0, string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(stringArray0);
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = "\\s+";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(stringArray0);
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "\\s+";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string0, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String string1 = sQLRecoverableException0.getSQLState();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\\s+", string1);
      assertNotNull(string1);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String[] stringArray0 = StringUtils.substringsBetween(string1, string0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNull(stringArray0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
  }

  @Test
  public void test185()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween(string1, string1);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test186()  throws Throwable  {
      String string0 = "$nUMW";
      String string1 = " VMfw {,YfV</L~h";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBetween(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
  }

  @Test
  public void test187()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.substringBetween(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test188()  throws Throwable  {
      String string0 = "AeJS7jpj\\x.)(78";
      String string1 = "\\u0";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfterLast(string0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test189()  throws Throwable  {
      String string0 = "uaToZm.?<#SecurityException occurred";
      int int0 = 855;
      String string1 = StringUtils.mid(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "<gr6 w,";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast(string2, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string0, string3);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string3, string2);
      assertSame(string3, string1);
      assertNotSame(string3, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      assertNotNull(string3);
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = "hx0PunqsMir3'd;ZC";
      String string1 = ")";
      assertNotSame(string1, string0);
      
      String[] stringArray0 = new String[10];
      stringArray0[6] = string1;
      assertNotNull(stringArray0[6]);
      
      String string2 = StringUtils.substringBeforeLast(string0, stringArray0[6]);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertEquals("hx0PunqsMir3'd;ZC", string2);
      assertNotNull(string2);
  }

  @Test
  public void test191()  throws Throwable  {
      String string0 = "&*v`)^e }lIn`kK+";
      String string1 = null;
      String string2 = StringUtils.substringBeforeLast(string1, string0);
      assertNull(string2);
  }

  @Test
  public void test192()  throws Throwable  {
      String string0 = "J.B@7Rv";
      String string1 = "The Array must not be null";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringAfter(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter(string1, string1);
      assertNull(string2);
  }

  @Test
  public void test194()  throws Throwable  {
      String string0 = "RT";
      String string1 = "B3z_e{/";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("B3z_e{/", string2);
      assertNotNull(string2);
  }

  @Test
  public void test195()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      String string1 = null;
      String string2 = StringUtils.substringBefore(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertEquals("InvocationTargetException occurred", string2);
      assertNotNull(string2);
  }

  @Test
  public void test196()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      String string1 = StringUtils.trimToEmpty(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("InvocationTargetException occurred", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "AeJS7jpj\\x.)(78";
      String string1 = StringUtils.remove(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore(string1, string1);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test198()  throws Throwable  {
      String string0 = "upw{OG7]k`7@mBK<J";
      int int0 = 0;
      String string1 = StringUtils.rightPad(string0, int0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("upw{OG7]k`7@mBK<J", string1);
      assertNotNull(string1);
      
      char char0 = ';';
      String string2 = StringUtils.mid(string1, int0, (int) char0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string2);
      assertSame(string0, string1);
      assertEquals("upw{OG7]k`7@mBK<J", string2);
      assertNotNull(string2);
  }

  @Test
  public void test199()  throws Throwable  {
      String string0 = "YDRGytVlcfMh";
      String string1 = StringUtils.stripAccents(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("YDRGytVlcfMh", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      String string2 = StringUtils.mid(string1, int0, int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test200()  throws Throwable  {
      String string0 = "The character The character ";
      int int0 = 64;
      int int1 = (-2611);
      String string1 = StringUtils.mid(string0, int0, int1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test201()  throws Throwable  {
      String string0 = "3=FC{*jhR8N";
      String string1 = StringUtils.strip(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("3=FC{*jhR8N", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      char char0 = '=';
      charArray0[3] = char0;
      int int0 = StringUtils.indexOfAny((CharSequence) string1, charArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '='}, charArray0);
      
      String string2 = StringUtils.right(string0, int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEquals("N", string2);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '='}, charArray0);
  }

  @Test
  public void test202()  throws Throwable  {
      String string0 = "iv6iv6";
      byte byte0 = (byte) (-51);
      String string1 = StringUtils.right(string0, (int) byte0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test203()  throws Throwable  {
      String string0 = "3=FC{*jhR8N";
      char char0 = ',';
      String string1 = StringUtils.right(string0, (int) char0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("3=FC{*jhR8N", string1);
      assertNotNull(string1);
  }

  @Test
  public void test204()  throws Throwable  {
      String string0 = "\\u";
      int int0 = 0;
      String string1 = StringUtils.left(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test205()  throws Throwable  {
      String string0 = "The character The character ";
      String string1 = "<aH1nAE@V~h7]?";
      assertNotSame(string1, string0);
      
      int int0 = 64;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.left(string1, int1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test206()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = StringUtils.strip(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 1202;
      String string2 = StringUtils.left(string1, int0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test207()  throws Throwable  {
      String string0 = "wu$-[ R&R>TMMM4";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substring(string1, int0, int0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test208()  throws Throwable  {
      String string0 = "mEfa";
      int int0 = (-2295);
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test209()  throws Throwable  {
      int int0 = 3;
      String string0 = null;
      String string1 = StringUtils.substring(string0, int0, int0);
      assertNull(string1);
  }

  @Test
  public void test210()  throws Throwable  {
      String string0 = "mEfa";
      Object[] objectArray0 = new Object[3];
      String string1 = StringUtils.join(objectArray0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("mEfamEfa", string1);
      assertNotNull(string1);
      
      char char0 = '@';
      String string2 = StringUtils.substring(string1, (int) char0, (int) char0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test211()  throws Throwable  {
      String string0 = "RT";
      int int0 = (-666);
      String string1 = StringUtils.substring(string0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("RT", string1);
      assertNotNull(string1);
  }

  @Test
  public void test212()  throws Throwable  {
      String string0 = null;
      char char0 = 'n';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertNull(string1);
  }

  @Test
  public void test213()  throws Throwable  {
      String string0 = "{XIAEUIbRk~\"$}yG";
      String string1 = "NFD";
      assertNotSame(string1, string0);
      
      int int0 = (-602);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("NFD", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      
      String string2 = sQLIntegrityConstraintViolationException0.getMessage();
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("{XIAEUIbRk~\"$}yG", string2);
      assertNotNull(string2);
      assertEquals("NFD", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string1;
      assertNotNull(charSequenceArray0[0]);
      assertEquals("NFD", charSequenceArray0[0].toString());
      assertEquals(3, charSequenceArray0[0].length());
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) string2, charSequenceArray0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertEquals("NFD", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
  }

  @Test
  public void test214()  throws Throwable  {
      String string0 = "{XIAEUIbRk~\"$}yG";
      int int0 = (-602);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0, int0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      String string1 = sQLIntegrityConstraintViolationException0.getMessage();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("{XIAEUIbRk~\"$}yG", string1);
      assertNotNull(string1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray0[0]);
      assertEquals("{XIAEUIbRk~\"$}yG", charSequenceArray0[0].toString());
      assertEquals(16, charSequenceArray0[0].length());
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) string1, charSequenceArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, int1);
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
  }

  @Test
  public void test215()  throws Throwable  {
      String string0 = "[CiM";
      String string1 = StringUtils.stripAccents(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("[CiM", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, (CharSequence[]) stringArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test216()  throws Throwable  {
      String string0 = "The character The character ";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[2] = (CharSequence) string1;
      assertNotNull(charSequenceArray0[2]);
      assertEquals("", charSequenceArray0[2].toString());
      assertEquals(0, charSequenceArray0[2].length());
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
  }

  @Test
  public void test217()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6w+j{1";
      int int0 = Integer.MAX_VALUE;
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.overlay(string0, string0, int0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("/3=[#^<{>|RPTg|(L6w+j{1/3=[#^<{>|RPTg|(L6w+j{1", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) string1;
      assertNotNull(charSequenceArray0[0]);
      assertEquals("/3=[#^<{>|RPTg|(L6w+j{1/3=[#^<{>|RPTg|(L6w+j{1", charSequenceArray0[0].toString());
      assertEquals(46, charSequenceArray0[0].length());
      
      int int1 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
  }

  @Test
  public void test218()  throws Throwable  {
      String string0 = "v[";
      CharSequence[] charSequenceArray0 = null;
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test
  public void test219()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, (CharSequence[]) stringArray0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test220()  throws Throwable  {
      String string0 = "(7TAycwV^4c{Rf,Dq";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLRecoverableException0);
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(string1, string0, (int) byteArray0[2], (Throwable) sQLRecoverableException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLSyntaxErrorException0);
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string1, (Throwable) sQLSyntaxErrorException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLFeatureNotSupportedException0);
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) sQLFeatureNotSupportedException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLTimeoutException0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLFeatureNotSupportedException: ", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      String string2 = sQLTimeoutException0.getSQLState();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLFeatureNotSupportedException: ", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfAny((CharSequence) string2, charSequenceArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertNull(sQLTimeoutException0.getSQLState());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLTimeoutException0.getMessage());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLFeatureNotSupportedException: ", sQLTimeoutException0.toString());
      assertEquals("java.sql.SQLFeatureNotSupportedException: ", sQLFeatureNotSupportedException0.toString());
      assertNull(sQLFeatureNotSupportedException0.getSQLState());
      assertEquals(0, sQLFeatureNotSupportedException0.getErrorCode());
      assertEquals("", sQLFeatureNotSupportedException0.getMessage());
      assertEquals(0, sQLSyntaxErrorException0.getErrorCode());
      assertEquals("java.sql.SQLSyntaxErrorException: ", sQLSyntaxErrorException0.toString());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLSyntaxErrorException0.getSQLState());
      assertEquals("", sQLSyntaxErrorException0.getMessage());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test221()  throws Throwable  {
      String string0 = "Cloneable type ";
      String string1 = null;
      boolean boolean0 = StringUtils.containsNone((CharSequence) string0, string1);
      assertTrue(boolean0);
  }

  @Test
  public void test222()  throws Throwable  {
      String string0 = "{XIAEUIbRk~\"$}yG";
      int int0 = (-602);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string0, int0);
      assertNotNull(sQLIntegrityConstraintViolationException0);
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      
      String string1 = sQLIntegrityConstraintViolationException0.getMessage();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("{XIAEUIbRk~\"$}yG", string1);
      assertNotNull(string1);
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(boolean0);
      assertEquals(-602, sQLIntegrityConstraintViolationException0.getErrorCode());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getMessage());
      assertEquals("{XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.getSQLState());
      assertEquals("java.sql.SQLIntegrityConstraintViolationException: {XIAEUIbRk~\"$}yG", sQLIntegrityConstraintViolationException0.toString());
  }

  @Test
  public void test223()  throws Throwable  {
      String string0 = "by1o0EW12>J,r";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();
      assertNotNull(sQLNonTransientConnectionException0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      String string1 = sQLNonTransientConnectionException0.getSQLState();
      assertNull(string1);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, string0);
      assertTrue(boolean0);
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertNull(sQLNonTransientConnectionException0.getMessage());
  }

  @Test
  public void test224()  throws Throwable  {
      String string0 = "\\s+";
      String string1 = "BD*(V]zeoq}CbN4^cU";
      assertNotSame(string1, string0);
      
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string1, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      
      String string2 = sQLRecoverableException0.getSQLState();
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("BD*(V]zeoq}CbN4^cU", string2);
      assertNotNull(string2);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      
      char[] charArray0 = new char[5];
      char char0 = '*';
      charArray0[1] = char0;
      boolean boolean0 = StringUtils.containsNone((CharSequence) string2, charArray0);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals("BD*(V]zeoq}CbN4^cU", sQLRecoverableException0.getSQLState());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertArrayEquals(new char[] {'\u0000', '*', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test225()  throws Throwable  {
      String string0 = "\\s+";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string0, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      
      String string1 = sQLRecoverableException0.getSQLState();
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("\\s+", string1);
      assertNotNull(string1);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, charArray0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test226()  throws Throwable  {
      String string0 = "uaToZm.?<#SecurityException occurred";
      String string1 = StringUtils.substringBetween(string0, string0, string0);
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      boolean boolean0 = StringUtils.containsNone((CharSequence) string1, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test227()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string1, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test228()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, string0);
      assertFalse(boolean0);
  }

  @Test
  public void test229()  throws Throwable  {
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      char char0 = ' ';
      String string0 = StringUtils.join(iterator0, char0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      
      char[] charArray0 = new char[4];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string0, charArray0);
      assertTrue(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", linkedHashSet0.toString());
      assertEquals(true, linkedHashSet0.isEmpty());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test230()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      
      String string1 = locale0.getDisplayName(locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
  }

  @Test
  public void test231()  throws Throwable  {
      String string0 = null;
      String string1 = "InvocationTarLetException occurred";
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string0);
      assertEquals((-1), int0);
  }

  @Test
  public void test232()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string1);
      assertNotNull(string1);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, int0);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test233()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = "normalize";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" >6p*~(;'9iMSlS", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test234()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = "normalize";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" >6p*~(;'9iMSlS", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) string2, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test
  public void test235()  throws Throwable  {
      String string0 = "(7TAycwV^4c{Rf,Dq";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) sQLRecoverableException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      
      String string2 = sQLTimeoutException0.getSQLState();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string2, (CharSequence) string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("(7TAycwV^4c{Rf,Dq", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals("java.sql.SQLRecoverableException: ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: ", sQLTimeoutException0.toString());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertNull(sQLTimeoutException0.getSQLState());
  }

  @Test
  public void test236()  throws Throwable  {
      String string0 = "iv6";
      char[] charArray0 = new char[9];
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test237()  throws Throwable  {
      String string0 = "\\u00";
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
  }

  @Test
  public void test238()  throws Throwable  {
      String string0 = "\\s+";
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException();
      assertNotNull(sQLInvalidAuthorizationSpecException0);
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string0, string0, (Throwable) sQLInvalidAuthorizationSpecException0);
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      String string1 = sQLRecoverableException0.getSQLState();
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\\s+", string1);
      assertNotNull(string1);
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertTrue(boolean0);
      assertEquals("java.sql.SQLRecoverableException: \\s+", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals("\\s+", sQLRecoverableException0.getSQLState());
      assertEquals("\\s+", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLInvalidAuthorizationSpecException0.getErrorCode());
      assertEquals("java.sql.SQLInvalidAuthorizationSpecException", sQLInvalidAuthorizationSpecException0.toString());
      assertNull(sQLInvalidAuthorizationSpecException0.getSQLState());
      assertNull(sQLInvalidAuthorizationSpecException0.getMessage());
  }

  @Test
  public void test239()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[5];
      boolean boolean0 = StringUtils.containsAny((CharSequence) string0, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test240()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "A@B";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) string2, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEquals((-1), int0);
  }

  @Test
  public void test241()  throws Throwable  {
      String string0 = File.pathSeparator;
      assertEquals(":", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) string0, string0);
      assertEquals(0, int0);
  }

  @Test
  public void test242()  throws Throwable  {
      String string0 = "RT";
      char[] charArray0 = new char[7];
      int int0 = StringUtils.indexOfAny((CharSequence) string0, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test243()  throws Throwable  {
      String string0 = "PIxM2|?UHun>+19w";
      int int0 = 0;
      String string1 = StringUtils.repeat(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      int int1 = StringUtils.indexOfAny((CharSequence) string1, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test244()  throws Throwable  {
      String string0 = "The character must not be null";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test245()  throws Throwable  {
      String string0 = "W";
      String string1 = StringUtils.chomp(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
  }

  @Test
  public void test246()  throws Throwable  {
      String string0 = "RT";
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test247()  throws Throwable  {
      String string0 = "$3p5.p9w";
      int int0 = 13;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("$3$3p5.p9w$3p", string1);
      assertNotNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      
      String string2 = stack0.toString();
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[]", string2);
      assertNotNull(string2);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(true, stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(true, stack0.empty());
  }

  @Test
  public void test248() {}
//   @Test
//   public void test248()  throws Throwable  {
//       Locale locale0 = Locale.CANADA;
//       assertNotNull(locale0);
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       
//       String string0 = locale0.getDisplayName();
//       assertEquals("inglese (Canada)", string0);
//       assertNotNull(string0);
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       
//       boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, (CharSequence) string0);
//       assertTrue(boolean0);
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//   }

  @Test
  public void test249()  throws Throwable  {
      CharSequence charSequence0 = null;
      String string0 = "InvocationTargetException occurred";
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string0, charSequence0);
      assertFalse(boolean0);
  }

  @Test
  public void test250()  throws Throwable  {
      String string0 = null;
      int int0 = (-45);
      String string1 = StringUtils.left(string0, int0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test251()  throws Throwable  {
      String string0 = "InvocationTargetException occurred";
      String string1 = StringUtils.trimToEmpty(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("InvocationTargetException occurred", string1);
      assertNotNull(string1);
      
      String string2 = "org.apache.commons.lang3.ObjectUtils";
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (CharSequence) string2);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
  }

  @Test
  public void test252()  throws Throwable  {
      String string0 = "(7TAycwV^4c{Rf,Dq";
      String string1 = StringUtils.difference(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException(string1, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLRecoverableException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException((Throwable) sQLRecoverableException0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(sQLTimeoutException0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      String string2 = sQLTimeoutException0.getSQLState();
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(string2);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (CharSequence) string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertEquals("java.sql.SQLRecoverableException: ", sQLRecoverableException0.toString());
      assertEquals("", sQLRecoverableException0.getSQLState());
      assertEquals("", sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertEquals(0, sQLTimeoutException0.getErrorCode());
      assertEquals("java.sql.SQLRecoverableException: ", sQLTimeoutException0.getMessage());
      assertEquals("java.sql.SQLTimeoutException: java.sql.SQLRecoverableException: ", sQLTimeoutException0.toString());
      assertNull(sQLTimeoutException0.getSQLState());
  }

  @Test
  public void test253()  throws Throwable  {
      String string0 = "$3p5.p9w";
      int int0 = 13;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("$3$3p5.p9w$3p", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string1, (CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test
  public void test254()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = StringUtils.contains((CharSequence) string0, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test255()  throws Throwable  {
      String string0 = "";
      int int0 = 2795;
      boolean boolean0 = StringUtils.contains((CharSequence) string0, int0);
      assertFalse(boolean0);
  }

  @Test
  public void test256()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.substringAfterLast(string0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = "9lYR2HNS6";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAny((CharSequence) string1, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) string2, int0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(boolean0);
  }

  @Test
  public void test257()  throws Throwable  {
      int int0 = 10;
      String string0 = "";
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test258()  throws Throwable  {
      String string0 = "\\s+";
      int int0 = 0;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test259()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      char char0 = 'm';
      String string0 = StringUtils.join((Object[]) charSequenceArray0, char0);
      assertEquals("mmmmm", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = null;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, charSequence0, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test260()  throws Throwable  {
      String string0 = null;
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString(string0, string0);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string1, (CharSequence) string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test261()  throws Throwable  {
      String string0 = ",jHE0";
      CharSequence charSequence0 = null;
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test
  public void test262()  throws Throwable  {
      String string0 = "$3p5.p9w";
      int int0 = 13;
      String string1 = StringUtils.center(string0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("$3$3p5.p9w$3p", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int1);
  }

  @Test
  public void test263()  throws Throwable  {
      String string0 = null;
      char char0 = 'Z';
      String string1 = StringUtils.abbreviate(string0, (int) char0);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test264()  throws Throwable  {
      String string0 = "iv6iv6";
      String string1 = StringUtils.strip(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("iv6iv6", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = null;
      int int0 = 908;
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, charSequence0, int0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test265()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      char char0 = 'I';
      int int0 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) string1, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test266()  throws Throwable  {
      char char0 = 'J';
      Throwable throwable0 = null;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(throwable0);
      assertNotNull(sQLNonTransientConnectionException0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      String string0 = sQLNonTransientConnectionException0.getMessage();
      assertNull(string0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0, (int) char0);
      assertEquals((-1), int0);
      assertNull(sQLNonTransientConnectionException0.getMessage());
      assertNull(sQLNonTransientConnectionException0.getSQLState());
      assertEquals("java.sql.SQLNonTransientConnectionException", sQLNonTransientConnectionException0.toString());
      assertEquals(0, sQLNonTransientConnectionException0.getErrorCode());
  }

  @Test
  public void test267()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = 'g';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("ggg", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) string0);
      assertEquals(0, int0);
  }

  @Test
  public void test268()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = "normalize";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" >6p*~(;'9iMSlS", string2);
      assertNotNull(string2);
      
      int int0 = 1202;
      int int1 = StringUtils.lastIndexOf((CharSequence) string2, int0, int0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals((-1), int1);
  }

  @Test
  public void test269()  throws Throwable  {
      String string0 = "normalize";
      int int0 = (-1359);
      char char0 = 'n';
      String string1 = StringUtils.substring(string0, (int) char0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int1);
  }

  @Test
  public void test270()  throws Throwable  {
      String string0 = "";
      String string1 = "k&uT'BkA}'T";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string1, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertTrue(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int1);
  }

  @Test
  public void test271()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = "A/`=;w=6n,=";
      String string1 = "g77~y0$";
      assertNotSame(string1, string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string1, (int) byteArray0[0]);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test272()  throws Throwable  {
      String string0 = "F_;kQv#+Db.F}[ #";
      Locale locale0 = new Locale(string0, string0, string0);
      assertNotNull(locale0);
      assertEquals("F_;kQv#+Db.F}[ #", locale0.getVariant());
      assertEquals("f_;kqv#+db.f}[ #_F_;KQV#+DB.F}[ #_F_;kQv#+Db.F}[ #", locale0.toString());
      assertEquals("F_;KQV#+DB.F}[ #", locale0.getCountry());
      assertEquals("f_;kqv#+db.f}[ #", locale0.getLanguage());
      
      String string1 = locale0.getDisplayName(locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("f_;kqv#+db.f}[ # (F_;KQV#+DB.F}[ #,F,;kQv#+Db.F}[ #)", string1);
      assertNotNull(string1);
      assertEquals("F_;kQv#+Db.F}[ #", locale0.getVariant());
      assertEquals("f_;kqv#+db.f}[ #_F_;KQV#+DB.F}[ #_F_;kQv#+Db.F}[ #", locale0.toString());
      assertEquals("F_;KQV#+DB.F}[ #", locale0.getCountry());
      assertEquals("f_;kqv#+db.f}[ #", locale0.getLanguage());
      
      char[] charArray0 = new char[3];
      char char0 = 'G';
      charArray0[0] = char0;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, (int) charArray0[0]);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      assertEquals("F_;kQv#+Db.F}[ #", locale0.getVariant());
      assertEquals("f_;kqv#+db.f}[ #_F_;KQV#+DB.F}[ #_F_;kQv#+Db.F}[ #", locale0.toString());
      assertEquals("F_;KQV#+DB.F}[ #", locale0.getCountry());
      assertEquals("f_;kqv#+db.f}[ #", locale0.getLanguage());
      assertArrayEquals(new char[] {'G', '\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test273()  throws Throwable  {
      String string0 = "normalize";
      int int0 = (-1359);
      String string1 = StringUtils.abbreviateMiddle(string0, string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("normalize", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test
  public void test274()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String string0 = sQLRecoverableException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      
      String string1 = ")";
      int int0 = 0;
      String string2 = StringUtils.rightPad(string1, int0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertEquals(")", string2);
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string2, (CharSequence) string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
      assertNull(sQLRecoverableException0.getMessage());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
  }

  @Test
  public void test275()  throws Throwable  {
      String string{}";
      char char0 = 'h';
      String string1 = StringUtils.replaceChars(string0, char0, char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals{}", string1);
      assertNotNull(string1);
      
      CharSequence charSequence0 = null;
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) string1, charSequence0, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test276()  throws Throwable  {
      String string{}";
      String string1 = null;
      String string2 = StringUtils.chomp(string1);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string2, (CharSequence) string0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) string2, (CharSequence) string2, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test277()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = 2648;
      String string0 = "uaToZm.?<#SecurityException occurred";
      int int1 = StringUtils.lastIndexOf(charSequence0, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = null;
      int int2 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string1, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals((-1), int2);
  }

  @Test
  public void test278()  throws Throwable  {
      int int0 = 2648;
      String string0 = "uaToZm.?<#SecurityException occurred";
      int int1 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test279()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[2];
      char char0 = 'Z';
      String string1 = StringUtils.abbreviate(string0, (int) char0);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string1, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) string0, (CharSequence) string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
  }

  @Test
  public void test280()  throws Throwable  {
      int int0 = 2648;
      String string0 = "uaToZm.?<#SecurityException occurred";
      String string1 = null;
      StackTraceElement stackTraceElement0 = new StackTraceElement(string0, string0, string0, int0);
      assertNotNull(stackTraceElement0);
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getMethodName());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getFileName());
      assertEquals(2648, stackTraceElement0.getLineNumber());
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred:2648)", stackTraceElement0.toString());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getClassName());
      assertEquals(false, stackTraceElement0.isNativeMethod());
      
      String string2 = stackTraceElement0.toString();
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred:2648)", string2);
      assertNotNull(string2);
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getMethodName());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getFileName());
      assertEquals(2648, stackTraceElement0.getLineNumber());
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred:2648)", stackTraceElement0.toString());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getClassName());
      assertEquals(false, stackTraceElement0.isNativeMethod());
      
      int int1 = StringUtils.indexOf((CharSequence) string2, (CharSequence) string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(int0 == int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getMethodName());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getFileName());
      assertEquals(2648, stackTraceElement0.getLineNumber());
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred:2648)", stackTraceElement0.toString());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getClassName());
      assertEquals(false, stackTraceElement0.isNativeMethod());
  }

  @Test
  public void test281()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = 2648;
      String string0 = "uaToZm.?<#SecurityException occurred";
      int int1 = StringUtils.lastIndexOf(charSequence0, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      StackTraceElement stackTraceElement0 = new StackTraceElement(string0, string0, string0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(stackTraceElement0);
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getMethodName());
      assertEquals(false, stackTraceElement0.isNativeMethod());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getFileName());
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred)", stackTraceElement0.toString());
      assertEquals(-1, stackTraceElement0.getLineNumber());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getClassName());
      
      String string1 = stackTraceElement0.toString();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred)", string1);
      assertNotNull(string1);
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getMethodName());
      assertEquals(false, stackTraceElement0.isNativeMethod());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getFileName());
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred)", stackTraceElement0.toString());
      assertEquals(-1, stackTraceElement0.getLineNumber());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getClassName());
      
      int int2 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(0, int2);
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getMethodName());
      assertEquals(false, stackTraceElement0.isNativeMethod());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getFileName());
      assertEquals("uaToZm.?<#SecurityException occurred.uaToZm.?<#SecurityException occurred(uaToZm.?<#SecurityException occurred)", stackTraceElement0.toString());
      assertEquals(-1, stackTraceElement0.getLineNumber());
      assertEquals("uaToZm.?<#SecurityException occurred", stackTraceElement0.getClassName());
  }

  @Test
  public void test282()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOf(charSequence0, charSequence0);
      assertEquals((-1), int0);
  }

  @Test
  public void test283()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) string0, int0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-1), int1);
  }

  @Test
  public void test284()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.chomp(string0);
      assertNull(string1);
      
      char char0 = 'h';
      int int0 = StringUtils.indexOf((CharSequence) string1, (int) char0);
      assertEquals((-1), int0);
  }

  @Test
  public void test285()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.lowerCase(string0);
      assertNull(string1);
      
      String string2 = "vzOw{gIZ";
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string2, (CharSequence) string1);
      assertFalse(boolean0);
  }

  @Test
  public void test286()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) string1, (CharSequence) string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertTrue(boolean0);
  }

  @Test
  public void test287()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test
  public void test288()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.equals(charSequence0, charSequence0);
      assertTrue(boolean0);
  }

  @Test
  public void test289()  throws Throwable  {
      String string0 = "";
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.equals(charSequence0, (CharSequence) string0);
      assertFalse(boolean0);
  }

  @Test
  public void test290()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      boolean boolean0 = StringUtils.equals((CharSequence) string0, (CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test291()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripAccents(string0);
      assertNull(string1);
  }

  @Test
  public void test292()  throws Throwable  {
      String string0 = "The character ";
      String string1 = StringUtils.strip(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("The character", string1);
      assertNotNull(string1);
  }

  @Test
  public void test293()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd(string0, string0);
      assertNull(string1);
  }

  @Test
  public void test294()  throws Throwable  {
      String string0 = "o >6p*~(;'9iMSlS";
      String string1 = "";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string0, string1);
      assertNotSame(string0, string1);
      assertSame(string0, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertEquals("o >6p*~(;'9iMSlS", string2);
      assertNotNull(string2);
  }

  @Test
  public void test295()  throws Throwable  {
      String string0 = "AeJS7jpj\\x.)(78";
      String string1 = StringUtils.remove(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart(string1, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test296()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = 'g';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("ggg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToEmpty(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("ggg", string1);
      assertNotNull(string1);
  }

  @Test
  public void test297()  throws Throwable  {
      String string0 = " ";
      String string1 = StringUtils.stripToNull(string0);
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull(string1);
      assertNull(string2);
  }

  @Test
  public void test298()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      
      String string1 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string1);
      assertNotNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      
      String string2 = StringUtils.stripToNull(string1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string2);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
  }

  @Test
  public void test299()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToEmpty(string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test300()  throws Throwable  {
      String string0 = "\"^*8cA%rmTe#";
      String string1 = StringUtils.trimToNull(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("\"^*8cA%rmTe#", string1);
      assertNotNull(string1);
  }

  @Test
  public void test301()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trimToNull(string0);
      assertNull(string1);
  }

  @Test
  public void test302()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.ObjectUtils";
      String string1 = " vs ";
      assertNotSame(string1, string0);
      
      String string2 = StringUtils.strip(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test
  public void test303()  throws Throwable  {
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = "";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0);
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(locale0);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = StringUtils.upperCase(string0, locale0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string2);
      assertNotNull(string2);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string3 = StringUtils.defaultIfBlank(string1, string2);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string3);
      assertNotSame(string1, string3);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertSame(string3, string2);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ABORTING TO PROTECT AGAINST STACKOVERFLOWERROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string3);
      assertNotNull(string3);
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.getLanguage());
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test
  public void test304()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      assertNotNull(sQLRecoverableException0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      String string0 = sQLRecoverableException0.getLocalizedMessage();
      assertNull(string0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) string0);
      assertFalse(boolean0);
      assertNull(sQLRecoverableException0.getMessage());
      assertEquals(0, sQLRecoverableException0.getErrorCode());
      assertNull(sQLRecoverableException0.getSQLState());
      assertEquals("java.sql.SQLRecoverableException", sQLRecoverableException0.toString());
  }

  @Test
  public void test305()  throws Throwable  {
      String string0 = "\\u";
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string0);
      assertTrue(boolean0);
  }

  @Test
  public void test306()  throws Throwable  {
      String string0 = "-U'-U'";
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      ListIterator<CharBuffer> listIterator0 = vector0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(boolean0);
      assertEquals(false, listIterator0.hasNext());
      assertEquals(false, listIterator0.hasPrevious());
      assertEquals(-1, listIterator0.previousIndex());
      assertEquals(0, listIterator0.nextIndex());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
  }

  @Test
  public void test307()  throws Throwable  {
      String string0 = "YlM]ek\\+-";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("YlM]ek\\+-", string1);
      assertNotNull(string1);
      
      char char0 = '!';
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) string1, (CharSequence) string1, (int) char0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals((-1), int0);
  }

  @Test
  public void test308()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, int0);
  }

  @Test
  public void test309()  throws Throwable  {
      String string0 = ";dATa";
      int int0 = 10;
      String string1 = StringUtils.center(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("  ;dATa   ", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(stringArray0);
  }

  @Test
  public void test310()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replaceChars(string0, string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = (-69);
      int int1 = StringUtils.ordinalIndexOf((CharSequence) string1, (CharSequence) string0, int0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test
  public void test311()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, string0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test312()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
  }

  @Test
  public void test313()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.replaceEach(stringArray0[0], stringArray0, stringArray0);
      assertNull(string0);
  }

  @Test
  public void test314()  throws Throwable  {
      String string0 = "";
      char char0 = '3';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(string0, char0);
      assertNotNull(stringArray0);
  }

  @Test
  public void test315()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.stripAccents(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("", string1);
      assertNotNull(string1);
      
      char char0 = '3';
      String string2 = StringUtils.reverseDelimited(string1, char0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test316()  throws Throwable  {
      String string0 = "/3=[#^<{>|RPTg|(L6";
      String string1 = StringUtils.removeEnd(string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 0;
      int int1 = StringUtils.indexOf((CharSequence) string1, int0, int0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.rightPad(string1, int1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(int0 == int1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test
  public void test317()  throws Throwable  {
      String string0 = "java.text.Nor>alizer$Form";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) string0, charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test318()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      char char0 = 'g';
      String string0 = StringUtils.join(objectArray0, char0);
      assertEquals("ggg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test319()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replace(string0, string0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray1, stringArray0);
      assertSame(string0, string1);
      assertSame(stringArray0, stringArray1);
      assertSame(string1, string0);
      assertNotNull(stringArray1);
  }
}
