/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:12:42 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityEscaper;
import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.apache.commons.lang3.text.translate.UnicodeUnescaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class CharSequenceTranslatorEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      int int0 = 0;
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(int0, int0);
      assertNotNull(unicodeEscaper0);
      
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      String string1 = unicodeEscaper0.translate((CharSequence) string0);
      assertEquals("0", string1);
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test
  public void test1()  throws Throwable  {
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      int int0 = 0;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      CharSequence charSequence0 = null;
      unicodeUnescaper0.translate(charSequence0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test
  public void test2()  throws Throwable  {
      int int0 = 388;
      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper();
      assertNotNull(unicodeEscaper0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertEquals(388, charBuffer0.limit());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(388, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(388, charBuffer0.remaining());
      assertEquals(388, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        unicodeEscaper0.translate((CharSequence) charBuffer0, writer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test3()  throws Throwable  {
      int int0 = 0;
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(int0, int0);
      assertNotNull(unicodeEscaper0);
      
      CharSequence charSequence0 = null;
      String string0 = unicodeEscaper0.translate(charSequence0);
      assertNull(string0);
  }

  @Test
  public void test4()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[9];
      int int0 = 2371;
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.below(int0);
      assertNotNull(numericEntityEscaper0);
      
      AggregateTranslator aggregateTranslator0 = (AggregateTranslator)numericEntityEscaper0.with(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
  }

  @Test
  public void test5()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[9];
      UnicodeUnescaper unicodeUnescaper0 = new UnicodeUnescaper();
      assertNotNull(unicodeUnescaper0);
      
      charSequenceTranslatorArray0[0] = (CharSequenceTranslator) unicodeUnescaper0;
      assertNotNull(charSequenceTranslatorArray0[0]);
      
      NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[4];
      NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.errorIfNoSemiColon;
      numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0;
      assertEquals(2, numericEntityUnescaper_OPTIONArray0[0].ordinal());
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[0].toString());
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[0].name());
      
      numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTION0;
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[1].name());
      assertEquals(2, numericEntityUnescaper_OPTIONArray0[1].ordinal());
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[1].toString());
      
      numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTIONArray0[0];
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[2].toString());
      assertEquals(2, numericEntityUnescaper_OPTIONArray0[2].ordinal());
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[2].name());
      
      numericEntityUnescaper_OPTIONArray0[3] = numericEntityUnescaper_OPTION0;
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[3].toString());
      assertEquals("errorIfNoSemiColon", numericEntityUnescaper_OPTIONArray0[3].name());
      assertEquals(2, numericEntityUnescaper_OPTIONArray0[3].ordinal());
      
      NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0);
      assertNotNull(numericEntityUnescaper0);
      
      charSequenceTranslatorArray0[1] = (CharSequenceTranslator) numericEntityUnescaper0;
      assertNotNull(charSequenceTranslatorArray0[1]);
      
      int int0 = 2371;
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.below(int0);
      assertNotNull(unicodeEscaper0);
      
      charSequenceTranslatorArray0[2] = (CharSequenceTranslator) unicodeEscaper0;
      assertNotNull(charSequenceTranslatorArray0[2]);
      
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(2371, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2371 cap=2371]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(2371, byteBuffer0.remaining());
      assertEquals(2371, byteBuffer0.capacity());
      assertNotNull(byteBuffer0);
      
      ByteOrder byteOrder0 = byteBuffer0.order();
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(2371, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2371 cap=2371]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(2371, byteBuffer0.remaining());
      assertEquals(2371, byteBuffer0.capacity());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      String string0 = byteOrder0.toString();
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(2371, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2371 cap=2371]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(2371, byteBuffer0.remaining());
      assertEquals(2371, byteBuffer0.capacity());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("BIG_ENDIAN", string0);
      assertNotNull(string0);
      
      String string1 = aggregateTranslator0.translate((CharSequence) string0);
      assertEquals(false, byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(true, byteBuffer0.hasRemaining());
      assertEquals(false, byteBuffer0.isDirect());
      assertEquals(2371, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2371 cap=2371]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(true, byteBuffer0.hasArray());
      assertEquals(2371, byteBuffer0.remaining());
      assertEquals(2371, byteBuffer0.capacity());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals("\\u0042\\u0049\\u0047\\u005F\\u0045\\u004E\\u0044\\u0049\\u0041\\u004E", string1);
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
