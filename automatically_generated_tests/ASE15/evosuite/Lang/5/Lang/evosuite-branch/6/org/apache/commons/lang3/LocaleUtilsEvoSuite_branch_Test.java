/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:23:28 GMT 2014
 */

package org.apache.commons.lang3;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang3.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class LocaleUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "5T&Yij<";
      List<Locale> list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = null;
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "5T&Yij<";
      List<Locale> list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertTrue(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "CJ";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("cj", locale0.getLanguage());
      assertEquals("CJ", locale0.getCountry());
      assertEquals("CJ", locale0.getVariant());
      assertEquals("cj_CJ_CJ", locale0.toString());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("cj", locale0.getLanguage());
      assertEquals("CJ", locale0.getCountry());
      assertEquals("CJ", locale0.getVariant());
      assertEquals("cj_CJ_CJ", locale0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale1, locale0);
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(list0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "CJ";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("cj", locale0.getLanguage());
      assertEquals("CJ", locale0.getVariant());
      assertEquals("CJ", locale0.getCountry());
      assertEquals("cj_CJ_CJ", locale0.toString());
      assertNotNull(locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals("cj", locale0.getLanguage());
      assertEquals("CJ", locale0.getVariant());
      assertEquals("CJ", locale0.getCountry());
      assertEquals("cj_CJ_CJ", locale0.toString());
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test08()  throws Throwable  {
      Locale locale0 = null;
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "gx_PL_+F\\K[~x%gG~Yi";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("gx_PL_+F\\K[~x%gG~Yi", locale0.toString());
      assertEquals("+F\\K[~x%gG~Yi", locale0.getVariant());
      assertEquals("PL", locale0.getCountry());
      assertEquals("gx", locale0.getLanguage());
      assertEquals("POL", locale0.getISO3Country());
      assertNotNull(locale0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "gx_MF=^\\KqP[G%wgSRYi";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gx_MF=^\\KqP[G%wgSRYi
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "vx_MtKXGZiRi";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: vx_MtKXGZiRi
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "gx_^av\\?4G+Y'i";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gx_^av\\?4G+Y'i
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "gx_>P}LF>[~(%w'w~";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: gx_>P}LF>[~(%w'w~
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "aja_\\'Km5wZ0 `-xF";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: aja_\\'Km5wZ0 `-xF
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "k{";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: k{
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "pJG<5P_";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: pJG<5P_
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "}QS:zX?4EB\\K";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: }QS:zX?4EB\\K
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "(vThyonztHSLat?";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: (vThyonztHSLat?
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "il_W>,\\a^S0:";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: il_W>,\\a^S0:
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "el";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("el", locale0.toString());
      assertEquals("el", locale0.getLanguage());
      assertEquals("ell", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
  }

  @Test
  public void test23()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = locale0.toString();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", string0);
      assertNotNull(string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(locale1);
  }

  @Test
  public void test24()  throws Throwable  {
      Set<Locale> set0 = LocaleUtils.availableLocaleSet();
      assertEquals(false, set0.isEmpty());
      assertEquals(156, set0.size());
      assertNotNull(set0);
  }

  @Test
  public void test25()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }

  @Test
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      List<Locale> list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(list0);
  }

  @Test
  public void test27()  throws Throwable  {
      LocaleUtils.SyncAvoid localeUtils_SyncAvoid0 = new LocaleUtils.SyncAvoid();
      assertNotNull(localeUtils_SyncAvoid0);
  }
}
