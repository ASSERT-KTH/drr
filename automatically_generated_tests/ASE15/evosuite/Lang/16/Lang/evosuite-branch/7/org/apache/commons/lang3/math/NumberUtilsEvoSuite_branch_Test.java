/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:51:32 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "--0X0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "+3:(>iTF6ar<";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "EH,oc";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "e2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x0x-@0x;|n";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-0xeD";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x-@0x;|n";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "1D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "I";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0XD:f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "-0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)58;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)58, byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-78);
      byte byte2 = NumberUtils.max(byte1, byte0, byte1);
      assertEquals((byte)0, byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short) (-1905);
      short short1 = (short)2638;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)2638, short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short) (-1905);
      short short1 = (short) (-478);
      short short2 = NumberUtils.min(short1, short0, short0);
      assertEquals((short) (-1905), short2);
      assertFalse(short1 == short0);
      assertFalse(short1 == short2);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      
      short short3 = NumberUtils.max(short0, short1, short2);
      assertEquals((short) (-478), short3);
      assertFalse(short1 == short0);
      assertFalse(short1 == short2);
      assertTrue(short1 == short3);
      assertTrue(short3 == short1);
      assertFalse(short3 == short2);
      assertFalse(short3 == short0);
      assertFalse(short2 == short1);
      assertFalse(short2 == short3);
      assertTrue(short2 == short0);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertFalse(short0 == short3);
  }

  @Test
  public void test025()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 3810;
      intArray0[0] = int0;
      int int1 = 3272;
      int int2 = NumberUtils.max(intArray0[2], int1, intArray0[0]);
      assertArrayEquals(new int[] {3810, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(3810, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = (-2906);
      int int1 = 0;
      int int2 = NumberUtils.max(int0, int1, int1);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test
  public void test027()  throws Throwable  {
      int int0 = 1153;
      int int1 = NumberUtils.max(int0, int0, int0);
      assertEquals(1153, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)7;
      String string0 = "";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      long long0 = NumberUtils.max((long) byteArray0[2], (long) short0, (long) byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      short short0 = (short) (-2044);
      short short1 = (short)0;
      long long0 = NumberUtils.max((long) short0, (long) short1, (long) short0);
      assertEquals(0L, long0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte)57;
      byte byte1 = (byte) (-56);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-56), byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)57;
      byte byte1 = (byte)2;
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertEquals((byte)2, byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
  }

  @Test
  public void test032()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-1);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertEquals((short) (-1), short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
  }

  @Test
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = 3810;
      intArray0[0] = int0;
      intArray0[1] = intArray0[0];
      int int1 = NumberUtils.min(intArray0[1], intArray0[1], intArray0[5]);
      assertArrayEquals(new int[] {3810, 3810, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      int int0 = (-780);
      int int1 = NumberUtils.min((int) byte0, int0, (int) byte0);
      assertEquals((-780), int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      int int1 = NumberUtils.min(int0, int0, int0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
  }

  @Test
  public void test036()  throws Throwable  {
      long long0 = 3L;
      long long1 = (-3592L);
      long long2 = NumberUtils.min(long0, long0, long1);
      assertEquals((-3592L), long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
  }

  @Test
  public void test037()  throws Throwable  {
      long long0 = 1L;
      long long1 = 0L;
      long long2 = NumberUtils.min(long0, long1, long0);
      assertEquals(0L, long2);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = 2030.12F;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2030.12F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2030.12F, float1, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      short short0 = (short) (-2502);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) short0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {(-2502.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)7;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)7, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)7, byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)32;
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)32, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)32, short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = (-207);
      int[] intArray0 = new int[7];
      intArray0[0] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {(-207), 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test047()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      short short0 = (short) (-2044);
      long[] longArray0 = new long[8];
      longArray0[0] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-2044L), 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test049()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "[f^{n=$jMe.F";
      short short0 = (short)46;
      short short1 = NumberUtils.toShort(string0, short0);
      assertEquals((short)46, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      
      float[] floatArray0 = new float[22];
      floatArray0[0] = (float) short1;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {46.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float float0 = Float.NaN;
      float[] floatArray0 = new float[5];
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
  }

  @Test
  public void test052()  throws Throwable  {
      double double0 = (-3334.9042738251);
      double[] doubleArray0 = new double[10];
      doubleArray0[4] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-3334.9042738251), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-3334.9042738251), double1, 0.01D);
      assertTrue(double1 == double0);
  }

  @Test
  public void test053()  throws Throwable  {
      double[] doubleArray0 = new double[20];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-7);
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-7), (byte)0}, byteArray0);
      assertEquals((byte) (-7), byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test056()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short)32;
      shortArray0[3] = short0;
      shortArray0[0] = shortArray0[3];
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)0, (short)32, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test057()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      int[] intArray0 = new int[8];
      byte byte0 = (byte)57;
      intArray0[0] = (int) byte0;
      int int0 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {57, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test059()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = (-1951L);
      longArray0[1] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, (-1951L), 0L, 0L, 0L}, longArray0);
      assertEquals((-1951L), long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test061()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = "D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = "eDI7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "-<2V0m\\l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -<2V0m\\l is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "The Arra! must no2 be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Arra! must no2 be null is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "7/\\OVcs.=Q}\\L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7/\\OVcs.=Q}\\L is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "5{s\\awl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5{s\\awl is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "qD:f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // qD:f is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "-0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "\\rF$d,[F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // \\rF$d,[F is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "1D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(1.0, (double)double0, 0.01D);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "Ph|u8VMwby \\Dz}]E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Ph|u8VMwby \\Dz}]E is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "{9qmB,sEeU";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // {9qmB,sEeU is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "81+EuxeDI7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "j]%VaLE*`.e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // j]%VaLE*`.e is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "[f^{n=$jMe.F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // [f^{n=$jMe.F is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "java.text.Normalizer is not available";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // java.text.Normalizer is not available is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "#Qd";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // #Qd is not a valid number.
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0XeD";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals((-237), (int)integer0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "-0xeD";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals((-237), (int)integer0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "0x-@0x;|n";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "--0X0";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "0.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      short short0 = (short)256;
      short short1 = NumberUtils.toShort(string0, short0);
      assertEquals((short)256, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "-0xeD";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test095()  throws Throwable  {
      short[] shortArray0 = new short[9];
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) shortArray0[3]);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "[f^{n=$jMe.F";
      short short0 = (short)46;
      float float0 = NumberUtils.toFloat(string0, (float) short0);
      assertEquals(46.0F, float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      short short0 = (short) (-595);
      String string0 = "dy2Yc9}\"JfkIs";
      int int0 = NumberUtils.toInt(string0, (int) short0);
      assertEquals((-595), int0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = ":dcG J";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      float[] floatArray0 = new float[9];
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      float float0 = NumberUtils.max(floatArray0[2], floatArray0[0], (float) byte0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test102()  throws Throwable  {
      long long0 = 0L;
      float float0 = NumberUtils.min((float) long0, (float) long0, (float) long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[9];
      double double0 = NumberUtils.min((double) floatArray0[0], (double) floatArray0[0], (double) floatArray0[0]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test105()  throws Throwable  {
      long long0 = 0L;
      double double0 = NumberUtils.max((double) long0, (double) long0, (double) long0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
