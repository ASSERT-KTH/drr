/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:34 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "2l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "2.l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = ".f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "07";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "--w(Lp[<L*1'Z].c";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "+d'1e>Q;_C";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "E0;^j>$kt_Q";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0xeq1C>wIuxf1*";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0x8r.J<}/?E=";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0xE";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-0x.f5,NUhGeqgG$RIt[";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = ".4F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "-0eJ";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)70;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)70, byte2);
  }

  @Test
  public void test025()  throws Throwable  {
      byte byte0 = (byte) (-81);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short) (-1004);
      short short1 = (short)0;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short)0, short2);
  }

  @Test
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-11);
      short short1 = NumberUtils.max(short0, shortArray0[0], shortArray0[2]);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test028()  throws Throwable  {
      int int0 = (-4518);
      int int1 = (-12);
      int int2 = NumberUtils.max(int0, int0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-12), int2);
  }

  @Test
  public void test029()  throws Throwable  {
      int int0 = 1717;
      int int1 = (-2676);
      int int2 = NumberUtils.max(int1, int0, int1);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(1717, int2);
  }

  @Test
  public void test030()  throws Throwable  {
      int int0 = (-21);
      long long0 = (-1480L);
      long long1 = NumberUtils.max(long0, long0, (long) int0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-21L), long1);
  }

  @Test
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-59);
      long long0 = NumberUtils.max((long) byte0, (long) byteArray0[2], (long) byteArray0[1]);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)46;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      byte byte0 = (byte)6;
      byte byte1 = (byte)5;
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte)5, byte2);
      
      short short0 = NumberUtils.min((short) byte0, (short) byte0, (short) byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((short)5, short0);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)6;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)6, byte1);
      
      short short0 = (short)1073;
      short short1 = NumberUtils.min(short0, (short) byte0, (short) byte1);
      assertTrue(byte0 == byte1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertTrue(byte1 == byte0);
      assertEquals((short)6, short1);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 2372;
      int int1 = (-161);
      int int2 = NumberUtils.min(int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-161), int2);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 2372;
      int int1 = 1018;
      int int2 = NumberUtils.min(int0, int1, int0);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(1018, int2);
  }

  @Test
  public void test037()  throws Throwable  {
      byte byte0 = (byte) (-1);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) byte0;
      int int0 = 0;
      long long0 = NumberUtils.min((long) intArray0[2], (long) int0, (long) intArray0[0]);
      assertEquals((-1L), long0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test038()  throws Throwable  {
      short[] shortArray0 = new short[3];
      long long0 = 23L;
      long long1 = NumberUtils.min(long0, (long) shortArray0[1], (long) shortArray0[1]);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[5];
      int int0 = 2372;
      floatArray0[2] = (float) int0;
      float float0 = NumberUtils.max(floatArray0);
      assertEquals(2372.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 2372.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 180.88;
      doubleArray0[1] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals(180.88, double1, 0.01D);
      assertArrayEquals(new double[] {0.0, 180.88, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[6] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)122;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)122, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)122, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      byte byte0 = (byte)6;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)6, byte1);
      
      short[] shortArray0 = new short[5];
      shortArray0[1] = (short) byte1;
      short short0 = NumberUtils.max(shortArray0);
      assertEquals((short)6, short0);
      assertArrayEquals(new short[] {(short)0, (short)6, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test047()  throws Throwable  {
      byte byte0 = (byte) (-1);
      int[] intArray0 = new int[7];
      intArray0[0] = (int) byte0;
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {(-1), 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      short short0 = (short)8192;
      long[] longArray0 = new long[10];
      longArray0[5] = (long) short0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(8192L, long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 8192L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[27];
      double double0 = (-585.90449);
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      assertTrue(double1 == double0);
      assertEquals((-585.90449), double1, 0.01D);
      assertArrayEquals(new double[] {0.0, (-585.90449), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = Double.NaN;
      doubleArray0[1] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)97;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)97, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      short[] shortArray0 = new short[3];
      short short0 = (short) (-11);
      shortArray0[2] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short) (-11), short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-11)}, shortArray0);
  }

  @Test
  public void test059()  throws Throwable  {
      short short0 = (short)5;
      int[] intArray0 = new int[2];
      intArray0[0] = (int) short0;
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {5, 0}, intArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = NumberUtils.min(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test062()  throws Throwable  {
      byte byte0 = (byte) (-13);
      long[] longArray0 = new long[4];
      longArray0[1] = (long) byte0;
      long long0 = NumberUtils.min(longArray0);
      assertEquals((-13L), long0);
      assertArrayEquals(new long[] {0L, (-13L), 0L, 0L}, longArray0);
  }

  @Test
  public void test063()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "n7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n7\"
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "Strings must not be nuwl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be nuwl is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "0}s*R6>sFpo|l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0}s*R6>sFpo|l is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "IllegalAccessException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IllegalAccessException occurred is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "vNM*@nL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // vNM*@nL is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = ".4F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.4F, (float)float0, 0.01F);
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "0.A";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0.A is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "0.A.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "7UOFvY4$E*-_'H;eZ<$";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 7UOFvY4$E*-_'H;eZ<$ is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "0|I\"[dc)R>JNO-Y@O)f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0|I\"[dc)R>JNO-Y@O)f is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = ".MO;T/|S`eHJ1S3/:";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .MO;T/|S`eHJ1S3/: is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = ".4";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.4F, (float)float0, 0.01F);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "_O*UCT:ELdCc54";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0Xw(Lp[<L*1'Z].c";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-w(Lp[<L*1'Z].c\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "-0x]}L:;EadHW/a";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-]}L:;EadHW/a\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "0xE";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(14, (int)integer0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "--.f5,NUhGeqgGRIt[";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "0x8r.J<}/?E=";
      byte byte0 = (byte)6;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)6, byte1);
      
      short short0 = NumberUtils.toShort(string0, (short) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((short)6, short0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-81);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-81), byte1);
  }

  @Test
  public void test095()  throws Throwable  {
      byte byte0 = (byte) (-43);
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) byte0);
      assertEquals((-43.0), double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      byte byte0 = (byte)2;
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) byte0);
      assertEquals(2.0F, float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      byte byte0 = (byte)2;
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) byte0);
      assertEquals(2, int0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "0x8r.J<}/?E=";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      float float0 = NumberUtils.max((float) short0, (float) short0, (float) short0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "-";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "--.f5,NUhGeqgGRIt[";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test103()  throws Throwable  {
      int int0 = (-4518);
      int int1 = NumberUtils.max(int0, int0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-4518), int1);
      
      float float0 = NumberUtils.min((float) int1, (float) int1, (float) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals((-4518.0F), float0, 0.01F);
  }

  @Test
  public void test104()  throws Throwable  {
      float float0 = (-0.96442634F);
      short short0 = (short)8192;
      double double0 = NumberUtils.min((double) short0, (double) float0, (double) short0);
      assertEquals((-0.9644263386726379), double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = (-116.20923);
      double double1 = NumberUtils.max(double0, double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-116.20923), double1, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "-0eJ";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "-0eJ";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
