/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:12:41 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "t";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "6L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "--E7$_n^EVyS 3h3=S]2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "4E=zJDiux(kbTsZ}v";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "et B6y~3n'VBS";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "1...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = ".l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "+7f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0xorg.apache.commons.lang3.math.NumberUtils";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0xE7$_n^EVyS 3h3=S]2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0xD";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "0";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-48);
      byte byte1 = (byte) (-7);
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte) (-7), byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      byte byte0 = (byte)96;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte)96, byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      byte byte2 = (byte)0;
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.max(byte2, byte1, byte0);
      assertEquals((byte)96, byte3);
      assertTrue(byte3 == byte0);
      assertFalse(byte3 == byte2);
      assertTrue(byte3 == byte1);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte1 == byte3);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte3);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)2595;
      short short1 = (short)2;
      short short2 = (short)32;
      short short3 = NumberUtils.max(short1, short2, short0);
      assertEquals((short)2595, short3);
      assertFalse(short2 == short3);
      assertFalse(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short3 == short1);
      assertTrue(short3 == short0);
      assertFalse(short3 == short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short0 == short3);
      assertFalse(short1 == short0);
      assertFalse(short1 == short3);
      assertFalse(short1 == short2);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)2595;
      short short1 = (short)2;
      short short2 = NumberUtils.max(short1, short0, short0);
      assertEquals((short)2595, short2);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
      assertTrue(short0 == short2);
      assertFalse(short0 == short1);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short)85;
      byte byte0 = (byte) (-121);
      short short1 = NumberUtils.max(short0, short0, (short) byte0);
      assertEquals((short)85, short1);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
  }

  @Test
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 63;
      byte byte0 = (byte) (-67);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertEquals((byte) (-67), byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      
      int int1 = NumberUtils.max((int) byte1, intArray0[0], int0);
      assertEquals(63, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = NumberUtils.max((int) byte0, (int) byte0, (int) byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test029()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      long long0 = 382L;
      long long1 = NumberUtils.max((long) intArray0[5], (long) int0, long0);
      assertEquals(382L, long1);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)3474;
      short short1 = (short)351;
      long long0 = NumberUtils.max((long) short1, (long) short0, (long) short1);
      assertEquals(3474L, long0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)97;
      byte byte1 = (byte) (-110);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte) (-110), byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-45);
      byte byte2 = NumberUtils.min(byte0, byte1, byte0);
      assertEquals((byte) (-45), byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short)3498;
      short short1 = (short)1835;
      short short2 = NumberUtils.min(short0, short0, short1);
      assertEquals((short)1835, short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
  }

  @Test
  public void test034()  throws Throwable  {
      short short0 = (short)85;
      short short1 = (short)13;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertEquals((short)13, short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
  }

  @Test
  public void test035()  throws Throwable  {
      byte byte0 = (byte)17;
      int int0 = 1701;
      int int1 = NumberUtils.min(int0, int0, (int) byte0);
      assertEquals(17, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test036()  throws Throwable  {
      short short0 = (short)65;
      short short1 = (short)53;
      int int0 = NumberUtils.min((int) short0, (int) short1, (int) short0);
      assertEquals(53, int0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test037()  throws Throwable  {
      long long0 = 0L;
      long long1 = (-1L);
      long long2 = NumberUtils.min(long0, long0, long1);
      assertEquals((-1L), long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
  }

  @Test
  public void test038()  throws Throwable  {
      String string0 = "5rJv\"q01;TM";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = (short)554;
      assertFalse(short1 == short0);
      
      long long0 = NumberUtils.min((long) short1, (long) short0, (long) short0);
      assertEquals(0L, long0);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-1.0F);
      floatArray0[0] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      assertArrayEquals(new float[] {(-1.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[6] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 3151.211058150863;
      doubleArray0[0] = double0;
      double double1 = (-3103.19301790417);
      doubleArray0[0] = double1;
      double double2 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double2, 0.01D);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertArrayEquals(new double[] {(-3103.19301790417), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[3] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test044()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)2;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)2, byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)2}, byteArray0);
  }

  @Test
  public void test046()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = new short[19];
      short short0 = (short) (-750);
      shortArray0[0] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short) (-750), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test048()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 134;
      intArray0[1] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertEquals(134, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 134, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test050()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = 1L;
      longArray0[4] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertEquals(1L, long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 1L, 0L}, longArray0);
  }

  @Test
  public void test052()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float float0 = (-1.0F);
      floatArray0[2] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1.0F), 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = (-72L);
      longArray0[0] = long0;
      double[] doubleArray0 = new double[22];
      doubleArray0[21] = (double) longArray0[0];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals((-72.0), double0, 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (-72.0)}, doubleArray0, 0.01);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[29];
      byte byte0 = (byte) (-55);
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte) (-55), byte1);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-55), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)13;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short1);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short)13, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test060()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 63;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {63, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test062()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = (-72L);
      longArray0[1] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertEquals((-72L), long1);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, (-72L)}, longArray0);
  }

  @Test
  public void test064()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.min(longArray0);
      assertEquals(0L, long0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "N!q7#b5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N!q7#b5\"
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "0f";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "0tri,gs must nox b null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 0tri,gs must nox b null is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "+7f";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(7.0F, (float)float0, 0.01F);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "'(>}=F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // '(>}=F is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // D is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "I2Xiev?5<_oE}_LZ+";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // I2Xiev?5<_oE}_LZ+ is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "E7";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "IllegalAccessExceVtion occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // IllegalAccessExceVtion occurred is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang3.math.NumberUtils is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "-Sx-0Xorg.apache.+ommons.lang3.maEh.NumbrUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // -Sx-0Xorg.apache.+ommons.lang3.maEh.NumbrUtils is not a valid number.
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "1.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "ArrayBcannot be empty.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ArrayBcannot be empty. is not a valid number.
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0Xorg.apache.commons.lang3.math.NumberUtils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-org.apache.commons.lang3.math.NumberUtils\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0XIT`#fR";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"IT`#fR\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "-0x|'+.(>}=F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-|'+.(>}=F\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "0x|&p[&%";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"|&p[&%\"
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "--Stringsmust not be null";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "*#wN7L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // *#wN7L is not a valid number.
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      byte byte0 = (byte) (-121);
      String string0 = null;
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short) (-121), short0);
  }

  @Test
  public void test094()  throws Throwable  {
      byte byte0 = (byte)0;
      String string0 = null;
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertEquals((byte)0, byte1);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test097()  throws Throwable  {
      byte byte0 = (byte)83;
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) byte0);
      assertEquals(83L, long0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test100()  throws Throwable  {
      short short0 = (short) (-342);
      float float0 = NumberUtils.max((float) short0, (float) short0, (float) short0);
      assertEquals((-342.0F), float0, 0.01F);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "-";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "0xE7$_n^EVyS 3h3=S]2";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test103()  throws Throwable  {
      long[] longArray0 = new long[10];
      short short0 = (short) (-342);
      float float0 = NumberUtils.min((float) short0, (float) longArray0[2], (float) short0);
      assertEquals((-342.0F), float0, 0.01F);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      byte byte0 = (byte)96;
      double double0 = NumberUtils.min((double) int0, (double) byte0, (double) byte0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test105()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is 7";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      double double0 = NumberUtils.max((double) int0, (double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "+7f";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(7.0F, float0, 0.01F);
  }
}
