/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:22:32 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "0L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "6D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "-0";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = ".dP_\\hC8}GA\"xUU$";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "+b*Z\"";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "e:ZR7`Z1M>";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0Ef";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0xhe Arraymust nt be null";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0xfEB;- ?.t1*#5duL3&e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x0!TrnRCc_2FMR;'HtP";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "0x6D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "--8{og#V)";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte)23;
      byte byte1 = (byte)107;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)107, byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-126);
      byte byte1 = (byte)77;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)77, byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      String string0 = "h";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)102;
      short short1 = (short) (-119);
      short short2 = NumberUtils.max(short1, short1, short0);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertTrue(short2 == short0);
      assertFalse(short2 == short1);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)102, short2);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short) (-2041);
      short short1 = (short)0;
      short short2 = NumberUtils.max(short0, short1, short0);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertEquals((short)0, short2);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte)32;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)32, byte1);
      
      short short0 = NumberUtils.max((short) byte0, (short) byte1, (short) byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((short)32, short0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)23;
      byte byte1 = (byte)107;
      int int0 = NumberUtils.max((int) byte0, (int) byte1, (int) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(107, int0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "h";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      long long0 = 712L;
      long long1 = NumberUtils.max((long) byte0, (long) byte0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals(712L, long1);
  }

  @Test
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[1];
      long long0 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(0L, long0);
      
      int int0 = 1;
      long long1 = NumberUtils.max(long0, (long) int0, long0);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(1L, long1);
  }

  @Test
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte)119;
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.min(byte1, byte1, byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte1);
      assertTrue(byte2 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte)119;
      assertFalse(byte1 == byte0);
      
      byte byte2 = NumberUtils.min(byte1, byte0, byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)100;
      short short0 = NumberUtils.min((short) byte1, (short) byte1, (short) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((short)0, short0);
  }

  @Test
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      short short0 = (short) (-316);
      short short1 = NumberUtils.min((short) byte0, short0, short0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short) (-316), short1);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)0;
      int int0 = (-702);
      int int1 = NumberUtils.min((int) byte0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-702), int1);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 941;
      byte byte0 = (byte)4;
      int int1 = NumberUtils.min(int0, int0, (int) byte0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = (-3370);
      int int1 = 0;
      int int2 = NumberUtils.max(int1, int0, int1);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, int2);
      
      long long0 = NumberUtils.min((long) int2, (long) int2, (long) int0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals((-3370L), long0);
  }

  @Test
  public void test037()  throws Throwable  {
      int int0 = (-3370);
      int int1 = 0;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
      
      long long0 = NumberUtils.min((long) int2, (long) int0, (long) int1);
      assertTrue(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals((-3370L), long0);
  }

  @Test
  public void test038()  throws Throwable  {
      float float0 = 179.6776F;
      float[] floatArray0 = new float[9];
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 179.6776F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
      assertEquals(179.6776F, float1, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[9];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      short short0 = (short)1887;
      double[] doubleArray0 = new double[6];
      doubleArray0[2] = (double) short0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 1887.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1887.0, double0, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)79;
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)79, byte1);
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[23];
      short short0 = (short)7;
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)7, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)7, short1);
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 1332;
      intArray0[4] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 1332, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(1332, int1);
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-28);
      intArray0[2] = int0;
      long[] longArray0 = new long[7];
      longArray0[0] = (long) intArray0[2];
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-28L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[0] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertFalse(float1 == float0);
      //  // Unstable assertion: assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte) (-109);
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (double) byte0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-109.0), 0.0}, doubleArray0, 0.01);
      assertEquals((-109.0), double0, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte) (-107);
      byteArray0[5] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte) (-107), (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-107), byte1);
  }

  @Test
  public void test057()  throws Throwable  {
      byte byte0 = (byte)32;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte)32, byte1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) byte1;
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)32, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test058()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-28);
      intArray0[2] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, 0, (-28), 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-28), int1);
  }

  @Test
  public void test060()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      byte byte0 = (byte) (-89);
      long[] longArray0 = new long[7];
      longArray0[3] = (long) byte0;
      long long0 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, (-89L), 0L, 0L, 0L}, longArray0);
      assertEquals((-89L), long0);
  }

  @Test
  public void test062()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      int int0 = (-3370);
      int int1 = 0;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
      
      String string0 = Double.toString((double) int2);
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals("0.0", string0);
      
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "'-Q|]?d62";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Illegal embedded sign character
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = ",^(xn6qd?9R5w%l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ,^(xn6qd?9R5w%l is not a valid number.
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "StrQngs mst not be nll";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // StrQngs mst not be nll is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // f is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = ")nUxd";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )nUxd is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "6D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(6.0, (double)double0, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "V}j\"0Y1E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // V}j\"0Y1E is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "E2d~_5";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "sun.text.Nomalizer is not availabl";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // sun.text.Nomalizer is not availabl is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "fEB;- ?.tj*#5duL3&e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // fEB;- ?.tj*#5duL3&e is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = ".5";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(0.5F, (float)float0, 0.01F);
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "-0X]:D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-]:D\"
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "0X+2:JGj]mZR";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Sign character in wrong position
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test087() {}
//   @Test
//   public void test087()  throws Throwable  {
//       String string0 = "--0Xs+2:JGj]mZR";
//       Number number0 = NumberUtils.createNumber(string0);
//       assertNull(number0);
//   }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "0L";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(0L, (long)long0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      short short0 = NumberUtils.toShort(string0, (short) byte0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test094()  throws Throwable  {
      int int0 = (-3370);
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) int0);
      assertEquals((-3370L), long0);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "h";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "h";
      float float0 = 4013.153F;
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      float float1 = NumberUtils.max(float0, (float) byte0, (float) byte0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(4013.153F, float1, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = " ";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      double double0 = NumberUtils.min((double) byte0, (double) byte0, (double) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = " ";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test103()  throws Throwable  {
      int int0 = (-3370);
      int int1 = NumberUtils.max(int0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-3370), int1);
      
      double double0 = NumberUtils.max((double) int1, (double) int1, (double) int1);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-3370.0), double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "-0xStrings must not be nul^";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "h";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
