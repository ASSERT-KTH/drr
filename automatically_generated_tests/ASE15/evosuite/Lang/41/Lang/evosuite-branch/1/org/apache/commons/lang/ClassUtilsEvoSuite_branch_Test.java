/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:53:54 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.lang.reflect.Array;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.ClassUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockNullPointerException;
import org.junit.runner.RunWith;

 
public class ClassUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "[J";
      String string1 = ClassUtils.getShortCanonicalName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("long[]", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "[L";
      String string1 = ClassUtils.getPackageCanonicalName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test02()  throws Throwable  {
      Class<Short> class0 = null;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "org.apache.commons.lang.builder.ToStringStyle$DefaultToStringStyle";
      Long long0 = Long.getLong(string0);
      String string1 = ClassUtils.getPackageCanonicalName((Object) long0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang.builder.ToStringStyle$DefaultToStringStyle", string1);
  }

  @Test
  public void test04()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      String string0 = ClassUtils.getShortClassName(class0);
      assertNotNull(string0);
      assertEquals("ClassUtils", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = ClassUtils.getPackageCanonicalName(object0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("java.lang", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test05()  throws Throwable  {
      Class<Integer> class0 = null;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test06()  throws Throwable  {
      Class<Long> class0 = Long.class;
      String string0 = ClassUtils.getShortCanonicalName(class0);
      assertNotNull(string0);
      assertEquals("Long", string0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = ";";
      Class<Long> class0 = null;
      String string1 = ClassUtils.getShortCanonicalName((Object) class0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals(";", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "[L";
      String string1 = ClassUtils.getShortCanonicalName((Object) string0, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("String", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test09()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      assertNotNull(objectArray0[0]);
      
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertNotNull(classArray0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "[[L";
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("L[][]", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      Class<String> class0 = String.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      try {
        Class<?> class1 = ClassUtils.getClass(string1, boolean0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class 'L.class' should be in target project, but could not be found!
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try {
        Class<?> class0 = ClassUtils.getClass(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // className must not be null.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "short";
      Class<?> class0 = ClassUtils.getClass(string0);
      assertNotNull(class0);
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isInterface());
      assertEquals(false, class0.isSynthetic());
      assertEquals(false, class0.isEnum());
      assertEquals(true, class0.isPrimitive());
      assertEquals(false, class0.isArray());
      assertEquals("short", class0.toString());
      assertEquals(1041, class0.getModifiers());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "org.apache.commons.lang.builder.ToStringStyle$DefaultToStringStyle";
      Class<?> class0 = ClassUtils.getClass(string0);
      assertNotNull(class0);
      assertEquals(26, class0.getModifiers());
      assertEquals(false, class0.isInterface());
      assertEquals("class org.apache.commons.lang.builder.ToStringStyle$DefaultToStringStyle", class0.toString());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isPrimitive());
      assertEquals(false, class0.isArray());
      assertEquals(false, class0.isEnum());
      assertEquals(false, class0.isSynthetic());
      
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertTrue(boolean0);
      assertEquals(26, class0.getModifiers());
      assertEquals(false, class0.isInterface());
      assertEquals("class org.apache.commons.lang.builder.ToStringStyle$DefaultToStringStyle", class0.toString());
      assertEquals(false, class0.isAnnotation());
      assertEquals(false, class0.isPrimitive());
      assertEquals(false, class0.isArray());
      assertEquals(false, class0.isEnum());
      assertEquals(false, class0.isSynthetic());
  }

  @Test
  public void test14()  throws Throwable  {
      Class<String> class0 = null;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
  }

  @Test
  public void test15()  throws Throwable  {
      Object[] objectArray0 = null;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertNull(classArray0);
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNull(classArray1);
  }

  @Test
  public void test16()  throws Throwable  {
      Class<Object>[] classArray0 = null;
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertNull(classArray1);
  }

  @Test
  public void test17()  throws Throwable  {
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 9);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals("class java.lang.Float", classArray0[0].toString());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isArray());
      
      Class<?>[] classArray1 = ClassUtils.primitivesToWrappers(classArray0);
      assertNotNull(classArray1);
  }

  @Test
  public void test18()  throws Throwable  {
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 2);
      Class<Float> class0 = Float.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals("class java.lang.Float", classArray0[0].toString());
      assertEquals(false, classArray0[0].isArray());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isEnum());
      
      Class<?> class1 = ClassUtils.wrapperToPrimitive(classArray0[0]);
      assertNotNull(class1);
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isArray());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isInterface());
      assertEquals("float", class1.toString());
      assertEquals(1041, class1.getModifiers());
      
      Class<Character> class2 = Character.class;
      Class<?> class3 = ClassUtils.wrapperToPrimitive(class2);
      assertNotSame(class3, class1);
      assertNotNull(class3);
      assertFalse(class3.equals((Object)class1));
      assertEquals(false, class3.isAnnotation());
      assertEquals(false, class3.isInterface());
      assertEquals(false, class3.isArray());
      assertEquals(false, class3.isEnum());
      assertEquals("char", class3.toString());
      assertEquals(true, class3.isPrimitive());
      assertEquals(1041, class3.getModifiers());
      assertEquals(false, class3.isSynthetic());
      
      boolean boolean0 = ClassUtils.isAssignable(class1, class3);
      assertNotSame(class3, class1);
      assertNotSame(class1, class3);
      assertFalse(boolean0);
      assertFalse(class3.equals((Object)class1));
      assertFalse(class1.equals((Object)class3));
      assertEquals(false, class3.isAnnotation());
      assertEquals(false, class3.isInterface());
      assertEquals(false, class3.isArray());
      assertEquals(false, class3.isEnum());
      assertEquals("char", class3.toString());
      assertEquals(true, class3.isPrimitive());
      assertEquals(1041, class3.getModifiers());
      assertEquals(false, class3.isSynthetic());
      assertEquals(false, class1.isSynthetic());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isEnum());
      assertEquals(false, class1.isArray());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isInterface());
      assertEquals("float", class1.toString());
      assertEquals(1041, class1.getModifiers());
  }

  @Test
  public void test19()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtils.isAssignable(class0, class0, boolean0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertNotNull(class2);
      assertEquals("boolean", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertEquals(false, class2.isAnnotation());
      assertEquals(false, class2.isEnum());
      assertEquals(true, class2.isPrimitive());
      assertEquals(false, class2.isSynthetic());
      assertEquals(false, class2.isArray());
      assertEquals(false, class2.isInterface());
      
      Class<Long> class3 = Long.class;
      boolean boolean2 = ClassUtils.isAssignable(class3, class2, boolean1);
      assertFalse(boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean0 == boolean2);
      assertEquals("boolean", class2.toString());
      assertEquals(1041, class2.getModifiers());
      assertEquals(false, class2.isAnnotation());
      assertEquals(false, class2.isEnum());
      assertEquals(true, class2.isPrimitive());
      assertEquals(false, class2.isSynthetic());
      assertEquals(false, class2.isArray());
      assertEquals(false, class2.isInterface());
  }

  @Test
  public void test20()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 1);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals("class java.lang.Boolean", classArray0[0].toString());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(false, classArray0[0].isArray());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean0 = ClassUtils.isAssignable(classArray1, classArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      Class<Long> class0 = Long.class;
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = true;
      boolean boolean1 = ClassUtils.isAssignable(class0, class1, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test22()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<Boolean> class1 = Boolean.class;
      boolean boolean0 = ClassUtils.isInnerClass(class0);
      assertFalse(boolean0);
      
      boolean boolean1 = ClassUtils.isAssignable(class0, class0, boolean0);
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertNotNull(class2);
      assertEquals(false, class2.isInterface());
      assertEquals(false, class2.isSynthetic());
      assertEquals(true, class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertEquals(false, class2.isArray());
      assertEquals(false, class2.isAnnotation());
      assertEquals(false, class2.isEnum());
      assertEquals("boolean", class2.toString());
      
      Class<Object> class3 = Object.class;
      boolean boolean2 = ClassUtils.isAssignable(class3, class2, boolean1);
      assertFalse(boolean2);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(false, class2.isInterface());
      assertEquals(false, class2.isSynthetic());
      assertEquals(true, class2.isPrimitive());
      assertEquals(1041, class2.getModifiers());
      assertEquals(false, class2.isArray());
      assertEquals(false, class2.isAnnotation());
      assertEquals(false, class2.isEnum());
      assertEquals("boolean", class2.toString());
  }

  @Test
  public void test23()  throws Throwable  {
      Class<ClassUtils> class0 = ClassUtils.class;
      Class<ClassUtils>[] classArray0 = (Class<ClassUtils>[]) Array.newInstance(Class.class, 9);
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(1, classArray0[0].getModifiers());
      assertEquals(false, classArray0[0].isArray());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[0].toString());
      assertEquals(false, classArray0[0].isAnnotation());
      
      classArray0[3] = classArray0[0];
      assertNotNull(classArray0[3]);
      assertEquals(false, classArray0[3].isArray());
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[3].toString());
      assertEquals(false, classArray0[3].isAnnotation());
      assertEquals(false, classArray0[3].isPrimitive());
      assertEquals(false, classArray0[3].isEnum());
      assertEquals(false, classArray0[3].isSynthetic());
      assertEquals(1, classArray0[3].getModifiers());
      assertEquals(false, classArray0[3].isInterface());
      
      classArray0[4] = class0;
      assertNotNull(classArray0[4]);
      assertEquals(false, classArray0[4].isInterface());
      assertEquals(false, classArray0[4].isPrimitive());
      assertEquals(false, classArray0[4].isEnum());
      assertEquals(false, classArray0[4].isArray());
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[4].toString());
      assertEquals(false, classArray0[4].isSynthetic());
      assertEquals(1, classArray0[4].getModifiers());
      assertEquals(false, classArray0[4].isAnnotation());
      
      classArray0[5] = class0;
      assertNotNull(classArray0[5]);
      assertEquals(false, classArray0[5].isArray());
      assertEquals(false, classArray0[5].isEnum());
      assertEquals(false, classArray0[5].isAnnotation());
      assertEquals(false, classArray0[5].isPrimitive());
      assertEquals(false, classArray0[5].isInterface());
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[5].toString());
      assertEquals(false, classArray0[5].isSynthetic());
      assertEquals(1, classArray0[5].getModifiers());
      
      classArray0[7] = classArray0[5];
      assertNotNull(classArray0[7]);
      assertEquals(false, classArray0[7].isEnum());
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[7].toString());
      assertEquals(false, classArray0[7].isSynthetic());
      assertEquals(false, classArray0[7].isPrimitive());
      assertEquals(1, classArray0[7].getModifiers());
      assertEquals(false, classArray0[7].isArray());
      assertEquals(false, classArray0[7].isAnnotation());
      assertEquals(false, classArray0[7].isInterface());
      
      classArray0[1] = class0;
      assertNotNull(classArray0[1]);
      assertEquals(false, classArray0[1].isAnnotation());
      assertEquals(false, classArray0[1].isEnum());
      assertEquals(1, classArray0[1].getModifiers());
      assertEquals(false, classArray0[1].isArray());
      assertEquals(false, classArray0[1].isInterface());
      assertEquals(false, classArray0[1].isPrimitive());
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[1].toString());
      assertEquals(false, classArray0[1].isSynthetic());
      
      classArray0[2] = classArray0[1];
      assertNotNull(classArray0[2]);
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[2].toString());
      assertEquals(false, classArray0[2].isEnum());
      assertEquals(false, classArray0[2].isAnnotation());
      assertEquals(false, classArray0[2].isPrimitive());
      assertEquals(false, classArray0[2].isArray());
      assertEquals(false, classArray0[2].isInterface());
      assertEquals(1, classArray0[2].getModifiers());
      assertEquals(false, classArray0[2].isSynthetic());
      
      classArray0[6] = classArray0[0];
      assertNotNull(classArray0[6]);
      assertEquals(false, classArray0[6].isSynthetic());
      assertEquals(false, classArray0[6].isPrimitive());
      assertEquals(1, classArray0[6].getModifiers());
      assertEquals(false, classArray0[6].isEnum());
      assertEquals(false, classArray0[6].isArray());
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[6].toString());
      assertEquals(false, classArray0[6].isInterface());
      assertEquals(false, classArray0[6].isAnnotation());
      
      classArray0[8] = class0;
      assertNotNull(classArray0[8]);
      assertEquals("class org.apache.commons.lang.ClassUtils", classArray0[8].toString());
      assertEquals(false, classArray0[8].isSynthetic());
      assertEquals(1, classArray0[8].getModifiers());
      assertEquals(false, classArray0[8].isInterface());
      assertEquals(false, classArray0[8].isAnnotation());
      assertEquals(false, classArray0[8].isEnum());
      assertEquals(false, classArray0[8].isPrimitive());
      assertEquals(false, classArray0[8].isArray());
      
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      assertTrue(boolean0);
      
      Class<Long> class1 = Long.class;
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertNotNull(class2);
      assertEquals(false, class2.isSynthetic());
      assertEquals(false, class2.isArray());
      assertEquals(false, class2.isInterface());
      assertEquals(false, class2.isAnnotation());
      assertEquals(true, class2.isPrimitive());
      assertEquals(false, class2.isEnum());
      assertEquals("long", class2.toString());
      assertEquals(1041, class2.getModifiers());
      
      Class<Double> class3 = Double.class;
      boolean boolean1 = ClassUtils.isAssignable(class3, class2, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, class2.isSynthetic());
      assertEquals(false, class2.isArray());
      assertEquals(false, class2.isInterface());
      assertEquals(false, class2.isAnnotation());
      assertEquals(true, class2.isPrimitive());
      assertEquals(false, class2.isEnum());
      assertEquals("long", class2.toString());
      assertEquals(1041, class2.getModifiers());
  }

  @Test
  public void test24()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 2);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(17, classArray0[0].getModifiers());
      assertEquals("class java.lang.Boolean", classArray0[0].toString());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isArray());
      
      classArray0[1] = class0;
      assertNotNull(classArray0[1]);
      assertEquals(17, classArray0[1].getModifiers());
      assertEquals(false, classArray0[1].isAnnotation());
      assertEquals(false, classArray0[1].isArray());
      assertEquals("class java.lang.Boolean", classArray0[1].toString());
      assertEquals(false, classArray0[1].isInterface());
      assertEquals(false, classArray0[1].isPrimitive());
      assertEquals(false, classArray0[1].isEnum());
      assertEquals(false, classArray0[1].isSynthetic());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean0 = true;
      boolean boolean1 = ClassUtils.isAssignable(classArray1, classArray0, boolean0);
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ClassUtils.isAssignable(classArray1, classArray1, boolean1);
      assertTrue(boolean2);
      assertTrue(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1 == boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test
  public void test25()  throws Throwable  {
      Class<Boolean>[] classArray0 = (Class<Boolean>[]) Array.newInstance(Class.class, 2);
      Class<Boolean> class0 = Boolean.class;
      classArray0[0] = class0;
      assertNotNull(classArray0[0]);
      assertEquals(false, classArray0[0].isPrimitive());
      assertEquals(false, classArray0[0].isInterface());
      assertEquals(false, classArray0[0].isSynthetic());
      assertEquals(false, classArray0[0].isEnum());
      assertEquals(false, classArray0[0].isAnnotation());
      assertEquals(false, classArray0[0].isArray());
      assertEquals("class java.lang.Boolean", classArray0[0].toString());
      assertEquals(17, classArray0[0].getModifiers());
      
      Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0);
      assertNotNull(classArray1);
      
      boolean boolean0 = true;
      boolean boolean1 = ClassUtils.isAssignable(classArray1, classArray0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test26()  throws Throwable  {
      Class<Long> class0 = null;
      Class<String> class1 = String.class;
      boolean boolean0 = ClassUtils.isAssignable(class0, class1);
      assertTrue(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      Class<Byte> class0 = Byte.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNotNull(class1);
      assertEquals(false, class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isEnum());
      assertEquals("byte", class1.toString());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isArray());
      
      Class<?> class2 = ClassUtils.wrapperToPrimitive(class1);
      assertNull(class2);
      assertEquals(false, class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isEnum());
      assertEquals("byte", class1.toString());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isArray());
      
      boolean boolean0 = ClassUtils.isAssignable(class2, class1);
      assertFalse(boolean0);
      assertEquals(false, class1.isSynthetic());
      assertEquals(1041, class1.getModifiers());
      assertEquals(false, class1.isAnnotation());
      assertEquals(false, class1.isInterface());
      assertEquals(false, class1.isEnum());
      assertEquals("byte", class1.toString());
      assertEquals(true, class1.isPrimitive());
      assertEquals(false, class1.isArray());
  }

  @Test
  public void test28()  throws Throwable  {
      Object[] objectArray0 = null;
      Class<?>[] classArray0 = ClassUtils.toClass(objectArray0);
      assertNull(classArray0);
      
      boolean boolean0 = ClassUtils.isAssignable(classArray0, classArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test29()  throws Throwable  {
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 6);
      Class<Short>[] classArray1 = (Class<Short>[]) Array.newInstance(Class.class, 7);
      boolean boolean0 = false;
      boolean boolean1 = ClassUtils.isAssignable(classArray0, classArray1, boolean0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test30()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      String string0 = "float";
      boolean boolean0 = linkedList0.add(string0);
      assertTrue(boolean0);
      assertEquals("[float]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) linkedList0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("[float]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertNotNull(list1);
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(false, list1.isEmpty());
      assertEquals(1, list1.size());
      assertEquals("[float]", linkedList0.toString());
      assertEquals(1, linkedList0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      List<Class<?>> list0 = null;
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertNull(list1);
  }

  @Test
  public void test32()  throws Throwable  {
      Class<Float> class0 = Float.class;
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(class0);
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      
      List<String> list1 = ClassUtils.convertClassesToClassNames(list0);
      assertNotNull(list1);
      assertEquals(false, list1.isEmpty());
      assertEquals(2, list1.size());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
  }

  @Test
  public void test33()  throws Throwable  {
      List<String> list0 = null;
      List<Class<?>> list1 = ClassUtils.convertClassNamesToClasses(list0);
      assertNull(list1);
  }

  @Test
  public void test34()  throws Throwable  {
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class1);
      assertNull(list0);
  }

  @Test
  public void test35()  throws Throwable  {
      Class<Long> class0 = Long.class;
      List<Class<?>> list0 = ClassUtils.getAllInterfaces(class0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test
  public void test36()  throws Throwable  {
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7);
      List<Class<?>> list0 = ClassUtils.getAllSuperclasses(classArray0[0]);
      assertNull(list0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "L+JWU1//w^03Brig-B";
      String string1 = ClassUtils.getPackageName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "Lt;";
      String string1 = ClassUtils.getPackageName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "[";
      String string1 = ClassUtils.getPackageCanonicalName(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "";
      String string1 = ClassUtils.getPackageName(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = null;
      String string1 = ClassUtils.getPackageCanonicalName(string0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test42()  throws Throwable  {
      Class<Long> class0 = null;
      String string0 = ClassUtils.getPackageName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test43()  throws Throwable  {
      Class<Integer> class0 = null;
      Class<ClassUtils> class1 = ClassUtils.class;
      String string0 = ClassUtils.getShortClassName(class1);
      assertNotNull(string0);
      assertEquals("ClassUtils", string0);
      
      String string1 = ClassUtils.getPackageName((Object) class0, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("ClassUtils", string1);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "V_^rI|cW9E9_s$p'v";
      String string1 = ClassUtils.getPackageName((Object) string0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("java.lang", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test45()  throws Throwable  {
      String string0 = "V_^rI|cW9E9_s$p'v";
      String string1 = ClassUtils.getShortCanonicalName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("V_^rI|cW9E9_s.p'v", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test46()  throws Throwable  {
      String string0 = "[L;";
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("[]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test47()  throws Throwable  {
      String string0 = null;
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = ClassUtils.getShortClassName(string1);
      assertSame(string2, string1);
      assertSame(string1, string2);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test
  public void test48()  throws Throwable  {
      Class<Integer> class0 = null;
      String string0 = ClassUtils.getShortClassName(class0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test
  public void test49()  throws Throwable  {
      String string0 = "$r]VRfUFZ:L";
      Class<String> class0 = String.class;
      Class<?> class1 = ClassUtils.wrapperToPrimitive(class0);
      assertNull(class1);
      
      String string1 = ClassUtils.getShortClassName((Object) class1, string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotNull(string1);
      assertEquals("$r]VRfUFZ:L", string1);
  }

  @Test
  public void test50()  throws Throwable  {
      double double0 = (-646.8);
      Float float0 = new Float(double0);
      assertEquals((-646.8F), (float)float0, 0.01F);
      
      String string0 = "short";
      String string1 = ClassUtils.getShortClassName((Object) float0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Float", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test51()  throws Throwable  {
      Class<Double> class0 = Double.class;
      String string0 = ClassUtils.getPackageCanonicalName(class0);
      assertNotNull(string0);
      assertEquals("java.lang", string0);
  }

  @Test
  public void test52()  throws Throwable  {
      String string0 = "[J";
      String string1 = ClassUtils.getShortClassName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("long[]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      Class<?> class0 = ClassUtils.getClass(classLoader0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(class0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, class0.isAnnotation());
      assertEquals(1041, class0.getModifiers());
      assertEquals("class [J", class0.toString());
      assertEquals(false, class0.isEnum());
      assertEquals(true, class0.isArray());
      assertEquals(false, class0.isPrimitive());
      assertEquals(false, class0.isInterface());
      assertEquals(false, class0.isSynthetic());
  }

  @Test
  public void test53()  throws Throwable  {
      ClassUtils classUtils0 = new ClassUtils();
      assertNotNull(classUtils0);
  }

  @Test
  public void test54()  throws Throwable  {
      String string0 = "[[L;";
      String string1 = ClassUtils.getShortCanonicalName(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("][][]", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }
}
