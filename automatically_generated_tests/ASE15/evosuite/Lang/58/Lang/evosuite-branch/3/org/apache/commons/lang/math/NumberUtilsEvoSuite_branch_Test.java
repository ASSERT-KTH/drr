/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:53:24 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "5l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "-- p!";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "3EAi3q&y3`xe.=^<#";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "+'xclVuI0D#\"oA-e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "4e-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-0xorg.apache.commons.lang.StringUtls";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0x4-2oK^_nv)/=&)j_a";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0xe9";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "0_*q7Z%Rt2&h3";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = 0L;
      long long1 = (-43L);
      longArray0[2] = long1;
      int int0 = NumberUtils.compare((float) longArray0[2], (float) long0);
      assertEquals((-1), int0);
      assertArrayEquals(new long[] {0L, 0L, (-43L), 0L}, longArray0);
      assertFalse(long0 == long1);
  }

  @Test
  public void test019()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)572;
      int int0 = NumberUtils.compare((double) short1, (double) short0);
      assertEquals(1, int0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
  }

  @Test
  public void test020()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)101;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertEquals((byte)101, byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte) (-23);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertEquals((byte)0, byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test022()  throws Throwable  {
      short short0 = (short) (-23);
      short short1 = (short)16;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertEquals((short)16, short2);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short) (-7);
      short short1 = (short) (-6480);
      short short2 = NumberUtils.max(short1, short0, short1);
      assertEquals((short) (-7), short2);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertFalse(short2 == short1);
      assertTrue(short2 == short0);
  }

  @Test
  public void test024()  throws Throwable  {
      short[] shortArray0 = new short[4];
      byte byte0 = (byte)101;
      int int0 = NumberUtils.max((int) shortArray0[0], (int) shortArray0[2], (int) byte0);
      assertEquals(101, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test025()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)7;
      int int0 = NumberUtils.max((int) shortArray0[0], (int) short0, (int) shortArray0[0]);
      assertEquals(7, int0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test026()  throws Throwable  {
      short[] shortArray0 = new short[4];
      long long0 = 1284L;
      long long1 = NumberUtils.max((long) shortArray0[0], (long) shortArray0[1], long0);
      assertEquals(1284L, long1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
  }

  @Test
  public void test027()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)7;
      long long0 = NumberUtils.max((long) shortArray0[0], (long) short0, (long) shortArray0[0]);
      assertEquals(7L, long0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)3;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertEquals((byte)0, byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)3;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertEquals((byte)0, byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-2869);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertEquals((short) (-2869), short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
  }

  @Test
  public void test031()  throws Throwable  {
      short short0 = (short)174;
      short short1 = (short)97;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertEquals((short)97, short2);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      int int1 = 4411;
      assertFalse(int1 == int0);
      
      int int2 = 53;
      assertFalse(int2 == int0);
      
      int int3 = NumberUtils.min(int2, int1, int0);
      assertEquals(0, int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int0 == int1);
      assertTrue(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = 350;
      byte byte0 = (byte)13;
      int int1 = NumberUtils.min(int0, (int) byte0, int0);
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test034()  throws Throwable  {
      double double0 = 0.0;
      int int0 = NumberUtils.compare(double0, double0);
      assertEquals(0, int0);
      
      long long0 = 900L;
      long long1 = NumberUtils.min(long0, long0, (long) int0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
  }

  @Test
  public void test035()  throws Throwable  {
      long long0 = 3379L;
      long long1 = 0L;
      long long2 = NumberUtils.min(long0, long1, long0);
      assertEquals(0L, long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
  }

  @Test
  public void test036()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = (-2973.0598F);
      floatArray0[4] = float0;
      int int0 = 2;
      floatArray0[4] = (float) int0;
      float float1 = NumberUtils.max(floatArray0);
      assertEquals(2.0F, float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertFalse(float1 == float0);
  }

  @Test
  public void test037()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test038()  throws Throwable  {
      int int0 = (-2207);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) int0;
      double double0 = NumberUtils.max(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {(-2207.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)12;
      byteArray0[3] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertEquals((byte)12, byte1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)12, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
  }

  @Test
  public void test040()  throws Throwable  {
      short short0 = (short)572;
      short[] shortArray0 = new short[8];
      shortArray0[2] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertEquals((short)572, short1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)572, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = 53;
      int[] intArray0 = new int[5];
      intArray0[1] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertEquals(53, int1);
      assertArrayEquals(new int[] {0, 53, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test042()  throws Throwable  {
      byte byte0 = (byte)103;
      long[] longArray0 = new long[4];
      longArray0[2] = (long) byte0;
      long long0 = NumberUtils.max(longArray0);
      assertEquals(103L, long0);
      assertArrayEquals(new long[] {0L, 0L, 103L, 0L}, longArray0);
  }

  @Test
  public void test043()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float float0 = (-1.0F);
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertEquals((-1.0F), float1, 0.01F);
      assertArrayEquals(new float[] {0.0F, (-1.0F)}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
  }

  @Test
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = NumberUtils.min(floatArray0);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test046()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)72;
      byteArray0[1] = byte0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) byteArray0[1];
      double double0 = NumberUtils.min(doubleArray0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new double[] {72.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[20];
      byte byte0 = (byte)68;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertEquals((byte)0, byte1);
      assertArrayEquals(new byte[] {(byte)68, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(byte1 == byte0);
  }

  @Test
  public void test048()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test049()  throws Throwable  {
      short[] shortArray0 = new short[5];
      short short0 = (short)20;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertEquals((short)0, short1);
      assertArrayEquals(new short[] {(short)20, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(short1 == short0);
  }

  @Test
  public void test050()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      int[] intArray0 = new int[19];
      int int0 = (-1);
      intArray0[9] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, (-1), 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
  }

  @Test
  public void test052()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      long[] longArray0 = new long[4];
      long long0 = (-43L);
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertEquals((-43L), long1);
      assertArrayEquals(new long[] {0L, 0L, (-43L), 0L}, longArray0);
      assertTrue(long1 == long0);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = (-320.939921);
      doubleArray0[0] = double0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-320.939921), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray1, doubleArray0);
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertTrue(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertFalse(boolean0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test060()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float float0 = 1.0F;
      floatArray0[0] = float0;
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {1.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test
  public void test061()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float[] floatArray1 = new float[2];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test
  public void test062()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = new float[7];
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotSame(floatArray1, floatArray0);
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
  }

  @Test
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[8];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertTrue(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertFalse(boolean0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test
  public void test065()  throws Throwable  {
      long[] longArray0 = new long[5];
      long long0 = 1138L;
      longArray0[1] = long0;
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 1138L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test066()  throws Throwable  {
      long[] longArray0 = new long[9];
      long[] longArray1 = new long[4];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertFalse(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test067()  throws Throwable  {
      long[] longArray0 = new long[5];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
  }

  @Test
  public void test068()  throws Throwable  {
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[5];
      assertFalse(longArray1.equals((Object)longArray0));
      assertNotSame(longArray1, longArray0);
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertTrue(boolean0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
  }

  @Test
  public void test069()  throws Throwable  {
      short short0 = (short) (-7);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) short0;
      int[] intArray1 = new int[8];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {(-7), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test070()  throws Throwable  {
      int[] intArray0 = new int[11];
      int[] intArray1 = new int[1];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
  }

  @Test
  public void test072()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = null;
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  @Test
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[24];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertTrue(boolean0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = null;
      boolean boolean0 = NumberUtils.equals(intArray1, intArray0);
      assertFalse(boolean0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test075()  throws Throwable  {
      short short0 = (short) (-1044);
      short[] shortArray0 = new short[4];
      shortArray0[1] = short0;
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short) (-1044), (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test
  public void test076()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = new short[3];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
  }

  @Test
  public void test077()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertFalse(boolean0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
  }

  @Test
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[9];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short[] shortArray1 = new short[4];
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray1, shortArray0);
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertTrue(boolean0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
  }

  @Test
  public void test080()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-77);
      byteArray0[0] = byte0;
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte) (-77), (byte)0}, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertNotSame(byteArray1, byteArray0);
      assertNotSame(byteArray0, byteArray1);
  }

  @Test
  public void test081()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = new byte[7];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte[] byteArray1 = new byte[2];
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray1, byteArray0);
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray1);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "zaJl|X7n0e:Y";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // zaJl|X7n0e:Y is not a valid number.
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = ".Rk6\" 2HknZ%8";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "N$D:mewEi2xt8";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N$D:\"
         //
      }
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "5$l";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 5$l is not a valid number.
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "5l";
      Long long0 = (Long)NumberUtils.createNumber(string0);
      assertEquals(5L, (long)long0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "I$f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // I$f is not a valid number.
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "z-bJ2Ed";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // z-bJ2Ed is not a valid number.
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = ".(gT1G\"!X%m\"bmSL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .(gT1G\"!X%m\"bmSL is not a valid number.
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "VBZXNl\"E";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // VBZXNl\"E is not a valid number.
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "e-G9";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = ")e4A.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // )e4A. is not a valid number.
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "org.apache.commons.Bang.StringUCils";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.Bang.StringUCils is not a valid number.
         //
      }
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "^,zlVpCR^.{:s)RkD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ^,zlVpCR^.{:s)RkD is not a valid number.
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "0xz-bJ2Ed";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"z-bJ2Ed\"
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "-0x(3@zt";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-(3@zt\"
         //
      }
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "\n";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "--bJ$";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = ")e4A.";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = null;
      float float0 = (-1050.0F);
      float float1 = NumberUtils.toFloat(string0, float0);
      assertEquals((-1050.0F), float1, 0.01F);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "--bJ$";
      int[] intArray0 = new int[1];
      int int0 = NumberUtils.max(intArray0);
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0}, intArray0);
      
      long long0 = NumberUtils.toLong(string0, (long) int0);
      assertEquals(0L, long0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = null;
      int int0 = (-2365);
      int int1 = NumberUtils.toInt(string0, int0);
      assertEquals((-2365), int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }

  @Test
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test115()  throws Throwable  {
      short[] shortArray0 = new short[9];
      short short0 = (short) (-370);
      double double0 = NumberUtils.min((double) shortArray0[0], (double) short0, (double) short0);
      assertEquals((-370.0), double0, 0.01D);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test116()  throws Throwable  {
      short[] shortArray0 = new short[4];
      byte byte0 = (byte)0;
      float float0 = NumberUtils.max((float) shortArray0[1], (float) byte0, (float) shortArray0[2]);
      assertEquals(0.0F, float0, 0.01F);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = "bJ";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = "+'xclVuI0D#\"oA-e";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test121()  throws Throwable  {
      int int0 = 13;
      float float0 = NumberUtils.min((float) int0, (float) int0, (float) int0);
      assertEquals(13.0F, float0, 0.01F);
  }

  @Test
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-77);
      double double0 = NumberUtils.max((double) byteArray0[0], (double) byte0, (double) byte0);
      assertEquals(0.0, double0, 0.01D);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
  }

  @Test
  public void test123()  throws Throwable  {
      double double0 = 0.0;
      int int0 = NumberUtils.compare(double0, double0);
      assertEquals(0, int0);
      
      String string0 = "bJ";
      int int1 = NumberUtils.stringToInt(string0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
  }
}
