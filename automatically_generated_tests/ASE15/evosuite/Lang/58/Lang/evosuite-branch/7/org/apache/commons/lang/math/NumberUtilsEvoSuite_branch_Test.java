/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:35:58 GMT 2014
 */

package org.apache.commons.lang.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "--";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "--The Array must not Ye zull";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "+N<Pq]G";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "e.3z<:K-Y+";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "1e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "0xbz)ajx#Xp";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "0xA blank string is not a#valid number";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "-0xE5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0E5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = " is not a valid number.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "3";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      float float0 = 0.0F;
      long long0 = 1L;
      int int0 = NumberUtils.compare(float0, (float) long0);
      assertEquals((-1), int0);
  }

  @Test
  public void test019()  throws Throwable  {
      short short0 = (short)1;
      short short1 = (short) (-3098);
      int int0 = NumberUtils.compare((double) short1, (double) short0);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals((-1), int0);
  }

  @Test
  public void test020()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)47;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)47, byte2);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte)1;
      byte byte1 = (byte)69;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)69, byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      short short0 = (short) (-2469);
      short short1 = (short)314;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short)314, short2);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short) (-5);
      short short2 = NumberUtils.max(short1, short0, short0);
      assertTrue(short2 == short0);
      assertFalse(short2 == short1);
      assertFalse(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short1);
      assertTrue(short0 == short2);
      assertEquals((short)0, short2);
  }

  @Test
  public void test024()  throws Throwable  {
      int int0 = 0;
      int int1 = 2505;
      int int2 = NumberUtils.max(int0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertEquals(2505, int2);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)680;
      short short1 = (short)100;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)100, short2);
      
      int int0 = NumberUtils.max((int) short2, (int) short0, (int) short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals(680, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      long long0 = (-1244L);
      long long1 = 1108L;
      long long2 = NumberUtils.max(long0, long0, long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(1108L, long2);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)43;
      long long0 = 0L;
      long long1 = NumberUtils.max(long0, (long) byte0, (long) byte0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals(43L, long1);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)26;
      byte byte1 = (byte) (-3);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte) (-3), byte2);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)42;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test030()  throws Throwable  {
      short short0 = (short)1;
      short short1 = (short) (-3098);
      short short2 = NumberUtils.min(short0, short0, short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertEquals((short) (-3098), short2);
  }

  @Test
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      int int0 = 1519;
      int int1 = 64;
      int int2 = NumberUtils.min(int0, int1, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, int2);
  }

  @Test
  public void test032()  throws Throwable  {
      int int0 = (-4438);
      int int1 = NumberUtils.min(int0, int0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-4438), int1);
  }

  @Test
  public void test033()  throws Throwable  {
      short short0 = (short)0;
      String string0 = "...";
      long long0 = NumberUtils.toLong(string0, (long) short0);
      assertEquals(0L, long0);
      
      long long1 = (-3534L);
      assertFalse(long1 == long0);
      
      long long2 = NumberUtils.min(long0, long0, long1);
      assertFalse(long1 == long0);
      assertTrue(long1 == long2);
      assertFalse(long2 == long0);
      assertTrue(long2 == long1);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals((-3534L), long2);
  }

  @Test
  public void test034()  throws Throwable  {
      int int0 = 252;
      int int1 = (-1480);
      int int2 = NumberUtils.max(int0, int0, int1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(252, int2);
      
      long long0 = NumberUtils.min((long) int2, (long) int1, (long) int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals((-1480L), long0);
  }

  @Test
  public void test035()  throws Throwable  {
      float float0 = 2203.39F;
      float[] floatArray0 = new float[8];
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2203.39F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertTrue(float1 == float0);
      assertEquals(2203.39F, float1, 0.01F);
  }

  @Test
  public void test036()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test037()  throws Throwable  {
      float float0 = 1.0F;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) float0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.0, double0, 0.01D);
  }

  @Test
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      byte byte0 = (byte)43;
      byteArray0[2] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)43, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte)43, byte1);
  }

  @Test
  public void test039()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      short short0 = (short)7;
      short[] shortArray0 = new short[8];
      shortArray0[1] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)7, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(short1 == short0);
      assertEquals((short)7, short1);
  }

  @Test
  public void test041()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 101;
      intArray0[1] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 101}, intArray0);
      assertTrue(int1 == int0);
      assertEquals(101, int1);
  }

  @Test
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test043()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      long[] longArray0 = new long[6];
      long long0 = (-874L);
      longArray0[0] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-874L), 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test
  public void test045()  throws Throwable  {
      short short0 = (short) (-1701);
      float[] floatArray0 = new float[8];
      floatArray0[3] = (float) short0;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1701.0F), 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1701.0F), float0, 0.01F);
  }

  @Test
  public void test046()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      byte byte0 = (byte)40;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) byte0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {40.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-41);
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-41), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-41), byte1);
  }

  @Test
  public void test049()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      short[] shortArray0 = new short[2];
      short short0 = (short)120;
      shortArray0[0] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)120, (short)0}, shortArray0);
      assertFalse(short1 == short0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test051()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test053()  throws Throwable  {
      int[] intArray0 = new int[6];
      int int0 = (-537);
      intArray0[2] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertArrayEquals(new int[] {0, 0, (-537), 0, 0, 0}, intArray0);
      assertTrue(int1 == int0);
      assertEquals((-537), int1);
  }

  @Test
  public void test054()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      long[] longArray0 = new long[8];
      short short0 = (short) (-22);
      longArray0[1] = (long) short0;
      long long0 = NumberUtils.min(longArray0);
      assertArrayEquals(new long[] {0L, (-22L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals((-22L), long0);
  }

  @Test
  public void test056()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      long long0 = 3055L;
      double[] doubleArray0 = new double[9];
      doubleArray0[4] = (double) long0;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 3055.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(doubleArray1, doubleArray0);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[3];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      double[] doubleArray0 = new double[19];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertTrue(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = null;
      boolean boolean0 = NumberUtils.equals(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float[] floatArray1 = new float[6];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      float float0 = (-29.060286F);
      floatArray1[0] = float0;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {(-29.060286F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test064()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[6];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[7];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test066()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float[] floatArray1 = new float[1];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray1);
      assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertTrue(boolean0);
  }

  @Test
  public void test067()  throws Throwable  {
      float[] floatArray0 = new float[1];
      boolean boolean0 = NumberUtils.equals(floatArray0, floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertTrue(boolean0);
  }

  @Test
  public void test068()  throws Throwable  {
      float[] floatArray0 = new float[2];
      float[] floatArray1 = null;
      boolean boolean0 = NumberUtils.equals(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(boolean0);
  }

  @Test
  public void test069()  throws Throwable  {
      long[] longArray0 = new long[7];
      long long0 = 1L;
      longArray0[6] = long0;
      long[] longArray1 = new long[7];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 1L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test070()  throws Throwable  {
      long[] longArray0 = new long[3];
      long[] longArray1 = new long[3];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertNotSame(longArray1, longArray0);
      assertNotSame(longArray0, longArray1);
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      assertTrue(boolean0);
  }

  @Test
  public void test071()  throws Throwable  {
      long[] longArray0 = new long[7];
      boolean boolean0 = NumberUtils.equals(longArray0, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test072()  throws Throwable  {
      long[] longArray0 = new long[6];
      long[] longArray1 = new long[8];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      boolean boolean0 = NumberUtils.equals(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[9];
      int int0 = 102;
      intArray0[5] = int0;
      int[] intArray1 = new int[9];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 102, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[1];
      int[] intArray1 = new int[1];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertArrayEquals(new int[] {0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[3];
      boolean boolean0 = NumberUtils.equals(intArray0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[4];
      int[] intArray1 = new int[6];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      boolean boolean0 = NumberUtils.equals(intArray0, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test077()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short short0 = (short)2558;
      shortArray0[0] = short0;
      short[] shortArray1 = new short[10];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)2558, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test078()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short[] shortArray1 = new short[4];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(boolean0);
  }

  @Test
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short[] shortArray1 = null;
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test080()  throws Throwable  {
      short[] shortArray0 = new short[5];
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test081()  throws Throwable  {
      short[] shortArray0 = new short[10];
      short[] shortArray1 = new short[10];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      boolean boolean0 = NumberUtils.equals(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)120;
      byteArray0[4] = byte0;
      byte[] byteArray1 = new byte[9];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)120, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test083()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[23];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(boolean0);
  }

  @Test
  public void test084()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = null;
      boolean boolean0 = NumberUtils.equals(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(boolean0);
  }

  @Test
  public void test085()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(boolean0);
  }

  @Test
  public void test086()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte[] byteArray1 = new byte[1];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      boolean boolean0 = NumberUtils.equals(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertTrue(boolean0);
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "0E5";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "The Array must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "FG$K]f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // FG$K]f is not a valid number.
         //
      }
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = "'P\\6{I|*\"D_B#R9L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 'P\\6{I|*\"D_B#R9L is not a valid number.
         //
      }
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "The A#ray mZst not be nulF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The A#ray mZst not be nulF is not a valid number.
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "ULf@`%w* 0OD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ULf@`%w* 0OD is not a valid number.
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "The";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The is not a valid number.
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "-0E5";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "org.apache.commons.lang.StrigUtil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.commons.lang.StrigUtil is not a valid number.
         //
      }
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ... is not a valid number.
         //
      }
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "~*vQW5,ORZd)k3";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~*vQW\"
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "-0xkqb*S,}-RQR";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-kqb*S,}-RQR\"
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "0x5r";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"5r\"
         //
      }
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "--The Array must not Ye zull";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = " ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test111()  throws Throwable  {
      int int0 = (-4802);
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, (double) int0);
      assertEquals((-4802.0), double0, 0.01D);
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = "@";
      float float0 = (-699.2474F);
      float float1 = NumberUtils.toFloat(string0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals((-699.2474F), float1, 0.01F);
  }

  @Test
  public void test113()  throws Throwable  {
      String string0 = null;
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test114()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "-";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      int int0 = 3;
      double double0 = NumberUtils.min((double) int0, (double) long0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test116()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = NumberUtils.max(float0, float0, float0);
      assertTrue(float1 == float0);
      assertTrue(float0 == float1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test
  public void test117()  throws Throwable  {
      String string0 = "The Array must not be null";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "--E";
      int int0 = NumberUtils.stringToInt(string0);
      assertEquals(0, int0);
  }

  @Test
  public void test119()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = "-";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
      
      int int0 = 3;
      float float0 = NumberUtils.min((float) long0, (float) int0, (float) long0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test121()  throws Throwable  {
      double double0 = (-903.2977);
      double double1 = NumberUtils.max(double0, double0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals((-903.2977), double1, 0.01D);
  }

  @Test
  public void test122()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = new byte[10];
      int int0 = NumberUtils.stringToInt(string0, (int) byteArray0[2]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, int0);
  }
}
