/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:48 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "8L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "j";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "F";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "4";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "---0X";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "E/?:kUyb'+}\\e\\K";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "5eQ_Y^8";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "+3D>sx>f6>hP?";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0xF sb0B\"o~eS6a_')";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x75d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0xorg.apache.commons.lang3.math.NumberUtils";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "-0X-0X%sILr9[]@<N{Dz";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "75d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "4";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte)48;
      byte byte1 = (byte)72;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte)72, byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte)53;
      short short0 = (short)2511;
      short short1 = NumberUtils.max((short) byte0, (short) byte0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)2511, short1);
  }

  @Test
  public void test024()  throws Throwable  {
      byte byte0 = (byte)53;
      short short0 = (short)75;
      short short1 = NumberUtils.max((short) byte0, short0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)75, short1);
  }

  @Test
  public void test025()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = NumberUtils.max(byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
      
      byte byte1 = (byte) (-11);
      assertFalse(byte1 == byte0);
      
      byteArray0[0] = byte1;
      int int0 = NumberUtils.max((int) byteArray0[0], (int) byteArray0[0], (int) byte0);
      assertFalse(byte0 == byte1);
      assertArrayEquals(new byte[] {(byte) (-11)}, byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-8);
      int int0 = NumberUtils.max((int) byte1, (int) byte0, (int) byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-11);
      long long0 = NumberUtils.max((long) byte0, (long) byte0, (long) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test028()  throws Throwable  {
      byte byte0 = (byte)76;
      byte byte1 = (byte) (-11);
      long long0 = NumberUtils.max((long) byte1, (long) byte0, (long) byte1);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals(76L, long0);
  }

  @Test
  public void test029()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-1);
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertEquals((byte) (-1), byte2);
  }

  @Test
  public void test030()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)41;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertEquals((byte)41, byte2);
      
      byte byte3 = NumberUtils.min(byte2, byte0, byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte3);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte3);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte3);
      assertTrue(byte3 == byte0);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte2);
      assertEquals((byte) (-1), byte3);
  }

  @Test
  public void test031()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)47;
      byteArray0[0] = byte0;
      byteArray0[1] = byteArray0[0];
      byte byte1 = (byte)0;
      short short0 = NumberUtils.min((short) byteArray0[1], (short) byteArray0[0], (short) byte1);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)47, (byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test032()  throws Throwable  {
      short short0 = (short)32;
      short short1 = (short)0;
      short short2 = NumberUtils.min(short0, short1, short0);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertEquals((short)0, short2);
  }

  @Test
  public void test033()  throws Throwable  {
      int int0 = (-2264);
      byte byte0 = (byte)0;
      int int1 = NumberUtils.min((int) byte0, (int) byte0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-2264), int1);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte) (-1);
      byte byte1 = (byte)1;
      int int0 = NumberUtils.min((int) byte1, (int) byte0, (int) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((-1), int0);
  }

  @Test
  public void test035()  throws Throwable  {
      long long0 = 22L;
      long long1 = 0L;
      long long2 = NumberUtils.min(long0, long0, long1);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(0L, long2);
  }

  @Test
  public void test036()  throws Throwable  {
      byte byte0 = (byte) (-1);
      long long0 = 7L;
      long long1 = NumberUtils.min(long0, (long) byte0, (long) byte0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test
  public void test037()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = 3567.5476F;
      floatArray0[1] = float0;
      float float1 = NumberUtils.max(floatArray0);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, 3567.5476F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3567.5476F, float1, 0.01F);
  }

  @Test
  public void test038()  throws Throwable  {
      float[] floatArray0 = new float[8];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 2426.535091110092;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      assertTrue(double1 == double0);
      assertArrayEquals(new double[] {0.0, 0.0, 2426.535091110092, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2426.535091110092, double1, 0.01D);
  }

  @Test
  public void test040()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = Double.NaN;
      doubleArray0[9] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test041()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test042()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)32;
      byteArray0[4] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)32, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)32, byte1);
  }

  @Test
  public void test043()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      short[] shortArray0 = new short[6];
      short short0 = (short)26;
      shortArray0[4] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)26, (short)0}, shortArray0);
      assertEquals((short)26, short1);
  }

  @Test
  public void test045()  throws Throwable  {
      short[] shortArray0 = new short[7];
      short short0 = (short)2491;
      shortArray0[5] = short0;
      int[] intArray0 = new int[12];
      intArray0[1] = (int) shortArray0[5];
      int int0 = NumberUtils.max(intArray0);
      assertArrayEquals(new int[] {0, 2491, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(2491, int0);
  }

  @Test
  public void test046()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test047()  throws Throwable  {
      long long0 = 748L;
      long[] longArray0 = new long[2];
      longArray0[1] = long0;
      long long1 = NumberUtils.max(longArray0);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 748L}, longArray0);
      assertEquals(748L, long1);
  }

  @Test
  public void test048()  throws Throwable  {
      long[] longArray0 = new long[2];
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test049()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-1.0F);
      floatArray0[6] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = Float.NaN;
      floatArray0[1] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test053()  throws Throwable  {
      byte byte0 = (byte)10;
      int int0 = (-9);
      int int1 = NumberUtils.min(int0, int0, (int) byte0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals((-9), int1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) int1;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-9.0), 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-9.0), double0, 0.01D);
  }

  @Test
  public void test054()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = Double.NaN;
      doubleArray0[8] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.NaN}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test056()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)47;
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)47, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test057()  throws Throwable  {
      byte byte0 = (byte)48;
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte)48, byte1);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) byte1;
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)48, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test058()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 1352;
      intArray0[0] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {1352, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int1);
  }

  @Test
  public void test060()  throws Throwable  {
      long[] longArray0 = new long[3];
      long long0 = (-210L);
      longArray0[2] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, (-210L)}, longArray0);
      assertEquals((-210L), long1);
  }

  @Test
  public void test061()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test062()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = ">ntD'";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \">ntD'\"
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = "%p!MA.a3~aDMokB";
      // Undeclared exception!
      try {
        Long long0 = NumberUtils.createLong(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"%p!MA.a3~aDMokB\"
         //
      }
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "h0e??gafeM";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // h0e??gafeM is not a valid number.
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "6G%kBuX|wQNqv)eL)8";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "C/Nd6,-u95|`{4{,1}f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // C/Nd6,-u95|`{4{,1}f is not a valid number.
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "FGPT*dwL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // FGPT*dwL is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "p~,%i2,F";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // p~,%i2,F is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "gZBq.Jz`uU^D";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // gZBq.Jz`uU^D is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "The";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "1";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(1, (int)integer0);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "h`k2+Q}T}eE8G";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // h`k2+Q}T}eE8G is not a valid number.
         //
      }
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "The Array must notbe null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // The Array must notbe null is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "org.apache.cmmons.lang3.math.NumberUil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // org.apache.cmmons.lang3.math.NumberUil is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "FLc\\Y9|.]eeiE";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // FLc\\Y9|.]eeiE is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = ".";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = " is not a valid [umber.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid [umber. is not a valid number.
         //
      }
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "-0X.PAr[M,snUNF/Lw}Z";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-.PAr[M,snUNF/Lw}Z\"
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "-0x%sILr9[]@<Nwz";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-%sILr9[]@<Nwz\"
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "0xF sb0B\"o~eS6a_')";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"F sb0B\"o~eS6a_')\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "-- is not a valid number.";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = " ";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "75d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(75.0, (double)double0, 0.01D);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = null;
      short short0 = (short)2226;
      short short1 = NumberUtils.toShort(string0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short)2226, short1);
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-43);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-43), byte1);
  }

  @Test
  public void test094()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0, doubleArray0[1]);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = null;
      long long0 = 0L;
      long long1 = NumberUtils.toLong(string0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(0L, long1);
  }

  @Test
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, (int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "+3D>sx>f6>hP?";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      short short0 = (short)0;
      int int0 = NumberUtils.min((int) short0, (int) short0, (int) short0);
      assertEquals(0, int0);
      
      float float0 = NumberUtils.max((float) short0, (float) int0, (float) short0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = "5eQ_Y^8";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test101()  throws Throwable  {
      String string0 = "%*)X&0|m\"eMh(Yu";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test102()  throws Throwable  {
      float float0 = 1317.39F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1317.39F, float1, 0.01F);
  }

  @Test
  public void test103()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = Float.NaN;
      double double0 = NumberUtils.min((double) float0, (double) floatArray0[2], (double) floatArray0[3]);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(Double.NaN, double0, 0.01D);
  }

  @Test
  public void test104()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test105()  throws Throwable  {
      String string0 = "8L";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test106()  throws Throwable  {
      float[] floatArray0 = new float[1];
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      short short0 = (short)0;
      double double0 = NumberUtils.max((double) short0, (double) short0, (double) float0);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "75d";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(75.0F, float0, 0.01F);
  }

  @Test
  public void test108()  throws Throwable  {
      String string0 = "75d";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
