/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:40:23 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       boolean boolean0 = false;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = fastDateFormat0.getLocale();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.toString());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertNotNull(locale0);
//       
//       String string0 = FastDateFormat.getTimeZoneDisplay(zoneInfo0, boolean0, int0, locale0);
//       assertEquals("GMT", string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.toString());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 3490;
      String string0 = "*Z0d";
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("*Z0d", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.format((long) int0);
      assertEquals("*+000001", string1);
      assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("*Z0d", fastDateFormat0.getPattern());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       String string0 = ";kW";
//       TimeZone timeZone0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
//       assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(";kW", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = 33;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=33,MONTH=33,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=33,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=33,HOUR_OF_DAY=33,MINUTE=33,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals(";91", string1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-61036381620000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=307,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=33,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(";kW", fastDateFormat0.getPattern());
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//   }

  @Test(timeout = 4000)
  public void test03() {}
//   @Test(timeout = 4000)
//   public void test03()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.GERMAN;
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = (-1393);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int1);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1393,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1393,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-65951193600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=121,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=6,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Tue Feb 06 00:00:00 GMT 121", date0.toString());
//       assertNotNull(date0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertEquals("Dienstag, 6. Februar 0121", string0);
//       assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-65951193600000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=121,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=6,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("de", locale0.toString());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("Tue Feb 06 00:00:00 GMT 121", date0.toString());
//       assertNotNull(string0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(49, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat1);
//       assertFalse(boolean0);
//       assertEquals(49, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat1.getPattern());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//   }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.CANADA;
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertNotNull(date0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) date0);
//       assertFalse(boolean0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//   }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
//       assertTrue(boolean0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//   }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.FRANCE;
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals("HH' h 'mm z", fastDateFormat0.getPattern());
//       assertEquals(11, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("FR", locale0.getCountry());
//       assertEquals("fr_FR", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("FRA", locale0.getISO3Country());
//       assertEquals("fra", locale0.getISO3Language());
//       assertEquals("fr", locale0.getLanguage());
//       assertNotNull(fastDateFormat0);
//       
//       Object object0 = null;
//       // Undeclared exception!
//       try {
//         String string0 = fastDateFormat0.format(object0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       // Undeclared exception!
//       try {
//         String string0 = fastDateFormat0.format((Object) fastDateFormat0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: org.apache.commons.lang3.time.FastDateFormat
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string0 = fastDateFormat0.format((Object) mockGregorianCalendar0);
//       assertEquals("Wednesday, December 31, 0002", string0);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       int int0 = 0;
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.ITALIAN;
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, timeZone0, locale0);
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertNotNull(date0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer(int0);
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals(0, stringBuffer0.capacity());
//       assertNotNull(stringBuffer0);
//       
//       FieldPosition fieldPosition0 = new FieldPosition(int0);
//       assertEquals(0, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertNotNull(fieldPosition0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Object) date0, stringBuffer0, fieldPosition0);
//       assertEquals(0, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("it", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals(11, stringBuffer1.length());
//       assertEquals("0.00.00 GMT", stringBuffer1.toString());
//       assertEquals(14, stringBuffer1.capacity());
//       assertEquals(11, stringBuffer0.length());
//       assertEquals("0.00.00 GMT", stringBuffer0.toString());
//       assertEquals(14, stringBuffer0.capacity());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertNotNull(stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//       assertSame(stringBuffer0, stringBuffer1);
//   }

  @Test(timeout = 4000)
  public void test11() {}
//   @Test(timeout = 4000)
//   public void test11()  throws Throwable  {
//       int int0 = 0;
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.ITALIAN;
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("it", locale0.toString());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, timeZone0, locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("it", locale0.toString());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Long long0 = new Long((long) int0);
//       assertEquals(0L, (long)long0);
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(11, attributedCharacterIterator0.getEndIndex());
//       assertEquals(11, attributedCharacterIterator0.getRunLimit());
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("it", locale0.toString());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H.mm.ss z", fastDateFormat0.getPattern());
//       assertNotNull(attributedCharacterIterator0);
//   }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "v'ChEn`p";
      Locale locale0 = new Locale(string0);
      assertEquals("v'chen`p", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("v'chen`p", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "M]F#%<8u\\  \\M";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("M]F#%<8u\\  \\M", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=M]F#%<8u\\  \\M,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test(timeout = 4000)
  public void test14() {}
//   @Test(timeout = 4000)
//   public void test14()  throws Throwable  {
//       int int0 = 0;
//       TimeZone timeZone0 = null;
//       Locale locale0 = Locale.CHINA;
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, timeZone0, locale0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.toString();
//       assertEquals("FastDateFormat[yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z]", string0);
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("CN", locale0.getCountry());
//       assertEquals("CHN", locale0.getISO3Country());
//       assertEquals("zh_CN", locale0.toString());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, timeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: t
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "74r2<";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "qseDp";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "pWaU$xYYMhS#y3A";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=pWaU$xYYMhS#y3A,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("pWaU$xYYMhS#y3A", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "wo:0-8PN";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "Wmwa5=y#sdn";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "{%ln";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test21() {}
//   @Test(timeout = 4000)
//   public void test21()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.GERMAN;
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertNotNull(date0);
//       
//       String string0 = fastDateFormat0.format(date0);
//       assertEquals("Mittwoch, 31. Dezember 0002", string0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=31,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(32, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, d. MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals("Wed Dec 31 00:00:00 GMT 2", date0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.toString());
//       assertEquals("de", locale0.getLanguage());
//       assertNotNull(string0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: i
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "g!\\;}bHt#DR?68ZvCH";
      Locale locale0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "fWfMb]x9WaXhW";
      int int0 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("fWfMb]x9WaXhW", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=fWfMb]x9WaXhW,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "9 $cn'";
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "Z*DbOj]j+`)x~>$p|3<";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("z*dboj]j+`)x~>$p|3<_Z*DBOJ]J+`)X~>$P|3<_Z*DbOj]j+`)x~>$p|3<", locale0.toString());
      assertEquals("Z*DbOj]j+`)x~>$p|3<", locale0.getVariant());
      assertEquals("z*dboj]j+`)x~>$p|3<", locale0.getLanguage());
      assertEquals("Z*DBOJ]J+`)X~>$P|3<", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "2YdZy&";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "X>cT2\\Q5n6";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = "Unknown class: ";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string0 = "The validated array is empty";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "W@R!Ur-jie*w3";
      int int0 = 48;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals("W@R!Ur-jie*w3", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(48, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=W@R!Ur-jie*w3,offset=48,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "*}Q4Tb\\Ok@+Ts}Z";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
      }
  }

  @Test(timeout = 4000)
  public void test32() {}
//   @Test(timeout = 4000)
//   public void test32()  throws Throwable  {
//       String string0 = "^EPHx^J(OU";
//       int int0 = 2453;
//       int int1 = 0;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int1, int1, int0, int1, int0, int1, int1, int0, int0, int0);
//       assertEquals("java.util.SimpleTimeZone[id=^EPHx^J(OU,offset=2453,dstSavings=2453,useDaylight=false,startYear=0,startMode=0,startMonth=2453,startDay=0,startDayOfWeek=0,startTime=2453,startTimeMode=0,endMode=0,endMonth=2453,endDay=0,endDayOfWeek=0,endTime=2453,endTimeMode=2453]", simpleTimeZone0.toString());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("^EPHx^J(OU", simpleTimeZone0.getID());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals(2453, simpleTimeZone0.getRawOffset());
//       assertNotNull(simpleTimeZone0);
//       assertFalse(int1 == int0);
//       assertFalse(int0 == int1);
//       
//       Locale locale0 = Locale.UK;
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_GB", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, simpleTimeZone0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: P
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "FN%+;";
      int int0 = (-105);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(-105, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=FN%+;,offset=-105,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("FN%+;", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "`ZLmAaQRNA-";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "w!WK-\\yVXOb07T_$!Ek";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = "J1&s!YyOpI2RR";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "@<I8A";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "&?GDheO4d";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test39() {}
//   @Test(timeout = 4000)
//   public void test39()  throws Throwable  {
//       String string0 = "Expe%ted type: %s, actuaK: %s";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.KOREAN;
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ko", locale0.toString());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("kor", locale0.getISO3Language());
//       assertEquals("ko", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: x
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = "B";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
      }
  }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.JAPANESE;
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ja", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("ja", locale0.toString());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat1.getPattern());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(49, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//   }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals("h:mm:ss a z", string0);
//       assertEquals("h:mm:ss a z", fastDateFormat0.getPattern());
//       assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = "Illegal pattern component: ";
//       StringBuffer stringBuffer0 = new StringBuffer(string0);
//       assertEquals(27, stringBuffer0.length());
//       assertEquals(43, stringBuffer0.capacity());
//       assertEquals("Illegal pattern component: ", stringBuffer0.toString());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((long) int0, stringBuffer0);
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(52, stringBuffer0.length());
//       assertEquals(88, stringBuffer0.capacity());
//       assertEquals("Illegal pattern component: Thursday, January 1, 1970", stringBuffer0.toString());
//       assertEquals(52, stringBuffer1.length());
//       assertEquals(88, stringBuffer1.capacity());
//       assertEquals("Illegal pattern component: Thursday, January 1, 1970", stringBuffer1.toString());
//       assertNotNull(stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//   }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.CANADA;
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = null;
//       ParsePosition parsePosition0 = new ParsePosition(int0);
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals(0, parsePosition0.getIndex());
//       assertNotNull(parsePosition0);
//       
//       Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
//       assertEquals(0, parsePosition0.getErrorIndex());
//       assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
//       assertEquals(0, parsePosition0.getIndex());
//       assertEquals(25, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("h:mm:ss 'o''clock' a z", fastDateFormat0.getPattern());
//       assertEquals("", locale0.getVariant());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("eng", locale0.getISO3Language());
//       assertNull(object0);
//   }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = 3097;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal time style 3097
         //
      }
  }

  @Test(timeout = 4000)
  public void test46() {}
//   @Test(timeout = 4000)
//   public void test46()  throws Throwable  {
//       String string0 = ";kW";
//       TimeZone timeZone0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
//       assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(";kW", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = 0;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertEquals(";245", string1);
//       assertEquals(9, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(";kW", fastDateFormat0.getPattern());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(string1);
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(string0.equals((Object)string1));
//       assertNotSame(string1, string0);
//       assertNotSame(string0, string1);
//   }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "Z*DOj]j+`)x~>$p|3<";
      TimeZone timeZone0 = null;
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
      }
  }

  @Test(timeout = 4000)
  public void test48() {}
//   @Test(timeout = 4000)
//   public void test48()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       int int0 = 2;
//       Locale locale0 = Locale.GERMAN;
//       assertEquals("deu", locale0.getISO3Language());
//       assertEquals("de", locale0.getLanguage());
//       assertEquals("de", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       String string0 = fastDateFormat0.format((long) int0);
//       assertEquals("1/1/70 12:00 AM", string0);
//       assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: A
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test49() {}
//   @Test(timeout = 4000)
//   public void test49()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.CHINESE;
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.toString();
//       assertEquals("FastDateFormat[yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z]", string0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("", locale0.getCountry());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("zh", locale0.toString());
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u65F6'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string0);
//   }

  @Test(timeout = 4000)
  public void test50() {}
//   @Test(timeout = 4000)
//   public void test50()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertEquals(31, int1);
//       assertEquals(31, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("EEEE, MMMM d, yyyy", fastDateFormat0.getPattern());
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//   }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "SaMMzj`5Gek}";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 2;
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd.MM.yyyy", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      String string0 = fastDateFormat0.format((long) int0);
      assertEquals("01.01.1970", string0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("dd.MM.yyyy", fastDateFormat0.getPattern());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test53() {}
//   @Test(timeout = 4000)
//   public void test53()  throws Throwable  {
//       String string0 = "";
//       int int0 = 2;
//       Locale locale0 = Locale.ITALY;
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertEquals("H.mm.ss", fastDateFormat0.getPattern());
//       assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getDateInstance(int0, locale0);
//       assertEquals("IT", locale0.getCountry());
//       assertEquals("ita", locale0.getISO3Language());
//       assertEquals("it", locale0.getLanguage());
//       assertEquals("ITA", locale0.getISO3Country());
//       assertEquals("", locale0.getVariant());
//       assertEquals("it_IT", locale0.toString());
//       assertEquals("d-MMM-yyyy", fastDateFormat1.getPattern());
//       assertEquals(13, fastDateFormat1.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       
//       int int1 = 2;
//       FastDateFormat fastDateFormat2 = FastDateFormat.getInstance();
//       assertEquals(21, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("M/d/yy h:mm a", fastDateFormat2.getPattern());
//       assertNotNull(fastDateFormat2);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       
//       long long0 = 853L;
//       String string1 = "/dFyC9";
//       assertNotSame(string1, string0);
//       
//       Locale locale1 = Locale.CANADA_FRENCH;
//       assertEquals("CAN", locale1.getISO3Country());
//       assertEquals("fr", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("fr_CA", locale1.toString());
//       assertEquals("fra", locale1.getISO3Language());
//       assertEquals("CA", locale1.getCountry());
//       assertNotNull(locale1);
//       assertFalse(locale1.equals((Object)locale0));
//       assertNotSame(locale1, locale0);
//       
//       // Undeclared exception!
//       try {
//         FastDateFormat fastDateFormat3 = FastDateFormat.getInstance(string1, locale1);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: C
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
      //  // Unstable assertion: assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      int int0 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals((-1455260575), int0);
      //  // Unstable assertion: assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      
      String string0 = fastDateFormat0.format((long) int0);
      //  // Unstable assertion: assertEquals("12/15/69 3:45 AM", string0);
      //  // Unstable assertion: assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals("M/d/yy h:mm a", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertNotNull(string0);
  }
}
