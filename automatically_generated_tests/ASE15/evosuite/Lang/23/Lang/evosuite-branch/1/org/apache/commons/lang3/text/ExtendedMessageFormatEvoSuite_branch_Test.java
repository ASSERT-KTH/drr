/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:35 GMT 2014
 */

package org.apache.commons.lang3.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.RoundingMode;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.Format;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ExtendedMessageFormatEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "3/S\"l{6,'o{A&:x";
      Locale locale0 = null;
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 8
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "ARRAwig ZV[e(!";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("ARRAwig ZV[e(!", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      String string1 = "W.{  ";
      assertNotSame(string1, string0);
      
      // Undeclared exception!
      try {
        extendedMessageFormat0.applyPattern(string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 3
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "v1{}i@;^(X";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 3: }
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "~[$mpisG;zQ1Bc";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("~[$mpisG;zQ1Bc", extendedMessageFormat0.toPattern());
      
      HashMap<String, FormatFactory> hashMap0 = null;
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotNull(extendedMessageFormat1);
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertEquals("~[$mpisG;zQ1Bc", extendedMessageFormat1.toPattern());
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertTrue(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertEquals("~[$mpisG;zQ1Bc", extendedMessageFormat0.toPattern());
      assertEquals("~[$mpisG;zQ1Bc", extendedMessageFormat1.toPattern());
      assertTrue(boolean0);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "~[$*piysG;zQ1Bc";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("~[$*piysG;zQ1Bc", extendedMessageFormat0.toPattern());
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotNull(extendedMessageFormat1);
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("~[$*piysG;zQ1Bc", extendedMessageFormat1.toPattern());
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertFalse(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertEquals("~[$*piysG;zQ1Bc", extendedMessageFormat0.toPattern());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("~[$*piysG;zQ1Bc", extendedMessageFormat1.toPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "'I\"";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("I\"", extendedMessageFormat0.toPattern());
      
      Object object0 = null;
      boolean boolean0 = extendedMessageFormat0.equals(object0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("I\"", extendedMessageFormat0.toPattern());
      assertFalse(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "'I\"";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("I\"", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) hashMap0);
      assertEquals("I\"", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertFalse(boolean0);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "j2S\"{6}yADI:u";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals("j2S\"{6}yADI:u", extendedMessageFormat0.toPattern());
  }

  @Test
  public void test08() {}
//   @Test
//   public void test08()  throws Throwable  {
//       int int0 = 4569;
//       SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateInstance();
//       assertNotNull(simpleDateFormat0);
//       assertEquals("MMM d, yyyy", simpleDateFormat0.toLocalizedPattern());
//       assertEquals("MMM d, yyyy", simpleDateFormat0.toPattern());
//       assertEquals(true, simpleDateFormat0.isLenient());
//       
//       String string0 = "Unterminated quoted string at position ";
//       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
//       assertNotNull(hashMap0);
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       
//       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
//       assertNotNull(extendedMessageFormat0);
//       assertEquals(0, hashMap0.size());
//       assertEquals("{}", hashMap0.toString());
//       assertEquals(true, hashMap0.isEmpty());
//       assertEquals("Unterminated quoted string at position ", extendedMessageFormat0.toPattern());
//       
//       // Undeclared exception!
//       try {
//         extendedMessageFormat0.setFormat(int0, (Format) simpleDateFormat0);
//         fail("Expecting exception: UnsupportedOperationException");
//       
//       } catch(UnsupportedOperationException e) {
//          //
//          // no message in exception (getMessage() returned null)
//          //
//       }
//   }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "u L4'";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("u L4", extendedMessageFormat0.toPattern());
      
      int int0 = extendedMessageFormat0.hashCode();
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("u L4", extendedMessageFormat0.toPattern());
      assertEquals((-913489804), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("", extendedMessageFormat0.toPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      
      int int0 = (-2546);
      DecimalFormat decimalFormat0 = (DecimalFormat)NumberFormat.getInstance(locale0);
      assertNotNull(decimalFormat0);
      assertEquals(2147483647, decimalFormat0.getMaximumIntegerDigits());
      assertEquals("-", decimalFormat0.getNegativePrefix());
      assertEquals(1, decimalFormat0.getMinimumIntegerDigits());
      assertEquals(3, decimalFormat0.getGroupingSize());
      assertEquals("", decimalFormat0.getNegativeSuffix());
      assertEquals("", decimalFormat0.getPositiveSuffix());
      assertEquals(0, decimalFormat0.getMinimumFractionDigits());
      assertEquals("#,##0.###", decimalFormat0.toPattern());
      assertEquals("#.##0,###", decimalFormat0.toLocalizedPattern());
      assertEquals(false, decimalFormat0.isParseBigDecimal());
      assertEquals("", decimalFormat0.getPositivePrefix());
      assertEquals(3, decimalFormat0.getMaximumFractionDigits());
      assertEquals(1, decimalFormat0.getMultiplier());
      assertEquals(false, decimalFormat0.isParseIntegerOnly());
      assertEquals(true, decimalFormat0.isGroupingUsed());
      assertEquals(RoundingMode.HALF_EVEN, decimalFormat0.getRoundingMode());
      assertEquals(false, decimalFormat0.isDecimalSeparatorAlwaysShown());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatByArgumentIndex(int0, (Format) decimalFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "u L4'";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("u L4", extendedMessageFormat0.toPattern());
      
      Format[] formatArray0 = new Format[7];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatsByArgumentIndex(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "The validated character sequence is blank";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("The validated character sequence is blank", extendedMessageFormat0.toPattern());
      
      Format[] formatArray0 = new Format[8];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormats(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "'I\"";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("I\"", extendedMessageFormat0.toPattern());
      
      String string1 = extendedMessageFormat0.toPattern();
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("I\"", extendedMessageFormat0.toPattern());
      assertEquals("I\"", string1);
  }
}
