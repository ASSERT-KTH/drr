/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:18:45 GMT 2014
 */

package org.apache.commons.lang3.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.Format;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import org.apache.commons.lang3.text.ExtendedMessageFormat;
import org.apache.commons.lang3.text.FormatFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class ExtendedMessageFormatEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      assertEquals(0, hashMap0.size());
      
      String string0 = "ly{,2J]$:/pE9Bw";
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 3: ,
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\\%<vJ~G%{2  (";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 9: 2  (
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "3\"-Z<{ ";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 6
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Az]2/4n]4fw*9";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("Az]2/4n]4fw*9", extendedMessageFormat0.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0);
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotNull(extendedMessageFormat1);
      assertEquals("Az]2/4n]4fw*9", extendedMessageFormat1.toPattern());
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertFalse(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertFalse(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertFalse(boolean0);
      assertEquals("Az]2/4n]4fw*9", extendedMessageFormat0.toPattern());
      assertEquals("Az]2/4n]4fw*9", extendedMessageFormat1.toPattern());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "'O:\\9`>N!Sk=r~7";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat0.toPattern());
      
      ExtendedMessageFormat extendedMessageFormat1 = new ExtendedMessageFormat(string0);
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertNotNull(extendedMessageFormat1);
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat1.toPattern());
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) extendedMessageFormat1);
      assertTrue(extendedMessageFormat0.equals((Object)extendedMessageFormat1));
      assertTrue(extendedMessageFormat1.equals((Object)extendedMessageFormat0));
      assertNotSame(extendedMessageFormat0, extendedMessageFormat1);
      assertNotSame(extendedMessageFormat1, extendedMessageFormat0);
      assertTrue(boolean0);
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat0.toPattern());
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat1.toPattern());
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "'O:\\9`>N!Sk=r~7";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat0.toPattern());
      
      Object object0 = null;
      boolean boolean0 = extendedMessageFormat0.equals(object0);
      assertFalse(boolean0);
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat0.toPattern());
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", extendedMessageFormat0.toPattern());
      
      boolean boolean0 = extendedMessageFormat0.equals((Object) locale0);
      assertFalse(boolean0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", extendedMessageFormat0.toPattern());
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "fbf=W(_sKU?{6,y'P}{t";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format argument index at position 19: t
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "";
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("", extendedMessageFormat0.toPattern());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int int0 = 144;
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormat(int0, (Format) extendedMessageFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "'O:\\9`>N!Sk=r~7";
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat0.toPattern());
      
      int int0 = extendedMessageFormat0.hashCode();
      assertEquals((-190643615), int0);
      assertEquals("O:\\9`>N!Sk=r~7", extendedMessageFormat0.toPattern());
      
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatByArgumentIndex(int0, (Format) extendedMessageFormat0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "H(fCq";
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("h(fcq", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("h(fcq", locale0.getLanguage());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("h(fcq", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("h(fcq", locale0.getLanguage());
      assertEquals("H(fCq", extendedMessageFormat0.toPattern());
      
      Format[] formatArray0 = new Format[8];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormatsByArgumentIndex(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "{1 }e$5' H/`}.Hgl";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals(0, hashMap0.size());
      assertEquals("{}", hashMap0.toString());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{1}e$5 H/`}.Hgl", extendedMessageFormat0.toPattern());
      
      Format[] formatArray0 = new Format[17];
      // Undeclared exception!
      try {
        extendedMessageFormat0.setFormats(formatArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "Az]2/4n]4fw*9";
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat(string0, (Map<String, ? extends FormatFactory>) hashMap0);
      assertNotNull(extendedMessageFormat0);
      assertEquals("Az]2/4n]4fw*9", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      String string1 = extendedMessageFormat0.toPattern();
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertEquals("Az]2/4n]4fw*9", string1);
      assertEquals("Az]2/4n]4fw*9", extendedMessageFormat0.toPattern());
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "b=W8_# K{6,y'";
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      
      HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertEquals(true, hashMap0.isEmpty());
      assertEquals("{}", hashMap0.toString());
      
      ExtendedMessageFormat extendedMessageFormat0 = null;
      try {
        extendedMessageFormat0 = new ExtendedMessageFormat(string0, locale0, (Map<String, ? extends FormatFactory>) hashMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unterminated format element at position 11
         //
      }
  }
}
