/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:17:58 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.LookupTranslator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class LookupTranslatorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharSequence[][] charSequenceArray0 = new CharSequence[8][3];
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      int int0 = Integer.MAX_VALUE;
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("7FFFFFFF", string0);
      assertNotNull(string0);
      
      charSequenceArray1[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray1[0]);
      assertEquals("7FFFFFFF", charSequenceArray1[0].toString());
      assertEquals(8, charSequenceArray1[0].length());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      String string1 = locale0.getDisplayLanguage();
      assertEquals("Chinese", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      CharSequence[] charSequenceArray2 = new CharSequence[4];
      assertFalse(charSequenceArray2.equals((Object)charSequenceArray1));
      assertNotSame(charSequenceArray2, charSequenceArray1);
      
      charSequenceArray2[0] = (CharSequence) string1;
      assertNotNull(charSequenceArray2[0]);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(7, charSequenceArray2[0].length());
      assertEquals("Chinese", charSequenceArray2[0].toString());
      
      charSequenceArray2[1] = (CharSequence) string1;
      assertNotNull(charSequenceArray2[1]);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("Chinese", charSequenceArray2[1].toString());
      assertEquals(7, charSequenceArray2[1].length());
      
      charSequenceArray0[1] = charSequenceArray2;
      assertNotNull(charSequenceArray0[1]);
      
      charSequenceArray0[2] = charSequenceArray0[0];
      assertNotNull(charSequenceArray0[2]);
      
      charSequenceArray0[3] = charSequenceArray0[2];
      assertNotNull(charSequenceArray0[3]);
      
      charSequenceArray0[4] = charSequenceArray0[1];
      assertNotNull(charSequenceArray0[4]);
      
      charSequenceArray0[5] = charSequenceArray0[1];
      assertNotNull(charSequenceArray0[5]);
      
      charSequenceArray0[6] = charSequenceArray0[5];
      assertNotNull(charSequenceArray0[6]);
      
      charSequenceArray0[7] = charSequenceArray0[3];
      assertNotNull(charSequenceArray0[7]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      String string2 = lookupTranslator0.translate((CharSequence) string1);
      assertEquals("Chinese", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      int int0 = (-1);
      String string0 = CharSequenceTranslator.hex(int0);
      assertEquals("FFFFFFFF", string0);
      assertNotNull(string0);
      
      CharSequence[][] charSequenceArray0 = new CharSequence[1][8];
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      charSequenceArray1[0] = (CharSequence) string0;
      assertNotNull(charSequenceArray1[0]);
      assertEquals(8, charSequenceArray1[0].length());
      assertEquals("FFFFFFFF", charSequenceArray1[0].toString());
      
      charSequenceArray0[0] = charSequenceArray1;
      assertNotNull(charSequenceArray0[0]);
      
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);
      assertNotNull(lookupTranslator0);
      
      int int1 = 0;
      StringWriter stringWriter0 = new StringWriter(int1);
      assertNotNull(stringWriter0);
      assertFalse(int1 == int0);
      assertEquals("", stringWriter0.toString());
      
      lookupTranslator0.translate((CharSequence) string0, (Writer) stringWriter0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals("FFFFFFFF", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharSequence[][] charSequenceArrayArray0 = null;
      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArrayArray0);
      assertNotNull(lookupTranslator0);
  }
}
