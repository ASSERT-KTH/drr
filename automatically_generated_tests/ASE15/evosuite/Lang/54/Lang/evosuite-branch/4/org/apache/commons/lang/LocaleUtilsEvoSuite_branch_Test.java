/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:02:39 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class LocaleUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayScript(locale0);
      assertEquals("", string0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string0);
      
      List list0 = LocaleUtils.countriesByLanguage(string0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(list0);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "MT";
      List list0 = LocaleUtils.languagesByCountry(string0);
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertTrue(boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "mUll0g3:*!1";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("mull0g3:*!1", locale0.getLanguage());
      assertEquals("MULL0G3:*!1", locale0.getCountry());
      assertEquals("mull0g3:*!1_MULL0G3:*!1_mUll0g3:*!1", locale0.toString());
      assertEquals("mUll0g3:*!1", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
      assertEquals("mull0g3:*!1", locale0.getLanguage());
      assertEquals("MULL0G3:*!1", locale0.getCountry());
      assertEquals("mull0g3:*!1_MULL0G3:*!1_mUll0g3:*!1", locale0.toString());
      assertEquals("mUll0g3:*!1", locale0.getVariant());
  }

  @Test
  public void test04()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertEquals(false, set0.isEmpty());
      assertEquals(156, set0.size());
      assertNotNull(set0);
      
      Set set1 = LocaleUtils.availableLocaleSet();
      assertSame(set1, set0);
      assertEquals(156, set1.size());
      assertEquals(false, set1.isEmpty());
      assertNotNull(set1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "mUll0g3:*!1";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("mull0g3:*!1", locale0.getLanguage());
      assertEquals("mull0g3:*!1_MULL0G3:*!1_mUll0g3:*!1", locale0.toString());
      assertEquals("MULL0G3:*!1", locale0.getCountry());
      assertEquals("mUll0g3:*!1", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = null;
      Locale locale1 = LocaleUtils.toLocale(string1);
      assertNull(locale1);
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertEquals(4, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals("mull0g3:*!1", locale0.getLanguage());
      assertEquals("mull0g3:*!1_MULL0G3:*!1_mUll0g3:*!1", locale0.toString());
      assertEquals("MULL0G3:*!1", locale0.getCountry());
      assertEquals("mUll0g3:*!1", locale0.getVariant());
      assertNotNull(list0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "mUll0g3:*!1";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("MULL0G3:*!1", locale0.getCountry());
      assertEquals("mull0g3:*!1", locale0.getLanguage());
      assertEquals("mUll0g3:*!1", locale0.getVariant());
      assertEquals("mull0g3:*!1_MULL0G3:*!1_mUll0g3:*!1", locale0.toString());
      assertNotNull(locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals("MULL0G3:*!1", locale0.getCountry());
      assertEquals("mull0g3:*!1", locale0.getLanguage());
      assertEquals("mUll0g3:*!1", locale0.getVariant());
      assertEquals("mull0g3:*!1_MULL0G3:*!1_mUll0g3:*!1", locale0.toString());
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test07()  throws Throwable  {
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList(locale0, locale0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "yp_XPa_\\KS$H}";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yp_XPa_\\KS$H}
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "yp_XP_\\K$5}";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("yp", locale0.getLanguage());
      assertEquals("yp_XP_\\K$5}", locale0.toString());
      assertEquals("XP", locale0.getCountry());
      assertEquals("\\K$5}", locale0.getVariant());
      assertNotNull(locale0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "yp_Xa_KR\"";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yp_Xa_KR\"
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = locale0.toString();
      assertEquals("zh_TW", string0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale0.equals((Object)locale1));
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale1);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "yp_^$y}";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: yp_^$y}
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "dp_\"XPuz_\\K$5";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dp_\"XPuz_\\K$5
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "rgayche.commonsEan.LQcakeUti";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: rgayche.commonsEan.LQcakeUti
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "u{o3JM{";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: u{o3JM{
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "mUll0g3:*!1";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: mUll0g3:*!1
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "dp_X=Pz_\\K$5";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dp_X=Pz_\\K$5
         //
      }
  }

  @Test
  public void test18() {}
//   @Test
//   public void test18()  throws Throwable  {
//       Locale locale0 = Locale.JAPAN;
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       String string0 = locale0.getDisplayLanguage();
//       assertEquals("\u65E5\u672C\u8A9E", string0);
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("ja_JP", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(string0);
//       
//       // Undeclared exception!
//       try {
//         Locale locale1 = LocaleUtils.toLocale(string0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Invalid locale format: \u65E5\u672C\u8A9E
//          //
//       }
//   }

  @Test
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRANCE;
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertNotNull(locale1);
      
      String string0 = locale0.getDisplayCountry(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("Japon", string0);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertNotNull(string0);
      
      // Undeclared exception!
      try {
        Locale locale2 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: Japon
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "it";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test21()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }
}
