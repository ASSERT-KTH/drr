/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:21:15 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.apache.commons.lang.LocaleUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class LocaleUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "<itZ=6&7N4WIOUKiQ9";
      List list0 = LocaleUtils.countriesByLanguage(string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = "<itZ=6&7N4WIOUKiQ9";
      List list0 = LocaleUtils.languagesByCountry(string0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = null;
      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Set set0 = LocaleUtils.availableLocaleSet();
      assertNotNull(set0);
      assertEquals(156, set0.size());
      assertEquals(false, set0.isEmpty());
      
      Set set1 = LocaleUtils.availableLocaleSet();
      assertNotNull(set1);
      assertEquals(156, set1.size());
      assertEquals(false, set1.isEmpty());
      assertSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA;
      assertNotNull(locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale0, locale1);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      
      String string0 = locale0.toString();
      assertNotNull(string0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", string0);
      
      Locale locale1 = new Locale(string0, string0, string0);
      assertNotNull(locale1);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_kr_KO_KR_ko_KR", locale1.toString());
      assertEquals("ko_kr", locale1.getLanguage());
      assertEquals("KO_KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      List list0 = LocaleUtils.localeLookupList(locale1);
      assertNotNull(list0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals("ko_kr_KO_KR_ko_KR", locale1.toString());
      assertEquals("ko_kr", locale1.getLanguage());
      assertEquals("KO_KR", locale1.getCountry());
      assertEquals("ko_KR", locale1.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = null;
      List list0 = LocaleUtils.localeLookupList(locale0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "dz_ZA[=89:e?+(=[dh";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dz_ZA[=89:e?+(=[dh
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "dz_Abhs;8hn8-(r[d2";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dz_Abhs;8hn8-(r[d2
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "dz_Y$Ys89Ohn8-(=[dh";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dz_Y$Ys89Ohn8-(=[dh
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "dz_[YA=hshnw-(=^h";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dz_[YA=hshnw-(=^h
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "dz_=rhXs;8hn8-(=E h";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: dz_=rhXs;8hn8-(=E h
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "org.apzche.comCons.lang.LocaleUt4ls";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: org.apzche.comCons.lang.LocaleUt4ls
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "b~@!v}ekkWu";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: b~@!v}ekkWu
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "l3Zd?%8";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: l3Zd?%8
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "}eUY)J/EFt-+26";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: }eUY)J/EFt-+26
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: 
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      String string0 = locale0.toString();
      assertNotNull(string0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de_DE", string0);
      
      Locale locale1 = LocaleUtils.toLocale(string0);
      assertNotNull(locale1);
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de_DE", locale1.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertTrue(locale1.equals((Object)locale0));
      assertTrue(locale0.equals((Object)locale1));
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = "ja";
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = null;
      Locale locale0 = LocaleUtils.toLocale(string0);
      assertNull(locale0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "<itZ=6&7N4WIOUKiQ9";
      // Undeclared exception!
      try {
        Locale locale0 = LocaleUtils.toLocale(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid locale format: <itZ=6&7N4WIOUKiQ9
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocaleUtils localeUtils0 = new LocaleUtils();
      assertNotNull(localeUtils0);
  }
}
