/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:55:15 GMT 2014
 */

package org.apache.commons.lang.builder;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EqualsBuilderEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean[] booleanArray0 = new boolean[6];
      boolean[] booleanArray1 = new boolean[6];
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
  }

  @Test
  public void test01()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean[] booleanArray0 = new boolean[6];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
  }

  @Test
  public void test02()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      boolean[] booleanArray0 = new boolean[4];
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(booleanArray0, booleanArray0);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
  }

  @Test
  public void test03()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      short short0 = (short) (-42);
      float[] floatArray0 = new float[9];
      float[] floatArray1 = new float[9];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      floatArray1[6] = (float) short0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, (-42.0F), 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test
  public void test04()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = new float[2];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(floatArray0.equals((Object)floatArray1));
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test
  public void test05()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      float[] floatArray0 = new float[2];
      float[] floatArray1 = null;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray1, floatArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
  }

  @Test
  public void test06()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      float[] floatArray0 = new float[13];
      float[] floatArray1 = new float[9];
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(floatArray0, floatArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(floatArray0.equals((Object)floatArray1));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(floatArray1, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(floatArray1.equals((Object)floatArray0));
  }

  @Test
  public void test07()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      float[] floatArray0 = new float[13];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
  }

  @Test
  public void test08()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[26];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test09()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      double[] doubleArray0 = new double[10];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
  }

  @Test
  public void test10()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      double[] doubleArray0 = new double[9];
      double double0 = 0.7543593084771545;
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[5] = double0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) doubleArray0, (Object) doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.7543593084771545, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(doubleArray0, doubleArray1);
      assertNotSame(doubleArray0, doubleArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.7543593084771545, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test11()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[7];
      byte[] byteArray1 = new byte[1];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test
  public void test12()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
  }

  @Test
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = new boolean[5];
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte[] byteArray0 = new byte[8];
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(byteArray0, byteArray0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
  }

  @Test
  public void test14()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      char[] charArray0 = new char[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
  }

  @Test
  public void test15()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = new boolean[5];
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      char[] charArray0 = new char[2];
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(charArray0, charArray0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
  }

  @Test
  public void test16()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[8];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
  }

  @Test
  public void test17()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[5];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(longArray1, longArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
      
      short[] shortArray0 = new short[9];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0, shortArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertNotSame(longArray1, longArray0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(longArray0, longArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test
  public void test18()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[5];
      int[] intArray1 = new int[5];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test
  public void test19()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[5];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(intArray1, intArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test
  public void test20()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[10];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
  }

  @Test
  public void test21()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      char[] charArray0 = new char[10];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) charArray0, (Object) equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      
      int[] intArray0 = new int[2];
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(intArray0, intArray0);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
  }

  @Test
  public void test22()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[5];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      short short0 = (short)63;
      longArray1[1] = (long) short0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(longArray0, longArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new long[] {0L, 63L, 0L, 0L, 0L}, longArray1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(longArray1.equals((Object)longArray0));
      assertFalse(longArray0.equals((Object)longArray1));
  }

  @Test
  public void test23()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      long[] longArray0 = new long[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
  }

  @Test
  public void test24()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(objectArray0.equals((Object)objectArray1));
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      long[] longArray0 = new long[11];
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(longArray0, longArray0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
  }

  @Test
  public void test25()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[9];
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
  }

  @Test
  public void test26()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = new boolean[5];
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      Object[] objectArray0 = new Object[1];
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(objectArray0, objectArray0);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
  }

  @Test
  public void test27()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean boolean0 = false;
      short[] shortArray0 = new short[14];
      short[] shortArray1 = new short[3];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(shortArray0, shortArray1);
      assertNotSame(shortArray1, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0}, shortArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(shortArray0.equals((Object)shortArray1));
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(boolean0, boolean0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
  }

  @Test
  public void test28()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) equalsBuilder0;
      assertNotNull(objectArray0[0]);
      assertEquals(true, equalsBuilder0.isEquals());
      
      Object[] objectArray1 = new Object[1];
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      short short0 = (short) (-660);
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) short0, (float) short0);
      assertNotSame(objectArray1, objectArray0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertNotSame(objectArray0, objectArray1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test
  public void test29()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[7];
      short short0 = (short)3;
      short[] shortArray1 = new short[7];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      shortArray1[2] = short0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)3, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((double) shortArray0[2], (double) shortArray1[2]);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)3, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test
  public void test30()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-1);
      byteArray0[4] = byte0;
      byte[] byteArray1 = new byte[6];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(byteArray0, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte) (-1), (byte)0}, byteArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertFalse(byteArray0.equals((Object)byteArray1));
  }

  @Test
  public void test31()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[9];
      boolean[] booleanArray0 = new boolean[8];
      boolean[] booleanArray1 = new boolean[5];
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(booleanArray0, booleanArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(booleanArray1, booleanArray0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(byteArray0[6], byteArray0[6]);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
  }

  @Test
  public void test32()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[6];
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, byteArray1);
      assertNotSame(byteArray0, byteArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(byteArray1, byteArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(byteArray0.equals((Object)byteArray1));
      assertFalse(byteArray1.equals((Object)byteArray0));
  }

  @Test
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "g'{ -AG";
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = "os.arch";
      assertNotSame(string1, string0);
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) stringArray0[1], (Object) string1);
      assertFalse(boolean0);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test34()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[6];
      int int0 = (-1931);
      int[] intArray1 = new int[6];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[3] = int0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-1931), 0, 0}, intArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
      
      char char0 = ';';
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(char0, char0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, (-1931), 0, 0}, intArray1);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(intArray1.equals((Object)intArray0));
  }

  @Test
  public void test35()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      char[] charArray0 = new char[4];
      char[] charArray1 = new char[4];
      assertNotSame(charArray1, charArray0);
      assertFalse(charArray1.equals((Object)charArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(charArray0, charArray1);
      assertNotSame(charArray1, charArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(charArray0, charArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
  }

  @Test
  public void test36()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[5];
      Object[] objectArray0 = new Object[5];
      Object[] objectArray1 = new Object[3];
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1);
      assertNotSame(objectArray1, objectArray0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(shortArray0[4], shortArray0[3]);
      assertNotSame(objectArray1, objectArray0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertNotSame(objectArray0, objectArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test
  public void test37()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      short[] shortArray0 = new short[7];
      short[] shortArray1 = new short[7];
      assertNotSame(shortArray1, shortArray0);
      assertFalse(shortArray1.equals((Object)shortArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(shortArray1, shortArray0);
      assertNotSame(shortArray0, shortArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(shortArray1.equals((Object)shortArray0));
      assertFalse(shortArray0.equals((Object)shortArray1));
  }

  @Test
  public void test38()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean boolean0 = true;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = new boolean[6];
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(booleanArray0, booleanArray1);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false, false}, booleanArray0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray1));
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      byte byte0 = (byte)19;
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((int) byte0, (int) byte0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
  }

  @Test
  public void test39()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      int[] intArray0 = new int[6];
      int int0 = (-1931);
      int[] intArray1 = new int[6];
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[3] = int0;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new int[] {0, 0, 0, (-1931), 0, 0}, intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(intArray0.equals((Object)intArray1));
      
      char char0 = ';';
      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((long) char0, (long) intArray0[5]);
      assertNotSame(intArray0, intArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertFalse(intArray0.equals((Object)intArray1));
  }

  @Test
  public void test40()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[9];
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) doubleArray0, (Object) doubleArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
  }

  @Test
  public void test41()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      long[] longArray0 = new long[5];
      long[] longArray1 = new long[5];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) longArray0, (Object) longArray1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(longArray0, longArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(true, equalsBuilder1.isEquals());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test
  public void test42()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      
      int int0 = 4159;
      BigDecimal bigDecimal1 = new BigDecimal(int0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(63, bigDecimal1.byteValue());
      assertEquals(4159, bigDecimal1.shortValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) bigDecimal0, (Object) bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotNull(equalsBuilder1);
      assertEquals(63, bigDecimal1.byteValue());
      assertEquals(4159, bigDecimal1.shortValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
  }

  @Test
  public void test43()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(0, bigDecimal1.shortValue());
      assertEquals(0, bigDecimal1.byteValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) bigDecimal0, (Object) bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotNull(equalsBuilder1);
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal1.shortValue());
      assertEquals(0, bigDecimal1.byteValue());
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test
  public void test44()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[6] = (Object) equalsBuilder0;
      assertNotNull(objectArray0[6]);
      assertEquals(true, equalsBuilder0.isEquals());
      
      Object[] objectArray1 = new Object[9];
      assertNotSame(objectArray1, objectArray0);
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray1, objectArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(objectArray1, objectArray0);
      assertNotSame(objectArray0, objectArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder1.isEquals());
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(objectArray0.equals((Object)objectArray1));
  }

  @Test
  public void test45()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      long[] longArray0 = new long[2];
      long[] longArray1 = new long[5];
      assertNotSame(longArray1, longArray0);
      assertFalse(longArray1.equals((Object)longArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) equalsBuilder0, (Object) equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertNotSame(longArray0, longArray1);
      assertNotSame(longArray1, longArray0);
      assertArrayEquals(new long[] {0L, 0L}, longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray1);
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(longArray0.equals((Object)longArray1));
      assertFalse(longArray1.equals((Object)longArray0));
  }

  @Test
  public void test46()  throws Throwable  {
      boolean boolean0 = true;
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = boolean0;
      boolean[] booleanArray1 = new boolean[5];
      assertNotSame(booleanArray1, booleanArray0);
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertNotNull(equalsBuilder1);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
      
      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(booleanArray0[3]);
      assertSame(equalsBuilder1, equalsBuilder2);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertNotSame(booleanArray1, booleanArray0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertSame(equalsBuilder0, equalsBuilder2);
      assertSame(equalsBuilder2, equalsBuilder1);
      assertSame(equalsBuilder2, equalsBuilder0);
      assertNotSame(booleanArray0, booleanArray1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, false}, booleanArray0));
      assertNotNull(equalsBuilder2);
      assertEquals(false, equalsBuilder1.isEquals());
      assertEquals(false, equalsBuilder0.isEquals());
      assertEquals(false, equalsBuilder2.isEquals());
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      assertFalse(booleanArray0.equals((Object)booleanArray1));
  }

  @Test
  public void test47()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean boolean0 = true;
      EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(boolean0);
      assertSame(equalsBuilder1, equalsBuilder0);
      assertSame(equalsBuilder0, equalsBuilder1);
      assertNotNull(equalsBuilder1);
      assertEquals(true, equalsBuilder1.isEquals());
      assertEquals(true, equalsBuilder0.isEquals());
  }

  @Test
  public void test48()  throws Throwable  {
      short short0 = (short)164;
      Integer integer0 = new Integer((int) short0);
      assertEquals(164, (int)integer0);
      
      Integer integer1 = new Integer((int) integer0);
      assertEquals(164, (int)integer1);
      assertNotSame(integer0, integer1);
      assertNotSame(integer1, integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      
      String[] stringArray0 = new String[6];
      String string0 = "R'OJ";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[1] = string0;
      assertNotNull(stringArray0[1]);
      
      String string1 = "serialVersionUID";
      assertNotSame(string1, string0);
      
      stringArray0[2] = string1;
      assertNotNull(stringArray0[2]);
      
      stringArray0[3] = stringArray0[1];
      assertNotNull(stringArray0[3]);
      
      stringArray0[4] = string0;
      assertNotNull(stringArray0[4]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) integer0, (Object) integer1, stringArray0);
      assertTrue(boolean0);
      assertNotSame(integer0, integer1);
      assertNotSame(integer1, integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
  }

  @Test
  public void test49()  throws Throwable  {
      BigInteger bigInteger0 = BigInteger.ZERO;
      assertNotNull(bigInteger0);
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      
      boolean boolean0 = true;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Class<String> class0 = String.class;
      boolean boolean1 = EqualsBuilder.reflectionEquals(object0, (Object) bigDecimal0, boolean0, (Class) class0);
      assertFalse(boolean1);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      Class<BigDecimal> class1 = BigDecimal.class;
      boolean boolean2 = EqualsBuilder.reflectionEquals((Object) bigDecimal0, object0, boolean1, (Class) class1);
      assertFalse(boolean2);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      assertEquals(0, bigInteger0.byteValue());
      assertEquals(0, bigInteger0.shortValue());
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test
  public void test50()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      Object[] objectArray0 = new Object[1];
      char[] charArray0 = new char[2];
      BigDecimal bigDecimal0 = new BigDecimal((double) charArray0[1]);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) bigDecimal0, objectArray0[0], booleanArray0[2]);
      assertFalse(boolean0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
  }

  @Test
  public void test51()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = true;
      Object object1 = null;
      Class<Object> class0 = Object.class;
      boolean boolean1 = EqualsBuilder.reflectionEquals(object1, object0, boolean0, class0);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test52()  throws Throwable  {
      EqualsBuilder equalsBuilder0 = new EqualsBuilder();
      assertNotNull(equalsBuilder0);
      assertEquals(true, equalsBuilder0.isEquals());
      
      boolean boolean0 = false;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) bigDecimal0, boolean0);
      assertFalse(boolean1);
      assertEquals(1, bigInteger0.byteValue());
      assertEquals(1, bigInteger0.shortValue());
      assertEquals(true, equalsBuilder0.isEquals());
      assertEquals(1, bigDecimal0.byteValue());
      assertEquals(1, bigDecimal0.shortValue());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test53()  throws Throwable  {
      short short0 = (short)164;
      Integer integer0 = new Integer((int) short0);
      assertEquals(164, (int)integer0);
      
      String[] stringArray0 = new String[6];
      String string0 = "R'OJ";
      stringArray0[0] = string0;
      assertNotNull(stringArray0[0]);
      
      stringArray0[5] = stringArray0[0];
      assertNotNull(stringArray0[5]);
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) integer0, (Object) integer0, stringArray0);
      assertTrue(boolean0);
      
      Class<String> class0 = String.class;
      String string1 = "4'E'S1J ?C<9IR";
      assertNotSame(string1, string0);
      
      boolean boolean1 = EqualsBuilder.reflectionEquals((Object) stringArray0[5], (Object) string1, boolean0, (Class) class0);
      assertFalse(boolean1);
      assertNotSame(string1, string0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = 4;
      BigDecimal bigDecimal0 = new BigDecimal(int0);
      assertNotNull(bigDecimal0);
      assertEquals(4, bigDecimal0.byteValue());
      assertEquals(4, bigDecimal0.shortValue());
      
      BigDecimal bigDecimal1 = bigDecimal0.movePointRight(int0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotNull(bigDecimal1);
      assertEquals(4, bigDecimal0.byteValue());
      assertEquals(4, bigDecimal0.shortValue());
      assertEquals(-25536, bigDecimal1.shortValue());
      assertEquals(64, bigDecimal1.byteValue());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) bigDecimal1, (Object) bigDecimal0, (Collection) linkedList0);
      assertTrue(boolean0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(4, bigDecimal0.byteValue());
      assertEquals(4, bigDecimal0.shortValue());
      assertEquals(-25536, bigDecimal1.shortValue());
      assertEquals(64, bigDecimal1.byteValue());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }
}
