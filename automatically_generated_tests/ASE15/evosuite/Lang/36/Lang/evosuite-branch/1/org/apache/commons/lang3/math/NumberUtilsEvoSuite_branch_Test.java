/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:47:59 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      String string0 = "5L";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "l";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = ".";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "5E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "e";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "67";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "--v`}N";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "+\"P p_n.\\IpOF";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "Threshold must not be negative";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "e?iG?OT{";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "5E~";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "-";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "0x6C<q08HLf";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x/PmzR";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "0x1";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "-0X";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "-0xdt";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      String string0 = "67";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test023()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)118;
      byte byte2 = NumberUtils.max(byte0, byte1, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)118, byte2);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)97;
      short short1 = (short)508;
      short short2 = NumberUtils.max(short0, short0, short1);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short2 == short1);
      assertFalse(short2 == short0);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short)508, short2);
  }

  @Test
  public void test025()  throws Throwable  {
      short[] shortArray0 = new short[24];
      short short0 = (short) (-1007);
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0[3], shortArray0[4], shortArray0[4]);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1007), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short) (-1);
      short short1 = (short)16;
      int int0 = NumberUtils.max((int) short0, (int) short0, (int) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals(16, int0);
  }

  @Test
  public void test027()  throws Throwable  {
      byte byte0 = (byte)2;
      int int0 = 6614;
      int int1 = NumberUtils.max((int) byte0, int0, (int) byte0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(6614, int1);
  }

  @Test
  public void test028()  throws Throwable  {
      long long0 = 1563L;
      byte byte0 = (byte) (-69);
      long long1 = NumberUtils.max((long) byte0, (long) byte0, long0);
      assertTrue(long1 == long0);
      assertTrue(long0 == long1);
      assertEquals(1563L, long1);
  }

  @Test
  public void test029()  throws Throwable  {
      String string0 = "6C";
      byte byte0 = (byte) (-61);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-61), byte1);
      
      long long0 = (-236L);
      long long1 = NumberUtils.max(long0, (long) byte1, (long) byte1);
      assertTrue(byte1 == byte0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertTrue(byte0 == byte1);
      assertEquals((-61L), long1);
  }

  @Test
  public void test030()  throws Throwable  {
      String string0 = "%UPX*S";
      int int0 = 0;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      long long0 = NumberUtils.max((long) int1, (long) int1, (long) int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertEquals(0L, long0);
  }

  @Test
  public void test031()  throws Throwable  {
      String string0 = "6C";
      byte byte0 = (byte) (-61);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-61), byte1);
      
      byte byte2 = (byte) (-121);
      assertFalse(byte2 == byte1);
      
      byte byte3 = NumberUtils.min(byte1, byte0, byte2);
      assertTrue(byte2 == byte3);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte1 == byte2);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte3);
      assertTrue(byte3 == byte2);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
      assertFalse(byte0 == byte3);
      assertEquals((byte) (-121), byte3);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte) (-61);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte1, byte0, byte0);
      assertTrue(byte2 == byte0);
      assertFalse(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertTrue(byte0 == byte2);
      assertFalse(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte) (-61), byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = null;
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
      
      short short1 = (short) (-851);
      assertFalse(short1 == short0);
      
      short short2 = NumberUtils.min(short0, short0, short1);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertFalse(short0 == short1);
      assertFalse(short0 == short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertEquals((short) (-851), short2);
  }

  @Test
  public void test034()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte) (-9);
      short short0 = NumberUtils.min((short) byte0, (short) byte1, (short) byte0);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertEquals((short) (-9), short0);
  }

  @Test
  public void test035()  throws Throwable  {
      int int0 = 1296;
      int int1 = 18;
      int int2 = NumberUtils.min(int0, int0, int1);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(18, int2);
  }

  @Test
  public void test036()  throws Throwable  {
      int int0 = 545;
      int int1 = 1483;
      int int2 = NumberUtils.min(int1, int0, int0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertTrue(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(545, int2);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "Threshold must not be negative";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
      
      int int0 = NumberUtils.min((int) byte0, (int) byte0, (int) byte0);
      assertEquals(0, int0);
  }

  @Test
  public void test038()  throws Throwable  {
      byte byte0 = (byte)0;
      byte byte1 = (byte)79;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte)79, byte2);
      
      long long0 = NumberUtils.min((long) byte1, (long) byte2, (long) byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals(0L, long0);
  }

  @Test
  public void test039()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-32);
      long long0 = NumberUtils.min((long) byteArray0[3], (long) byte0, (long) byteArray0[3]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-32L), long0);
  }

  @Test
  public void test040()  throws Throwable  {
      short short0 = (short)144;
      float[] floatArray0 = new float[6];
      floatArray0[2] = (float) short0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 144.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(144.0F, float0, 0.01F);
  }

  @Test
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[3];
      float float0 = Float.NaN;
      floatArray0[2] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test042()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test043()  throws Throwable  {
      long long0 = (-3767L);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) long0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {(-3767.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[4] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, Double.NaN, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-91);
      byteArray0[0] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertFalse(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte) (-91), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte1);
  }

  @Test
  public void test046()  throws Throwable  {
      short[] shortArray0 = new short[4];
      short short0 = (short)1215;
      shortArray0[3] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)1215}, shortArray0);
      assertEquals((short)1215, short1);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = 501;
      intArray0[2] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 501, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(501, int1);
  }

  @Test
  public void test049()  throws Throwable  {
      byte byte0 = (byte) (-91);
      long[] longArray0 = new long[10];
      longArray0[0] = (long) byte0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {(-91L), 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long0);
  }

  @Test
  public void test050()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test051()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = (-1080.0F);
      floatArray0[3] = float0;
      float float1 = NumberUtils.min(floatArray0);
      assertTrue(float1 == float0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-1080.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1080.0F), float1, 0.01F);
  }

  @Test
  public void test052()  throws Throwable  {
      float[] floatArray0 = new float[10];
      float float0 = Float.NaN;
      floatArray0[4] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, Float.NaN, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test054()  throws Throwable  {
      int int0 = (-3074);
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) int0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, (-3074.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-3074.0), double0, 0.01D);
  }

  @Test
  public void test055()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test057()  throws Throwable  {
      byte[] byteArray0 = new byte[13];
      byte byte0 = (byte) (-44);
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-44), (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte) (-44), byte1);
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.min(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test059()  throws Throwable  {
      short[] shortArray0 = new short[24];
      short short0 = (short) (-1007);
      shortArray0[3] = short0;
      short short1 = NumberUtils.min(shortArray0);
      assertTrue(short1 == short0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short) (-1007), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short) (-1007), short1);
  }

  @Test
  public void test060()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[8];
      int int0 = (-3426);
      intArray0[6] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, (-3426), 0}, intArray0);
      assertEquals((-3426), int1);
  }

  @Test
  public void test062()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      long[] longArray0 = new long[9];
      long long0 = (-15L);
      longArray0[5] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertTrue(long1 == long0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L, (-15L), 0L, 0L, 0L}, longArray0);
      assertEquals((-15L), long1);
  }

  @Test
  public void test064()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.min(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "Threshold must not be negative";
      // Undeclared exception!
      try {
        BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Thr\"
         //
      }
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = "*C]A] BOd";
      // Undeclared exception!
      try {
        Long long0 = NumberUtils.createLong(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"*C]A] BOd\"
         //
      }
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "0q7b6h8y$\\g]@MY\"e?4";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "4d";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(4.0, (double)double0, 0.01D);
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "rg.apache.commons.lang3.StringUtil";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // rg.apache.commons.lang3.StringUtil is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "6C<q08HLf";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 6C<q08HLf is not a valid number.
         //
      }
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "0d";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "]iKB%L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // ]iKB%L is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "|_s0eWDuF";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // |_s0eWDuF is not a valid number.
         //
      }
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "t;|JFiD";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // t;|JFiD is not a valid number.
         //
      }
  }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "...";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test083()  throws Throwable  {
      String string0 = "67";
      Integer integer0 = (Integer)NumberUtils.createNumber(string0);
      assertEquals(67, (int)integer0);
  }

  @Test
  public void test084() {}
//   @Test
//   public void test084()  throws Throwable  {
//       String string0 = "Ee";
//       try {
//         Number number0 = NumberUtils.createNumber(string0);
//         fail("Expecting exception: NumberFormatException");
//       
//       } catch(NumberFormatException e) {
//          //
//          // Ee is not a valid number.
//          //
//       }
//   }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "Strings must not be null";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be null is not a valid number.
         //
      }
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = " is not a valid number.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         //  is not a valid number. is not a valid number.
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = ".?";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // .? is not a valid number.
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "78[u-x_\"+\\{b2.e";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // 78[u-x_\"+\\{b2.e is not a valid number.
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "-0XIllegalAccessException occurred";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-IllegalAccessException occurred\"
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "0X'zWT`WTWvsR)H<D`";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"'zWT`WTWvsR)H<D`\"
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "-0x";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-\"
         //
      }
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "0xv`}N";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"v`}N\"
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "--Strings must not be null";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "0x1";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test097()  throws Throwable  {
      String string0 = null;
      byte byte0 = (byte) (-91);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-91), byte1);
  }

  @Test
  public void test098()  throws Throwable  {
      String string0 = "0d";
      double double0 = 0.0;
      double double1 = NumberUtils.toDouble(string0, double0);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, double1, 0.01D);
  }

  @Test
  public void test099()  throws Throwable  {
      int int0 = 70;
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) int0);
      assertEquals(70.0F, float0, 0.01F);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = null;
      long long0 = (-1712L);
      long long1 = NumberUtils.toLong(string0, long0);
      assertTrue(long0 == long1);
      assertTrue(long1 == long0);
      assertEquals((-1712L), long1);
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 0;
      String string0 = null;
      int int1 = NumberUtils.toInt(string0, int0);
      assertTrue(int1 == int0);
      assertTrue(int0 == int1);
      assertEquals(0, int1);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test103()  throws Throwable  {
      short[] shortArray0 = new short[1];
      short short0 = (short) (-5743);
      float float0 = NumberUtils.max((float) shortArray0[0], (float) short0, (float) shortArray0[0]);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test104()  throws Throwable  {
      String string0 = "Threshold must not be negative";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test105()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = NumberUtils.min(float0, float0, float0);
      assertTrue(float0 == float1);
      assertTrue(float1 == float0);
      assertEquals(1.0F, float1, 0.01F);
  }

  @Test
  public void test106()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = NumberUtils.min(double0, double0, double0);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals((-1.0), double1, 0.01D);
  }

  @Test
  public void test107()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test108()  throws Throwable  {
      int int0 = 0;
      double double0 = NumberUtils.max((double) int0, (double) int0, (double) int0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "4d";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(4.0F, float0, 0.01F);
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "..";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
  }
}
