/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:19:38 GMT 2014
 */

package org.apache.commons.lang3.math;

import static org.junit.Assert.*;
import org.junit.Test;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.apache.commons.lang3.math.NumberUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class NumberUtilsEvoSuite_branch_Test   {

  @Test
  public void test000() {}
//   @Test
//   public void test000()  throws Throwable  {
//       String string0 = "7F";
//       boolean boolean0 = NumberUtils.isNumber(string0);
//       assertTrue(boolean0);
//   }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "f";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "6D";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test003()  throws Throwable  {
      String string0 = "d";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test004()  throws Throwable  {
      String string0 = "8E";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test005()  throws Throwable  {
      String string0 = "2";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "+vwPBiFO-\" &if=";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test007()  throws Throwable  {
      String string0 = "3eFs~E~md";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "...";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test009()  throws Throwable  {
      String string0 = "..";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "0x*\\";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test011()  throws Throwable  {
      String string0 = "0xB5";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test012()  throws Throwable  {
      String string0 = "0xa~S%s8 igpZ.hh'}gE";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test013()  throws Throwable  {
      String string0 = "-0.";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "-0x";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = "H";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "----";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = null;
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = "E|o";
      boolean boolean0 = NumberUtils.isNumber(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      String string0 = "6";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = NumberUtils.isDigits(string0);
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      byte byte0 = (byte)13;
      byte byte1 = (byte)108;
      byte byte2 = NumberUtils.max(byte0, byte0, byte1);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)108, byte2);
  }

  @Test
  public void test022()  throws Throwable  {
      byte byte0 = (byte) (-11);
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.max(byte0, byte1, byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test023()  throws Throwable  {
      short short0 = (short)921;
      short short1 = (short) (-1654);
      short short2 = NumberUtils.min(short0, short1, short0);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertTrue(short1 == short2);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertEquals((short) (-1654), short2);
      
      short short3 = NumberUtils.max(short2, short2, short0);
      assertFalse(short2 == short0);
      assertFalse(short2 == short3);
      assertTrue(short2 == short1);
      assertTrue(short3 == short0);
      assertFalse(short3 == short1);
      assertFalse(short3 == short2);
      assertTrue(short1 == short2);
      assertFalse(short1 == short3);
      assertFalse(short1 == short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertTrue(short0 == short3);
      assertEquals((short)921, short3);
  }

  @Test
  public void test024()  throws Throwable  {
      short short0 = (short)0;
      short short1 = (short)46;
      short short2 = NumberUtils.max(short0, short1, short0);
      assertFalse(short0 == short2);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertTrue(short1 == short2);
      assertFalse(short2 == short0);
      assertTrue(short2 == short1);
      assertEquals((short)46, short2);
  }

  @Test
  public void test025()  throws Throwable  {
      short short0 = (short)921;
      short short1 = NumberUtils.min(short0, short0, short0);
      assertTrue(short1 == short0);
      assertTrue(short0 == short1);
      assertEquals((short)921, short1);
      
      short short2 = NumberUtils.max(short1, short1, short0);
      assertTrue(short2 == short0);
      assertTrue(short2 == short1);
      assertTrue(short1 == short0);
      assertTrue(short1 == short2);
      assertTrue(short0 == short2);
      assertTrue(short0 == short1);
      assertEquals((short)921, short2);
  }

  @Test
  public void test026()  throws Throwable  {
      short short0 = (short) (-1654);
      short short1 = (short)120;
      int int0 = NumberUtils.max((int) short0, (int) short0, (int) short1);
      assertFalse(short0 == short1);
      assertFalse(short1 == short0);
      assertEquals(120, int0);
  }

  @Test
  public void test027()  throws Throwable  {
      String string0 = "Fw7~Wo$H3P9#`F`";
      byte byte0 = (byte) (-76);
      byte byte1 = NumberUtils.toByte(string0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-76), byte1);
      
      byte byte2 = (byte)43;
      assertFalse(byte2 == byte1);
      
      int int0 = NumberUtils.max((int) byte1, (int) byte2, (int) byte1);
      assertTrue(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte2);
      assertTrue(byte0 == byte1);
      assertEquals(43, int0);
  }

  @Test
  public void test028()  throws Throwable  {
      long long0 = (-2281L);
      byte byte0 = (byte) (-78);
      long long1 = 13L;
      long long2 = NumberUtils.max((long) byte0, long0, long1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertFalse(long0 == long2);
      assertEquals(13L, long2);
  }

  @Test
  public void test029()  throws Throwable  {
      long long0 = (-2281L);
      long long1 = 13L;
      long long2 = NumberUtils.max(long0, long1, long0);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      assertFalse(long0 == long2);
      assertFalse(long0 == long1);
      assertTrue(long1 == long2);
      assertFalse(long1 == long0);
      assertEquals(13L, long2);
  }

  @Test
  public void test030()  throws Throwable  {
      long long0 = (-2281L);
      byte byte0 = (byte) (-78);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-78), byte1);
      
      long long1 = NumberUtils.max((long) byte0, long0, (long) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertEquals((-78L), long1);
  }

  @Test
  public void test031()  throws Throwable  {
      byte byte0 = (byte)100;
      byte byte1 = (byte)0;
      byte byte2 = NumberUtils.min(byte0, byte0, byte1);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertTrue(byte1 == byte2);
      assertFalse(byte1 == byte0);
      assertFalse(byte2 == byte0);
      assertTrue(byte2 == byte1);
      assertEquals((byte)0, byte2);
  }

  @Test
  public void test032()  throws Throwable  {
      byte byte0 = (byte)67;
      byte byte1 = (byte) (-28);
      byte byte2 = NumberUtils.min(byte0, byte1, byte1);
      assertFalse(byte1 == byte0);
      assertTrue(byte1 == byte2);
      assertTrue(byte2 == byte1);
      assertFalse(byte2 == byte0);
      assertFalse(byte0 == byte1);
      assertFalse(byte0 == byte2);
      assertEquals((byte) (-28), byte2);
  }

  @Test
  public void test033()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-95);
      byteArray0[1] = byte0;
      short[] shortArray0 = new short[26];
      short short0 = NumberUtils.min(shortArray0[8], shortArray0[3], (short) byteArray0[1]);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0}, byteArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short) (-95), short0);
  }

  @Test
  public void test034()  throws Throwable  {
      String string0 = "E|o";
      int int0 = NumberUtils.toInt(string0);
      assertEquals(0, int0);
      
      short short0 = (short)0;
      int int1 = (-937);
      assertFalse(int1 == int0);
      
      int int2 = NumberUtils.min((int) short0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-937), int2);
  }

  @Test
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 390;
      intArray0[7] = int0;
      int int1 = NumberUtils.min(intArray0[7], intArray0[9], intArray0[7]);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 390, 0, 0}, intArray0);
      assertEquals(0, int1);
  }

  @Test
  public void test036()  throws Throwable  {
      long long0 = (-2281L);
      byte byte0 = (byte) (-78);
      byte byte1 = NumberUtils.min(byte0, byte0, byte0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-78), byte1);
      
      long long1 = NumberUtils.min((long) byte0, long0, (long) byte1);
      assertTrue(long1 == long0);
      assertTrue(byte0 == byte1);
      assertTrue(byte1 == byte0);
      assertTrue(long0 == long1);
      assertEquals((-2281L), long1);
  }

  @Test
  public void test037()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte) (-4);
      long long0 = NumberUtils.min((long) byteArray0[0], (long) byteArray0[0], (long) byte0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals((-4L), long0);
  }

  @Test
  public void test038()  throws Throwable  {
      byte byte0 = (byte) (-76);
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) byte0;
      float float0 = NumberUtils.max(floatArray0);
      assertArrayEquals(new float[] {(-76.0F), 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test
  public void test039()  throws Throwable  {
      float[] floatArray0 = new float[5];
      float float0 = Float.NaN;
      floatArray0[3] = float0;
      float float1 = NumberUtils.max(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, Float.NaN, 0.0F}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test040()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.max(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test041()  throws Throwable  {
      byte byte0 = (byte)43;
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) byte0;
      double double0 = NumberUtils.max(doubleArray0);
      assertArrayEquals(new double[] {0.0, 43.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(43.0, double0, 0.01D);
  }

  @Test
  public void test042()  throws Throwable  {
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = double0;
      double double1 = NumberUtils.max(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test043()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.max(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte)60;
      byteArray0[7] = byte0;
      byte byte1 = NumberUtils.max(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)60, (byte)0}, byteArray0);
      assertEquals((byte)60, byte1);
  }

  @Test
  public void test045()  throws Throwable  {
      byte[] byteArray0 = null;
      // Undeclared exception!
      try {
        byte byte0 = NumberUtils.max(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test046()  throws Throwable  {
      short short0 = (short) (-101);
      short[] shortArray0 = new short[7];
      shortArray0[0] = short0;
      short short1 = NumberUtils.max(shortArray0);
      assertFalse(short1 == short0);
      assertArrayEquals(new short[] {(short) (-101), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short)0, short1);
  }

  @Test
  public void test047()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.max(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test048()  throws Throwable  {
      int[] intArray0 = new int[10];
      int int0 = 390;
      intArray0[3] = int0;
      int int1 = NumberUtils.max(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, 0, 0, 390, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(390, int1);
  }

  @Test
  public void test049()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.max(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test050()  throws Throwable  {
      byte byte0 = (byte)67;
      long[] longArray0 = new long[8];
      longArray0[2] = (long) byte0;
      long long0 = NumberUtils.max(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 67L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(67L, long0);
  }

  @Test
  public void test051()  throws Throwable  {
      long[] longArray0 = null;
      // Undeclared exception!
      try {
        long long0 = NumberUtils.max(longArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test052()  throws Throwable  {
      int int0 = (-1);
      float[] floatArray0 = new float[5];
      floatArray0[1] = (float) int0;
      float float0 = NumberUtils.min(floatArray0);
      assertArrayEquals(new float[] {0.0F, (-1.0F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test
  public void test053()  throws Throwable  {
      float[] floatArray0 = new float[6];
      float float0 = Float.NaN;
      floatArray0[5] = float0;
      float float1 = NumberUtils.min(floatArray0);
      //  // Unstable assertion: assertTrue(float1 == float0);
      //  // Unstable assertion: assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, Float.NaN}, floatArray0, 0.01F);
      //  // Unstable assertion: assertEquals(Float.NaN, float1, 0.01F);
  }

  @Test
  public void test054()  throws Throwable  {
      float[] floatArray0 = null;
      // Undeclared exception!
      try {
        float float0 = NumberUtils.min(floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test055()  throws Throwable  {
      byte byte0 = (byte) (-78);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = (double) byte0;
      double double0 = NumberUtils.min(doubleArray0);
      assertArrayEquals(new double[] {0.0, (-78.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals((-78.0), double0, 0.01D);
  }

  @Test
  public void test056()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = Double.NaN;
      doubleArray0[2] = double0;
      double double1 = NumberUtils.min(doubleArray0);
      //  // Unstable assertion: assertTrue(double1 == double0);
      //  // Unstable assertion: assertArrayEquals(new double[] {0.0, 0.0, Double.NaN, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      //  // Unstable assertion: assertEquals(Double.NaN, double1, 0.01D);
  }

  @Test
  public void test057()  throws Throwable  {
      double[] doubleArray0 = null;
      // Undeclared exception!
      try {
        double double0 = NumberUtils.min(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test058()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-95);
      byteArray0[1] = byte0;
      byte byte1 = NumberUtils.min(byteArray0);
      assertTrue(byte1 == byte0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-95), (byte)0}, byteArray0);
      assertEquals((byte) (-95), byte1);
  }

  @Test
  public void test059()  throws Throwable  {
      byte byte0 = (byte) (-95);
      short[] shortArray0 = new short[26];
      shortArray0[2] = (short) byte0;
      short short0 = NumberUtils.min(shortArray0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short) (-95), (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertEquals((short) (-95), short0);
  }

  @Test
  public void test060()  throws Throwable  {
      short[] shortArray0 = null;
      // Undeclared exception!
      try {
        short short0 = NumberUtils.min(shortArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test061()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = (-1603);
      intArray0[1] = int0;
      int int1 = NumberUtils.min(intArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new int[] {0, (-1603), 0, 0}, intArray0);
      assertEquals((-1603), int1);
  }

  @Test
  public void test062()  throws Throwable  {
      int[] intArray0 = null;
      // Undeclared exception!
      try {
        int int0 = NumberUtils.min(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Array must not be null
         //
      }
  }

  @Test
  public void test063()  throws Throwable  {
      long long0 = 18L;
      long[] longArray0 = new long[5];
      longArray0[0] = long0;
      long long1 = NumberUtils.min(longArray0);
      assertFalse(long1 == long0);
      assertArrayEquals(new long[] {18L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(0L, long1);
  }

  @Test
  public void test064()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try {
        BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test065()  throws Throwable  {
      String string0 = null;
      BigDecimal bigDecimal0 = NumberUtils.createBigDecimal(string0);
      assertNull(bigDecimal0);
  }

  @Test
  public void test066()  throws Throwable  {
      String string0 = null;
      BigInteger bigInteger0 = NumberUtils.createBigInteger(string0);
      assertNull(bigInteger0);
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = null;
      Long long0 = NumberUtils.createLong(string0);
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = null;
      Integer integer0 = NumberUtils.createInteger(string0);
  }

  @Test
  public void test069()  throws Throwable  {
      String string0 = null;
      Double double0 = NumberUtils.createDouble(string0);
  }

  @Test
  public void test070()  throws Throwable  {
      String string0 = null;
      Float float0 = NumberUtils.createFloat(string0);
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "-0.";
      BigDecimal bigDecimal0 = (BigDecimal)NumberUtils.createNumber(string0);
      assertNotNull(bigDecimal0);
      assertEquals(0, bigDecimal0.byteValue());
      assertEquals(0, bigDecimal0.shortValue());
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "WvMa|EB8";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "Strings must not be ull";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Strings must not be ull is not a valid number.
         //
      }
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "vcvOdp($6UPfR-,f";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // vcvOdp($6UPfR-,f is not a valid number.
         //
      }
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "W~K^(0n19\"M2g-)d";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // W~K^(0n19\"M2g-)d is not a valid number.
         //
      }
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "(L";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // (L is not a valid number.
         //
      }
  }

  @Test
  public void test077()  throws Throwable  {
      String string0 = "7F";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals(7.0F, (float)float0, 0.01F);
  }

  @Test
  public void test078()  throws Throwable  {
      String string0 = "6D";
      Double double0 = (Double)NumberUtils.createNumber(string0);
      assertEquals(6.0, (double)double0, 0.01D);
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "E|voW}a:TH";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // E|voW}a:TH is not a valid number.
         //
      }
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "K|aW<}2S!gk{dMfG|0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"K|aW<}2S!\"
         //
      }
  }

  @Test
  public void test081() {}
//   @Test
//   public void test081()  throws Throwable  {
//       String string0 = "_(2~rd5h6_|teET`";
//       try {
//         Number number0 = NumberUtils.createNumber(string0);
//         fail("Expecting exception: NumberFormatException");
//       
//       } catch(NumberFormatException e) {
//          //
//          // _(2~rd5h6_|teET` is not a valid number.
//          //
//       }
//   }

  @Test
  public void test082()  throws Throwable  {
      String string0 = "a~S%s8 igZh'}gE";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // a~S%s8 igZh'}gE is not a valid number.
         //
      }
  }

  @Test
  public void test083() {}
//   @Test
//   public void test083()  throws Throwable  {
//       String string0 = "s\"\\(U+@G>jEme+.%kp_";
//       try {
//         Number number0 = NumberUtils.createNumber(string0);
//         fail("Expecting exception: NumberFormatException");
//       
//       } catch(NumberFormatException e) {
//          //
//          // s\"\\(U+@G>jEme+.%kp_ is not a valid number.
//          //
//       }
//   }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "HOeki.";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // HOeki. is not a valid number.
         //
      }
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "-10.";
      Float float0 = (Float)NumberUtils.createNumber(string0);
      assertEquals((-10.0F), (float)float0, 0.01F);
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "a~S%s8 igpZ.h'}gE";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // a~S%s8 igpZ.h'}gE is not a valid number.
         //
      }
  }

  @Test
  public void test087()  throws Throwable  {
      String string0 = "-0XSe";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-Se\"
         //
      }
  }

  @Test
  public void test088()  throws Throwable  {
      String string0 = "0XL";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"L\"
         //
      }
  }

  @Test
  public void test089()  throws Throwable  {
      String string0 = "-0xK|aW<}2S!gk{dMfG|0";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-K|aW<}2S!gk{dMfG|0\"
         //
      }
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "0x0X";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"0X\"
         //
      }
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "--";
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "";
      try {
        Number number0 = NumberUtils.createNumber(string0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // A blank string is not a valid number
         //
      }
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = null;
      Number number0 = NumberUtils.createNumber(string0);
      assertNull(number0);
  }

  @Test
  public void test094()  throws Throwable  {
      String string0 = null;
      short short0 = (short) (-304);
      short short1 = NumberUtils.toShort(string0, short0);
      assertTrue(short0 == short1);
      assertTrue(short1 == short0);
      assertEquals((short) (-304), short1);
  }

  @Test
  public void test095()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      String string0 = null;
      byte byte0 = NumberUtils.toByte(string0, byteArray0[6]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "4[&\\{seDBnbnF7Y_dlu";
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test097()  throws Throwable  {
      byte byte0 = (byte) (-95);
      String string0 = null;
      float float0 = NumberUtils.toFloat(string0, (float) byte0);
      assertEquals((-95.0F), float0, 0.01F);
  }

  @Test
  public void test098()  throws Throwable  {
      int int0 = 390;
      String string0 = null;
      long long0 = NumberUtils.toLong(string0, (long) int0);
      assertEquals(390L, long0);
  }

  @Test
  public void test099()  throws Throwable  {
      int[] intArray0 = new int[6];
      String string0 = null;
      int int0 = NumberUtils.toInt(string0, intArray0[0]);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, int0);
  }

  @Test
  public void test100()  throws Throwable  {
      String string0 = null;
      double double0 = NumberUtils.toDouble(string0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test101()  throws Throwable  {
      byte byte0 = (byte) (-11);
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-11), byte1);
      
      float float0 = NumberUtils.max((float) byte1, (float) byte0, (float) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((-11.0F), float0, 0.01F);
  }

  @Test
  public void test102()  throws Throwable  {
      String string0 = "4[&\\{seDBnbnF7Y_dlu";
      long long0 = NumberUtils.toLong(string0);
      assertEquals(0L, long0);
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "Fw7~Wo$H3P9#`F`";
      byte byte0 = NumberUtils.toByte(string0);
      assertEquals((byte)0, byte0);
  }

  @Test
  public void test104()  throws Throwable  {
      byte byte0 = (byte) (-11);
      byte byte1 = NumberUtils.max(byte0, byte0, byte0);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((byte) (-11), byte1);
      
      float float0 = NumberUtils.min((float) byte1, (float) byte1, (float) byte1);
      assertTrue(byte1 == byte0);
      assertTrue(byte0 == byte1);
      assertEquals((-11.0F), float0, 0.01F);
  }

  @Test
  public void test105()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      double double0 = NumberUtils.min((double) byteArray0[6], (double) byteArray0[0], (double) byteArray0[7]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test106()  throws Throwable  {
      NumberUtils numberUtils0 = new NumberUtils();
      assertNotNull(numberUtils0);
  }

  @Test
  public void test107()  throws Throwable  {
      String string0 = "+vwPBiFO-\" &if=";
      short short0 = NumberUtils.toShort(string0);
      assertEquals((short)0, short0);
  }

  @Test
  public void test108()  throws Throwable  {
      byte byte0 = (byte) (-76);
      double double0 = NumberUtils.max((double) byte0, (double) byte0, (double) byte0);
      assertEquals((-76.0), double0, 0.01D);
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "H";
      float float0 = NumberUtils.toFloat(string0);
      assertEquals(0.0F, float0, 0.01F);
  }
}
