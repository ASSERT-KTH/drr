/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:22:35 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.apache.commons.lang.Entities;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class EntitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "u>>,7KRC4&Vg&;W#";
      PipedReader pipedReader0 = new PipedReader();
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.ready());
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedWriter0);
      
      entities0.unescape((Writer) pipedWriter0, string0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(true, pipedReader0.ready());
  }

  @Test
  public void test01()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "";
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = 55;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(outputStreamWriter0);
      
      entities0.unescape((Writer) outputStreamWriter0, string1);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test
  public void test02()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      int int0 = 1298;
      StringWriter stringWriter0 = new StringWriter(int0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "P*yof2O3m&@B?C3";
      entities0.unescape((Writer) stringWriter0, string0);
      assertEquals("P*yof2O3m&@B?C3", stringWriter0.toString());
  }

  @Test
  public void test03()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      String string0 = "u>>,7KRC4&Vg&;W#";
      String string1 = entities0.unescape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("u>>,7KRC4&Vg&;W#", string1);
      assertNotNull(string1);
  }

  @Test
  public void test04()  throws Throwable  {
      Entities entities0 = Entities.HTML40;
      assertNotNull(entities0);
      
      String string0 = "!{VC&IJl";
      String string1 = entities0.unescape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals("!{VC&IJl", string1);
      assertNotNull(string1);
  }

  @Test
  public void test05()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "";
      String string1 = entities0.unescape(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test
  public void test06()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "YHlDt#~\"3 z34";
      String string1 = entities0.escape(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("YHlDt#~&quot;3 z34", string1);
      assertNotNull(string1);
      
      int int0 = 55;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(int0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter((OutputStream) byteArrayOutputStream0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(outputStreamWriter0);
      
      entities0.escape((Writer) outputStreamWriter0, string1);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test07()  throws Throwable  {
      Entities entities0 = Entities.XML;
      //  // Unstable assertion: assertNotNull(entities0);
      
      String string0 = "";
      String string1 = entities0.escape(string0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals("", string1);
      //  // Unstable assertion: assertNotNull(string1);
      
      int int0 = entities0.entityValue(string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertTrue(string1.equals((Object)string0));
      //  // Unstable assertion: assertTrue(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals((-395), int0);
  }

  @Test
  public void test08()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "sKADiQS~Zo&>GEc<";
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("sKADiQS~Zo&>GEc<", string1);
      assertNotNull(string1);
  }

  @Test
  public void test09()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "YHlDt#~\"3 &is34";
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("YHlDt#~&quot;3 &amp;is34", string1);
      assertNotNull(string1);
      
      Entities.HashEntityMap entities_HashEntityMap0 = new Entities.HashEntityMap();
      assertNotNull(entities_HashEntityMap0);
      
      int int0 = entities_HashEntityMap0.value(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      String string0 = "'Bnr>y&+.9T;Mb";
      String string1 = entities0.unescape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("'Bnr>y&+.9T;Mb", string1);
      assertNotNull(string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "22W3";
      int int0 = (-844);
      Entities.LookupEntityMap entities_LookupEntityMap0 = new Entities.LookupEntityMap();
      assertNotNull(entities_LookupEntityMap0);
      
      entities_LookupEntityMap0.add(string0, int0);
      int int1 = entities_LookupEntityMap0.value(string0);
      assertTrue(int1 == int0);
      assertEquals((-844), int1);
  }

  @Test
  public void test12()  throws Throwable  {
      Entities entities0 = new Entities();
      assertNotNull(entities0);
      
      int int0 = 1440;
      String string0 = entities0.entityName(int0);
      assertNull(string0);
  }

  @Test
  public void test13()  throws Throwable  {
      Entities entities0 = Entities.XML;
      assertNotNull(entities0);
      
      Entities.fillWithHtml40Entities(entities0);
  }

  @Test
  public void test14()  throws Throwable  {
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap();
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = 55;
      Entities.BinaryEntityMap entities_BinaryEntityMap0 = new Entities.BinaryEntityMap(int0);
      assertNotNull(entities_BinaryEntityMap0);
  }

  @Test
  public void test16()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      assertNotNull(entities0);
      
      String string0 = "YHlDt#~\"3 &is34";
      String string1 = entities0.escape(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("YHlDt#~&quot;3 &amp;is34", string1);
      assertNotNull(string1);
      
      int int0 = entities0.entityValue(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), int0);
  }

  @Test
  public void test17()  throws Throwable  {
      Entities entities0 = Entities.HTML32;
      //  // Unstable assertion: assertNotNull(entities0);
      
      // Undeclared exception!
      try {
        Entities.fillWithHtml40Entities(entities0);
       //  fail("Expecting exception: ArrayIndexOutOfBoundsException");
       // Unstable assertion
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      Entities.TreeEntityMap entities_TreeEntityMap0 = new Entities.TreeEntityMap();
      assertNotNull(entities_TreeEntityMap0);
  }
}
