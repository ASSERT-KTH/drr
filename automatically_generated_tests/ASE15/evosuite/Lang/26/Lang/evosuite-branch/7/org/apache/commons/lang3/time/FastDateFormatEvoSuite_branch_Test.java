/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:51:51 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.AttributedCharacterIterator;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDateFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateFormatEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "z(Z&k";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("z(Z&k", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      long long0 = (-2286L);
      String string1 = fastDateFormat0.format(long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("z(Z&k", fastDateFormat0.getPattern());
      assertNotNull(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("GMT(+0000&23", string1);
  }

  @Test(timeout = 4000)
  public void test01() {}
//   @Test(timeout = 4000)
//   public void test01()  throws Throwable  {
//       int int0 = 0;
//       String string0 = "EEEE d MMMM yyyy";
//       int int1 = (-1306);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int0, int1, int0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1306,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1306,HOUR_OF_DAY=-1306,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1306,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1306,HOUR_OF_DAY=-1306,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.CANADA;
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=-1306,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1306,HOUR_OF_DAY=-1306,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(fastDateFormat0);
//       
//       Date date0 = mockGregorianCalendar0.getTime();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals("Thu Jan 04 14:00:00 GMT 110", date0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-65606839200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=110,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(date0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer(int0);
//       assertFalse(int0 == int1);
//       assertEquals(0, stringBuffer0.capacity());
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(0, stringBuffer0.length());
//       assertNotNull(stringBuffer0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format(date0, stringBuffer0);
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(38, stringBuffer0.capacity());
//       assertEquals("Thursday 4 January 0110", stringBuffer0.toString());
//       assertEquals(23, stringBuffer0.length());
//       assertEquals("CA", locale0.getCountry());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("CAN", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("en_CA", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("Thu Jan 04 14:00:00 GMT 110", date0.toString());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(38, stringBuffer1.capacity());
//       assertEquals("Thursday 4 January 0110", stringBuffer1.toString());
//       assertEquals(23, stringBuffer1.length());
//       assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-65606839200000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=110,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=4,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//   }

  @Test(timeout = 4000)
  public void test02() {}
//   @Test(timeout = 4000)
//   public void test02()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer(int0);
//       assertEquals(0, stringBuffer0.capacity());
//       assertEquals("", stringBuffer0.toString());
//       assertEquals(0, stringBuffer0.length());
//       assertNotNull(stringBuffer0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
//       assertEquals(30, stringBuffer0.capacity());
//       assertEquals(24, stringBuffer0.length());
//       assertEquals("0002\u5E7412\u670831\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer0.toString());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("0002\u5E7412\u670831\u65E5 0\u664200\u520600\u79D2 GMT", stringBuffer1.toString());
//       assertEquals(24, stringBuffer1.length());
//       assertEquals(30, stringBuffer1.capacity());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62167478400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=2,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(stringBuffer1);
//       assertSame(stringBuffer0, stringBuffer1);
//       assertSame(stringBuffer1, stringBuffer0);
//   }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-418);
      String string0 = "3|D";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("3|D", fastDateFormat0.getPattern());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.format((long) int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(6, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("3|D", fastDateFormat0.getPattern());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("3|365", string1);
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       int int0 = 0;
//       String string0 = zoneInfo0.getDisplayName();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(string0);
//       assertEquals("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", string0);
//       
//       Locale locale0 = Locale.TAIWAN;
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TW", locale0.getCountry());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0, locale0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       boolean boolean0 = fastDateFormat0.equals((Object) string0);
//       assertEquals("", locale0.getVariant());
//       assertEquals("zh_TW", locale0.toString());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' EEEE ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(33, fastDateFormat0.getMaxLengthEstimate());
//       assertFalse(boolean0);
//   }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      String string0 = "Unknown class: ";
      Locale locale0 = new Locale(string0);
      assertEquals("unknown class: ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("unknown class: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, locale0);
      assertEquals("unknown class: ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("unknown class: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("MMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      boolean boolean0 = fastDateFormat0.equals((Object) fastDateFormat0);
      assertEquals("unknown class: ", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("unknown class: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("MMM d, yyyy", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06() {}
//   @Test(timeout = 4000)
//   public void test06()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0);
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Locale locale0 = null;
//       // Undeclared exception!
//       try {
//         AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: <null>
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test07() {}
//   @Test(timeout = 4000)
//   public void test07()  throws Throwable  {
//       int int0 = 26;
//       String string0 = "n?U>j/8 LTR}?+t/lv";
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       Long long0 = Long.getLong(string0, (long) int0);
//       assertEquals(26L, (long)long0);
//       
//       AttributedCharacterIterator attributedCharacterIterator0 = fastDateFormat0.formatToCharacterIterator((Object) long0);
//       assertEquals(0, attributedCharacterIterator0.getRunStart());
//       assertEquals(13, attributedCharacterIterator0.getEndIndex());
//       assertEquals(0, attributedCharacterIterator0.getBeginIndex());
//       assertEquals(0, attributedCharacterIterator0.getIndex());
//       assertEquals(13, attributedCharacterIterator0.getRunLimit());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertNotNull(attributedCharacterIterator0);
//   }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       String string0 = "";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.US;
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_US", locale0.toString());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("US", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0, locale0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", fastDateFormat0.getPattern());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_US", locale0.toString());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("US", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertNotNull(fastDateFormat0);
//       
//       MockDate mockDate0 = new MockDate();
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertNotNull(mockDate0);
//       
//       int int0 = (-908);
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-908,MONTH=-908,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-908,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       StringBuffer stringBuffer0 = null;
//       FieldPosition fieldPosition0 = new FieldPosition(int0);
//       assertEquals(-908, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("java.text.FieldPosition[field=-908,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertNotNull(fieldPosition0);
//       
//       StringBuffer stringBuffer1 = fastDateFormat0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-908,MONTH=-908,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-908,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(-908, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("java.text.FieldPosition[field=-908,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", fastDateFormat0.getPattern());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_US", locale0.toString());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("US", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertNull(stringBuffer1);
//       
//       StringBuffer stringBuffer2 = fastDateFormat0.format((Object) mockDate0, stringBuffer1, fieldPosition0);
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-908,MONTH=-908,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-908,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(-908, fieldPosition0.getField());
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("java.text.FieldPosition[field=-908,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("", fastDateFormat0.getPattern());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("", locale0.getVariant());
//       assertEquals("en_US", locale0.toString());
//       assertEquals("USA", locale0.getISO3Country());
//       assertEquals("US", locale0.getCountry());
//       assertEquals("en", locale0.getLanguage());
//       assertNull(stringBuffer2);
//   }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0);
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       StringBuffer stringBuffer0 = new StringBuffer(int0);
//       assertEquals(0, stringBuffer0.capacity());
//       assertEquals(0, stringBuffer0.length());
//       assertEquals("", stringBuffer0.toString());
//       assertNotNull(stringBuffer0);
//       
//       FieldPosition fieldPosition0 = new FieldPosition(int0);
//       assertEquals(0, fieldPosition0.getBeginIndex());
//       assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
//       assertEquals(0, fieldPosition0.getEndIndex());
//       assertEquals(0, fieldPosition0.getField());
//       assertNotNull(fieldPosition0);
//       
//       // Undeclared exception!
//       try {
//         StringBuffer stringBuffer1 = fastDateFormat0.format((Object) fastDateFormat0, stringBuffer0, fieldPosition0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Unknown class: org.apache.commons.lang3.time.FastDateFormat
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Expected type: %s, actual: %s";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = " w4M,N`+e\\aJn";
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "u;@6(ST";
      int int0 = (-979);
      int int1 = 0;
      int int2 = 2549;
      int int3 = 0;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int1, int1, int0, int1, int0, int2, int3, int3, int1, int3, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals("u;@6(ST", simpleTimeZone0.getID());
      assertEquals(-979, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=u;@6(ST,offset=-979,dstSavings=2549,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=-979,startTime=0,startTimeMode=-979,endMode=0,endMonth=2549,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "kr9U*yVns#$>NM80L2";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "@}@^1>\"EqO|Z4)wF~6";
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "n?U>j/8 LTR}?+t/lv";
      String string1 = "pattern must not be null";
      assertNotSame(string1, string0);
      
      Locale locale0 = new Locale(string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals("n?u>j/8 ltr}?+t/lv", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("n?u>j/8 ltr}?+t/lv", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "<null>";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "lz;";
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeZone timeZone0 = null;
      String string0 = "7mjK";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, timeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "7@ioo+@HH";
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
      }
  }

  @Test(timeout = 4000)
  public void test20() {}
//   @Test(timeout = 4000)
//   public void test20()  throws Throwable  {
//       String string0 = "H$gO.P6";
//       int int0 = 3254;
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0, int0, int0, int0);
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3254,MONTH=3254,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3254,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3254,HOUR_OF_DAY=3254,MINUTE=3254,SECOND=3254,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3254,MONTH=3254,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3254,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3254,HOUR_OF_DAY=3254,MINUTE=3254,SECOND=3254,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = Locale.ROOT;
//       assertEquals("", locale0.getISO3Country());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getLanguage());
//       assertEquals("", locale0.getISO3Language());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: g
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "bJhUGRG,M1SR1w";
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "Y";
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "3,%|Xz;R3*@{G";
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "3VnD";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "}[W`y`DUEBM*";
      Locale locale0 = new Locale(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("}[w`y`duebm*", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("}[w`y`duebm*", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "The validated collection is empty";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-776);
      String string0 = "`[MR%kG#UIa64tOrU";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertEquals(-776, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`[MR%kG#UIa64tOrU,offset=-776,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("`[MR%kG#UIa64tOrU", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
      }
  }

  @Test(timeout = 4000)
  public void test28() {}
//   @Test(timeout = 4000)
//   public void test28()  throws Throwable  {
//       String string0 = "EEEE d MMMM yyyy";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       String string1 = "Q'$`K'";
//       assertNotSame(string1, string0);
//       
//       Locale locale0 = Locale.JAPAN;
//       assertEquals("JPN", locale0.getISO3Country());
//       assertEquals("jpn", locale0.getISO3Language());
//       assertEquals("ja", locale0.getLanguage());
//       assertEquals("JP", locale0.getCountry());
//       assertEquals("", locale0.getVariant());
//       assertEquals("ja_JP", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string1, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: Q
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "m96;sPpaw3=A";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
      }
  }

  @Test(timeout = 4000)
  public void test30() {}
//   @Test(timeout = 4000)
//   public void test30()  throws Throwable  {
//       String string0 = "OV~ata#2y5Lb|&1c";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       Locale locale0 = new Locale(string0);
//       assertEquals("ov~ata#2y5lb|&1c", locale0.getLanguage());
//       assertEquals("ov~ata#2y5lb|&1c", locale0.toString());
//       assertEquals("", locale0.getVariant());
//       assertEquals("", locale0.getCountry());
//       assertEquals("", locale0.getISO3Country());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: O
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "LkUpjeZ.z9i<e{";
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "K3=2%;,oLqDt~";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      String string0 = "@J<\"YgK*8A~0!~DI8:.";
      int int1 = 1108;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0, int0, int0, int0, int0, int0, int0, int0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("@J<\"YgK*8A~0!~DI8:.", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=@J<\"YgK*8A~0!~DI8:.,offset=0,dstSavings=1108,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "Illegal pattern component: ";
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "HvRts)5\\g";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayScript(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale1 = Locale.forLanguageTag(string0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      
      String string1 = locale0.getDisplayLanguage(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(string1);
      assertNotSame(locale1, locale0);
      assertNotSame(string0, string1);
      assertNotSame(locale0, locale1);
      assertNotSame(string1, string0);
      assertEquals("German", string1);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      assertNotSame(string0, string1);
      assertNotSame(locale0, locale1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0, locale1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "FstDateFrmaq[";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "2 8Df";
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      String string0 = "EEEE d MMMM yyyy";
      String string1 = "E^CFj9EAm-";
      assertNotSame(string1, string0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=EEEE d MMMM yyyy,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("EEEE d MMMM yyyy", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      assertNotSame(string0, string1);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string1, (TimeZone) simpleTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "`A|F[f\"|mY.Ah";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
      }
  }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(zoneInfo0);
//       
//       String string0 = "E4@`Z6[EZzBh$%";
//       Locale locale0 = Locale.UK;
//       assertEquals("GBR", locale0.getISO3Country());
//       assertEquals("en", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("eng", locale0.getISO3Language());
//       assertEquals("GB", locale0.getCountry());
//       assertEquals("en_GB", locale0.toString());
//       assertNotNull(locale0);
//       
//       FastDateFormat fastDateFormat0 = null;
//       try {
//         fastDateFormat0 = new FastDateFormat(string0, zoneInfo0, locale0);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Illegal pattern component: B
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test42() {}
//   @Test(timeout = 4000)
//   public void test42()  throws Throwable  {
//       String string0 = "z(Z&k";
//       String string1 = "yyyy/M/d a h:mm";
//       assertNotSame(string1, string0);
//       
//       String string2 = "'^&Jcu_;'";
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       int int0 = 1123;
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertEquals(1123, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("z(Z&k", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=z(Z&k,offset=1123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertNotNull(simpleTimeZone0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string2, (TimeZone) simpleTimeZone0);
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertEquals(1123, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("z(Z&k", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=z(Z&k,offset=1123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("'^&Jcu_;'", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       Locale locale1 = fastDateFormat0.getLocale();
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertEquals("jpn", locale1.getISO3Language());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("ja", locale1.toString());
//       assertEquals("ja", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals(1123, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("z(Z&k", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=z(Z&k,offset=1123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("'^&Jcu_;'", fastDateFormat0.getPattern());
//       assertNotNull(locale1);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       FastDateFormat fastDateFormat1 = FastDateFormat.getInstance(string1, locale1);
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertEquals("jpn", locale1.getISO3Language());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("ja", locale1.toString());
//       assertEquals("ja", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(1123, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("z(Z&k", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=z(Z&k,offset=1123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("'^&Jcu_;'", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat1);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(string1, string2);
//       assertNotSame(string1, string0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)fastDateFormat1.getTimeZone();
//       assertFalse(fastDateFormat1.equals((Object)fastDateFormat0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string1.equals((Object)string2));
//       assertFalse(string1.equals((Object)string0));
//       assertFalse(fastDateFormat0.equals((Object)fastDateFormat1));
//       assertFalse(string2.equals((Object)string1));
//       assertFalse(string2.equals((Object)string0));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("jpn", locale1.getISO3Language());
//       assertEquals("", locale1.getCountry());
//       assertEquals("", locale1.getISO3Country());
//       assertEquals("ja", locale1.toString());
//       assertEquals("ja", locale1.getLanguage());
//       assertEquals("", locale1.getVariant());
//       assertEquals("yyyy/M/d a h:mm", fastDateFormat1.getPattern());
//       assertEquals(23, fastDateFormat1.getMaxLengthEstimate());
//       assertEquals(1123, simpleTimeZone0.getRawOffset());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("z(Z&k", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals("java.util.SimpleTimeZone[id=z(Z&k,offset=1123,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(7, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("'^&Jcu_;'", fastDateFormat0.getPattern());
//       assertNotNull(zoneInfo0);
//       assertNotSame(fastDateFormat1, fastDateFormat0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       assertNotSame(string1, string2);
//       assertNotSame(string1, string0);
//       assertNotSame(fastDateFormat0, fastDateFormat1);
//       assertNotSame(string2, string1);
//       assertNotSame(string2, string0);
//       
//       ZoneInfo zoneInfo1 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertEquals("GMT", zoneInfo1.getID());
//       assertNotNull(zoneInfo1);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       
//       FastDateFormat fastDateFormat2 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo1);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string2));
//       assertEquals(14, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("z(Z&k", fastDateFormat2.getPattern());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertNotNull(fastDateFormat2);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string2);
//       
//       String string3 = zoneInfo1.getDisplayName();
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string3.equals((Object)string0));
//       assertFalse(string3.equals((Object)string2));
//       assertFalse(string3.equals((Object)string1));
//       assertEquals("GMT", zoneInfo1.getID());
//       assertNotNull(string3);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string2);
//       assertNotSame(string3, string0);
//       assertNotSame(string3, string2);
//       assertNotSame(string3, string1);
//       assertEquals("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", string3);
//       
//       String string4 = fastDateFormat2.format((long) int0);
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat1));
//       assertFalse(fastDateFormat2.equals((Object)fastDateFormat0));
//       assertTrue(zoneInfo1.equals((Object)zoneInfo0));
//       assertFalse(string0.equals((Object)string1));
//       assertFalse(string0.equals((Object)string3));
//       assertFalse(string0.equals((Object)string4));
//       assertFalse(string0.equals((Object)string2));
//       assertFalse(string4.equals((Object)string0));
//       assertFalse(string4.equals((Object)string1));
//       assertFalse(string4.equals((Object)string2));
//       assertFalse(string4.equals((Object)string3));
//       assertEquals(14, fastDateFormat2.getMaxLengthEstimate());
//       assertEquals("z(Z&k", fastDateFormat2.getPattern());
//       assertEquals("GMT", zoneInfo1.getID());
//       assertNotNull(string4);
//       assertNotSame(fastDateFormat2, fastDateFormat1);
//       assertNotSame(fastDateFormat2, fastDateFormat0);
//       assertNotSame(zoneInfo1, zoneInfo0);
//       assertNotSame(string0, string1);
//       assertNotSame(string0, string3);
//       assertNotSame(string0, string4);
//       assertNotSame(string0, string2);
//       assertNotSame(string4, string0);
//       assertNotSame(string4, string1);
//       assertNotSame(string4, string2);
//       assertNotSame(string4, string3);
//       assertEquals("GMT(+0000&24", string4);
//       
//       String string5 = "fH!s14ia4d";
//       assertFalse(string5.equals((Object)string4));
//       assertFalse(string5.equals((Object)string3));
//       assertNotSame(string5, string4);
//       assertNotSame(string5, string3);
//       assertNotSame(string5, string0);
//       assertNotSame(string5, string2);
//       assertNotSame(string5, string1);
//       
//       int int1 = 0;
//       long long0 = 3478L;
//       System.setCurrentTimeMillis(long0);
//       Locale locale2 = Locale.CHINA;
//       assertFalse(locale2.equals((Object)locale1));
//       assertEquals("zho", locale2.getISO3Language());
//       assertEquals("CHN", locale2.getISO3Country());
//       assertEquals("CN", locale2.getCountry());
//       assertEquals("zh", locale2.getLanguage());
//       assertEquals("zh_CN", locale2.toString());
//       assertEquals("", locale2.getVariant());
//       assertNotNull(locale2);
//       assertNotSame(locale2, locale1);
//       
//       String string6 = null;
//       int int2 = 20;
//       ParsePosition parsePosition0 = new ParsePosition(int2);
//       assertFalse(int2 == int1);
//       assertFalse(int2 == int0);
//       assertEquals(20, parsePosition0.getIndex());
//       assertEquals(-1, parsePosition0.getErrorIndex());
//       assertEquals("java.text.ParsePosition[index=20,errorIndex=-1]", parsePosition0.toString());
//       assertNotNull(parsePosition0);
//       
//       boolean boolean0 = false;
//       // Undeclared exception!
//       try {
//         String string7 = locale2.getUnicodeLocaleType(string5);
//         fail("Expecting exception: IllegalArgumentException");
//       
//       } catch(IllegalArgumentException e) {
//          //
//          // Ill-formed Unicode locale key: fH!s14ia4d
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-2081);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal date style -2081
         //
      }
  }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, locale0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "EEEE d MMMM yyyy";
      Locale locale0 = null;
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, locale0);
      //  // Unstable assertion: assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertNotNull(fastDateFormat0);
      
      int int0 = fastDateFormat0.hashCode();
      //  // Unstable assertion: assertEquals("EEEE d MMMM yyyy", fastDateFormat0.getPattern());
      //  // Unstable assertion: assertEquals(17, fastDateFormat0.getMaxLengthEstimate());
      //  // Unstable assertion: assertEquals(342515734, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "SN;s`'";
      // Undeclared exception!
      try {
        FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
      }
  }

  @Test(timeout = 4000)
  public void test47() {}
//   @Test(timeout = 4000)
//   public void test47()  throws Throwable  {
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.getPattern();
//       assertEquals("yy/MM/dd H:mm", fastDateFormat0.getPattern());
//       assertEquals(16, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string0);
//       assertEquals("yy/MM/dd H:mm", string0);
//   }

  @Test(timeout = 4000)
  public void test48() {}
//   @Test(timeout = 4000)
//   public void test48()  throws Throwable  {
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       int[] intArray0 = new int[7];
//       int int0 = 0;
//       String string0 = zoneInfo0.getDisplayName();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(string0);
//       assertEquals("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", string0);
//       
//       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(intArray0[5], string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertNotNull(simpleTimeZone0);
//       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, (TimeZone) simpleTimeZone0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642", simpleTimeZone0.getID());
//       assertEquals(false, simpleTimeZone0.useDaylightTime());
//       assertEquals(0, simpleTimeZone0.getRawOffset());
//       assertEquals("java.util.SimpleTimeZone[id=\u30B0\u30EA\u30CB\u30C3\u30B8\u6A19\u6E96\u6642,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
//       assertEquals(0, simpleTimeZone0.getDSTSavings());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(21, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
//   }

  @Test(timeout = 4000)
  public void test49() {}
//   @Test(timeout = 4000)
//   public void test49()  throws Throwable  {
//       String string0 = "<null>";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(int0, (TimeZone) zoneInfo0);
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5'", fastDateFormat0.getPattern());
//       assertEquals(13, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 2;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, locale0);
      assertEquals(10, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("H:mm:ss", fastDateFormat0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(fastDateFormat0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "z(Z&k";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("z(Z&k", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertNotNull(fastDateFormat0);
      
      int int0 = 0;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertNotNull(parsePosition0);
      
      Object object0 = fastDateFormat0.parseObject(string0, parsePosition0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("z(Z&k", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test52() {}
//   @Test(timeout = 4000)
//   public void test52()  throws Throwable  {
//       String string0 = "";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals("", fastDateFormat0.getPattern());
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(fastDateFormat0);
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertNotNull(mockGregorianCalendar0);
//       
//       String string1 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);
//       assertTrue(string0.equals((Object)string1));
//       assertTrue(string1.equals((Object)string0));
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("", fastDateFormat0.getPattern());
//       assertEquals(0, fastDateFormat0.getMaxLengthEstimate());
//       assertNotNull(string1);
//       assertNotSame(string0, string1);
//       assertNotSame(string1, string0);
//       assertEquals("", string1);
//   }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = "z(Z&k";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(string0, (TimeZone) zoneInfo0);
      assertEquals("z(Z&k", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(fastDateFormat0);
      
      String string1 = fastDateFormat0.toString();
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals("z(Z&k", fastDateFormat0.getPattern());
      assertEquals(14, fastDateFormat0.getMaxLengthEstimate());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("FastDateFormat[z(Z&k]", string1);
  }

  @Test(timeout = 4000)
  public void test54() {}
//   @Test(timeout = 4000)
//   public void test54()  throws Throwable  {
//       int int0 = 0;
//       Locale locale0 = Locale.TRADITIONAL_CHINESE;
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh_TW", locale0.toString());
//       assertNotNull(locale0);
//       
//       TimeZone timeZone0 = null;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0, timeZone0, locale0);
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("ahh'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("zho", locale0.getISO3Language());
//       assertEquals("zh", locale0.getLanguage());
//       assertEquals("", locale0.getVariant());
//       assertEquals("TWN", locale0.getISO3Country());
//       assertEquals("TW", locale0.getCountry());
//       assertEquals("zh_TW", locale0.toString());
//       assertNotNull(fastDateFormat0);
//   }

  @Test(timeout = 4000)
  public void test55() {}
//   @Test(timeout = 4000)
//   public void test55()  throws Throwable  {
//       int int0 = 0;
//       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(int0);
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertNotNull(fastDateFormat0);
//       
//       int int1 = fastDateFormat0.getMaxLengthEstimate();
//       assertFalse(int0 == int1);
//       assertFalse(int1 == int0);
//       assertEquals(15, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals(15, int1);
//   }

  @Test(timeout = 4000)
  public void test56() {}
//   @Test(timeout = 4000)
//   public void test56()  throws Throwable  {
//       int int0 = 0;
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(zoneInfo0);
//       
//       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(int0, int0, (TimeZone) zoneInfo0);
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(fastDateFormat0);
//       
//       String string0 = fastDateFormat0.format((long) int0);
//       assertEquals(29, fastDateFormat0.getMaxLengthEstimate());
//       assertEquals("yyyy'\u5E74'M'\u6708'd'\u65E5' H'\u6642'mm'\u5206'ss'\u79D2' z", fastDateFormat0.getPattern());
//       assertEquals("GMT", zoneInfo0.getID());
//       assertNotNull(string0);
//       assertEquals("1970\u5E741\u67081\u65E5 0\u664200\u520600\u79D2 GMT", string0);
//   }
}
