/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:31:31 GMT 2014
 */

package org.apache.commons.lang.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.apache.commons.lang.text.StrTokenizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class StrBuilderEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      long long0 = 79L;
      long long1 = strBuilder_StrBuilderReader0.skip(long0);
      assertFalse(long1 == long0);
      assertFalse(long0 == long1);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0L, long1);
  }

  @Test
  public void test001()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      long long0 = (-751L);
      long long1 = strBuilder_StrBuilderReader0.skip(long0);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0L, long1);
  }

  @Test
  public void test002()  throws Throwable  {
      String string0 = "V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 0;
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.size());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.capacity());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.length());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'F';
      StrBuilder strBuilder2 = strBuilder0.append((float) char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(10, strBuilder2.length());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[10];
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertArrayEquals(new char[] {'f', 'a', 'l', 's', 'e', 'V', '7', '0', '.', '0'}, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(int1 == int0);
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(10, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, int1);
  }

  @Test
  public void test003()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[3];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      strBuilder_StrBuilderWriter0.write((int) charArray0[2]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, int0);
  }

  @Test
  public void test004()  throws Throwable  {
      int int0 = (-437);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int1 = strBuilder_StrBuilderReader0.read(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, int1);
  }

  @Test
  public void test005()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[1];
      char char0 = 'b';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, (int) char0, (int) charArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test006()  throws Throwable  {
      String string0 = "java.ext.dirs";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      
      char[] charArray0 = new char[5];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      
      int int0 = (-1489);
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, (int) charArray0[1], int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 5;
      CharBuffer charBuffer0 = CharBuffer.allocate(int0);
      assertNotNull(charBuffer0);
      assertEquals(5, charBuffer0.limit());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      
      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(5, charBuffer0.limit());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals((-1), int1);
  }

  @Test
  public void test008()  throws Throwable  {
      String string0 = "java.vendor.url";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      
      int int0 = (-577);
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.size());
      
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test
  public void test010()  throws Throwable  {
      String string0 = "$Do%-Fx96:(r*-7Rj9";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, charArray0[0], charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
  }

  @Test
  public void test011()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      int int0 = strBuilder0.length();
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, int0);
      
      int int1 = (-53);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -53
         //
      }
  }

  @Test
  public void test012()  throws Throwable  {
      int int0 = (-2592);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[5];
      char char0 = ';';
      charArray0[0] = char0;
      // Undeclared exception!
      try {
        String string0 = strBuilder0.substring((int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = null;
      int int0 = (-645);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.replace(int0, int0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -645
         //
      }
  }

  @Test
  public void test014()  throws Throwable  {
      String string0 = "#!I)h8*@o k0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.hashCode();
      assertEquals(12, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(12, strBuilder0.size());
      assertEquals(44, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals((-1959946554), int0);
  }

  @Test
  public void test015()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.hashCode();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, int0);
  }

  @Test
  public void test016()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test
  public void test017()  throws Throwable  {
      String string0 = "i'-Q~f}o\\=lO%D";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = new StrBuilder(string0);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.length());
      
      boolean boolean0 = strBuilder1.equals((Object) strBuilder0);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test
  public void test018()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string1 = "#!I)h8*@o k0";
      StrBuilder strBuilder1 = new StrBuilder(string1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.size());
      
      boolean boolean0 = strBuilder1.equals((Object) strBuilder0);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertEquals(12, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(44, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(12, strBuilder1.size());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test
  public void test019()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = 2991;
      StrBuilder strBuilder1 = new StrBuilder(int0);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(2991, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(2991, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertTrue(boolean0);
  }

  @Test
  public void test020()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNotSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertFalse(strBuilder0.equals((Object)strBuilder1));
      assertFalse(strBuilder1.equals((Object)strBuilder0));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertFalse(boolean0);
  }

  @Test
  public void test021()  throws Throwable  {
      int int0 = (-2376);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendNewLine();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.splitMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int1 = strBuilder1.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, int1);
  }

  @Test
  public void test022()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 2225;
      int int1 = strBuilder0.lastIndexOf(string0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(0, int1);
  }

  @Test
  public void test023()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      double double0 = 1066.0;
      StrBuilder strBuilder1 = strBuilder0.append(double0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      
      int int0 = strBuilder1.capacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, int0);
      
      String string0 = "JX4";
      int int1 = strBuilder1.lastIndexOf(string0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder1.size());
      assertEquals((-1), int1);
  }

  @Test
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = ")#_#ux{IF71!,2{>";
      char char0 = 'S';
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      
      int int0 = strBuilder0.lastIndexOf(string0, (int) char0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test
  public void test025()  throws Throwable  {
      String string0 = "V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      int int0 = strBuilder0.lastIndexOf(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, int0);
  }

  @Test
  public void test026()  throws Throwable  {
      int int0 = (-2376);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = null;
      int int1 = strBuilder0.lastIndexOf(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int1);
  }

  @Test
  public void test027()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals("", string0);
      
      char char0 = 'S';
      int int0 = strBuilder0.lastIndexOf(string0, (int) char0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test
  public void test028()  throws Throwable  {
      String string0 = "~";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      
      int int0 = strBuilder0.lastIndexOf(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(0, int0);
  }

  @Test
  public void test029()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 1134;
      char char0 = 'v';
      int int1 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int1, (float) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      int int2 = strBuilder1.lastIndexOf(char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals((-1), int2);
  }

  @Test
  public void test030()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 2003;
      char char0 = 'E';
      int int1 = strBuilder0.lastIndexOf(char0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals((-1), int1);
  }

  @Test
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.noneMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      int int0 = (-53);
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int1);
  }

  @Test
  public void test032()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string1 = "Q4~\\2]";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string1);
      assertNotSame(string1, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertNotNull(strBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(14, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test033()  throws Throwable  {
      String string0 = "i'-Q~f}o\\=lO%D";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      
      String string1 = "The Array must not be null";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.contains(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      String string0 = null;
      int int0 = strBuilder0.indexOf(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int0);
  }

  @Test
  public void test035()  throws Throwable  {
      String string0 = "java.vendor.url";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = (-577);
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals((-1), int1);
      
      int int2 = strBuilder0.indexOf(string0, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(0, int2);
  }

  @Test
  public void test036()  throws Throwable  {
      String string0 = "$Do%-Fx96:(r*-7Rj9";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      char char0 = 'O';
      int int0 = strBuilder0.indexOf(char0, (int) char0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test
  public void test037()  throws Throwable  {
      String string0 = "$Do%-Fx96:(r*-7Rj9";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      
      char char0 = 'O';
      int int0 = (-314);
      int int1 = strBuilder0.indexOf(char0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(18, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(50, strBuilder0.capacity());
      assertEquals((-1), int1);
  }

  @Test
  public void test038()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 2821;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2821, strBuilder0.length());
      assertEquals(2821, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2821, strBuilder0.size());
      assertEquals(2821, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2821, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2821, strBuilder1.size());
      
      char[] charArray0 = new char[8];
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2821, strBuilder0.length());
      assertEquals(2821, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2821, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test039()  throws Throwable  {
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.size());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.splitMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(71, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test040()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 1;
      char char0 = 'j';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "";
      boolean boolean0 = strBuilder1.contains(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }

  @Test
  public void test041()  throws Throwable  {
      int int0 = (-2592);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = "L(}-e9S&)";
      boolean boolean0 = strBuilder0.contains(string0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test
  public void test042()  throws Throwable  {
      String string0 = "d[8z`N34";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      
      char char0 = '3';
      boolean boolean0 = strBuilder0.contains(char0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test
  public void test043()  throws Throwable  {
      String string0 = "d[8z`N34";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      char char0 = 'g';
      boolean boolean0 = strBuilder0.contains(char0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test
  public void test044()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      char char0 = '=';
      StrBuilder strBuilder1 = strBuilder0.insert(int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string0 = strBuilder0.midString(int0, (int) char0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string0);
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("=", string0);
  }

  @Test
  public void test045()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      
      int int0 = 2225;
      char char0 = '|';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(2239, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2239, strBuilder1.capacity());
      assertEquals(2239, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2239, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2239, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2239, strBuilder0.size());
      
      String string1 = strBuilder0.midString((int) char0, (int) char0);
      assertNotSame(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(strBuilder0.getNullText());
      assertEquals(2239, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2239, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2239, strBuilder0.size());
      assertEquals("||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||", string1);
  }

  @Test
  public void test046()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[5];
      int int1 = (-1540);
      String string0 = strBuilder0.midString(int1, (int) charArray0[3]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", string0);
  }

  @Test
  public void test047()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 5;
      String string0 = strBuilder0.midString(int0, int0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string0);
  }

  @Test
  public void test048()  throws Throwable  {
      int int0 = (-2376);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int1 = 3;
      String string0 = strBuilder0.rightString(int1);
      assertNotNull(string0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string0);
  }

  @Test
  public void test049()  throws Throwable  {
      int int0 = 657;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(657, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int1 = (-1133);
      String string0 = strBuilder0.rightString(int1);
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(657, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string0);
  }

  @Test
  public void test050()  throws Throwable  {
      String string0 = "i'-Q~f}o\\=lO%D";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      
      char[] charArray0 = new char[6];
      char char0 = 'a';
      charArray0[0] = char0;
      charArray0[3] = charArray0[0];
      charArray0[5] = char0;
      StrBuilder strBuilder1 = strBuilder0.appendPadding((int) charArray0[5], charArray0[1]);
      assertArrayEquals(new char[] {'a', '\u0000', '\u0000', 'a', '\u0000', 'a'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(111, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(111, strBuilder1.length());
      assertEquals(111, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(111, strBuilder0.capacity());
      assertEquals(111, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(111, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string1 = strBuilder1.leftString((int) charArray0[3]);
      assertArrayEquals(new char[] {'a', '\u0000', '\u0000', 'a', '\u0000', 'a'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(111, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(111, strBuilder1.length());
      assertEquals(111, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(111, strBuilder0.capacity());
      assertEquals(111, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(111, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("i'-Q~f}o\\=lO%D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
  }

  @Test
  public void test051()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      int int0 = (-1466);
      String string0 = strBuilder0.leftString(int0);
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals("", string0);
  }

  @Test
  public void test052()  throws Throwable  {
      String string0 = "i'-Q~f}o\\=lO%D";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      
      char[] charArray0 = new char[6];
      char char0 = 'a';
      charArray0[0] = char0;
      charArray0[1] = charArray0[0];
      String string1 = strBuilder0.leftString((int) charArray0[1]);
      assertArrayEquals(new char[] {'a', 'a', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals("i'-Q~f}o\\=lO%D", string1);
  }

  @Test
  public void test053()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      
      String string1 = "Mac";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.endsWith(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertEquals(16, strBuilder0.length());
      assertFalse(boolean0);
  }

  @Test
  public void test054()  throws Throwable  {
      String string0 = "org.apache.commons.lang.SystemUtils";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(35, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(67, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.length());
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = (StrMatcher.StringMatcher)StrMatcher.stringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      String string1 = "5|%+wVy_B$l(pn+:[p";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_StringMatcher0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(67, strBuilder1.capacity());
      assertEquals(18, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(67, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder1.endsWith(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(67, strBuilder1.capacity());
      assertEquals(18, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(67, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test
  public void test055()  throws Throwable  {
      int int0 = 657;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(657, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(657, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertTrue(boolean0);
  }

  @Test
  public void test056()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = null;
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test
  public void test057()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertTrue(boolean0);
  }

  @Test
  public void test058()  throws Throwable  {
      int int0 = (-2376);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[14];
      char char0 = '/';
      charArray0[0] = char0;
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertArrayEquals(new char[] {'/', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      int int1 = 3;
      String string0 = strBuilder0.rightString(int1);
      assertNotNull(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals("\u0000\u0000\u0000", string0);
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertFalse(boolean0);
  }

  @Test
  public void test059()  throws Throwable  {
      String string0 = "gpu0QM&tu";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertTrue(boolean0);
  }

  @Test
  public void test060()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = null;
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertFalse(boolean0);
  }

  @Test
  public void test062()  throws Throwable  {
      int int0 = (-2592);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "L(}-e9S&)";
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertFalse(boolean0);
  }

  @Test
  public void test063()  throws Throwable  {
      String string0 = "jGPZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      
      char char0 = 'q';
      StrBuilder strBuilder1 = strBuilder0.setLength((int) char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(113, strBuilder1.length());
      assertEquals(113, strBuilder1.size());
      assertEquals(113, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(113, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(113, strBuilder0.capacity());
      assertEquals(113, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(113, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.length());
      assertEquals(113, strBuilder2.capacity());
  }

  @Test
  public void test064()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 3425;
      StrBuilder strBuilder1 = strBuilder0.append((long) int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.trim();
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNullText());
      assertEquals(4, strBuilder2.size());
      assertEquals(4, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test065()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test066()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test067()  throws Throwable  {
      String string0 = "h;iUcTc1V1;";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.length());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test068()  throws Throwable  {
      String string0 = "}SN FN6U;W+'n";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharMatcher0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(25, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(25, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(25, strBuilder1.size());
      assertEquals(45, strBuilder1.capacity());
  }

  @Test
  public void test069()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.quoteMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int0 = 2991;
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
      
      char char0 = 'J';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) boolean0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(2991, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2991, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2991, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2991, strBuilder1.capacity());
      assertEquals(2991, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2991, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(2991, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2991, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2991, strBuilder0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2991, strBuilder1.capacity());
      assertEquals(2991, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2991, strBuilder1.size());
      assertEquals(2991, strBuilder2.capacity());
      assertEquals(2991, strBuilder2.length());
      assertEquals(2991, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
  }

  @Test
  public void test070()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrMatcher strMatcher0 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test071()  throws Throwable  {
      String string0 = "2:y}";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test072()  throws Throwable  {
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(71, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst(string0, string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(71, strBuilder2.capacity());
  }

  @Test
  public void test073()  throws Throwable  {
      String string0 = "jGPZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string1, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
  }

  @Test
  public void test074()  throws Throwable  {
      String string0 = "2:y}";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
  }

  @Test
  public void test075()  throws Throwable  {
      String string0 = "V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(33, strBuilder0.capacity());
  }

  @Test
  public void test076()  throws Throwable  {
      String string0 = "Bz5*pP";
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test077()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      String string0 = strBuilder0.getNewLineText();
      assertNull(string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test
  public void test078()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'X';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(117, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.length());
      
      char char1 = '2';
      StrBuilder strBuilder2 = strBuilder0.replaceFirst(char0, char1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(117, strBuilder2.capacity());
      assertEquals(117, strBuilder2.size());
      assertEquals(117, strBuilder2.length());
      assertEquals(117, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(117, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test079()  throws Throwable  {
      String string0 = "2:y}";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      char char0 = '|';
      char char1 = '-';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char1, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
  }

  @Test
  public void test080()  throws Throwable  {
      String string0 = "h;iUcTc1V1;";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      
      char char0 = 'q';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
  }

  @Test
  public void test081()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 2225;
      char char0 = '|';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2239, strBuilder1.size());
      assertEquals(2239, strBuilder1.capacity());
      assertEquals(2239, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2239, strBuilder0.size());
      assertEquals(2239, strBuilder0.capacity());
      assertEquals(2239, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char char1 = '&';
      StrBuilder strBuilder2 = strBuilder0.replaceAll(char0, char1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2239, strBuilder2.capacity());
      assertEquals(2239, strBuilder2.size());
      assertEquals(2239, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(2239, strBuilder0.size());
      assertEquals(2239, strBuilder0.capacity());
      assertEquals(2239, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test082()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'W';
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test083()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.replace(int0, int0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test084()  throws Throwable  {
      String string0 = "&?j.a$y#:Nvwy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      
      char[] charArray0 = new char[9];
      char char0 = ':';
      charArray0[2] = char0;
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst((StrMatcher) strMatcher_CharSetMatcher0, string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(25, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(25, strBuilder0.length());
      assertEquals(45, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(25, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(25, strBuilder1.length());
  }

  @Test
  public void test085()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 0;
      String string1 = "";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.replace(int0, int0, string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test086()  throws Throwable  {
      String string0 = "h;iUcTc1V1;";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(43, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test087()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
  }

  @Test
  public void test088()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "end < start";
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
  }

  @Test
  public void test089()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test
  public void test090()  throws Throwable  {
      String string0 = "startIndex must be valid";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(24, strBuilder0.length());
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(56, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(28, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst(charArray0[2]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNullText());
      assertEquals(27, strBuilder2.size());
      assertEquals(27, strBuilder2.length());
      assertEquals(56, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(56, strBuilder0.capacity());
      assertEquals(27, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(27, strBuilder0.size());
  }

  @Test
  public void test091()  throws Throwable  {
      String string0 = "}SN FN6U;W+'n";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      
      char char0 = 'D';
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(13, strBuilder1.size());
      assertEquals(13, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(45, strBuilder1.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
  }

  @Test
  public void test092()  throws Throwable  {
      String string0 = "<M=";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(3, strBuilder0.size());
      
      char[] charArray0 = new char[4];
      char char0 = 'B';
      charArray0[0] = char0;
      charArray0[1] = charArray0[0];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'B', 'B', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder1.size());
      assertEquals(7, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(charArray0[1]);
      assertArrayEquals(new char[] {'B', 'B', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(5, strBuilder2.length());
      assertEquals(35, strBuilder2.capacity());
      assertEquals(5, strBuilder2.size());
  }

  @Test
  public void test093()  throws Throwable  {
      String string0 = "<M=";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(35, strBuilder1.capacity());
      assertEquals(7, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(7, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(charArray0[1]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(3, strBuilder2.size());
      assertEquals(3, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(35, strBuilder2.capacity());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
  }

  @Test
  public void test094()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      char char0 = 'y';
      StrBuilder strBuilder2 = strBuilder1.deleteAll(char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(5, strBuilder2.size());
      assertEquals(5, strBuilder2.length());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test
  public void test095()  throws Throwable  {
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 2147483635;
      int int1 = 0;
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(71, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder1.delete(int1, int0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(71, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(71, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
  }

  @Test
  public void test096()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      
      int int0 = 2225;
      char char0 = '|';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(2239, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2239, strBuilder0.size());
      assertEquals(2239, strBuilder0.length());
      assertEquals(2239, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2239, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(2239, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      boolean boolean0 = true;
      StrBuilder strBuilder2 = strBuilder1.insert((int) char0, boolean0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(2243, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2243, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(2243, strBuilder2.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(2243, strBuilder0.length());
      assertEquals(2243, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2243, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2243, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2243, strBuilder1.capacity());
      assertEquals(2243, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test097()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[10];
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int0, (int) charArray0[0]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      double double0 = 1066.0;
      StrBuilder strBuilder1 = strBuilder0.append(double0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      
      int int0 = strBuilder1.capacity();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, int0);
      
      int int1 = 1;
      assertFalse(int1 == int0);
      
      char char0 = '_';
      char[] charArray0 = new char[8];
      charArray0[7] = char0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.insert(int1, charArray0, (int) charArray0[7], int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 95
         //
      }
  }

  @Test
  public void test099()  throws Throwable  {
      String string0 = "gpu0QM&tu";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 2;
      char[] charArray0 = new char[10];
      int int1 = (-664);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, int1, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -664
         //
      }
  }

  @Test
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      double double0 = 1066.0;
      StrBuilder strBuilder1 = strBuilder0.append(double0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(6, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      
      int int0 = strBuilder1.capacity();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(6, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, int0);
      
      int int1 = 1;
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[8];
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.insert(int1, charArray0, (int) charArray0[7], int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 32
         //
      }
  }

  @Test
  public void test101()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test102()  throws Throwable  {
      int int0 = 5;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int1 = 0;
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.insert(int1, boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.capacity());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder2 = strBuilder0.insert(int0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertFalse(int0 == int1);
      assertEquals(7, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(7, strBuilder2.capacity());
      assertEquals(7, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(7, strBuilder0.length());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test103()  throws Throwable  {
      String string0 = "i'-Q~f}o\\=lO%D";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = strBuilder0.size();
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, int0);
      
      Object object0 = null;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, object0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
  }

  @Test
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 1134;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, (Object) strBuilder0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1134
         //
      }
  }

  @Test
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 2991;
      Object object0 = null;
      char char0 = '.';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(object0, int0, char0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test106()  throws Throwable  {
      String string0 = "$Do%-Fx96:(r*-7Rj9";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      
      char char0 = 'O';
      int int0 = (-3780);
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((int) char0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(50, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
  }

  @Test
  public void test107()  throws Throwable  {
      int int0 = (-2376);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[14];
      char char0 = 't';
      charArray0[1] = char0;
      charArray0[4] = charArray0[1];
      int int1 = 3;
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) charArray0[4], int1, charArray0[2]);
      assertArrayEquals(new char[] {'\u0000', 't', '\u0000', '\u0000', 't', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(3, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 1134;
      int int1 = (-586);
      char char0 = 'v';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test109()  throws Throwable  {
      String string0 = "jGPZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      
      char char0 = 'q';
      int int0 = (-650);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
  }

  @Test
  public void test110()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.length());
      assertEquals(2, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.length());
  }

  @Test
  public void test111()  throws Throwable  {
      String string0 = "~";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      
      String string1 = null;
      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance();
      assertNotNull(strTokenizer0);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strTokenizer0.previousIndex());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strTokenizer0, string1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strTokenizer0.nextIndex());
      assertEquals(false, strTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strTokenizer0.previousIndex());
      assertEquals(false, strTokenizer0.isIgnoreEmptyTokens());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(33, strBuilder1.capacity());
  }

  @Test
  public void test112()  throws Throwable  {
      String string0 = null;
      int int0 = 57;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      Iterator<StrBuilder> iterator0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(57, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(57, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test113()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "Invalid startIndex: ";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 2991;
      Object object0 = null;
      char char0 = 'J';
      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft(object0, int0, char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2991, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(2991, strBuilder0.capacity());
      assertEquals(2991, strBuilder0.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(2991, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(2991, strBuilder2.capacity());
      assertEquals(2991, strBuilder2.length());
      assertEquals("Invalid startIndex: ", strBuilder2.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(2991, strBuilder1.length());
      assertEquals(2991, strBuilder1.size());
      assertEquals(2991, strBuilder1.capacity());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2991, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(2991, strBuilder0.capacity());
      assertEquals(2991, strBuilder0.size());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(list0);
      assertEquals(2991, strBuilder1.length());
      assertEquals(2991, strBuilder1.size());
      assertEquals(2991, strBuilder1.capacity());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2991, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(2991, strBuilder0.capacity());
      assertEquals(2991, strBuilder0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
      
      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Collection) list0, string0);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertNotNull(strBuilder3);
      assertNull(strBuilder3.getNewLineText());
      assertEquals(6000, strBuilder3.length());
      assertEquals(6000, strBuilder3.size());
      assertEquals("Invalid startIndex: ", strBuilder3.getNullText());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(6000, strBuilder3.capacity());
      assertEquals("Invalid startIndex: ", strBuilder1.getNullText());
      assertEquals(6000, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6000, strBuilder1.capacity());
      assertEquals(6000, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("Invalid startIndex: ", strBuilder0.getNullText());
      assertEquals(6000, strBuilder0.capacity());
      assertEquals(6000, strBuilder0.size());
      assertEquals(6000, strBuilder0.length());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
  }

  @Test
  public void test114()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.insert(int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      
      String string0 = null;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Collection) list0, string0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder2.length());
      assertEquals(2, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
  }

  @Test
  public void test115()  throws Throwable  {
      String string0 = "bwqv*Y8";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.length());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      assertEquals(7, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(39, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(7, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test116()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      
      Collection<String> collection0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(collection0, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(16, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
  }

  @Test
  public void test117()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      Object[] objectArray0 = new Object[8];
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test118()  throws Throwable  {
      String string0 = "java.library.path";
      int int0 = 1926;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(1926, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      Object[] objectArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1926, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(1926, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.append(boolean0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
  }

  @Test
  public void test120()  throws Throwable  {
      String string0 = "java.ext.dirs";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      
      char[] charArray0 = new char[5];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(13, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.size());
      
      int int0 = 0;
      int int1 = 5;
      strBuilder_StrBuilderWriter0.write(charArray0, int0, int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(45, strBuilder0.capacity());
  }

  @Test
  public void test121()  throws Throwable  {
      String string0 = "XgjcnCEij<aF-";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.size());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[8];
      char char0 = 'k';
      charArray0[5] = char0;
      charArray0[3] = charArray0[5];
      int int0 = 5;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, (int) charArray0[3]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 107
         //
      }
  }

  @Test
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[3];
      int int0 = 0;
      int int1 = (-1);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -1
         //
      }
  }

  @Test
  public void test123()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[3];
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test124()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[3];
      int int0 = (-724);
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: -724
         //
      }
  }

  @Test
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test126()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
  }

  @Test
  public void test127()  throws Throwable  {
      String string0 = "h;iUcTc1V1;";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      
      int int0 = 1072;
      char char0 = 'q';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1083, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1083, strBuilder1.size());
      assertEquals(1083, strBuilder1.length());
      assertEquals(1083, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1083, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1083, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder1.append(strBuilder1, (int) char0, (int) char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1196, strBuilder1.capacity());
      assertEquals(1196, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1196, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1196, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1196, strBuilder0.size());
      assertEquals(1196, strBuilder0.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1196, strBuilder2.size());
      assertEquals(1196, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(1196, strBuilder2.capacity());
  }

  @Test
  public void test128()  throws Throwable  {
      int int0 = 117;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(117, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = 'X';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(117, strBuilder1.size());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(117, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(117, strBuilder0.length());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder1.append(strBuilder1, (int) char0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test129()  throws Throwable  {
      String string0 = "}SN FN6U;W+'n";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      assertEquals(13, strBuilder0.length());
      
      int int0 = 0;
      int int1 = (-717);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test131()  throws Throwable  {
      String string0 = "org.apache.commons.lang.SystemUtils";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(67, strBuilder0.capacity());
      assertEquals(35, strBuilder0.length());
      
      int int0 = 9;
      char[] charArray0 = new char[1];
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = (StrMatcher.StringMatcher)StrMatcher.stringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_StringMatcher0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(67, strBuilder0.capacity());
      assertEquals(35, strBuilder0.length());
      assertEquals((-1), int1);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int1, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test132()  throws Throwable  {
      String string0 = "$Do%-Fx96:(r*-7Rj9";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'O';
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, (int) char0, (int) char0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertEquals(18, strBuilder2.length());
      assertEquals(18, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(50, strBuilder2.capacity());
      assertEquals(50, strBuilder0.capacity());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = strBuilder0.capacity();
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, int0);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test134()  throws Throwable  {
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(39, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(39, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(71, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(71, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertEquals(71, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertEquals(71, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test
  public void test135()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertNotNull(strBuilder2);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test136()  throws Throwable  {
      String string0 = "#cBwP6$@oO0?RO";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.append(strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(28, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(28, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(28, strBuilder1.size());
  }

  @Test
  public void test137()  throws Throwable  {
      int int0 = (-437);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "Invalid offset: ";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.length());
      assertEquals("Invalid offset: ", stringBuffer0.toString());
      assertEquals(32, stringBuffer0.capacity());
      
      int int1 = 9;
      int int2 = 5;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int1, int2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(16, stringBuffer0.length());
      assertEquals("Invalid offset: ", stringBuffer0.toString());
      assertEquals(32, stringBuffer0.capacity());
  }

  @Test
  public void test138()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      int int1 = 1252;
      char char0 = '?';
      StringBuffer stringBuffer0 = new StringBuffer((int) char0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals(63, stringBuffer0.capacity());
      assertEquals("", stringBuffer0.toString());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test139()  throws Throwable  {
      String string0 = "bwqv*Y8";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(39, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertEquals(7, strBuilder0.length());
      
      int int0 = (-1664);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("bwqv*Y8", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.capacity());
      assertEquals(7, stringBuffer0.length());
      
      int int1 = 0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test140()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      int int1 = 2;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test141()  throws Throwable  {
      int int0 = 138;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(138, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StringBuffer stringBuffer0 = new StringBuffer(int0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(138, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      
      int int1 = (-3349);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test142()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 2003;
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test143()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test
  public void test144()  throws Throwable  {
      String string0 = "java.vendor.url";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string1 = "";
      assertNotSame(string1, string0);
      
      StringBuffer stringBuffer0 = new StringBuffer(string1);
      assertNotSame(string1, string0);
      assertNotNull(stringBuffer0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string1, string0);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string0, string1);
      assertNotNull(strBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(47, strBuilder0.capacity());
      assertEquals(15, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(15, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.size());
      assertEquals(15, strBuilder1.length());
      assertEquals(47, strBuilder1.capacity());
  }

  @Test
  public void test145()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test146()  throws Throwable  {
      String string0 = "java.vendor.url";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.length());
      assertEquals(15, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals("java.vendor.url", stringBuffer0.toString());
      assertEquals(31, stringBuffer0.capacity());
      assertEquals(15, stringBuffer0.length());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals("java.vendor.url", stringBuffer0.toString());
      assertEquals(31, stringBuffer0.capacity());
      assertEquals(15, stringBuffer0.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(30, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(30, strBuilder0.length());
      assertEquals(30, strBuilder0.size());
      assertEquals(47, strBuilder0.capacity());
  }

  @Test
  public void test147()  throws Throwable  {
      int int0 = 5;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "7-GrUzI5fZ'";
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test148()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      
      int int0 = 0;
      int int1 = 2561;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test149()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "VBuG>#Rs|>Wwd[";
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.splitMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals((-1), int1);
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test
  public void test150()  throws Throwable  {
      int int0 = 9;
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "";
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test151()  throws Throwable  {
      String string0 = "Invalid offset: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(16, strBuilder1.length());
      assertEquals(16, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test152()  throws Throwable  {
      int int0 = (-2376);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[14];
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(string0, (int) charArray0[0], int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
  }

  @Test
  public void test153()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      Object[] objectArray0 = new Object[8];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test154()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "6k)c`9X)[:~Dvj*aOc";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals("6k)c`9X)[:~Dvj*aOc", strBuilder1.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals("6k)c`9X)[:~Dvj*aOc", strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(string1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals("6k)c`9X)[:~Dvj*aOc", strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(18, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(18, strBuilder2.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("6k)c`9X)[:~Dvj*aOc", strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test155()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.setNewLineText(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals("", strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.appendNewLine();
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals("", strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals("", strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 1134;
      int int1 = 0;
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, int1, charArray0, (int) charArray0[3]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      char char0 = 'y';
      int int0 = (-575);
      char[] charArray0 = new char[7];
      // Undeclared exception!
      try {
        strBuilder0.getChars((int) char0, int0, charArray0, (int) charArray0[5]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -575
         //
      }
  }

  @Test
  public void test158()  throws Throwable  {
      String string0 = "jGPZ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      
      char[] charArray0 = new char[2];
      int int0 = (-650);
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, (int) charArray0[1], charArray0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -650
         //
      }
  }

  @Test
  public void test159()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 1134;
      char char0 = 'v';
      char[] charArray0 = new char[9];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int0, (int) char0, charArray0, (int) charArray0[3]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 118
         //
      }
  }

  @Test
  public void test160()  throws Throwable  {
      String string0 = "org.apache.commons.lang.SystemUtils";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(67, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.length());
      
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertArrayEquals(new char[] {'o', 'r', 'g', '.', 'a', 'p', 'a', 'c', 'h', 'e', '.', 'c', 'o', 'm', 'm', 'o', 'n', 's', '.', 'l', 'a', 'n', 'g', '.', 'S', 'y', 's', 't', 'e', 'm', 'U', 't', 'i', 'l', 's'}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertEquals(67, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.length());
  }

  @Test
  public void test161()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[5];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertNotNull(charArray1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test162()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charArray0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test163()  throws Throwable  {
      String string0 = "&?j.a$y#:Nvwy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
      
      char char0 = 'A';
      int int0 = 0;
      char[] charArray0 = strBuilder0.toCharArray(int0, (int) char0);
      assertArrayEquals(new char[] {'&', '?', 'j', '.', 'a', '$', 'y', '#', ':', 'N', 'v', 'w', 'y'}, charArray0);
      assertNotNull(charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(13, strBuilder0.size());
  }

  @Test
  public void test164()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      
      char[] charArray1 = strBuilder0.toCharArray();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
  }

  @Test
  public void test165()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(15, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(15, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(15, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test
  public void test166()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      
      char char0 = '(';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 40
         //
      }
  }

  @Test
  public void test167()  throws Throwable  {
      int int0 = 3;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(3, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      int int1 = (-534);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -534
         //
      }
  }

  @Test
  public void test168()  throws Throwable  {
      int int0 = (-437);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = '2';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt((int) char0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 50
         //
      }
  }

  @Test
  public void test169()  throws Throwable  {
      String string0 = "org.apache.commons.lang.SystemUtils";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(67, strBuilder0.capacity());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 9;
      char[] charArray0 = new char[1];
      StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, charArray0[0]);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(35, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(67, strBuilder1.capacity());
      assertEquals(35, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(67, strBuilder0.capacity());
      assertEquals(35, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test170()  throws Throwable  {
      int int0 = (-89);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      char char0 = '4';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -89
         //
      }
  }

  @Test
  public void test171()  throws Throwable  {
      String string0 = "startIndex must be valid";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(24, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(56, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(24, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = '*';
      // Undeclared exception!
      try {
        char char1 = strBuilder0.charAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 42
         //
      }
  }

  @Test
  public void test172()  throws Throwable  {
      String string0 = "V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertEquals(86, int0);
  }

  @Test
  public void test173()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        char char0 = strBuilder0.charAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test
  public void test174()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertTrue(boolean0);
  }

  @Test
  public void test175()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[9];
      StrBuilder strBuilder1 = strBuilder0.append(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test177()  throws Throwable  {
      String string0 = "$Do%-Fx96:(r*-7Rj9";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertEquals(50, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'O';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) string0, (int) char0, char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(97, strBuilder1.size());
      assertEquals(97, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(97, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(97, strBuilder0.capacity());
      assertEquals(97, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotNull(strBuilder2);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(97, strBuilder1.size());
      assertEquals(97, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(97, strBuilder1.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(97, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(97, strBuilder0.capacity());
      assertEquals(97, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(97, strBuilder2.capacity());
      assertEquals(97, strBuilder2.size());
      assertEquals(97, strBuilder2.length());
  }

  @Test
  public void test178()  throws Throwable  {
      int int0 = 3200;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3200, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      int int1 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3200, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(3200, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
  }

  @Test
  public void test179()  throws Throwable  {
      String string0 = "java.vendor.url";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(15, strBuilder0.size());
      assertEquals(15, strBuilder0.length());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test180()  throws Throwable  {
      String string0 = "bY]4e";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = (-730);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setLength(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -730
         //
      }
  }

  @Test
  public void test181()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals("", string0);
      
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
  }

  @Test
  public void test182()  throws Throwable  {
      String string0 = "gpu0QM&tu";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.setNullText(string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(9, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test183()  throws Throwable  {
      String string0 = "d[8z`N34";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      
      strBuilder_StrBuilderWriter0.close();
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test
  public void test184()  throws Throwable  {
      String string0 = "d[8z`N34";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      
      strBuilder_StrBuilderWriter0.write(string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "";
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = (-3780);
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[3];
      char char0 = ':';
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(charArray0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 58
         //
      }
  }

  @Test
  public void test187()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test
  public void test188()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[10];
      char char0 = ':';
      StrBuilder strBuilder1 = strBuilder0.insert((int) charArray0[3], (long) char0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
  }

  @Test
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.quoteMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test
  public void test190()  throws Throwable  {
      String string0 = "d[8z`N34";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      
      char char0 = 'g';
      int int0 = strBuilder0.indexOf(char0);
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals((-1), int0);
  }

  @Test
  public void test191()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (double) int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
  }

  @Test
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.noneMatcher();
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_NoMatcher0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
  }

  @Test
  public void test193()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher strMatcher0 = null;
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals((-1), int0);
  }

  @Test
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 2419;
      StrBuilder strBuilder1 = strBuilder0.append(int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotNull(strBuilder1);
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
  }

  @Test
  public void test195()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrMatcher strMatcher0 = null;
      int int1 = strBuilder0.lastIndexOf(strMatcher0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals((-1), int1);
  }

  @Test
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = (StrBuilder.StrBuilderWriter)strBuilder0.asWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
  }

  @Test
  public void test197()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = (StrBuilder.StrBuilderTokenizer)strBuilder0.asTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test
  public void test198()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = (StrBuilder.StrBuilderReader)strBuilder0.asReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 2419;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotNull(strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2419, strBuilder0.length());
      assertEquals(2419, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2419, strBuilder0.capacity());
      assertEquals(2419, strBuilder1.capacity());
      assertEquals(2419, strBuilder1.size());
      assertEquals(2419, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNotNull(strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(2419, strBuilder0.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(2419, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test
  public void test200()  throws Throwable  {
      int int0 = (-2592);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test201()  throws Throwable  {
      int int0 = (-2592);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      strBuilder_StrBuilderReader0.mark(int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test
  public void test202()  throws Throwable  {
      int int0 = 657;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(657, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(657, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      strBuilder_StrBuilderReader0.close();
      assertEquals(657, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
  }

  @Test
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertTrue(boolean0);
  }
}
