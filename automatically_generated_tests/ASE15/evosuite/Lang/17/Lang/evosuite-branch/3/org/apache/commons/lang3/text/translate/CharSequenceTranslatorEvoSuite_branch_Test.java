/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:28:31 GMT 2014
 */

package org.apache.commons.lang3.text.translate;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import org.apache.commons.lang3.text.translate.AggregateTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.apache.commons.lang3.text.translate.NumericEntityEscaper;
import org.apache.commons.lang3.text.translate.OctalUnescaper;
import org.apache.commons.lang3.text.translate.UnicodeEscaper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;

 
public class CharSequenceTranslatorEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[3];
      int int0 = 465;
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.between(int0, int0);
      assertNotNull(numericEntityEscaper0);
      
      charSequenceTranslatorArray0[0] = (CharSequenceTranslator) numericEntityEscaper0;
      assertNotNull(charSequenceTranslatorArray0[0]);
      
      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper();
      assertNotNull(unicodeEscaper0);
      
      charSequenceTranslatorArray0[1] = (CharSequenceTranslator) unicodeEscaper0;
      assertNotNull(charSequenceTranslatorArray0[1]);
      
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("1D1", string0);
      
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string0);
      assertEquals(true, charBuffer0.isReadOnly());
      assertEquals("1D1", charBuffer0.toString());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      String string1 = aggregateTranslator0.translate((CharSequence) charBuffer0);
      assertEquals(true, charBuffer0.isReadOnly());
      assertEquals("1D1", charBuffer0.toString());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.remaining());
      assertNotNull(string1);
      assertEquals("\\u0031\\u0044\\u0031", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[3];
      int int0 = 465;
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(int0, int0);
      assertNotNull(unicodeEscaper0);
      
      charSequenceTranslatorArray0[2] = (CharSequenceTranslator) unicodeEscaper0;
      assertNotNull(charSequenceTranslatorArray0[2]);
      
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.between(int0, int0);
      assertNotNull(numericEntityEscaper0);
      
      charSequenceTranslatorArray0[0] = (CharSequenceTranslator) numericEntityEscaper0;
      assertNotNull(charSequenceTranslatorArray0[0]);
      
      charSequenceTranslatorArray0[1] = charSequenceTranslatorArray0[2];
      assertNotNull(charSequenceTranslatorArray0[1]);
      
      String string0 = CharSequenceTranslator.hex(int0);
      assertNotNull(string0);
      assertEquals("1D1", string0);
      
      AggregateTranslator aggregateTranslator0 = new AggregateTranslator(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string0);
      assertEquals(3, charBuffer0.limit());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("1D1", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(true, charBuffer0.isReadOnly());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      String string1 = aggregateTranslator0.translate((CharSequence) charBuffer0);
      assertEquals(3, charBuffer0.limit());
      assertEquals(true, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("1D1", charBuffer0.toString());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(false, charBuffer0.hasArray());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(true, charBuffer0.isReadOnly());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(3, charBuffer0.length());
      assertNotNull(string1);
      assertEquals("1D1", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CharSequence charSequence0 = null;
      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper();
      assertNotNull(unicodeEscaper0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      unicodeEscaper0.translate(charSequence0, (Writer) stringWriter0);
      assertEquals("", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = ", Length: ";
      NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.above((int) byteArray0[0]);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(numericEntityEscaper0);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        numericEntityEscaper0.translate((CharSequence) string0, writer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      OctalUnescaper octalUnescaper0 = new OctalUnescaper();
      assertNotNull(octalUnescaper0);
      
      CharSequence charSequence0 = null;
      String string0 = octalUnescaper0.translate(charSequence0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CharSequenceTranslator[] charSequenceTranslatorArray0 = new CharSequenceTranslator[3];
      int int0 = 465;
      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(int0, int0);
      assertNotNull(unicodeEscaper0);
      
      AggregateTranslator aggregateTranslator0 = (AggregateTranslator)unicodeEscaper0.with(charSequenceTranslatorArray0);
      assertNotNull(aggregateTranslator0);
  }
}
