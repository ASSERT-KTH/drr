/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:04:22 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateParserEvoSuite_branch_Test   {

  //@Test
  public void test00()  throws Throwable  {
      String string0 = "w_I6g*4@jL@OM^D~~";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("w_i6g*4@jl@om^d~~", locale0.toString());
      assertEquals("w_i6g*4@jl@om^d~~", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"w_I6g*4@jL@OM^D~~\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "@x~7D$0";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"@x~7D$0\" ; gave up at index 1
         //
      }
  }

  //@Test
  public void test02()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string0 = "?~EI=x%'-K!V\"";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"?~EI=x%'-K!V\"\" ; gave up at index 3
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "Z=HDWx\\$]3l9G";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"Z=HDWx\\$]3l9G\" ; gave up at index 5
         //
      }
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "V8g";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = "<'W`6\"k(";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"<'W`6\"k(\" ; gave up at index 1
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "s;d";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("s;d", fastDateParser0.getPattern());
  }

  //@Test
  public void test06()  throws Throwable  {
      String string0 = "GMTPacitic7Wallis";
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      
      String string1 = "9'BW`6\"kh";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"9'BW`6\"kh\" ; gave up at index 1
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "(\\p{IsNd}++)";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string1 = "84,V782";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"84,V782\" ; gave up at index 3
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "7YzI'(m";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"7YzI'(m\" ; gave up at index 1
         //
      }
  }

  //@Test
  public void test09()  throws Throwable  {
      String string0 = "4A.Y.2S";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"4A.Y.2S\" ; gave up at index 1
         //
      }
  }

  //@Test
  public void test10()  throws Throwable  {
      String string0 = "/y`dP&+JM";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"/y`dP&+JM\" ; gave up at index 4
         //
      }
  }

  //@Test
  public void test11()  throws Throwable  {
      String string0 = "-'`";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"-'`\" ; gave up at index 1
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "GMTPacific/Guadalcanal";
      String string1 = "d(";
      assertNotSame(string1, string0);
      
      int int0 = (-2065);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string1);
      assertNotNull(simpleTimeZone0);
      assertEquals("d(", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=d(,offset=-2065,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-2065, simpleTimeZone0.getRawOffset());
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      
      Locale locale0 = new Locale(string0, string1);
      assertNotNull(locale0);
      assertEquals("gmtpacific/guadalcanal", locale0.getLanguage());
      assertEquals("gmtpacific/guadalcanal_D(", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("D(", locale0.getCountry());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("d(", fastDateParser0.getPattern());
      assertEquals("d(", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=d(,offset=-2065,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(-2065, simpleTimeZone0.getRawOffset());
      assertEquals("gmtpacific/guadalcanal", locale0.getLanguage());
      assertEquals("gmtpacific/guadalcanal_D(", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("D(", locale0.getCountry());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "V8g";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = "04K^";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("04K^", fastDateParser0.getPattern());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 0;
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("04K^", fastDateParser0.getPattern());
      assertEquals(2000, int1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  //@Test
  public void test14()  throws Throwable  {
      String string0 = "3{";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("3{", fastDateParser0.getPattern());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int0 = 34;
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals("3{", fastDateParser0.getPattern());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1934, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  //@Test
  public void test15()  throws Throwable  {
      String string0 = "\\z}yP'[19D(n7";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"\\z}yP'[19D(n7\" ; gave up at index 4
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = ">$S\\SvGAc,b";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \">$S\\SvGAc,b\" ; gave up at index 5
         //
      }
  }

  //@Test
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      String string0 = ")";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(")", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Date date0 = fastDateParser0.parse(string0);
      assertNotNull(date0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertEquals(")", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = ":H";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = ">95";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser1);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(">95", fastDateParser1.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(">95", fastDateParser1.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(boolean0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = ",";
      int int0 = 14;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      boolean boolean0 = fastDateParser0.equals((Object) string0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(boolean0);
  }

  //@Test
  public void test20()  throws Throwable  {
      String string0 = "3{";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("3{", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertEquals("3{", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(boolean0);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "GMTAsia/Ust-Nera";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string1 = "'C{LwO$sRx";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = ":H";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertNotNull(locale1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "GMTAsia/Ust-Nera";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = "G~!G{";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("G~!G{", fastDateParser0.getPattern());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = 1;
      ParsePosition parsePosition0 = new ParsePosition(int0);
      assertNotNull(parsePosition0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      
      Object object0 = fastDateParser0.parseObject(string0, parsePosition0);
      assertNull(object0);
      assertEquals(1, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("G~!G{", fastDateParser0.getPattern());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = ",";
      int int0 = 14;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      String string1 = fastDateParser0.toString();
      assertNotNull(string1);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FastDateParser[,,fr_FR,,]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = ":H";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fastDateParser0.getPattern();
      assertNotNull(string1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(":H", string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = ",";
      int int0 = 14;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",", simpleTimeZone0.getID());
      
      SimpleTimeZone simpleTimeZone1 = (SimpleTimeZone)fastDateParser0.getTimeZone();
      assertNotNull(simpleTimeZone1);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals(14, simpleTimeZone1.getRawOffset());
      assertEquals(",", simpleTimeZone1.getID());
      assertEquals(false, simpleTimeZone1.useDaylightTime());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(",", simpleTimeZone0.getID());
      assertSame(simpleTimeZone1, simpleTimeZone0);
      assertSame(simpleTimeZone0, simpleTimeZone1);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = ",";
      int int0 = 14;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertNotNull(pattern0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=14,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(14, simpleTimeZone0.getRawOffset());
      assertEquals(",", pattern0.toString());
      assertEquals(",", pattern0.pattern());
      assertEquals(0, pattern0.flags());
  }

  //@Test
  public void test28()  throws Throwable  {
      String string0 = ":H";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      int int0 = fastDateParser0.hashCode();
      assertEquals(":H", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals((-674460643), int0);
  }

  //@Test
  public void test29()  throws Throwable  {
      String string0 = "*F";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("*F", fastDateParser0.getPattern());
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"*F\" does not match \\*(\\p{IsNd}++)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "6]?W5@9wGj.sl@jD/[";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"6]?W5@9wGj.sl@jD/[\" ; gave up at index 9
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = ".SMMP6ggq";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0);
      assertNotNull(locale0);
      assertEquals(".smmp6ggq", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(".smmp6ggq", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \".SMMP6ggq\" ; gave up at index 4
         //
      }
  }

  //@Test
  public void test32()  throws Throwable  {
      String string0 = "aFz";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("aFz", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "GMTPacific/Majuro";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      String string1 = "D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\" ; gave up at index 83
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      String string0 = "!M! kaLJTH";
      String string1 = "2E18kOw>";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotSame(string0, string1);
      assertFalse(string0.equals((Object)string1));
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"2E18kOw>\" ; gave up at index 5
         //
      }
  }
}
