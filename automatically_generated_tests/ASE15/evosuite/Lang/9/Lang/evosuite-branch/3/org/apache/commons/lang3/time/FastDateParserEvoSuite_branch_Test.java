/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:53:59 GMT 2014
 */

package org.apache.commons.lang3.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.AbstractMap;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.apache.commons.lang3.time.FastDateParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class FastDateParserEvoSuite_branch_Test   {

  //@Test
  public void test00()  throws Throwable  {
      String string0 = "Z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Z", fastDateParser0.getPattern());
      
      String string1 = "SST";
      assertNotSame(string1, string0);
      
      Date date0 = fastDateParser0.parse(string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(date0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Thu Jan 01 11:00:00 GMT 1970", date0.toString());
      assertEquals("Z", fastDateParser0.getPattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "MIT";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("MIT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      
      String string1 = "_$=7";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(fastDateParser0);
      assertEquals("MIT", zoneInfo0.getID());
      assertEquals("_$=7", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  //@Test
  public void test02()  throws Throwable  {
      String string0 = ". .!>y?l";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \". .!>y?l\" ; gave up at index 7
         //
      }
  }

  //@Test
  public void test03()  throws Throwable  {
      String string0 = ">";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals(">", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
  }

  //@Test
  public void test04()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      
      String string0 = ";BIITjv ";
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \";BIITjv \" ; gave up at index 1
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "&d]s9#bci)tO=tT";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"&d]s9#bci)tO=tT\" ; gave up at index 6
         //
      }
  }

  //@Test
  public void test06()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      String string0 = "4@fKFe";
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"4@fKFe\" ; gave up at index 2
         //
      }
  }

  //@Test
  public void test07()  throws Throwable  {
      String string0 = "3>";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("3>", fastDateParser0.getPattern());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "2k[)";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("2k[)", fastDateParser0.getPattern());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "K*wa";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string1 = "/9<4";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("/9<4", fastDateParser0.getPattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "K*wa";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("K*wa", fastDateParser0.getPattern());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = ")snL16D+?}hGUxCD";
      int int0 = (-579);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(-579, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=)snL16D+?}hGUxCD,offset=-579,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(")snL16D+?}hGUxCD", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \")snL16D+?}hGUxCD\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "()Q0V";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"()Q0V\" ; gave up at index 2
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = ",";
      int int0 = 701;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=,,offset=701,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(701, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=701,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(701, simpleTimeZone0.getRawOffset());
      
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(2601, int1);
      assertEquals(",", fastDateParser0.getPattern());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=,,offset=701,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(",", simpleTimeZone0.getID());
      assertEquals(701, simpleTimeZone0.getRawOffset());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  //@Test
  public void test14()  throws Throwable  {
      String string0 = "={14E:0TxwG:nmtL";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"={14E:0TxwG:nmtL\" ; gave up at index 7
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "()Q0V";
      String string1 = "<9?";
      assertNotSame(string1, string0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotSame(string0, string1);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("<9?", fastDateParser0.getPattern());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "$.8s@_yUpf+r,";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = new Locale(string0, string0);
      assertNotNull(locale0);
      assertEquals("$.8s@_yupf+r,_$.8S@_YUPF+R,", locale0.toString());
      assertEquals("$.8s@_yupf+r,", locale0.getLanguage());
      assertEquals("$.8S@_YUPF+R,", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"$.8s@_yUpf+r,\" ; gave up at index 7
         //
      }
  }

  //@Test
  public void test17()  throws Throwable  {
      String string0 = "Z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      String string1 = "GMTPaUcific/Efate";
      assertNotSame(string1, string0);
      
      Date date0 = fastDateParser0.parse(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(date0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  //@Test
  public void test18()  throws Throwable  {
      String string0 = "Z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      Locale locale1 = Locale.forLanguageTag(string0);
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      FastDateParser fastDateParser1 = new FastDateParser(string0, zoneInfo0, locale1);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(locale1, locale0);
      assertNotNull(fastDateParser1);
      assertEquals("Z", fastDateParser1.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(locale1.equals((Object)locale0));
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser1);
      assertFalse(boolean0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("Z", fastDateParser1.getPattern());
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
  }

  //@Test
  public void test19()  throws Throwable  {
      String string0 = "- <-m\\w.E7";
      String string1 = "8";
      assertNotSame(string1, string0);
      
      int int0 = 0;
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string1);
      assertNotSame(string1, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=8,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("8", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertFalse(string1.equals((Object)string0));
      
      FastDateParser fastDateParser1 = new FastDateParser(string1, simpleTimeZone0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertNotNull(fastDateParser1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=8,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("8", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("8", fastDateParser1.getPattern());
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
      
      boolean boolean0 = fastDateParser1.equals((Object) fastDateParser0);
      assertFalse(boolean0);
      assertNotSame(string0, string1);
      assertNotSame(fastDateParser0, fastDateParser1);
      assertNotSame(string1, string0);
      assertNotSame(fastDateParser1, fastDateParser0);
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=8,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("8", simpleTimeZone0.getID());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("8", fastDateParser1.getPattern());
      assertFalse(string0.equals((Object)string1));
      assertFalse(fastDateParser0.equals((Object)fastDateParser1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(fastDateParser1.equals((Object)fastDateParser0));
  }

  //@Test
  public void test20()  throws Throwable  {
      String string0 = "- <-m\\w.E7";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      AbstractMap.SimpleImmutableEntry<FastDateParser, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<FastDateParser, Object>(fastDateParser0, (Object) locale0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      boolean boolean0 = fastDateParser0.equals((Object) abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
  }

  //@Test
  public void test21()  throws Throwable  {
      String string0 = "- <-m\\w.E7";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      
      boolean boolean0 = fastDateParser0.equals((Object) fastDateParser0);
      assertTrue(boolean0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "MIT";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("MIT", zoneInfo0.getID());
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      String string1 = "fp$^ &Vq";
      assertNotSame(string1, string0);
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern
         //
      }
  }

  //@Test
  public void test23()  throws Throwable  {
      String string0 = "- <-m\\w.E7";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale1 = fastDateParser0.getLocale();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      
      String string0 = "5<d6s";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("5<d6s", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      
      int int0 = 0;
      int int1 = fastDateParser0.adjustYear(int0);
      assertEquals(2000, int1);
      assertEquals("5<d6s", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ParsePosition parsePosition0 = new ParsePosition(int1);
      assertNotNull(parsePosition0);
      assertEquals(2000, parsePosition0.getIndex());
      assertEquals(-1, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2000,errorIndex=-1]", parsePosition0.toString());
      assertEquals("5<d6s", fastDateParser0.getPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        Object object0 = fastDateParser0.parseObject(string0, parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1995
         //
      }
  }

  //@Test
  public void test25()  throws Throwable  {
      String string0 = "Z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.forLanguageTag(string0);
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fastDateParser0.toString();
      assertEquals("FastDateParser[Z,,GMT]", string1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotNull(string1);
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  //@Test
  public void test26()  throws Throwable  {
      String string0 = "- <-m\\w.E7";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
      
      String string1 = fastDateParser0.getPattern();
      assertEquals("- <-m\\w.E7", string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("- <-m\\w.E7", fastDateParser0.getPattern());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = 42;
      String string0 = "1";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=1,offset=42,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("1", simpleTimeZone0.getID());
      assertEquals(42, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, simpleTimeZone0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("java.util.SimpleTimeZone[id=1,offset=42,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("1", simpleTimeZone0.getID());
      assertEquals(42, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1", fastDateParser0.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      
      SimpleTimeZone simpleTimeZone1 = (SimpleTimeZone)fastDateParser0.getTimeZone();
      assertSame(simpleTimeZone0, simpleTimeZone1);
      assertSame(simpleTimeZone1, simpleTimeZone0);
      assertNotNull(simpleTimeZone1);
      assertEquals("java.util.SimpleTimeZone[id=1,offset=42,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("1", simpleTimeZone0.getID());
      assertEquals(42, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1", fastDateParser0.getPattern());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertEquals(0, simpleTimeZone1.getDSTSavings());
      assertEquals(false, simpleTimeZone1.useDaylightTime());
      assertEquals("1", simpleTimeZone1.getID());
      assertEquals("java.util.SimpleTimeZone[id=1,offset=42,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone1.toString());
      assertEquals(42, simpleTimeZone1.getRawOffset());
  }

  //@Test
  public void test28()  throws Throwable  {
      String string0 = "Z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
      
      Pattern pattern0 = fastDateParser0.getParsePattern();
      assertNotNull(pattern0);
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals(0, pattern0.flags());
      assertEquals("(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACT|ADT|AFT|AKDT|AKST|ALMT|AMST|AMT|ANAT|AQTT|ART|AST|AZOST|AZOT|AZST|AZT|BDT|BNT|BOT|BRST|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CWST|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FET|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+00:00|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+03:07|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HADT|HAST|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF-Al\u00E9outiennes|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Est UTC\\+3|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Afrique de l'Ouest|Heure d'\u00E9t\u00E9 d'Amazonie|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Azerba\u00EFdjan|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Uruguay|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Br\u00E9sil|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Khandyga|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Volgograd|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Philippines|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Hawa\u00EF-Al\u00E9outiennes|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Metlakatla|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|KRAT|KST|LHST|LINT|MAGT|MART|MAWT|MDT|MeST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|PHOT|PHT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYST|UYT|UZT|VET|VLAT|VOLT|VOST|VUT|WAKT|WAST|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WST|YAKT|YEKT)", pattern0.toString());
      assertEquals("(GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACT|ADT|AFT|AKDT|AKST|ALMT|AMST|AMT|ANAT|AQTT|ART|AST|AZOST|AZOT|AZST|AZT|BDT|BNT|BOT|BRST|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CWST|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FET|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+00:00|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+03:07|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HADT|HAST|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF-Al\u00E9outiennes|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Est UTC\\+3|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Afrique de l'Ouest|Heure d'\u00E9t\u00E9 d'Amazonie|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Azerba\u00EFdjan|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Uruguay|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Br\u00E9sil|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Khandyga|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Volgograd|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Philippines|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Hawa\u00EF-Al\u00E9outiennes|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Metlakatla|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|KRAT|KST|LHST|LINT|MAGT|MART|MAWT|MDT|MeST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|PHOT|PHT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYST|UYT|UZT|VET|VLAT|VOLT|VOST|VUT|WAKT|WAST|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WST|YAKT|YEKT)", pattern0.pattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("GMT", zoneInfo0.getID());
  }

  //@Test
  public void test29()  throws Throwable  {
      String string0 = "MIT";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("MIT", zoneInfo0.getID());
      
      String string1 = "}+)";
      assertNotSame(string1, string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      FastDateParser fastDateParser0 = new FastDateParser(string1, zoneInfo0, locale0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(fastDateParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("}+)", fastDateParser0.getPattern());
      assertEquals("MIT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      
      int int0 = fastDateParser0.hashCode();
      assertEquals((-862353007), int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("}+)", fastDateParser0.getPattern());
      assertEquals("MIT", zoneInfo0.getID());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  //@Test
  public void test30()  throws Throwable  {
      String string0 = "Z";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      FastDateParser fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
      assertNotNull(fastDateParser0);
      assertEquals("Z", fastDateParser0.getPattern());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("GMT", zoneInfo0.getID());
      
      try {
        Object object0 = fastDateParser0.parseObject(string0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Unparseable date: \"Z\" does not match (GMT[+\\-]\\d{0,1}\\d{2}|[+\\-]\\d{2}:?\\d{2}|ACT|ADT|AFT|AKDT|AKST|ALMT|AMST|AMT|ANAT|AQTT|ART|AST|AZOST|AZOT|AZST|AZT|BDT|BNT|BOT|BRST|BRT|BST|BTT|CAT|CCT|CDT|CEST|CET|CHADT|CHAST|CHOT|ChST|CHUT|CKT|CLST|CLT|COT|CST|CVT|CWST|CXT|DAVT|DDUT|EASST|EAST|EAT|ECT|EDT|EEST|EET|EGST|EGT|EST|FET|FJST|FJT|FKT|FNT|GALT|GAMT|GET|GFT|GILT|GMT|GMT\\+00:00|GMT\\+01:00|GMT\\+02:00|GMT\\+03:00|GMT\\+03:07|GMT\\+04:00|GMT\\+05:00|GMT\\+06:00|GMT\\+07:00|GMT\\+08:00|GMT\\+09:00|GMT\\+10:00|GMT\\+11:00|GMT\\+12:00|GMT\\+13:00|GMT\\+14:00|GMT-01:00|GMT-02:00|GMT-03:00|GMT-04:00|GMT-05:00|GMT-06:00|GMT-07:00|GMT-08:00|GMT-09:00|GMT-10:00|GMT-11:00|GMT-12:00|GST|GYT|HADT|HAST|Heure avanc\u00E9e d'Alaska|Heure avanc\u00E9e d'Hawa\u00EF-Al\u00E9outiennes|Heure avanc\u00E9e d'Iran|Heure avanc\u00E9e d'Isra\u00EBl|Heure avanc\u00E9e de Chatham|Heure avanc\u00E9e de l'Atlantique|Heure avanc\u00E9e de l'Est|Heure avanc\u00E9e de Nouvelle-Z\u00E9lande|Heure avanc\u00E9e de Saint-Pierre et Miquelon|Heure avanc\u00E9e de Terre-Neuve|Heure avanc\u00E9e des Rocheuses|Heure avanc\u00E9e du Centre|Heure avanc\u00E9e du Pacifique|Heure d'Afghanistan|Heure d'Afrique centrale|Heure d'Afrique de l'Est|Heure d'Afrique de l'Ouest|Heure d'Alma-Ata|Heure d'Anadyr|Heure d'Aqtau|Heure d'Aqtobe|Heure D'Argentine|Heure d'Arm\u00E9nie|Heure d'Azerba\u00EFdjan|Heure d'Europe centrale|Heure d'Europe de l'Est|Heure d'Europe de l'Est UTC\\+3|Heure d'Europe de l'Ouest|Heure d'Indochine|Heure d'Indon\u00E9sie centrale|Heure d'Indon\u00E9sie orientale|Heure d'Irkutsk|Heure d'Omsk|Heure d'Oral|Heure d'Ust-Nera|Heure d'\u00E9t\u00E9 britannique|Heure d'\u00E9t\u00E9 d'Afrique de l'Ouest|Heure d'\u00E9t\u00E9 d'Amazonie|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud\\)|Heure d'\u00E9t\u00E9 d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Tasmanie\\)|Heure d'\u00E9t\u00E9 d'Australie orientale \\(Victoria\\)|Heure d'\u00E9t\u00E9 d'Azerba\u00EFdjan|Heure d'\u00E9t\u00E9 d'Europe centrale|Heure d'\u00E9t\u00E9 d'Europe de l'Est|Heure d'\u00E9t\u00E9 d'Europe de l'Ouest|Heure d'\u00E9t\u00E9 de Cuba|Heure d'\u00E9t\u00E9 de Fidji|Heure d'\u00E9t\u00E9 de l'Est \\(Nouvelle-Galles du Sud\\)|Heure d'\u00E9t\u00E9 de l'Europe centrale|Heure d'\u00E9t\u00E9 de l'Ile de P\u00E2ques|Heure d'\u00E9t\u00E9 de l'Uruguay|Heure d'\u00E9t\u00E9 de Lord Howe|Heure d'\u00E9t\u00E9 des A\u00E7ores|Heure d'\u00E9t\u00E9 des Samoas occidentales|Heure d'\u00E9t\u00E9 du Br\u00E9sil|Heure d'\u00E9t\u00E9 du Chili|Heure d'\u00E9t\u00E9 du Groenland de l'Est|Heure d'\u00E9t\u00E9 du Groenland de l'Ouest|Heure d'\u00E9t\u00E9 du Paraguay|Heure d'\u00E9t\u00E9 irlandaise|Heure de Bolivie|Heure de Cap-Vert|Heure de Choibalsan|Heure de Chuuk|Heure de Colombie|Heure de Davis|Heure de Dumont-d'Urville|Heure de Fernando de Noronha|Heure de Fidji|Heure de Gambi|Heure de Greenwich|Heure de Guyana|Heure de Guyane fran\u00E7aise|Heure de G\u00E9orgie|Heure de Hong Kong|Heure de Hovd|Heure de Khandyga|Heure de Kiribati|Heure de Krasno\u00EFarsk|Heure de Kusaie|Heure de Kyzylorda|Heure de l'Acre|Heure de l'Europe centrale|Heure de l'Ile de P\u00E2ques|Heure de l'Ile Macquarie|Heure de l'Indon\u00E9sie occidentale|Heure de l'oc\u00E9an Indien|Heure de l'Ouzb\u00E9kistan|Heure de l'Ulaanbaatar|Heure de l'Uruguay|Heure de l'\u00C9quateur|Heure de l'\u00CEle Christmas|Heure de l'\u00CEle de Line|Heure de l'\u00CEle de Phoenix|Heure de la R\u00E9union|Heure de Magadan|Heure de Malaisie|Heure de Maurice|Heure de Mawson|Heure de Myanmar|Heure de Nauru|Heure de Niue|Heure de Norfolk|Heure de Nouvelle-Cal\u00E9donie|Heure de Novossibirsk|Heure de Palaos|Heure de Papouasie-Nouvelle-Guin\u00E9e|Heure de Petropavlovsk-Kamchatski|Heure de Pohnpei|Heure de Rothera|Heure de Sakhalin|Heure de Singapour|Heure de Syowa|Heure de Tahiti|Heure de Timor-Leste|Heure de Tokelau|Heure de Tonga|Heure de Tuvalu|Heure de Vladivostok|Heure de Volgograd|Heure de Vostok|Heure de Wake|Heure de Wallis et Futuna|Heure de Yekaterinburg|Heure des A\u00E7ores|Heure des Galapagos|Heure des Iles Marshall|Heure des Maldives|Heure des Marquises|Heure des Philippines|Heure des Samoas occidentales|Heure des Seychelles|Heure des Terres australes antartiques fran\u00E7aises|Heure des \u00CEles Cocos|Heure des \u00CEles Cook|Heure des \u00EEles Falkland|Heure des \u00CEles Salomon|Heure du Bangladesh|Heure du Bhoutan|Heure du Brunei|Heure du Br\u00E9sil|Heure du Chili|Heure du Ghana|Heure du Groenland de l'Est|Heure du Groenland de l'Ouest|Heure du Iakoutsk|Heure du Kirghizistan|Heure du m\u00E9ridien de Greenwich|Heure du N\u00E9pal|Heure du Pakistan|Heure du Paraguay|Heure du P\u00E9rou|Heure du Surinam|Heure du Tadjikistan|Heure du Turkm\u00E9nistan|Heure du Vanuatu|Heure du Venezuela|Heure normale d'Afrique du Sud|Heure normale d'Alaska|Heure normale d'Amazonie|Heure normale d'Arabie|Heure normale d'Hawa\u00EF|Heure normale d'Hawa\u00EF-Al\u00E9outiennes|Heure normale d'Inde|Heure normale d'Iran|Heure normale de Chine|Heure normale de Cor\u00E9e|Heure normale de G\u00E9orgie du Sud|Heure normale de l'Atlantique|Heure normale de l'Est|Heure normale de l'Est \\(Nouvelle-Galles du Sud\\)|Heure normale de l'Ouest \\(Australie\\)|Heure normale de Metlakatla|Heure normale de Nouvelle-Z\u00E9lande|Heure normale de Saint-Pierre et Miquelon|Heure normale de Samara|Heure normale de Terre-Neuve|Heure normale des Rocheuses|Heure normale des \u00EEles Mariannes|Heure normale du Centre|Heure normale du Golfe|Heure normale du Japon|Heure normale du Pacifique|Heure standard d'Australie centrale \\(Australie du sud\\)|Heure standard d'Australie centrale \\(Australie du sud/Nouvelle-Galles du sud\\)|Heure standard d'Australie centrale \\(Territoire du Nord\\)|Heure standard d'Australie orientale \\(Queensland\\)|Heure standard d'Australie orientale \\(Tasmanie\\)|Heure standard d'Australie orientale \\(Victoria\\)|Heure standard d'Isra\u00EBl|Heure standard de Chatham|Heure standard de Cuba|Heure standard de l'Australie occidentale \\(centre\\)|Heure standard de Lord Howe|Heure standard de Moscou|Heure standard de Samoa|Heure standard des Pitcairn|HKT|HOVT|HST|ICT|IDT|IOT|IRDT|IRKT|IRST|IST|JST|KGT|KOST|KRAT|KST|LHST|LINT|MAGT|MART|MAWT|MDT|MeST|MET|MHT|MIST|MMT|MSK|MST|MUT|MVT|MYT|NCT|NDT|NFT|NOVT|NPT|NRT|NST|NUT|NZDT|NZST|OMST|ORAT|PDT|PET|PETT|PGT|PHOT|PHT|PKT|PMDT|PMST|PONT|PST|PWT|PYST|PYT|QYZT|RET|ROTT|SAKT|SAMT|SAST|SBT|SCT|SGT|SRT|SST|SYOT|TAHT|Temps universel coordonn\u00E9|TFT|TJT|TKT|TLT|TMT|TOT|TVT|ULAT|UTC|UYST|UYT|UZT|VET|VLAT|VOLT|VOST|VUT|WAKT|WAST|WAT|WEST|WET|WFT|WGST|WGT|WIB|WIT|WITA|WSDT|WST|YAKT|YEKT)
         //
      }
  }

  //@Test
  public void test31()  throws Throwable  {
      String string0 = "0]sH%H`n0Kt=$N~";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"0]sH%H`n0Kt=$N~\" ; gave up at index 7
         //
      }
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "D+|E+|F+|G+|Hz|KG|M+S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+S''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"D+|E+|F+|G+|Hz|KG|M+S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+S''|'[^']++(''[^']*+)*+'|[^'A-Za-z]++\" ; gave up at index 82
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "&z^]Eq$Sjv5;)J5]em";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      
      FastDateParser fastDateParser0 = null;
      try {
        fastDateParser0 = new FastDateParser(string0, zoneInfo0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse \"&z^]Eq$Sjv5;)J5]em\" ; gave up at index 5
         //
      }
  }
}
