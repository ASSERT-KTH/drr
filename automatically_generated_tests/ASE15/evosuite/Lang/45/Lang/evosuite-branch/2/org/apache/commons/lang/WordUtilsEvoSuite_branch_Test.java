/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:40:54 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class WordUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = " | !v>ZLf!nr7c";
      int int0 = 0;
      String string1 = ";(-jn&\\C\\pF8F=o6";
      assertNotSame(string1, string0);
      
      String string2 = WordUtils.capitalizeFully(string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(";(-jn&\\c\\pf8f=o6", string2);
      
      boolean boolean0 = true;
      String string3 = WordUtils.wrap(string0, int0, string2, boolean0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string3);
      assertEquals("|;(-jn&\\c\\pf8f=o6!;(-jn&\\c\\pf8f=o6v;(-jn&\\c\\pf8f=o6>;(-jn&\\c\\pf8f=o6Z;(-jn&\\c\\pf8f=o6L;(-jn&\\c\\pf8f=o6f;(-jn&\\c\\pf8f=o6!;(-jn&\\c\\pf8f=o6n;(-jn&\\c\\pf8f=o6r;(-jn&\\c\\pf8f=o67;(-jn&\\c\\pf8f=o6c", string3);
      
      char char0 = '<';
      String string4 = WordUtils.abbreviate(string3, (int) char0, int0, string2);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string2, string4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertNotSame(string3, string0);
      assertNotSame(string0, string3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals("|;(-jn&\\c\\pf8f=o6!;(-jn&\\c\\pf8f=o6v;(-jn&\\c\\pf8f=o6>;(-jn&\\c;(-jn&\\c\\pf8f=o6", string4);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "L}rkEu=8UJT";
      int int0 = 1688;
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("L}rkEu=8UJT", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "cgSRtx7d \\!{{0";
      int int0 = (-550);
      int int1 = (-1);
      String string1 = WordUtils.abbreviate(string0, int0, int1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int0 == int1);
      assertNotNull(string1);
      assertEquals("cgSRtx7dcgSRtx7d \\!{{0", string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = " | !v>ZLf!nr7c";
      int int0 = 0;
      String string1 = WordUtils.capitalizeFully(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" | !v>zlf!nr7c", string1);
      
      boolean boolean0 = true;
      String string2 = WordUtils.wrap(string0, int0, string1, boolean0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("| | !v>zlf!nr7c! | !v>zlf!nr7cv | !v>zlf!nr7c> | !v>zlf!nr7cZ | !v>zlf!nr7cL | !v>zlf!nr7cf | !v>zlf!nr7c! | !v>zlf!nr7cn | !v>zlf!nr7cr | !v>zlf!nr7c7 | !v>zlf!nr7cc", string2);
      
      char char0 = '<';
      String string3 = WordUtils.abbreviate(string2, (int) char0, int0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string3);
      assertEquals("| | !v>zlf!nr7c! | !v>zlf!nr7cv | !v>zlf!nr7c> | !v>zlf!nr7c | !v>zlf!nr7c", string3);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "";
      int int0 = (-1555);
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "";
      int int0 = (-1555);
      String string1 = null;
      String string2 = WordUtils.abbreviate(string1, int0, int0, string0);
      assertNull(string2);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "WO?9a&X";
      char[] charArray0 = new char[1];
      char char0 = '&';
      charArray0[0] = char0;
      String string1 = WordUtils.initials(string0, charArray0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertNotNull(string1);
      assertEquals("WX", string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.initials(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.initials(string0);
      assertNull(string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "a<nH@z0csWn\"Z@ 2)P";
      String string1 = WordUtils.swapCase(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("A<Nh@Z0CSwN\"z@ 2)p", string1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.swapCase(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.capitalize(string0);
      assertNull(string1);
      
      String string2 = WordUtils.swapCase(string1);
      assertNull(string2);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = " ";
      String string1 = WordUtils.uncapitalize(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" ", string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      char[] charArray0 = new char[12];
      String string1 = WordUtils.uncapitalize(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.uncapitalize(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
      
      char[] charArray0 = new char[12];
      String string2 = WordUtils.uncapitalize(string1, charArray0);
      assertSame(string1, string0);
      assertSame(string1, string2);
      assertSame(string2, string1);
      assertSame(string2, string0);
      assertSame(string0, string1);
      assertSame(string0, string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalizeFully(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalize(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "z^m~>%yeW1V=JDgBc";
      char[] charArray0 = new char[4];
      String string1 = WordUtils.capitalizeFully(string0, charArray0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      assertEquals("Z^m~>%yew1v=jdgbc", string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.capitalize(string0);
      assertNull(string1);
      
      int int0 = 11;
      String string2 = "5!4(<aS$>KnW ";
      String string3 = WordUtils.capitalizeFully(string2);
      assertNotSame(string2, string3);
      assertNotSame(string3, string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals("5!4(<as$>knw ", string3);
      
      boolean boolean0 = false;
      String string4 = WordUtils.wrap(string3, int0, string1, boolean0);
      assertNotSame(string2, string4);
      assertNotSame(string2, string3);
      assertNotSame(string4, string2);
      assertNotSame(string4, string3);
      assertNotSame(string3, string2);
      assertNotSame(string3, string4);
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string4));
      assertNotNull(string4);
      assertEquals("5!4(<as$>knw\n", string4);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.capitalize(string0);
      assertNull(string1);
      
      int int0 = 11;
      String string2 = WordUtils.wrap(string1, int0);
      assertNull(string2);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "java.spcifiation:ae";
      int int0 = (-48);
      String string1 = WordUtils.wrap(string0, int0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("java.spcifiation:ae", string1);
      
      String string2 = WordUtils.uncapitalize(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("java.spcifiation:ae", string2);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "java.spcifiation:ae";
      String string1 = WordUtils.initials(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      assertEquals("j", string1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.capitalize(string0);
      assertNull(string1);
      
      String string2 = WordUtils.capitalizeFully(string1);
      assertNull(string2);
  }

  @Test
  public void test23()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
  }
}
