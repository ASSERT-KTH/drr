/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:20:16 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import org.apache.commons.lang.WordUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class WordUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "ich, ";
      int int0 = (-22);
      // Undeclared exception!
      try {
        String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -22
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = 0;
      String string0 = "pDDwXW!;@u|";
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertEquals("pDDwXW!;@u|", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char char0 = '\u008D';
      String string2 = WordUtils.abbreviate(string1, (int) char0, (int) char0, string1);
      assertEquals("pDDwXW!;@u|", string2);
      assertNotNull(string2);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "xX,HVa";
      char[] charArray0 = new char[15];
      char char0 = 'H';
      String string1 = WordUtils.capitalizeFully(string0);
      assertEquals("Xx,hva", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      charArray0[7] = char0;
      String string2 = WordUtils.abbreviate(string1, (int) charArray0[7], (int) charArray0[0], string1);
      assertEquals("Xx,hva", string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = "=mC+88Q";
      String string1 = WordUtils.initials(string0);
      assertEquals("=", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      
      String string2 = "";
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = WordUtils.capitalize(string2);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string1);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      char char0 = '\u001D';
      String string4 = WordUtils.abbreviate(string3, (int) char0, (int) char0, string1);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertSame(string3, string2);
      assertNotSame(string3, string0);
      assertSame(string3, string4);
      assertNotSame(string3, string1);
      assertNotSame(string0, string4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string3);
      assertSame(string2, string3);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(string2, string4);
      assertNotSame(string1, string4);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string4, string1);
      assertNotSame(string4, string0);
      assertSame(string4, string2);
      assertSame(string4, string3);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.swapCase(string0);
      assertNull(string1);
      
      int int0 = 0;
      String string2 = WordUtils.abbreviate(string0, int0, int0, string1);
      assertNull(string2);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = " PR90~MK";
      int int0 = (-1);
      String string1 = WordUtils.abbreviate(string0, int0, int0, string0);
      assertEquals(" PR90~MK", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "xX,HVa";
      char[] charArray0 = new char[15];
      char char0 = 'H';
      charArray0[7] = char0;
      String string1 = WordUtils.initials(string0, charArray0);
      assertEquals("xV", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', 'H', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[1];
      String string1 = WordUtils.initials(string0, charArray0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.initials(string0);
      assertNull(string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "eavc OS3/ 2";
      String string1 = WordUtils.swapCase(string0);
      assertEquals("EAVC os3/ 2", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = " ";
      String string1 = WordUtils.uncapitalize(string0);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      char[] charArray0 = new char[11];
      String string1 = WordUtils.uncapitalize(string0, charArray0);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "pDDwXW!;@u|";
      String string1 = WordUtils.uncapitalize(string0);
      assertEquals("pDDwXW!;@u|", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.uncapitalize(string0);
      assertNull(string1);
      
      char[] charArray0 = new char[11];
      String string2 = WordUtils.uncapitalize(string1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string2);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.capitalizeFully(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test
  public void test15()  throws Throwable  {
      char[] charArray0 = new char[10];
      String string0 = null;
      String string1 = WordUtils.capitalizeFully(string0, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string1);
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "=mC+88Q";
      String string1 = WordUtils.initials(string0);
      assertEquals("=", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      
      char[] charArray0 = new char[10];
      String string2 = WordUtils.capitalizeFully(string1, charArray0);
      assertEquals("=", string2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = " ";
      String string1 = WordUtils.capitalizeFully(string0);
      assertEquals(" ", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.uncapitalize(string0);
      assertNull(string1);
      
      char[] charArray0 = new char[11];
      String string2 = WordUtils.capitalize(string1, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(string2);
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "}(n ~";
      int int0 = (-23);
      boolean boolean0 = false;
      String string1 = WordUtils.wrap(string0, int0, string0, boolean0);
      assertEquals("}(n}(n ~~", string1);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = null;
      String string1 = WordUtils.uncapitalize(string0);
      assertNull(string1);
      
      String string2 = " 2;`*0?rRW]Y/_G&Vj7";
      int int0 = (-23);
      boolean boolean0 = false;
      String string3 = WordUtils.wrap(string2, int0, string1, boolean0);
      assertEquals("2;`*0?rRW]Y/_G&Vj7", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string2.equals((Object)string3));
      assertNotSame(string3, string2);
      assertNotSame(string2, string3);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = "";
      String string1 = "eavc OS3/ 2";
      assertNotSame(string1, string0);
      
      int int0 = (-38);
      boolean boolean0 = true;
      String string2 = WordUtils.wrap(string1, int0, string0, boolean0);
      assertEquals("eavcOS3/2", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = null;
      int int0 = 0;
      boolean boolean0 = true;
      String string1 = WordUtils.wrap(string0, int0, string0, boolean0);
      assertNull(string1);
  }

  @Test
  public void test23()  throws Throwable  {
      WordUtils wordUtils0 = new WordUtils();
      assertNotNull(wordUtils0);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "";
      String string1 = WordUtils.swapCase(string0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      
      char char0 = '\'';
      String string2 = WordUtils.wrap(string1, (int) char0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
  }
}
