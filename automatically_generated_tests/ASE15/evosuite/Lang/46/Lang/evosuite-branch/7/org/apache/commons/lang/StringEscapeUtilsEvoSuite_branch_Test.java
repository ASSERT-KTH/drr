/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:33:07 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.CharArrayWriter;
import java.io.Writer;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.exception.NestableRuntimeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.junit.runner.RunWith;

 
public class StringEscapeUtilsEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "a,N]";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"a,N]\"", string1);
      
      String string2 = StringEscapeUtils.unescapeCsv(string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("a,N]", string2);
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "\"y3Pwpla6tq/0 `}V";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"y3Pwpla6tq/0 `}V", string1);
  }

  @Test
  public void test02()  throws Throwable  {
      String string0 = "d";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("d", string1);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      StringEscapeUtils.unescapeCsv((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = "YMiuJjS&sZ";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.escapeCsv((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test05()  throws Throwable  {
      Writer writer0 = null;
      String string0 = null;
      StringEscapeUtils.escapeCsv(writer0, string0);
  }

  @Test
  public void test06()  throws Throwable  {
      String string0 = "''";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("''", string1);
      
      String string2 = StringEscapeUtils.escapeCsv(string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals("''", string2);
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "H{7>INP\"?j<<Ij\\Af,/";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"H{7>INP\"\"?j<<Ij\\Af,/\"", string1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "H:sWkr|4\\U9npvQ";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("H:sWkr|4\\\\U9npvQ", string1);
      
      StringEscapeUtils.unescapeXml((Writer) mockFileWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "The Writer must not be null";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNull(string1);
      
      StringEscapeUtils.unescapeXml((Writer) charArrayWriter0, string1);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.escapeXml(string1);
      assertNull(string2);
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "gh,Phqm";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNotNull(string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("gh,Phqm", string1);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "H:sWkr|4\\U9npvQ";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = null;
      StringEscapeUtils.escapeXml((Writer) mockFileWriter0, string1);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "lV\\b)Z)`$jsa";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "8O?Ca=' /Y$l={#P{";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.escapeXml((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      StringEscapeUtils.unescapeHtml((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test18()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "6u25m";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "YMiuJjS&sZ";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("YMiuJjS&sZ", string1);
      
      String string2 = StringEscapeUtils.unescapeHtml(string1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("YMiuJjS&sZ", string2);
  }

  @Test
  public void test21()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      StringEscapeUtils.escapeHtml((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = "a,N]";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNotNull(string1);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("a,N]", string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "YMiuJjS&sZ";
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("YMiuJjS&amp;sZ", string1);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = ">l^l?+C.c9.dL<H{:p,\\";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(">l^l?+C.c9.dL<H{:p,\\", string1);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "0\\t'R";
      boolean boolean0 = false;
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0, boolean0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.unescapeJava((Writer) mockFileWriter0, string0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "c2Z51u\\r74";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("c2Z51u\r74", string1);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = "SCr)\\n{h+7Q,^&TT_";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("SCr)\n{h+7Q,^&TT_", string1);
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = "]U\"F\\f@#";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("]U\"F\f@#", string1);
  }

  @Test
  public void test30()  throws Throwable  {
      String string0 = "lV\\b)Z)`$jsa";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.unescapeJava((Writer) mockPrintWriter0, string0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "8O?Ca=' /Y$l={#P{";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("8O?Ca=\\' \\/Y$l={#P{", string1);
      
      StringEscapeUtils.unescapeJava((Writer) mockPrintWriter0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
  }

  @Test
  public void test32()  throws Throwable  {
      String string0 = "4eUN)f$5+Fzr/d\"+Z=?S";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("4eUN)f$5+Fzr/d\\\"+Z=?S", string1);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertNotNull(string2);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("4eUN)f$5+Fzr/d\"+Z=?S", string2);
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = "\\uql90";
      // Undeclared exception!
      try {
        String string1 = StringEscapeUtils.unescapeJavaScript(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to parse unicode value: ql90
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      Writer writer0 = null;
      String string0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test35()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNull(string1);
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = "lV\\b)Z)`$jsa";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string0);
      assertNotNull(mockPrintWriter0);
      
      String string1 = "\n";
      assertNotSame(string1, string0);
      
      StringEscapeUtils.escapeJavaScript((Writer) mockPrintWriter0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test37()  throws Throwable  {
      String string0 = "H:sWkr|4\\U9npvQ";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = null;
      String string2 = StringEscapeUtils.escapeSql(string1);
      assertNull(string2);
      
      StringEscapeUtils.escapeJava((Writer) mockFileWriter0, string2);
  }

  @Test
  public void test38()  throws Throwable  {
      String string0 = "H:sWkr|4\\U9npvQ";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNotNull(string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("H:sWkr|4\\U9npvQ", string1);
      
      StringEscapeUtils.escapeJava((Writer) mockFileWriter0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNull(string1);
  }

  @Test
  public void test40()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test
  public void test41()  throws Throwable  {
      String string0 = "1^qE0@dP7F9d\"/\\\\\"J";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotNull(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "\">Jx#8|_iA,fNBF";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      StringEscapeUtils.unescapeJavaScript((Writer) charArrayWriter0, string0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
  }
}
