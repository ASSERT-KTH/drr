/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:43:31 GMT 2014
 */

package org.apache.commons.lang;

import static org.junit.Assert.*;
import org.junit.Test;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Locale;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.exception.NestableRuntimeException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;

import org.junit.runner.RunWith;

 
public class StringEscapeUtilsEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "\"7R97J=+3&#hO";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\"7R97J=+3&#hO", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeCsv(string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertEquals("\"7R97J=+3&#hO", string2);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = " H {)@,)g";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("\" H {)@,)g\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      StringEscapeUtils.unescapeCsv((Writer) charArrayWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(" H {)@,)g", charArrayWriter0.toString());
      assertEquals(9, charArrayWriter0.size());
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      String string0 = "/";
      StringEscapeUtils.unescapeCsv((Writer) stringWriter0, string0);
      assertEquals("/", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = null;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      StringEscapeUtils.unescapeCsv((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNull(string1);
      
      String string2 = StringEscapeUtils.unescapeCsv(string1);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "&@X<WmMqpJ5z?:uBYi\\";
      String string1 = StringEscapeUtils.unescapeCsv(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("&@X<WmMqpJ5z?:uBYi\\", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "6[/*]&lZ>\\Y5(|i\"";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\"6[/*]&lZ>\\Y5(|i\"\"\"", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = null;
      String string1 = "PW41jjk]|.";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string1);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.escapeCsv((Writer) mockFileWriter0, string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "R7X=mlYI2y\\";
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringEscapeUtils.escapeCsv((Writer) stringWriter0, string0);
      assertEquals("R7X=mlYI2y\\", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "PW41jjk]|.";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string0);
      assertNotNull(mockFileWriter0);
      
      String string1 = StringEscapeUtils.escapeSql(string0);
      assertSame(string1, string0);
      assertSame(string0, string1);
      assertEquals("PW41jjk]|.", string1);
      assertNotNull(string1);
      
      StringEscapeUtils.unescapeXml((Writer) mockFileWriter0, string1);
      assertSame(string1, string0);
      assertSame(string0, string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "/";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      assertNotNull(pipedWriter0);
      
      StringEscapeUtils.unescapeXml((Writer) pipedWriter0, string1);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "&@X<WmMqpJ5z?:uBYi\\";
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("&amp;@X&lt;WmMqpJ5z?:uBYi\\", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(byteArrayOutputStream0);
      
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter((OutputStream) byteArrayOutputStream0, boolean0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
      assertNotNull(mockPrintWriter0);
      
      StringEscapeUtils.escapeXml((Writer) mockPrintWriter0, string0);
      assertEquals("", byteArrayOutputStream0.toString());
      assertEquals(0, byteArrayOutputStream0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "5n/@v1uf";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeXml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "''";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("''", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
      
      MockFile mockFile0 = new MockFile(string1, string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.escapeXml((Writer) mockFileWriter0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      assertEquals(false, pipedReader0.markSupported());
      assertNotNull(pipedReader0);
      
      String string0 = null;
      String string1 = StringEscapeUtils.escapeHtml(string0);
      assertNull(string1);
      
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
      assertNotNull(pipedWriter0);
      
      StringEscapeUtils.unescapeHtml((Writer) pipedWriter0, string1);
      assertEquals(false, pipedReader0.markSupported());
      assertEquals(false, pipedReader0.ready());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "L4.t0";
      String string1 = StringEscapeUtils.unescapeXml(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("L4.t0", string1);
      assertNotNull(string1);
      
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeHtml(writer0, string1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "R7X=mlYI2y\\";
      String string1 = StringEscapeUtils.unescapeHtml(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("R7X=mlYI2y\\", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      String string0 = null;
      String string1 = StringEscapeUtils.escapeXml(string0);
      assertNull(string1);
      
      String string2 = "883";
      MockFileWriter mockFileWriter0 = new MockFileWriter(string2, boolean0);
      assertNotNull(mockFileWriter0);
      
      StringEscapeUtils.escapeHtml((Writer) mockFileWriter0, string1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "larr";
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeHtml(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null.
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "883";
      String string1 = StringEscapeUtils.escapeCsv(string0);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertEquals("883", string1);
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.escapeHtml(string1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("883", string2);
      assertTrue(string0.equals((Object)string2));
      assertTrue(string1.equals((Object)string2));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "R7X=mlYI2y\\";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("R7X=mlYI2y\\", string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "?:Cz\\f5Z*Zqs?dc";
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("?:Cz\f5Z*Zqs?dc", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = " \t\r\n 5yT\b";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(" \\t\\r\\n 5yT\\b", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJava(string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertEquals(" \t\r\n 5yT\b", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "&@X<WmMqpJ5z?:uBYi\\";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("&@X<WmMqpJ5z?:uBYi\\\\", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("&@X<WmMqpJ5z?:uBYi\\", string2);
      assertFalse(string0.equals((Object)string1));
      assertTrue(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "''";
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("\\'\\'", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringEscapeUtils.unescapeJavaScript(string1);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertEquals("''", string2);
      assertTrue(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "27)xIPMVvsSpWK%*\\\":U";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("27)xIPMVvsSpWK%*\":U", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "\\u&T0t0";
      // Undeclared exception!
      try {
        String string1 = StringEscapeUtils.unescapeJava(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unable to parse unicode value: &T0t
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "''";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("''", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      MockFile mockFile0 = new MockFile(string1, string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter((File) mockFile0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(mockFileWriter0);
      
      String string2 = null;
      StringEscapeUtils.unescapeJava((Writer) mockFileWriter0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.unescapeJava(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "z/:dZ-A";
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      StringEscapeUtils.escapeJavaScript((Writer) charArrayWriter0, string0);
      assertEquals(8, charArrayWriter0.size());
      assertEquals("z\\/:dZ-A", charArrayWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "z/:dZ-A";
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("z/:dZ-A", string1);
      assertTrue(string0.equals((Object)string1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      String string0 = "_5`oej7?d@1xY|{s\"`";
      StringEscapeUtils.escapeJava((Writer) charArrayWriter0, string0);
      assertEquals(19, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      assertNotNull(charArrayWriter0);
      
      String string0 = null;
      StringEscapeUtils.escapeJava((Writer) charArrayWriter0, string0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = null;
      String string1 = StringEscapeUtils.escapeJavaScript(string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringEscapeUtils stringEscapeUtils0 = new StringEscapeUtils();
      assertNotNull(stringEscapeUtils0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "Xh*\"Z;{R'\\eI0N<Vv\\o";
      String string1 = StringEscapeUtils.unescapeJavaScript(string0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("Xh*\"Z;{R'eI0N<Vvo", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayLanguage(locale0);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("\u65E5\u672C\u8A9E", string0);
      assertNotNull(string0);
      
      String string1 = StringEscapeUtils.escapeJava(string0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("\\u65E5\\u672C\\u8A9E", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "&@X<WmMqpJ5z?:uBYi\\";
      Writer writer0 = null;
      // Undeclared exception!
      try {
        StringEscapeUtils.escapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Writer writer0 = null;
      String string0 = "Xh*\"Z;{R'\\eI0N<Vv\\o";
      // Undeclared exception!
      try {
        StringEscapeUtils.unescapeJavaScript(writer0, string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The Writer must not be null
         //
      }
  }
}
