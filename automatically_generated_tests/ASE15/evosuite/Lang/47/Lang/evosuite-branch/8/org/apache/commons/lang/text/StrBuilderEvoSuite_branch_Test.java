/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 18:51:22 GMT 2014
 */

package org.apache.commons.lang.text;

import static org.junit.Assert.*;
import org.junit.Test;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import org.apache.commons.lang.text.StrBuilder;
import org.apache.commons.lang.text.StrMatcher;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

 
public class StrBuilderEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      long long0 = (-19L);
      long long1 = strBuilder_StrBuilderReader0.skip(long0);
      assertEquals(0L, long1);
      assertFalse(long0 == long1);
      assertFalse(long1 == long0);
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      
      char char0 = 'n';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      
      long long0 = strBuilder_StrBuilderReader0.skip((long) char0);
      assertEquals(1L, long0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[2];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      char char0 = ']';
      charArray0[0] = char0;
      charArray0[1] = charArray0[0];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0[1]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {']', ']'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {']', ']'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 32;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[5];
      int int1 = 0;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, int1, int1);
      assertNotNull(charBuffer0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", charBuffer0.toString());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(true, charBuffer0.hasArray());
      
      int int2 = strBuilder_StrBuilderReader0.read(charBuffer0);
      assertEquals(0, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertTrue(int1 == int2);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("", charBuffer0.toString());
      assertEquals(false, charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(false, charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(false, charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(true, charBuffer0.hasArray());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = ' ';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[5];
      charArray0[2] = char0;
      // Undeclared exception!
      try {
        int int0 = strBuilder_StrBuilderReader0.read(charArray0, (int) charArray0[0], (int) charArray0[2]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[2];
      int int0 = 513;
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[1];
      int int0 = (-2666);
      // Undeclared exception!
      try {
        int int1 = strBuilder_StrBuilderReader0.read(charArray0, int0, (int) charArray0[0]);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = strBuilder_StrBuilderReader0.read();
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      int int1 = 1394;
      char char0 = 'u';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertNotNull(strBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1394, strBuilder0.size());
      assertEquals(1394, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1394, strBuilder0.capacity());
      assertEquals(1394, strBuilder1.size());
      assertEquals(1394, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1394, strBuilder1.capacity());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(1394, strBuilder0.size());
      assertEquals(1394, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1394, strBuilder0.capacity());
      
      int int2 = strBuilder_StrBuilderReader0.read();
      assertEquals(117, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(1394, strBuilder0.size());
      assertEquals(1394, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1394, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      
      String string0 = strBuilder_StrBuilderTokenizer0.getContent();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = (-104);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      
      char[] charArray0 = new char[7];
      List list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, charArray0[3], charArray0[3]);
      assertNotNull(list0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "Array element ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 0;
      int int1 = (-637);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int1, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -637
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = (-1132);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.tabMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      String string0 = "vJ%|PVaRnM_WLdq~";
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.replace((StrMatcher) strMatcher_CharMatcher0, string0, int0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1132
         //
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      double double0 = 10.7;
      StrBuilder strBuilder1 = strBuilder0.appendln(double0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      
      int int0 = strBuilder1.hashCode();
      assertEquals(10919458, int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      boolean boolean0 = strBuilder0.equals((Object) strBuilder0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "|9VLhji&JTbxfc/**;y";
      boolean boolean0 = strBuilder0.equals((Object) string0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      
      boolean boolean0 = strBuilder0.equals(strBuilder1);
      assertTrue(boolean0);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertNotSame(strBuilder1, strBuilder0);
      assertNotSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 1;
      char char0 = ' ';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      
      boolean boolean0 = strBuilder0.equals(strBuilder2);
      assertFalse(boolean0);
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotSame(strBuilder2, strBuilder0);
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      int int0 = 1994;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(1994, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = new StrBuilder();
      assertNotNull(strBuilder1);
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder1, strBuilder0);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);
      assertTrue(boolean0);
      assertTrue(strBuilder0.equals((Object)strBuilder1));
      assertTrue(strBuilder1.equals((Object)strBuilder0));
      assertNotSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder1, strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(1994, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 1994;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1994, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      int int1 = strBuilder0.hashCode();
      assertEquals(0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1994, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.append(int1);
      assertNotNull(strBuilder1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder1.length());
      assertEquals(1994, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1994, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      
      StrBuilder strBuilder2 = new StrBuilder();
      assertNotNull(strBuilder2);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      
      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder2);
      assertFalse(boolean0);
      assertFalse(int0 == int1);
      assertFalse(strBuilder2.equals((Object)strBuilder1));
      assertFalse(strBuilder2.equals((Object)strBuilder0));
      assertFalse(strBuilder0.equals((Object)strBuilder2));
      assertNotSame(strBuilder2, strBuilder1);
      assertNotSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(strBuilder0, strBuilder2);
      assertEquals(0, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1994, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.spaceMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = 48;
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, int0);
      assertEquals(15, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 3164;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(3164, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher strMatcher0 = null;
      int int1 = strBuilder0.lastIndexOf(strMatcher0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(3164, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.singleQuoteMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      int int1 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharMatcher0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = strBuilder0.lastIndexOf(string0);
      assertEquals(0, int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      float float0 = 0.0F;
      StrBuilder strBuilder1 = strBuilder0.appendln(float0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = "0Sz";
      int int0 = strBuilder1.lastIndexOf(string0);
      assertEquals((-1), int0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 1143;
      StrBuilder strBuilder1 = strBuilder0.appendln(int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      
      String string0 = "/-d=hmoEImLW}";
      int int1 = strBuilder1.lastIndexOf(string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      double double0 = 10.7;
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(double0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      
      String string0 = "";
      int int1 = strBuilder0.lastIndexOf(string0, int0);
      assertEquals(0, int1);
      assertTrue(int0 == int1);
      assertTrue(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string1 = strBuilder0.getNewLineText();
      assertNull(string1);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = strBuilder0.lastIndexOf(string1);
      assertEquals((-1), int0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "Mj2^";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      
      char char0 = ';';
      String string1 = " ";
      assertNotSame(string1, string0);
      
      int int0 = strBuilder0.lastIndexOf(string1, (int) char0);
      assertEquals((-1), int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = '\"';
      int int1 = strBuilder0.lastIndexOf(char0, (int) char0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = "4YfY";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = (-1091);
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.quoteMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "length must be valid";
      char char0 = 'g';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) char0, (int) char0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(103, strBuilder0.length());
      assertEquals(103, strBuilder0.size());
      assertEquals(103, strBuilder1.capacity());
      assertEquals(103, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(103, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.deleteFirst(string0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(103, strBuilder0.length());
      assertEquals(103, strBuilder0.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(103, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(103, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(103, strBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      float float0 = 0.0F;
      StrBuilder strBuilder1 = strBuilder0.appendln(float0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      
      String string0 = "'; the SystemUtils property value will default to null.";
      StrBuilder strBuilder2 = strBuilder0.deleteFirst(string0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(4, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(4, strBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = "Mj2^";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      
      String string1 = " ";
      assertNotSame(string1, string0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string1);
      assertNotNull(strBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string0, string1);
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = null;
      int int0 = (-642);
      int int1 = strBuilder0.indexOf(string0, int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = "LC@~8Ah8^yd";
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      
      char[] charArray0 = new char[5];
      char char0 = 'F';
      charArray0[0] = char0;
      StrBuilder strBuilder2 = strBuilder0.setCharAt(int0, char0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(11, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(11, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      
      int int1 = strBuilder1.indexOf(charArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'F', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "Mj2^";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = ';';
      int int0 = (-1293);
      int int1 = strBuilder0.indexOf(char0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 133;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(133, strBuilder0.capacity());
      
      char char0 = '\"';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(char0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(133, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(133, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      
      char[] charArray0 = new char[9];
      charArray0[1] = char0;
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(charArray0);
      assertNotNull(strMatcher_CharSetMatcher0);
      assertArrayEquals(new char[] {'\u0000', '\"', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\"', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(133, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(133, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher strMatcher0 = null;
      boolean boolean0 = strBuilder0.contains(strMatcher0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.appendln(boolean0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(6, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "";
      boolean boolean1 = strBuilder0.contains(string0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "Array element ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      String string1 = strBuilder0.getNullText();
      assertNull(string1);
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.contains(string1);
      assertFalse(boolean0);
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = 0;
      int int1 = 1394;
      char char0 = 'u';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertNotNull(strBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1394, strBuilder0.length());
      assertEquals(1394, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1394, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1394, strBuilder1.capacity());
      assertEquals(1394, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1394, strBuilder1.length());
      
      char[] charArray0 = new char[3];
      boolean boolean0 = strBuilder0.contains(charArray0[0]);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1394, strBuilder0.length());
      assertEquals(1394, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1394, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      int int1 = 1394;
      char char0 = 'u';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int1, char0);
      assertNotNull(strBuilder1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(1394, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1394, strBuilder0.size());
      assertEquals(1394, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1394, strBuilder1.size());
      assertEquals(1394, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1394, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      
      boolean boolean0 = strBuilder0.contains(char0);
      assertTrue(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1394, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1394, strBuilder0.size());
      assertEquals(1394, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      double double0 = 10.7;
      StrBuilder strBuilder1 = strBuilder0.appendln(double0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder0;
      assertNotNull(objectArray0[0]);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      objectArray0[1] = (Object) strBuilder1;
      assertNotNull(objectArray0[1]);
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      objectArray0[2] = (Object) strBuilder1;
      assertNotNull(objectArray0[2]);
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.appendAll(objectArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.size());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(40, strBuilder2.size());
      assertEquals(40, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(40, strBuilder2.length());
      
      int int0 = 18;
      String string0 = strBuilder1.midString(int0, int0);
      assertNotNull(string0);
      assertEquals("7\n10.7\n10.7\n10.7\n1", string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertNull(strBuilder1.getNullText());
      assertEquals(40, strBuilder1.size());
      assertEquals(40, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(40, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(40, strBuilder0.size());
      assertEquals(40, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(40, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      double double0 = 10.7;
      StrBuilder strBuilder1 = strBuilder0.appendln(double0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) strBuilder0;
      assertNotNull(objectArray0[0]);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      objectArray0[1] = (Object) strBuilder1;
      assertNotNull(objectArray0[1]);
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.appendAll(objectArray0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(20, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(20, strBuilder2.length());
      assertEquals(20, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      int int0 = 18;
      String string0 = strBuilder1.midString(int0, int0);
      assertNotNull(string0);
      assertEquals("7\n", string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      assertEquals(20, strBuilder0.length());
      assertEquals(20, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(20, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 616;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(616, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int1 = (-2);
      String string0 = strBuilder0.midString(int1, int1);
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(616, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      char char0 = 'l';
      String string0 = "_O=61BH:4";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.capacity());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((int) char0, (int) char0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      
      String string1 = strBuilder1.rightString((int) char0);
      assertNotNull(string1);
      assertEquals("lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll108", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertEquals(117, strBuilder0.size());
      assertEquals(117, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(117, strBuilder0.length());
      assertEquals(117, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(117, strBuilder1.length());
      assertEquals(117, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "4YfY";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = (-1091);
      String string1 = strBuilder0.rightString(int0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(4, strBuilder0.size());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 4468;
      String string0 = strBuilder0.rightString(int0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "end < start";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      
      int int0 = 1;
      String string1 = strBuilder0.leftString(int0);
      assertNotNull(string1);
      assertEquals("e", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "\"$smNk)_{y[{ iiC";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      int int0 = (-177);
      String string1 = strBuilder0.leftString(int0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      
      String string1 = "hX";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.endsWith(string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "Invalid startIndex: ";
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertTrue(boolean0);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(14, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      String string0 = null;
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertFalse(boolean0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      boolean boolean0 = strBuilder0.endsWith(string0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "Array element ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertTrue(boolean0);
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      char[] charArray0 = new char[4];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      String string1 = "Y";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string1 = "Y";
      assertNotSame(string1, string0);
      
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "DmCK~";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
      
      String string1 = null;
      boolean boolean0 = strBuilder0.startsWith(string1);
      assertFalse(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      boolean boolean0 = strBuilder0.startsWith(string0);
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char char0 = 'g';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder0, (int) char0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(103, strBuilder0.size());
      assertEquals(103, strBuilder0.length());
      assertEquals(103, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(103, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(103, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(103, strBuilder0.size());
      assertEquals(103, strBuilder0.length());
      assertEquals(103, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(103, strBuilder2.length());
      assertEquals(103, strBuilder2.capacity());
      assertEquals(103, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.trim();
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.reverse();
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = "_O=61BH:4";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.charSetMatcher(string0);
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(41, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(41, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = ':';
      StrBuilder strBuilder1 = strBuilder0.appendln(char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(71, strBuilder1.capacity());
      assertEquals(41, strBuilder1.length());
      assertEquals(41, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(41, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrMatcher.StringMatcher strMatcher_StringMatcher0 = (StrMatcher.StringMatcher)StrMatcher.stringMatcher(string0);
      assertNotNull(strMatcher_StringMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst((StrMatcher) strMatcher_StringMatcher0, string0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(71, strBuilder1.capacity());
      assertEquals(41, strBuilder1.length());
      assertEquals(41, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(41, strBuilder0.size());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(41, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(41, strBuilder2.length());
      assertEquals(41, strBuilder2.size());
      assertEquals(71, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.appendln(boolean0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = "";
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.stringMatcher(string0);
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder2 = strBuilder1.replaceFirst((StrMatcher) strMatcher_NoMatcher0, string0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(6, strBuilder0.size());
      assertEquals(6, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder2.getNullText());
      assertEquals(6, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(6, strBuilder2.length());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = "end < start";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
      
      StrMatcher strMatcher0 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(43, strBuilder1.capacity());
      assertEquals(11, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "z\"0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(3, strBuilder0.length());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string1);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      
      StrBuilder strBuilder2 = strBuilder0.replaceFirst(string0, string0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder2.length());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(35, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = "Array element ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string1 = strBuilder0.getNullText();
      assertNull(string1);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string1, string1);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "z\"0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(35, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(3, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 616;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(616, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      String string0 = null;
      String string1 = strBuilder0.midString(int0, int0);
      assertNotNull(string1);
      assertEquals("", string1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(616, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll(string0, string1);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(616, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(616, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      
      String string1 = "hX";
      assertNotSame(string1, string0);
      
      int int0 = 4;
      char char0 = '4';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) string1, int0, char0);
      assertNotNull(strBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char char1 = 'X';
      StrBuilder strBuilder2 = strBuilder1.replaceFirst(char1, char0);
      assertNotNull(strBuilder2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(char1 == char0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(char0 == char1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(18, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(18, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      
      char char0 = '4';
      char char1 = 'X';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char1, char0);
      assertNotNull(strBuilder1);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(14, strBuilder1.size());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(14, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'V';
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(char0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      
      char char0 = '[';
      StrBuilder strBuilder1 = strBuilder0.appendln(char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
      
      char char1 = 'J';
      StrBuilder strBuilder2 = strBuilder1.replaceAll(char0, char1);
      assertNotNull(strBuilder2);
      assertFalse(char0 == char1);
      assertFalse(char1 == char0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(48, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(18, strBuilder1.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(18, strBuilder2.size());
      assertEquals(18, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(48, strBuilder2.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'u';
      StrBuilder strBuilder1 = strBuilder0.replaceAll(char0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "\"$smNk)_{y[{ iiC";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      String string1 = null;
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string1);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "Array element ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.replace(int0, int0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.length());
      assertEquals(28, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(28, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(28, strBuilder1.length());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.replaceFirst(string0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(71, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(39, strBuilder1.size());
      assertEquals(39, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(71, strBuilder0.capacity());
      assertEquals(39, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "4YfY";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "z\"0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(35, strBuilder1.capacity());
      assertEquals(35, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.deleteAll(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 2;
      char char0 = 'n';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      
      char char1 = '\"';
      StrBuilder strBuilder2 = strBuilder1.deleteFirst(char1);
      assertNotNull(strBuilder2);
      assertFalse(char1 == char0);
      assertFalse(char0 == char1);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertEquals(2, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(2, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 2;
      char char0 = 'n';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder2 = strBuilder1.deleteFirst(char0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 9;
      char char0 = 'n';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder0.reverse();
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.size());
      assertEquals(9, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(9, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      
      StrBuilder strBuilder3 = strBuilder1.deleteAll(char0);
      assertNotNull(strBuilder3);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder3);
      assertSame(strBuilder1, strBuilder2);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder3.getNullText());
      assertNull(strBuilder3.getNewLineText());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(32, strBuilder3.capacity());
      assertEquals(1, strBuilder3.length());
      assertEquals(1, strBuilder3.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[2];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0[1]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(2, strBuilder0.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.trim();
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder2.isEmpty());
      assertEquals(0, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.delete(int0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = "54*Rpc=bK6]^`";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(13, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(45, strBuilder0.capacity());
      
      int int0 = 0;
      boolean boolean0 = false;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, boolean0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(18, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(18, strBuilder0.length());
      assertEquals(45, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(18, strBuilder1.size());
      assertEquals(45, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "HkS,b7!P&c{";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(11, strBuilder0.length());
      assertEquals(11, strBuilder0.size());
      
      char char0 = '7';
      StrBuilder strBuilder1 = strBuilder0.setLength((int) char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(55, strBuilder0.length());
      assertEquals(55, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(55, strBuilder0.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(55, strBuilder1.size());
      assertEquals(55, strBuilder1.capacity());
      assertEquals(55, strBuilder1.length());
      
      char[] charArray0 = new char[5];
      charArray0[0] = char0;
      charArray0[2] = charArray0[0];
      int int0 = 0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder1.insert((int) char0, charArray0, int0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 55
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      char[] charArray0 = new char[10];
      char char0 = '%';
      charArray0[4] = char0;
      charArray0[9] = charArray0[4];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, (int) charArray0[9], (int) charArray0[4]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: 37
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 1994;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1994, strBuilder0.capacity());
      
      char[] charArray0 = new char[2];
      int int1 = strBuilder0.hashCode();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(1994, strBuilder0.capacity());
      
      int int2 = (-1149);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int1, charArray0, int2, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid offset: -1149
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      char[] charArray0 = new char[10];
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0, (int) charArray0[9], (int) charArray0[4]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[1];
      StrBuilder strBuilder0 = new StrBuilder((int) charArray0[0]);
      assertNotNull(strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.insert(int0, charArray0);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 1;
      char char0 = ' ';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      
      Object object0 = null;
      StrBuilder strBuilder2 = strBuilder0.insert(int0, object0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(1, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(1, strBuilder2.length());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 1;
      Object object0 = null;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert(int0, object0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 614;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(614, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(614, strBuilder1.capacity());
      assertEquals(614, strBuilder1.length());
      assertEquals(614, strBuilder0.length());
      assertEquals(614, strBuilder0.size());
      assertEquals(614, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '[';
      StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder1, (int) char0, char0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(705, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(705, strBuilder2.capacity());
      assertEquals(705, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(705, strBuilder1.length());
      assertEquals(705, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(705, strBuilder1.size());
      assertEquals(705, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(705, strBuilder0.capacity());
      assertEquals(705, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[9];
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, charArray0[7]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "java.lang.Object";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 359;
      char char0 = 'T';
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(375, strBuilder1.capacity());
      assertEquals(375, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(375, strBuilder1.size());
      assertEquals(375, strBuilder0.length());
      assertEquals(375, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(375, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = new char[2];
      int int0 = (-844);
      StrBuilder strBuilder1 = strBuilder0.appendPadding(int0, charArray0[0]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = '4';
      StrMatcher strMatcher0 = null;
      int int0 = strBuilder0.indexOf(strMatcher0);
      assertEquals((-1), int0);
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(char0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(14, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(14, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "HkS,b7!P&c{";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertEquals(11, strBuilder0.length());
      
      char char0 = '7';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0, (int) char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(22, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(22, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(43, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(22, strBuilder1.length());
      assertEquals(43, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(22, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      int int0 = (-2873);
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 0;
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 57;
      StrBuilder strBuilder1 = strBuilder0.appendln((double) int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.size());
      assertEquals(5, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      
      char char0 = 'Z';
      StrBuilder strBuilder2 = strBuilder1.appendSeparator(char0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(6, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(6, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(6, strBuilder1.size());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(6, strBuilder2.length());
      assertEquals(6, strBuilder2.size());
      assertEquals(32, strBuilder2.capacity());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      char char0 = '?';
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string1 = " <wQ";
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string1);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendSeparator(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "Invalid length: ";
      StrBuilder strBuilder1 = strBuilder0.appendln(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder1.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(17, strBuilder0.length());
      assertEquals(17, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(17, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(17, strBuilder1.length());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertEquals(47, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(47, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(47, strBuilder0.size());
      assertNull(strBuilder2.getNullText());
      assertEquals(47, strBuilder2.length());
      assertEquals(47, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(47, strBuilder2.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(47, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(47, strBuilder1.length());
      assertEquals(47, strBuilder1.size());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(2, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.previousIndex());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.appendln(boolean0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      String string0 = "Invalid length: ";
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(9, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = null;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator) strBuilder_StrBuilderTokenizer0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      String string0 = "";
      Iterator<Object> iterator0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      
      String string1 = null;
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertNotNull(list0);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(16, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, string1);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(30, strBuilder1.length());
      assertEquals(30, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(30, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(30, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertNotNull(list0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) list0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(48, strBuilder1.capacity());
      assertEquals(46, strBuilder1.length());
      assertEquals(46, strBuilder1.size());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(46, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Collection) linkedList0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, linkedList0.size());
      assertEquals("[]", linkedList0.toString());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      Collection<Object> collection0 = null;
      String string0 = "length must be valid";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(collection0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      Object[] objectArray0 = new Object[6];
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "sartndex must be valid";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.size());
      assertEquals(54, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      Object[] objectArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(22, strBuilder0.size());
      assertEquals(54, strBuilder0.capacity());
      assertEquals(22, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(22, strBuilder1.length());
      assertEquals(54, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(22, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      double double0 = 0.7777540606660966;
      StrBuilder strBuilder1 = strBuilder0.appendln(double0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(19, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(19, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(19, strBuilder0.size());
      assertEquals(19, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Iterator) strBuilder_StrBuilderTokenizer0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(37, strBuilder2.capacity());
      assertEquals(37, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(37, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(1, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(37, strBuilder1.capacity());
      assertEquals(37, strBuilder1.size());
      assertEquals(37, strBuilder1.length());
      assertEquals(37, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.size());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 5;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      Iterator<Object> iterator0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendAll(iterator0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(5, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.appendln(boolean0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(5, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(5, strBuilder1.length());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertNotNull(list0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      
      StrBuilder strBuilder2 = strBuilder1.appendAll((Collection) list0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(9, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(9, strBuilder2.size());
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertEquals(9, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      List list0 = strBuilder_StrBuilderTokenizer0.getTokenList();
      assertNotNull(list0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      
      StrBuilder strBuilder1 = strBuilder0.appendAll((Collection) list0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "Mj2^";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      Collection<Object> collection0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendAll(collection0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(36, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      Object[] objectArray0 = null;
      StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      char[] charArray0 = new char[5];
      int int1 = 1;
      StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, int1);
      assertNotNull(strBuilder1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(1, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      char char0 = '[';
      char[] charArray0 = new char[4];
      charArray0[2] = char0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: 91
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = "/|}LeU_4bu mJ\"Ew";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[3];
      int int0 = 0;
      int int1 = (-372);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid length: -372
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "DmCK~";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.size());
      
      char[] charArray0 = new char[10];
      char char0 = ']';
      charArray0[0] = char0;
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, (int) charArray0[0], (int) charArray0[3]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = (-842);
      char[] charArray0 = new char[10];
      char char0 = 'B';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(charArray0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // Invalid startIndex: 66
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 9;
      char char0 = 'n';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      
      char[] charArray0 = strBuilder0.toCharArray(int0, int0);
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(charArray0);
      assertNotNull(strBuilder2);
      assertArrayEquals(new char[] {}, charArray0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertEquals(10, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(10, strBuilder2.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      long long0 = 1068L;
      StrBuilder strBuilder1 = strBuilder0.append(long0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      
      int int0 = 4;
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder1.append(strBuilder0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 2900;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(2900, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = strBuilder0.leftString(int0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2900, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      int int1 = strBuilder0.indexOf(string0, int0);
      assertEquals((-1), int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2900, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'p';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertFalse(int0 == int1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(2900, strBuilder1.capacity());
      assertEquals(2900, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(2900, strBuilder1.size());
      assertEquals(2900, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(2900, strBuilder0.size());
      assertEquals(2900, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 1;
      char char0 = '!';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(strBuilder0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = "\"$smNk)_{y[{ iiC";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'e';
      int int0 = (-292);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      int int0 = 5;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1, int0, int0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(5, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(0, strBuilder2.length());
      assertEquals(5, strBuilder2.capacity());
      assertEquals(0, strBuilder2.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 57;
      StrBuilder strBuilder1 = strBuilder0.appendln((double) int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(5, strBuilder1.size());
      assertEquals(5, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(11, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(11, strBuilder2.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(11, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(11, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 57;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(57, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = null;
      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(57, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder2.size());
      assertEquals(0, strBuilder2.length());
      assertEquals(57, strBuilder2.capacity());
      assertEquals(true, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder2.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      int int1 = 112;
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = "$opHwNF`<V";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(10, strBuilder0.size());
      assertEquals(42, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(10, strBuilder0.length());
      
      char char0 = '2';
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) string0);
      assertNotNull(stringBuffer0);
      assertEquals("$opHwNF`<V", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals(26, stringBuffer0.capacity());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      int int0 = (-1431);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0, int0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = "Array element ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      StringBuffer stringBuffer1 = stringBuffer0.append((CharSequence) string0);
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(14, stringBuffer0.length());
      assertEquals("Array element ", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(14, stringBuffer1.length());
      assertEquals(16, stringBuffer1.capacity());
      assertEquals("Array element ", stringBuffer1.toString());
      
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer1);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(stringBuffer1, stringBuffer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(28, strBuilder0.size());
      assertEquals(28, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, stringBuffer0.length());
      assertEquals("Array element ", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(28, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(46, strBuilder1.capacity());
      assertEquals(28, strBuilder1.size());
      assertEquals(14, stringBuffer1.length());
      assertEquals(16, stringBuffer1.capacity());
      assertEquals("Array element ", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      StringBuffer stringBuffer0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 2;
      String string0 = "lFxMI6Ol|<NlI.`\"bx#";
      StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(2, strBuilder0.length());
      assertEquals(2, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(2, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      String string0 = "org.apache.commons.lang.text.StrBuilder";
      char char0 = '[';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, int0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = "os.arch";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(7, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(39, strBuilder0.capacity());
      assertEquals(7, strBuilder0.length());
      
      int int0 = 0;
      int int1 = (-791);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // length must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = "6.0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(35, strBuilder0.capacity());
      assertEquals(3, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(3, strBuilder0.size());
      
      int int0 = (-1215);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.append(string0, int0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = ' ';
      int int0 = strBuilder0.length();
      assertEquals(0, int0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = strBuilder0.getNullText();
      assertNull(string0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(string0, (int) char0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(1, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(16, strBuilder1.size());
      assertEquals(48, strBuilder1.capacity());
      assertEquals("Invalid length: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(16, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(16, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(48, strBuilder0.capacity());
      assertEquals("Invalid length: ", strBuilder0.getNullText());
      
      StrBuilder strBuilder2 = strBuilder1.appendNull();
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.size());
      assertEquals(48, strBuilder2.capacity());
      assertEquals("Invalid length: ", strBuilder2.getNullText());
      assertEquals(32, strBuilder2.length());
      assertEquals(32, strBuilder1.length());
      assertEquals(48, strBuilder1.capacity());
      assertEquals("Invalid length: ", strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.size());
      assertEquals(32, strBuilder0.length());
      assertEquals(48, strBuilder0.capacity());
      assertEquals("Invalid length: ", strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      String string1 = "hX";
      assertNotSame(string1, string0);
      
      int int0 = 4;
      char char0 = '4';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) string1, int0, char0);
      assertNotNull(strBuilder1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNotSame(string1, string0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertEquals(18, strBuilder1.size());
      assertEquals(18, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(46, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(18, strBuilder0.size());
      assertEquals(18, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder2 = strBuilder0.appendSeparator(string0);
      assertNotNull(strBuilder2);
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertNull(strBuilder2.getNewLineText());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(46, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(32, strBuilder2.size());
      assertEquals(32, strBuilder2.length());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder strBuilder3 = strBuilder0.setNewLineText(string1);
      assertNotNull(strBuilder3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(string1, string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertEquals(32, strBuilder3.size());
      assertEquals(32, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(46, strBuilder3.capacity());
      assertEquals("hX", strBuilder3.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("hX", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      
      int int1 = strBuilder3.lastIndexOf(char0);
      assertEquals(15, int1);
      assertFalse(int1 == int0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertNotSame(string1, string0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(string0, string1);
      assertEquals(32, strBuilder3.size());
      assertEquals(32, strBuilder3.length());
      assertNull(strBuilder3.getNullText());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(46, strBuilder3.capacity());
      assertEquals("hX", strBuilder3.getNewLineText());
      assertEquals(32, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals("hX", strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(46, strBuilder0.capacity());
      
      StrBuilder strBuilder4 = strBuilder2.appendln(strBuilder3, int0, int1);
      assertNotNull(strBuilder4);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertSame(strBuilder3, strBuilder1);
      assertSame(strBuilder3, strBuilder4);
      assertSame(strBuilder3, strBuilder0);
      assertSame(strBuilder3, strBuilder2);
      assertSame(strBuilder4, strBuilder2);
      assertSame(strBuilder4, strBuilder0);
      assertSame(strBuilder4, strBuilder3);
      assertSame(strBuilder4, strBuilder1);
      assertNotSame(string1, string0);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder4);
      assertSame(strBuilder2, strBuilder3);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder3);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder4);
      assertNotSame(string0, string1);
      assertNull(strBuilder3.getNullText());
      assertEquals(false, strBuilder3.isEmpty());
      assertEquals(49, strBuilder3.size());
      assertEquals("hX", strBuilder3.getNewLineText());
      assertEquals(49, strBuilder3.capacity());
      assertEquals(49, strBuilder3.length());
      assertEquals(49, strBuilder4.capacity());
      assertEquals("hX", strBuilder4.getNewLineText());
      assertEquals(49, strBuilder4.size());
      assertNull(strBuilder4.getNullText());
      assertEquals(false, strBuilder4.isEmpty());
      assertEquals(49, strBuilder4.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals("hX", strBuilder2.getNewLineText());
      assertEquals(49, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(49, strBuilder2.size());
      assertEquals(49, strBuilder2.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(49, strBuilder0.length());
      assertEquals("hX", strBuilder0.getNewLineText());
      assertEquals(49, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(49, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      int int1 = 1394;
      char[] charArray0 = new char[3];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, int0, charArray0, (int) charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      
      float float0 = 0.0F;
      StrBuilder strBuilder1 = strBuilder0.appendln(float0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[4];
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder_StrBuilderReader0.read(charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'0', '.', '0', '\n'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try {
        strBuilder1.getChars((int) charArray0[0], (int) charArray0[0], charArray0, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 48
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "java.lang.Object";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(16, strBuilder0.size());
      assertEquals(48, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(16, strBuilder0.length());
      
      int int0 = 359;
      char char0 = 'T';
      char[] charArray0 = new char[2];
      int int1 = (-173);
      // Undeclared exception!
      try {
        strBuilder0.getChars((int) char0, int1, charArray0, int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -173
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      int int0 = 115;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(115, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      char char0 = '5';
      int int1 = (-682);
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try {
        strBuilder0.getChars(int1, (int) char0, charArray0, (int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -682
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      long long0 = 1068L;
      StrBuilder strBuilder1 = strBuilder0.append(long0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      
      char[] charArray0 = new char[1];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'1', '0', '6', '8'}, charArray1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertNotSame(charArray1, charArray0);
      assertNotSame(charArray0, charArray1);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(4, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      char[] charArray0 = new char[2];
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertSame(charArray1, charArray0);
      assertSame(charArray0, charArray1);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 1994;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(1994, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      char[] charArray0 = null;
      char[] charArray1 = strBuilder0.getChars(charArray0);
      assertNotNull(charArray1);
      assertArrayEquals(new char[] {}, charArray1);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(1994, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = "0";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      
      int int0 = 0;
      int int1 = 4;
      char[] charArray0 = strBuilder0.toCharArray(int0, int1);
      assertNotNull(charArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'0'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "%&ir>L)G{#!sy";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      char[] charArray0 = strBuilder0.toCharArray();
      assertNotNull(charArray0);
      assertArrayEquals(new char[] {'%', '&', 'i', 'r', '>', 'L', ')', 'G', '', '{', '#', '!', 's', 'y'}, charArray0);
      assertNull(strBuilder0.getNullText());
      assertEquals(14, strBuilder0.length());
      assertEquals(46, strBuilder0.capacity());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "LC@~8Ah8^yd";
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.append(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(11, strBuilder0.size());
      assertEquals(11, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(11, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(11, strBuilder1.length());
      assertEquals(false, strBuilder1.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder0.deleteCharAt(int0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertEquals(10, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(10, strBuilder0.length());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(10, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(10, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      char[] charArray0 = new char[1];
      StrBuilder strBuilder0 = new StrBuilder((int) charArray0[0]);
      assertNotNull(strBuilder0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt((int) charArray0[0]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "Invalid startIndex: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(20, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(52, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(20, strBuilder0.size());
      
      int int0 = (-1573);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.deleteCharAt(int0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1573
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, charArray0[2]);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      char char0 = 'v';
      int int0 = strBuilder0.lastIndexOf(char0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setCharAt(int0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = '-';
      // Undeclared exception!
      try {
        char char1 = strBuilder0.charAt((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 45
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      int int0 = 1994;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(1994, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      int int1 = (-2959);
      // Undeclared exception!
      try {
        char char0 = strBuilder0.charAt(int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2959
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 9;
      char char0 = 'n';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      
      boolean boolean0 = strBuilder0.isEmpty();
      assertFalse(boolean0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(9, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(9, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) strBuilder0;
      assertNotNull(objectArray0[1]);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "end < start";
      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(objectArray0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(33, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrBuilder strBuilder2 = strBuilder1.minimizeCapacity();
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNullText());
      assertEquals(33, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(33, strBuilder2.length());
      assertEquals(33, strBuilder2.capacity());
      assertEquals(33, strBuilder1.length());
      assertEquals(33, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(33, strBuilder1.size());
      assertEquals(33, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(33, strBuilder0.length());
      assertEquals(33, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.setLength(int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      int int0 = 13;
      char char0 = 'l';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      
      char[] charArray0 = new char[1];
      strBuilder_StrBuilderWriter0.write(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) string0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(14, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(14, strBuilder1.length());
      assertEquals(14, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.setLength(int0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder2, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertEquals(13, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(13, strBuilder1.length());
      assertEquals(13, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(13, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(32, strBuilder2.capacity());
      assertEquals(13, strBuilder2.length());
      assertNull(strBuilder2.getNullText());
      assertEquals(13, strBuilder2.size());
      assertEquals(false, strBuilder2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      
      int int1 = (-3103);
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.setLength(int1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -3103
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      boolean boolean0 = true;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, boolean0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      char char0 = strBuilder1.charAt(int0);
      assertEquals('t', char0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(4, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(4, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(4, strBuilder1.size());
      assertEquals(4, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      
      StrBuilder strBuilder2 = strBuilder1.setLength((int) char0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(116, strBuilder2.capacity());
      assertEquals(false, strBuilder2.isEmpty());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(116, strBuilder2.length());
      assertEquals(116, strBuilder2.size());
      assertNull(strBuilder2.getNullText());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(116, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(116, strBuilder0.length());
      assertEquals(116, strBuilder0.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(116, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(116, strBuilder1.capacity());
      assertEquals(116, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "";
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(0, strBuilder1.size());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(0, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      int int0 = 616;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(616, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      
      String string0 = null;
      StrBuilder strBuilder1 = strBuilder0.setNullText(string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(616, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(616, strBuilder1.capacity());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      
      strBuilder_StrBuilderWriter0.close();
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "Array element ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(14, strBuilder0.size());
      assertEquals(14, strBuilder0.length());
      
      strBuilder_StrBuilderWriter0.write(string0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(28, strBuilder0.size());
      assertEquals(46, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(28, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "HrAXtl-\\ua|";
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      char char0 = 'f';
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      // Undeclared exception!
      try {
        strBuilder_StrBuilderWriter0.write(string0, (int) char0, (int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // startIndex must be valid
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[4];
      strBuilder_StrBuilderWriter0.write(charArray0, (int) charArray0[2], (int) charArray0[3]);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "DmCK~";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
      
      strBuilder_StrBuilderWriter0.flush();
      assertEquals(5, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(5, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(37, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = "DmCK~";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[10];
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(5, strBuilder0.length());
      assertEquals(5, strBuilder0.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter1 = (StrBuilder.StrBuilderWriter)strBuilder_StrBuilderWriter0.append(charArray0[4]);
      assertNotNull(strBuilder_StrBuilderWriter1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder_StrBuilderWriter0, strBuilder_StrBuilderWriter1);
      assertSame(strBuilder_StrBuilderWriter1, strBuilder_StrBuilderWriter0);
      assertNull(strBuilder0.getNullText());
      assertEquals(6, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(37, strBuilder0.capacity());
      assertEquals(6, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      String string0 = "";
      StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)StrMatcher.charSetMatcher(string0);
      assertNotNull(strMatcher_NoMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_NoMatcher0, string0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      
      char[] charArray0 = new char[8];
      StrBuilder strBuilder1 = strBuilder0.insert((int) charArray0[0], (double) charArray0[0]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(3, strBuilder0.size());
      assertEquals(3, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(3, strBuilder1.size());
      assertEquals(3, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = "4YfY";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.quoteMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_CharSetMatcher0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(36, strBuilder1.capacity());
      assertEquals(4, strBuilder1.length());
      assertEquals(4, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(4, strBuilder0.size());
      assertEquals(4, strBuilder0.length());
      assertEquals(36, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = null;
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[10];
      StrBuilder strBuilder1 = strBuilder0.appendln(charArray0, (int) charArray0[5], (int) charArray0[4]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, int0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = (StrBuilder.StrBuilderWriter)strBuilder0.asWriter();
      assertNotNull(strBuilder_StrBuilderWriter0);
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int int0 = (-104);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      String string0 = "";
      StringBuffer stringBuffer0 = new StringBuffer(string0);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.size());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      String string0 = "0Sz";
      int int0 = strBuilder0.lastIndexOf(string0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      int int0 = (-3362);
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = (StrBuilder.StrBuilderTokenizer)strBuilder0.asTokenizer();
      assertNotNull(strBuilder_StrBuilderTokenizer0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder_StrBuilderTokenizer0.isIgnoreEmptyTokens());
      assertEquals(-1, strBuilder_StrBuilderTokenizer0.previousIndex());
      assertEquals(false, strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull());
      assertEquals(0, strBuilder_StrBuilderTokenizer0.nextIndex());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = (StrBuilder.StrBuilderReader)strBuilder0.asReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      
      StrBuilder strBuilder1 = strBuilder0.appendln((Object) strBuilder0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      String string0 = "TgEggS";
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendln(string0, int0, int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      String string0 = null;
      int int0 = strBuilder0.indexOf(string0);
      assertEquals((-1), int0);
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (long) int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[5];
      int int0 = strBuilder0.indexOf(charArray0[1]);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = 'n';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 110
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      
      Collection<Object> collection0 = null;
      char char0 = 'g';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) collection0, (int) char0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(103, strBuilder0.size());
      assertEquals(103, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(103, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(103, strBuilder1.capacity());
      assertEquals(103, strBuilder1.size());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNullText());
      assertEquals(103, strBuilder1.length());
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(0, strBuilder0.length());
      
      int int0 = 0;
      StrBuilder strBuilder1 = strBuilder0.appendln((long) int0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(2, strBuilder1.size());
      assertEquals(2, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(2, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(2, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      
      char[] charArray0 = new char[8];
      StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0, (int) charArray0[4], (int) charArray0[4]);
      assertNotNull(strBuilder1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(1, strBuilder1.length());
      assertEquals(1, strBuilder1.size());
      assertNull(strBuilder1.getNullText());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(32, strBuilder1.capacity());
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher.CharMatcher strMatcher_CharMatcher0 = (StrMatcher.CharMatcher)StrMatcher.spaceMatcher();
      assertNotNull(strMatcher_CharMatcher0);
      
      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharMatcher0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = (StrMatcher.CharSetMatcher)StrMatcher.splitMatcher();
      assertNotNull(strMatcher_CharSetMatcher0);
      
      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_CharSetMatcher0);
      assertEquals((-1), int0);
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      
      StrBuilder strBuilder1 = strBuilder0.appendln(strBuilder0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(1, strBuilder1.size());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNewLineText());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder strBuilder1 = strBuilder0.insert(int0, (Object) strBuilder0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.size());
      assertEquals(0, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.size());
      
      int int0 = 9;
      char char0 = 'n';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertEquals(false, strBuilder1.isEmpty());
      assertEquals(9, strBuilder1.size());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(9, strBuilder1.length());
      assertEquals(32, strBuilder1.capacity());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertEquals(9, strBuilder0.size());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(9, strBuilder0.length());
      
      StrBuilder strBuilder2 = strBuilder1.deleteAll(char0);
      assertNotNull(strBuilder2);
      assertSame(strBuilder2, strBuilder1);
      assertSame(strBuilder2, strBuilder0);
      assertSame(strBuilder1, strBuilder2);
      assertSame(strBuilder1, strBuilder0);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder0, strBuilder2);
      assertEquals(1, strBuilder2.size());
      assertNull(strBuilder2.getNewLineText());
      assertEquals(1, strBuilder2.length());
      assertEquals(false, strBuilder2.isEmpty());
      assertEquals(32, strBuilder2.capacity());
      assertNull(strBuilder2.getNullText());
      assertEquals(false, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertEquals(1, strBuilder1.size());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(1, strBuilder1.length());
      assertNull(strBuilder1.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(1, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(1, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "Invalid length: ";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      int int0 = strBuilder0.capacity();
      assertEquals(48, int0);
      assertEquals(16, strBuilder0.length());
      assertEquals(16, strBuilder0.size());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(48, strBuilder0.capacity());
      assertEquals(false, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      
      char char0 = '8';
      // Undeclared exception!
      try {
        StrBuilder strBuilder1 = strBuilder0.insert((int) char0, (float) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 56
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();
      assertNotNull(stringBuffer0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.capacity());
      assertEquals(0, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNewLineText());
      
      char char0 = 'g';
      // Undeclared exception!
      try {
        String string0 = strBuilder0.substring((int) char0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // end < start
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      
      int int0 = 0;
      char char0 = 'u';
      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(int0, int0, char0);
      assertNotNull(strBuilder1);
      assertSame(strBuilder0, strBuilder1);
      assertSame(strBuilder1, strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder1.capacity());
      assertEquals(true, strBuilder1.isEmpty());
      assertNull(strBuilder1.getNewLineText());
      assertNull(strBuilder1.getNullText());
      assertEquals(0, strBuilder1.length());
      assertEquals(0, strBuilder1.size());
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "";
      StrBuilder strBuilder0 = new StrBuilder(string0);
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
      
      strBuilder_StrBuilderReader0.reset();
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertEquals(0, strBuilder0.length());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      int int0 = 0;
      StrBuilder strBuilder0 = new StrBuilder(int0);
      assertNotNull(strBuilder0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      char char0 = '[';
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
      
      strBuilder_StrBuilderReader0.mark((int) char0);
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(0, strBuilder0.size());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
      
      strBuilder_StrBuilderReader0.close();
      assertEquals(0, strBuilder0.size());
      assertEquals(32, strBuilder0.capacity());
      assertEquals(0, strBuilder0.length());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertNull(strBuilder0.getNullText());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StrBuilder strBuilder0 = new StrBuilder();
      assertNotNull(strBuilder0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();
      assertNotNull(strBuilder_StrBuilderReader0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
      
      boolean boolean0 = strBuilder_StrBuilderReader0.markSupported();
      assertTrue(boolean0);
      assertNull(strBuilder0.getNullText());
      assertEquals(32, strBuilder0.capacity());
      assertNull(strBuilder0.getNewLineText());
      assertEquals(true, strBuilder0.isEmpty());
      assertEquals(0, strBuilder0.length());
      assertEquals(0, strBuilder0.size());
  }
}
