/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:56 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.GradientPaint;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.geom.Arc2D;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.PieToolTipGenerator;
import org.jfree.chart.labels.StandardPieSectionLabelGenerator;
import org.jfree.chart.labels.StandardPieToolTipGenerator;
import org.jfree.chart.labels.StandardXYZToolTipGenerator;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.AbstractPieLabelDistributor;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DrawingSupplier;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.PieLabelDistributor;
import org.jfree.chart.plot.PieLabelRecord;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PiePlot3D;
import org.jfree.chart.plot.PiePlotState;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.RingPlot;
import org.jfree.chart.renderer.WaferMapRenderer;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.category.WaterfallBarRenderer;
import org.jfree.chart.renderer.xy.ClusteredXYBarRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.StackedXYBarRenderer;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYSplineAndShapeRenderer;
import org.jfree.chart.renderer.xy.XYStepRenderer;
import org.jfree.chart.text.TextBox;
import org.jfree.chart.urls.PieURLGenerator;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.chart.util.Rotation;
import org.jfree.chart.util.TableOrder;
import org.jfree.chart.util.UnitType;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyedValues;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.junit.runner.RunWith;

 
public class PiePlotEvoSuite_branch_Test   {

  @Test
  public void test000()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertNotNull(ringPlot0);
      
      RingPlot ringPlot1 = (RingPlot)ringPlot0.clone();
      assertTrue(ringPlot1.equals((Object)ringPlot0));
      assertTrue(ringPlot0.equals((Object)ringPlot1));
      assertEquals(0.5F, ringPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot1.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot1.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot1.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot1.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot1.isOutlineVisible());
      assertEquals(false, ringPlot1.isSubplot());
      assertEquals(0, ringPlot1.getPieIndex());
      assertEquals(false, ringPlot1.getSimpleLabels());
      assertEquals(0.2, ringPlot1.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot1.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot1.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot1.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot1.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot1.getSectionOutlinesVisible());
      assertEquals(false, ringPlot1.getIgnoreNullValues());
      assertEquals(0.08, ringPlot1.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot1.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot1.getLabelLinksVisible());
      assertEquals(4.0, ringPlot1.getShadowXOffset(), 0.01D);
      assertNull(ringPlot1.getNoDataMessage());
      assertEquals(0.14, ringPlot1.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot1.isCircular());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertNotNull(ringPlot1);
      assertNotSame(ringPlot1, ringPlot0);
      assertNotSame(ringPlot0, ringPlot1);
  }

  @Test
  public void test001()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNotNull(piePlot3D0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      piePlot3D0.setDataset((PieDataset) defaultPieDataset0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      PiePlot3D piePlot3D1 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot3D1.getSimpleLabels());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D1.getPieIndex());
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D1.isSubplot());
      assertEquals(false, piePlot3D1.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D1.getDarkerSides());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D1.getIgnoreZeroValues());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D1.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D1.isOutlineVisible());
      assertEquals(true, piePlot3D1.getLabelLinksVisible());
      assertNotNull(piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      
      double double0 = (-47.2564);
      piePlot3D0.setStartAngle(double0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-47.2564), piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNotSame(piePlot3D0, piePlot3D1);
      
      piePlot3D0.setDataset((PieDataset) defaultPieDataset0);
      assertFalse(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals((-47.2564), piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotSame(piePlot3D0, piePlot3D1);
  }

  @Test
  public void test002()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNotNull(piePlot3D0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      piePlot3D0.setDataset((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      
      PiePlot3D piePlot3D1 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertTrue(piePlot3D1.equals((Object)piePlot3D0));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot3D1.isSubplot());
      assertEquals(0.025, piePlot3D1.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D1.getIgnoreZeroValues());
      assertEquals(false, piePlot3D1.getDarkerSides());
      assertEquals(true, piePlot3D1.getSectionOutlinesVisible());
      assertEquals(0, piePlot3D1.getPieIndex());
      assertEquals(1.0F, piePlot3D1.getForegroundAlpha(), 0.01F);
      assertNull(piePlot3D1.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D1.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D1.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D1.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D1.getSimpleLabels());
      assertEquals(15, piePlot3D1.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D1.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D1.isOutlineVisible());
      assertEquals(90.0, piePlot3D1.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D1.isCircular());
      assertEquals(0.025, piePlot3D1.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D1.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D1.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D1.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D1.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D1.getBackgroundAlpha(), 0.01F);
      assertNotNull(piePlot3D1);
      assertNotSame(piePlot3D1, piePlot3D0);
      
      piePlot3D0.setDataset((PieDataset) defaultPieDataset0);
      assertTrue(piePlot3D0.equals((Object)piePlot3D1));
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNotSame(piePlot3D0, piePlot3D1);
  }

  @Test
  public void test003()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNotNull(ringPlot0);
      
      int int0 = 1771;
      Rectangle2D rectangle2D0 = null;
      double double0 = 0.0;
      Rectangle2D rectangle2D1 = ringPlot0.getArcBounds(rectangle2D0, rectangle2D0, int0, int0, double0);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(rectangle2D1);
  }

  @Test
  public void test004()  throws Throwable  {
      float float0 = 670.8327F;
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNotNull(piePlot3D0);
      
      PieDataset pieDataset0 = piePlot3D0.getDataset();
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNotNull(ringPlot0);
      
      JOptionPane jOptionPane0 = new JOptionPane();
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertNotNull(jOptionPane0);
      
      Rectangle rectangle0 = jOptionPane0.bounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotNull(rectangle0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)ringPlot0.getArcBounds(rectangle0, rectangle0, rectangle0.x, rectangle0.x, float0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isValid());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
  }

  @Test
  public void test005()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      LegendItemCollection legendItemCollection0 = ringPlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test006()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Graphics2D graphics2D0 = null;
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(ringPlot0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try {
        PiePlotState piePlotState0 = ringPlot0.initialise(graphics2D0, (Rectangle2D) rectangle2D_Double0, (PiePlot) piePlot3D0, integer0, plotRenderingInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test007()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(piePlot0);
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = null;
      // Undeclared exception!
      try {
        piePlot0.setLegendLabelGenerator(pieSectionLabelGenerator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'generator' argument.
         //
      }
  }

  @Test
  public void test008()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotNull(piePlot3D0);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertNotNull(standardPieSectionLabelGenerator0);
      
      piePlot3D0.setLegendLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
  }

  @Test
  public void test009()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(ringPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      ringPlot0.setLegendItemShape((Shape) rectangle2D_Float0);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test
  public void test010()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(ringPlot0);
      
      PieLabelDistributor pieLabelDistributor0 = (PieLabelDistributor)ringPlot0.getLabelDistributor();
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(pieLabelDistributor0);
      
      ringPlot0.setLabelDistributor((AbstractPieLabelDistributor) pieLabelDistributor0);
      assertEquals(0, pieLabelDistributor0.getItemCount());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
  }

  @Test
  public void test011()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertNotNull(piePlot3D0);
      
      RectangleInsets rectangleInsets0 = Axis.DEFAULT_TICK_LABEL_INSETS;
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertNotNull(rectangleInsets0);
      
      piePlot3D0.setSimpleLabelOffset(rectangleInsets0);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
  }

  @Test
  public void test012()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNotNull(ringPlot0);
      
      int int0 = 1639;
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(xYBlockRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = xYBlockRenderer0.getToolTipGenerator(int0, int0);
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNull(xYToolTipGenerator0);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(int0, xYToolTipGenerator0);
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(cyclicXYItemRenderer0);
      
      UnitType unitType0 = cyclicXYItemRenderer0.getGapThresholdType();
      assertEquals("UnitType.RELATIVE", unitType0.toString());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(unitType0);
      
      RectangleInsets rectangleInsets0 = new RectangleInsets(unitType0, (double) int0, (double) int0, (double) int0, (double) int0);
      assertEquals(1639.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1639.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(1639.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1639.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals("UnitType.RELATIVE", unitType0.toString());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(rectangleInsets0);
      
      ringPlot0.setLabelPadding(rectangleInsets0);
      assertEquals(1639.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(1639.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(1639.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(1639.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals("UnitType.RELATIVE", unitType0.toString());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test013()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, int0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(categoryToPieDataset0);
      
      Color color0 = (Color)multiplePiePlot0.getOutlinePaint();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(color0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(piePlot3D0);
      
      piePlot3D0.setLabelPaint((Paint) color0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
  }

  @Test
  public void test014()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot3D0);
      
      int int0 = 21;
      XYSplineAndShapeRenderer xYSplineAndShapeRenderer0 = new XYSplineAndShapeRenderer(int0);
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(21, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertNotNull(xYSplineAndShapeRenderer0);
      
      Font font0 = xYSplineAndShapeRenderer0.getBaseItemLabelFont();
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(21, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertNotNull(font0);
      
      piePlot3D0.setLabelFont(font0);
      assertEquals(false, xYSplineAndShapeRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineAndShapeRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseLinesVisible());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYSplineAndShapeRenderer0.getPassCount());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, xYSplineAndShapeRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getDrawOutlines());
      assertEquals(21, xYSplineAndShapeRenderer0.getPrecision());
      assertEquals(false, xYSplineAndShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineAndShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, xYSplineAndShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineAndShapeRenderer0.getUseFillPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYSplineAndShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineAndShapeRenderer0.getBaseShapesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, font0.isTransformed());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(0, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(true, font0.isPlain());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
  }

  @Test
  public void test015()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNull(pieDataset0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertNotNull(piePlot3D0);
      
      int int0 = (-3208);
      WaferMapRenderer waferMapRenderer0 = new WaferMapRenderer(int0, int0);
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waferMapRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waferMapRenderer0.getBaseCreateEntities());
      assertEquals(true, waferMapRenderer0.getBaseSeriesVisible());
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(waferMapRenderer0);
      
      Stroke stroke0 = waferMapRenderer0.getSeriesStroke(int0);
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, waferMapRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waferMapRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, waferMapRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, waferMapRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, waferMapRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, waferMapRenderer0.getBaseCreateEntities());
      assertEquals(true, waferMapRenderer0.getBaseSeriesVisible());
      assertEquals(false, waferMapRenderer0.getAutoPopulateSeriesFillPaint());
      assertNull(stroke0);
      
      // Undeclared exception!
      try {
        piePlot3D0.setLabelLinkStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test016()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNotNull(piePlot3D0);
      
      StackedXYAreaRenderer stackedXYAreaRenderer0 = new StackedXYAreaRenderer();
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertNotNull(stackedXYAreaRenderer0);
      
      int int0 = 128;
      XYToolTipGenerator xYToolTipGenerator0 = stackedXYAreaRenderer0.getToolTipGenerator(int0, int0);
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertNull(xYToolTipGenerator0);
      
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(stackedXYBarRenderer0);
      
      XYURLGenerator xYURLGenerator0 = stackedXYBarRenderer0.getBaseURLGenerator();
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNull(xYURLGenerator0);
      
      XYStepRenderer xYStepRenderer0 = new XYStepRenderer(xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(xYStepRenderer0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYStepRenderer0.lookupSeriesStroke(int0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertNotNull(basicStroke0);
      
      piePlot3D0.setLabelLinkStroke((Stroke) basicStroke0);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepRenderer0.getDrawOutlines());
      assertEquals(false, xYStepRenderer0.getDrawSeriesLineAsPath());
      assertEquals(2, xYStepRenderer0.getPassCount());
      assertEquals(true, xYStepRenderer0.getBaseLinesVisible());
      assertEquals(true, xYStepRenderer0.getBaseShapesFilled());
      assertEquals(3, xYStepRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYStepRenderer0.getBaseCreateEntities());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepRenderer0.getBaseShapesVisible());
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepRenderer0.getBaseItemLabelsVisible());
      assertEquals(1.0, xYStepRenderer0.getStepPoint(), 0.01D);
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYStepRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYStepRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYStepRenderer0.getUseFillPaint());
      assertEquals(false, xYStepRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYStepRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYStepRenderer0.getUseOutlinePaint());
      assertEquals(false, stackedXYAreaRenderer0.getPlotLines());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYAreaRenderer0.isOutline());
      assertEquals(2.0, stackedXYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, stackedXYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer0.getPlotShapes());
      assertEquals(false, stackedXYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer0.getPlotArea());
      assertEquals(true, stackedXYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2, stackedXYAreaRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
  }

  @Test
  public void test017()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNotNull(piePlot3D0);
      
      JOptionPane jOptionPane0 = new JOptionPane();
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isValid());
      assertNotNull(jOptionPane0);
      
      Rectangle rectangle0 = jOptionPane0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isValid());
      assertNotNull(rectangle0);
      
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis valueAxis1 = combinedDomainXYPlot0.getRangeAxisForDataset(rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isValid());
      assertNull(valueAxis1);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot(valueAxis1);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isValid());
      assertNotNull(combinedRangeXYPlot0);
      
      Paint paint0 = combinedRangeXYPlot0.getRangeTickBandPaint();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, jOptionPane0.isCursorSet());
      assertEquals(2, jOptionPane0.getComponentCount());
      assertEquals(true, jOptionPane0.isForegroundSet());
      assertEquals(false, jOptionPane0.isPreferredSizeSet());
      assertEquals(true, jOptionPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jOptionPane0.isMaximumSizeSet());
      assertEquals(2, jOptionPane0.countComponents());
      assertEquals(true, jOptionPane0.isBackgroundSet());
      assertEquals(true, jOptionPane0.isFontSet());
      assertEquals(true, jOptionPane0.isEnabled());
      assertEquals(false, jOptionPane0.isFocusCycleRoot());
      assertEquals(false, jOptionPane0.isShowing());
      assertEquals(false, jOptionPane0.isLightweight());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicySet());
      assertEquals(false, jOptionPane0.isMinimumSizeSet());
      assertEquals(true, jOptionPane0.isVisible());
      assertEquals(false, jOptionPane0.getIgnoreRepaint());
      assertEquals(false, jOptionPane0.isDisplayable());
      assertEquals(false, jOptionPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jOptionPane0.isValid());
      assertNull(paint0);
      
      // Undeclared exception!
      try {
        piePlot3D0.setLabelLinkPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test018()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getLabelLinkPaint();
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNotNull(color0);
      
      piePlot3D0.setLabelLinkPaint((Paint) color0);
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
  }

  @Test
  public void test019()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertNotNull(piePlot0);
      
      int int0 = 0;
      defaultPieDataset0.insertValue(int0, (Comparable) arc2D_Double0.start, (Number) point2D_Double0.x);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(1, defaultPieDataset0.getItemCount());
      
      double double0 = piePlot0.getMaximumExplodePercent();
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test020()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot0);
      
      double double0 = piePlot0.getMaximumExplodePercent();
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test021()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      int int0 = rectangle2D_Double0.outcode(line2D_Double0.y2, line2D_Double0.y2);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(15, int0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float((float) int0, (float) int0, (float) int0, (float) int0);
      assertEquals(15.0F, line2D_Float0.x1, 0.01F);
      assertEquals(15.0F, line2D_Float0.y1, 0.01F);
      assertEquals(15.0F, line2D_Float0.y2, 0.01F);
      assertEquals(15.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(line2D_Float0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNotNull(ringPlot0);
      
      Rectangle rectangle0 = line2D_Float0.getBounds();
      assertEquals(15.0F, line2D_Float0.x1, 0.01F);
      assertEquals(15.0F, line2D_Float0.y1, 0.01F);
      assertEquals(15.0F, line2D_Float0.y2, 0.01F);
      assertEquals(15.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0, rectangle0.height);
      assertEquals(15, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(15, rectangle0.y);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(15.0, rectangle0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=15,y=15,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(15.0, rectangle0.getX(), 0.01D);
      assertEquals(15.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(15.0, rectangle0.getY(), 0.01D);
      assertEquals(15.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(15.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(15.0, rectangle0.getMinY(), 0.01D);
      assertEquals(15.0, rectangle0.getCenterY(), 0.01D);
      assertNotNull(rectangle0);
      
      Comparable<PiePlot> comparable0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setExplodePercent((Comparable) comparable0, (double) rectangle0.height);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test022()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot0);
      
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertNotNull(numberTickUnit0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertNotNull(line2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(line2D_Float0.x1, line2D_Float0.y2, line2D_Float0.x2, line2D_Float0.x1);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      piePlot0.setExplodePercent((Comparable) numberTickUnit0, (double) rectangle2D_Float0.height);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, piePlot0.getPieIndex());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertEquals(0, numberTickUnit0.getMinorTickCount());
  }

  @Test
  public void test023()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertNotNull(line2D_Double0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot3D0);
      
      double double0 = piePlot3D0.getExplodePercent((Comparable) line2D_Double0.y2);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test024()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(piePlot0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = piePlot0.equals(object0);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertFalse(boolean0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertNotNull(line2D_Float0);
      
      ClusteredXYBarRenderer clusteredXYBarRenderer0 = new ClusteredXYBarRenderer((double) line2D_Float0.y2, boolean0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(clusteredXYBarRenderer0);
      
      int int0 = (-1830);
      BasicStroke basicStroke0 = (BasicStroke)clusteredXYBarRenderer0.getItemOutlineStroke(int0, int0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(basicStroke0);
      
      piePlot0.setBaseSectionOutlineStroke((Stroke) basicStroke0);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(1, clusteredXYBarRenderer0.getPassCount());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, clusteredXYBarRenderer0.getUseYInterval());
      assertEquals(false, clusteredXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, clusteredXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, clusteredXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(3, clusteredXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, clusteredXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, clusteredXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, clusteredXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, clusteredXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, clusteredXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, clusteredXYBarRenderer0.getBaseCreateEntities());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test025()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNotNull(ringPlot0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertNotNull(line2D_Float0);
      
      boolean boolean0 = true;
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.lookupSectionOutlineStroke(line2D_Float0.x1, boolean0);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test026()  throws Throwable  {
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset((KeyedValues) defaultKeyedValues0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(piePlot3D0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        piePlot3D0.setBaseSectionOutlinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test027()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNotNull(piePlot3D0);
      
      WaterfallBarRenderer waterfallBarRenderer0 = new WaterfallBarRenderer();
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNotNull(waterfallBarRenderer0);
      
      GradientPaint gradientPaint0 = (GradientPaint)waterfallBarRenderer0.getLastBarPaint();
      assertEquals(false, gradientPaint0.isCyclic());
      assertEquals(1, gradientPaint0.getTransparency());
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
      assertNotNull(gradientPaint0);
      
      piePlot3D0.setBaseSectionOutlinePaint((Paint) gradientPaint0);
      assertEquals(false, gradientPaint0.isCyclic());
      assertEquals(1, gradientPaint0.getTransparency());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, waterfallBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, waterfallBarRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, waterfallBarRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, waterfallBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, waterfallBarRenderer0.getPassCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, waterfallBarRenderer0.getIncludeBaseInRange());
      assertEquals(0.0, waterfallBarRenderer0.getBase(), 0.01D);
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, waterfallBarRenderer0.getColumnCount());
      assertEquals(false, waterfallBarRenderer0.isDrawBarOutline());
      assertEquals(true, waterfallBarRenderer0.getBaseCreateEntities());
      assertEquals(true, waterfallBarRenderer0.getBaseSeriesVisible());
      assertEquals(true, waterfallBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1.0, waterfallBarRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0, waterfallBarRenderer0.getRowCount());
      assertEquals(false, waterfallBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, waterfallBarRenderer0.getLowerClip(), 0.01D);
      assertEquals(1.0, waterfallBarRenderer0.getMinimumBarLength(), 0.01D);
  }

  @Test
  public void test028()  throws Throwable  {
      Point2D.Double point2D_Double0 = new Point2D.Double();
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertNotNull(point2D_Double0);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      StandardXYZToolTipGenerator standardXYZToolTipGenerator0 = new StandardXYZToolTipGenerator();
      assertEquals("{0}: ({1}, {2}, {3})", standardXYZToolTipGenerator0.getFormatString());
      assertNotNull(standardXYZToolTipGenerator0);
      
      StackedXYBarRenderer stackedXYBarRenderer0 = new StackedXYBarRenderer();
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertNotNull(stackedXYBarRenderer0);
      
      int int0 = 0;
      XYURLGenerator xYURLGenerator0 = stackedXYBarRenderer0.getURLGenerator(int0, int0);
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertNull(xYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2((XYToolTipGenerator) standardXYZToolTipGenerator0, xYURLGenerator0);
      assertEquals("{0}: ({1}, {2}, {3})", standardXYZToolTipGenerator0.getFormatString());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      DrawingSupplier drawingSupplier0 = stackedXYAreaRenderer2_0.getDrawingSupplier();
      assertEquals("{0}: ({1}, {2}, {3})", standardXYZToolTipGenerator0.getFormatString());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertNull(drawingSupplier0);
      
      ringPlot0.setDrawingSupplier(drawingSupplier0);
      assertEquals("{0}: ({1}, {2}, {3})", standardXYZToolTipGenerator0.getFormatString());
      assertEquals(true, stackedXYBarRenderer0.getBaseCreateEntities());
      assertEquals(false, stackedXYBarRenderer0.isDrawBarOutline());
      assertEquals(false, stackedXYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(2, stackedXYBarRenderer0.getPassCount());
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, stackedXYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(3, stackedXYBarRenderer0.getDefaultEntityRadius());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, stackedXYBarRenderer0.getMargin(), 0.01D);
      assertEquals(false, stackedXYBarRenderer0.getRenderAsPercentages());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYBarRenderer0.getBaseSeriesVisible());
      assertEquals(2.0, stackedXYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, stackedXYBarRenderer0.getUseYInterval());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      
      boolean boolean0 = true;
      Color color0 = (Color)ringPlot0.lookupSectionOutlinePaint(point2D_Double0.y, boolean0);
      assertEquals(0.0, point2D_Double0.y, 0.01D);
      assertEquals(0.0, point2D_Double0.x, 0.01D);
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(color0);
  }

  @Test
  public void test029()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      String string0 = "Fkw|;@";
      Color color0 = (Color)ringPlot0.lookupSectionOutlinePaint(string0);
      assertEquals(128, color0.getGreen());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getRed());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(color0);
  }

  @Test
  public void test030()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(ganttRenderer0);
      
      Color color0 = (Color)ganttRenderer0.getBaseItemLabelPaint();
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertNotNull(color0);
      
      ringPlot0.setSectionOutlinePaint((Comparable) rectangle2D_Float0.height, (Paint) color0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      
      boolean boolean0 = true;
      Color color1 = (Color)ringPlot0.lookupSectionOutlinePaint(rectangle2D_Float0.height, boolean0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0, color1.getRed());
      assertEquals(255, color1.getAlpha());
      assertEquals(-16777216, color1.getRGB());
      assertEquals(1, color1.getTransparency());
      assertEquals(0, color1.getGreen());
      assertEquals(0, color1.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color1.toString());
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNotNull(color1);
      assertSame(color1, color0);
  }

  @Test
  public void test031()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotNull(piePlot3D0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = true;
      Color color0 = (Color)piePlot3D0.lookupSectionOutlinePaint(rectangle0.width, boolean0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getRed());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertNotNull(color0);
      
      piePlot3D0.setBaseSectionPaint((Paint) color0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(192, color0.getGreen());
      assertEquals(192, color0.getRed());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
  }

  @Test
  public void test032()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = (-2264);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultKeyedValues2DDataset0, tableOrder0, int0);
      assertEquals(-2264, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNotNull(categoryToPieDataset0);
      
      RingPlot ringPlot0 = new RingPlot((PieDataset) categoryToPieDataset0);
      assertEquals(-2264, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNotNull(ringPlot0);
      
      Comparable comparable0 = ringPlot0.getSectionKey(int0);
      assertEquals(-2264, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals((-2264), comparable0);
      assertNotNull(comparable0);
  }

  @Test
  public void test033()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, int0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNotNull(piePlot3D0);
      
      Comparable comparable0 = piePlot3D0.getSectionKey(int0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, comparable0);
      assertNotNull(comparable0);
  }

  @Test
  public void test034()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNotNull(ringPlot0);
      
      int int0 = 1833;
      Comparable comparable0 = ringPlot0.getSectionKey(int0);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1833, comparable0);
      assertNotNull(comparable0);
  }

  @Test
  public void test035()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertNotNull(rectangle0);
      
      boolean boolean0 = true;
      Color color0 = (Color)piePlot3D0.lookupSectionPaint(rectangle0.y, boolean0);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(85, color0.getBlue());
      assertEquals(85, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-43691, color0.getRGB());
      assertEquals("java.awt.Color[r=255,g=85,b=85]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertNotNull(color0);
  }

  @Test
  public void test036()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNotNull(piePlot3D0);
      
      piePlot3D0.setInteriorGap(rectangle2D_Double0.width);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
  }

  @Test
  public void test037()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNotNull(piePlot3D0);
      
      int int0 = 122;
      // Undeclared exception!
      try {
        piePlot3D0.setInteriorGap((double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (122.0) argument.
         //
      }
  }

  @Test
  public void test038()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(piePlot3D0);
      
      double double0 = (-2495.690325);
      // Undeclared exception!
      try {
        piePlot3D0.setInteriorGap(double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid 'percent' (-2495.690325) argument.
         //
      }
  }

  @Test
  public void test039()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNotNull(ringPlot0);
      
      Rotation rotation0 = null;
      // Undeclared exception!
      try {
        ringPlot0.setDirection(rotation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'direction' argument.
         //
      }
  }

  @Test
  public void test040()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNotNull(ringPlot0);
      
      Rotation rotation0 = ringPlot0.getDirection();
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNotNull(rotation0);
      
      ringPlot0.setDirection(rotation0);
      assertEquals((-1.0), rotation0.getFactor(), 0.01D);
      assertEquals("Rotation.CLOCKWISE", rotation0.toString());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
  }

  @Test
  public void test041()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertNotNull(ringPlot0);
      
      ringPlot0.setDataset(pieDataset0);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
  }

  @Test
  public void test042()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNotNull(piePlot3D0);
      
      double double0 = (-47.2564);
      piePlot3D0.setMaximumLabelWidth(double0);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals((-47.2564), piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test043()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(pieDataset0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getMaximumLabelWidth();
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, double0, 0.01D);
  }

  @Test
  public void test044()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(piePlot3D0);
      
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultListCellRenderer_UIResource0);
      
      Rectangle rectangle0 = defaultListCellRenderer_UIResource0.bounds();
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
      assertNotNull(rectangle0);
      
      piePlot3D0.setShadowYOffset((double) rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0, defaultListCellRenderer_UIResource0.countComponents());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isShowing());
      assertEquals(false, defaultListCellRenderer_UIResource0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.isBackgroundSet());
      assertEquals(0, defaultListCellRenderer_UIResource0.getComponentCount());
      assertEquals(false, defaultListCellRenderer_UIResource0.isCursorSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer_UIResource0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer_UIResource0.getFocusTraversalKeysEnabled());
      assertEquals(true, defaultListCellRenderer_UIResource0.isEnabled());
      assertEquals(false, defaultListCellRenderer_UIResource0.isDisplayable());
      assertEquals(true, defaultListCellRenderer_UIResource0.isVisible());
      assertEquals(false, defaultListCellRenderer_UIResource0.isLightweight());
      assertEquals(false, defaultListCellRenderer_UIResource0.isValid());
      assertEquals(false, defaultListCellRenderer_UIResource0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer_UIResource0.isFontSet());
      assertEquals(false, defaultListCellRenderer_UIResource0.isFocusTraversalPolicyProvider());
  }

  @Test
  public void test045()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNotNull(ringPlot0);
      
      XYBoxAndWhiskerRenderer xYBoxAndWhiskerRenderer0 = new XYBoxAndWhiskerRenderer();
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertNotNull(xYBoxAndWhiskerRenderer0);
      
      Color color0 = (Color)xYBoxAndWhiskerRenderer0.getBaseOutlinePaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertNotNull(color0);
      
      ringPlot0.setLabelOutlinePaint((Paint) color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getBlue());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(2.0, xYBoxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, xYBoxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals((-1.0), xYBoxAndWhiskerRenderer0.getBoxWidth(), 0.01D);
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(1, xYBoxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, xYBoxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBoxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
  }

  @Test
  public void test046()  throws Throwable  {
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      ringPlot0.setLabelLinkMargin((double) rectangle2D_Float0.width);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.0, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
  }

  @Test
  public void test047()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelOutlineStroke();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test048()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertNotNull(piePlot0);
      
      boolean boolean0 = true;
      piePlot0.setSimpleLabels(boolean0);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
  }

  @Test
  public void test049()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNotNull(piePlot3D0);
      
      double double0 = piePlot3D0.getLabelLinkMargin();
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, double0, 0.01D);
  }

  @Test
  public void test050()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = true;
      piePlot3D0.setLabelLinksVisible(boolean0);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
  }

  @Test
  public void test051()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNotNull(piePlot0);
      
      PieDataset pieDataset0 = piePlot0.getDataset();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(pieDataset0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotNull(piePlot3D0);
      
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertNotNull(ringPlot0);
      
      PieURLGenerator pieURLGenerator0 = ringPlot0.getLegendLabelURLGenerator();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertNull(pieURLGenerator0);
      
      piePlot3D0.setLegendLabelURLGenerator(pieURLGenerator0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
  }

  @Test
  public void test052()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getIgnoreZeroValues();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test053()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNotNull(ringPlot0);
      
      RectangleInsets rectangleInsets0 = ringPlot0.getSimpleLabelOffset();
      assertEquals(0.18, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getTop(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(0.18, rectangleInsets0.getRight(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNotNull(rectangleInsets0);
  }

  @Test
  public void test054()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertNotNull(line2D_Double0);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      int int0 = rectangle2D_Double0.outcode(line2D_Double0.y2, line2D_Double0.x1);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(15, int0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = true;
      BarRenderer3D barRenderer3D0 = new BarRenderer3D();
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, barRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(barRenderer3D0);
      
      Color color0 = (Color)barRenderer3D0.getItemPaint(int0, int0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, barRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      piePlot3D0.setSectionPaint((Comparable) boolean0, (Paint) color0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(12.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(8.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, barRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test055()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = true;
      piePlot3D0.setSectionOutlinesVisible(boolean0);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test056()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(ringPlot0);
      
      Font font0 = ringPlot0.getLabelFont();
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.isItalic());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isBold());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10, font0.getSize());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertNotNull(font0);
  }

  @Test
  public void test057()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertNotNull(piePlot3D0);
      
      Arc2D.Double arc2D_Double0 = new Arc2D.Double();
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertNotNull(arc2D_Double0);
      
      Rectangle rectangle0 = arc2D_Double0.getBounds();
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertNotNull(rectangle0);
      
      piePlot3D0.setShadowXOffset((double) rectangle0.x);
      assertEquals(0.0, arc2D_Double0.width, 0.01D);
      assertEquals(0.0, arc2D_Double0.height, 0.01D);
      assertEquals(0.0, arc2D_Double0.start, 0.01D);
      assertEquals(0.0, arc2D_Double0.x, 0.01D);
      assertEquals(0.0, arc2D_Double0.y, 0.01D);
      assertEquals(0.0, arc2D_Double0.extent, 0.01D);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.width);
      assertEquals(0, arc2D_Double0.getArcType());
      assertEquals(0.0, arc2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, arc2D_Double0.getCenterX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
  }

  @Test
  public void test058()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNotNull(piePlot0);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLabelGenerator();
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNotNull(standardPieSectionLabelGenerator0);
  }

  @Test
  public void test059()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getLabelShadowPaint();
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(151, color0.getRed());
      assertEquals(-2137548905, color0.getRGB());
      assertEquals(151, color0.getGreen());
      assertEquals(3, color0.getTransparency());
      assertEquals("java.awt.Color[r=151,g=151,b=151]", color0.toString());
      assertEquals(151, color0.getBlue());
      assertEquals(128, color0.getAlpha());
      assertNotNull(color0);
  }

  @Test
  public void test060()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot3D0);
      
      PieToolTipGenerator pieToolTipGenerator0 = piePlot3D0.getToolTipGenerator();
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(pieToolTipGenerator0);
  }

  @Test
  public void test061()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNotNull(piePlot3D0);
      
      piePlot3D0.setLabelGap(rectangle2D_Double0.width);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.0, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
  }

  @Test
  public void test062()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getShadowXOffset();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, double0, 0.01D);
  }

  @Test
  public void test063()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getBaseSectionOutlinePaint();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getRed());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
  }

  @Test
  public void test064()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = piePlot3D0.getSectionOutlinesVisible();
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertTrue(boolean0);
  }

  @Test
  public void test065()  throws Throwable  {
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 0;
      CategoryDataset categoryDataset0 = combinedDomainCategoryPlot0.getDataset(int0);
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, int0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(categoryToPieDataset0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D((PieDataset) categoryToPieDataset0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getLabelBackgroundPaint();
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(-64, color0.getRGB());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=192]", color0.toString());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNotNull(color0);
  }

  @Test
  public void test066()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(ringPlot0);
      
      Color color0 = (Color)ringPlot0.getShadowPaint();
      assertEquals(255, color0.getAlpha());
      assertEquals(128, color0.getBlue());
      assertEquals(-8355712, color0.getRGB());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getGreen());
      assertEquals(128, color0.getRed());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(color0);
  }

  @Test
  public void test067()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getLabelLinkStroke();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      ringPlot0.setLabelOutlineStroke((Stroke) basicStroke0);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test
  public void test068()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getShadowYOffset();
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(4.0, double0, 0.01D);
  }

  @Test
  public void test069()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNotNull(ringPlot0);
      
      PieSectionLabelGenerator pieSectionLabelGenerator0 = ringPlot0.getLegendLabelToolTipGenerator();
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertNull(pieSectionLabelGenerator0);
  }

  @Test
  public void test070()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertNotNull(piePlot0);
      
      double double0 = piePlot0.getInteriorGap();
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.08, double0, 0.01D);
  }

  @Test
  public void test071()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNotNull(ringPlot0);
      
      Paint paint0 = null;
      ringPlot0.setShadowPaint(paint0);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
  }

  @Test
  public void test072()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNotNull(piePlot3D0);
      
      int int0 = (-3650);
      JComboBox<Byte> jComboBox0 = new JComboBox<Byte>();
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isShowing());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(false, jComboBox0.isLightweight());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertNotNull(jComboBox0);
      
      Rectangle rectangle0 = jComboBox0.bounds();
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isShowing());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(false, jComboBox0.isLightweight());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertNotNull(rectangle0);
      
      Graphics2D graphics2D0 = null;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNotNull(ringPlot0);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      PiePlotState piePlotState0 = piePlot3D0.initialise(graphics2D0, (Rectangle2D) rectangle0, (PiePlot) ringPlot0, (Integer) int0, plotRenderingInfo0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, piePlotState0.getPieHRadius(), 0.01D);
      assertEquals(2, piePlotState0.getPassesRequired());
      assertEquals(0.0, piePlotState0.getPieCenterX(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieCenterY(), 0.01D);
      assertEquals(90.0, piePlotState0.getLatestAngle(), 0.01D);
      assertEquals(0.0, piePlotState0.getPieWRadius(), 0.01D);
      assertEquals(0.0, piePlotState0.getTotal(), 0.01D);
      assertEquals(2, jComboBox0.countComponents());
      assertEquals(false, jComboBox0.isShowing());
      assertEquals(false, jComboBox0.isPreferredSizeSet());
      assertEquals(false, jComboBox0.isMinimumSizeSet());
      assertEquals(2, jComboBox0.getComponentCount());
      assertEquals(true, jComboBox0.isBackgroundSet());
      assertEquals(false, jComboBox0.isMaximumSizeSet());
      assertEquals(false, jComboBox0.isLightweight());
      assertEquals(false, jComboBox0.isFocusTraversalPolicySet());
      assertEquals(false, jComboBox0.isValid());
      assertEquals(true, jComboBox0.getFocusTraversalKeysEnabled());
      assertEquals(false, jComboBox0.getIgnoreRepaint());
      assertEquals(true, jComboBox0.isForegroundSet());
      assertEquals(false, jComboBox0.isCursorSet());
      assertEquals(false, jComboBox0.isDisplayable());
      assertEquals(false, jComboBox0.isFocusTraversalPolicyProvider());
      assertEquals(true, jComboBox0.isEnabled());
      assertEquals(true, jComboBox0.isVisible());
      assertEquals(true, jComboBox0.isFontSet());
      assertEquals(false, jComboBox0.isFocusCycleRoot());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertNotNull(piePlotState0);
  }

  @Test
  public void test073()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = false;
      piePlot3D0.setIgnoreZeroValues(boolean0);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
  }

  @Test
  public void test074()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNotNull(ringPlot0);
      
      double double0 = ringPlot0.getLabelGap();
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.025, double0, 0.01D);
  }

  @Test
  public void test075()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotNull(piePlot3D0);
      
      double double0 = 1700.1711277662307;
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertNotNull(windItemRenderer0);
      
      int int0 = 59;
      Stroke stroke0 = windItemRenderer0.getSeriesStroke(int0);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertNull(stroke0);
      
      piePlot3D0.setSectionOutlineStroke((Comparable) double0, stroke0);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
  }

  @Test
  public void test076()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertNotNull(ringPlot0);
      
      int int0 = 0;
      ringPlot0.setPieIndex(int0);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
  }

  @Test
  public void test077()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertNotNull(ringPlot0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      Color color0 = (Color)ganttRenderer0.getBaseItemLabelPaint();
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertNotNull(color0);
      
      ringPlot0.setLabelBackgroundPaint((Paint) color0);
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test078()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertNotNull(ringPlot0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNotNull(piePlot3D0);
      
      PieURLGenerator pieURLGenerator0 = piePlot3D0.getURLGenerator();
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertNull(pieURLGenerator0);
      
      ringPlot0.setURLGenerator(pieURLGenerator0);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
  }

  @Test
  public void test079()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertNotNull(ringPlot0);
      
      String string0 = "Laurence Vanhelsuwe";
      StandardPieToolTipGenerator standardPieToolTipGenerator0 = new StandardPieToolTipGenerator(string0);
      assertEquals("Laurence Vanhelsuwe", standardPieToolTipGenerator0.getLabelFormat());
      assertNotNull(standardPieToolTipGenerator0);
      
      ringPlot0.setToolTipGenerator((PieToolTipGenerator) standardPieToolTipGenerator0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals("Laurence Vanhelsuwe", standardPieToolTipGenerator0.getLabelFormat());
  }

  @Test
  public void test080()  throws Throwable  {
      PieDataset pieDataset0 = null;
      RingPlot ringPlot0 = new RingPlot(pieDataset0);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      NumberTickUnit numberTickUnit0 = NumberAxis.DEFAULT_TICK_UNIT;
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertNotNull(numberTickUnit0);
      
      double double0 = 360.0;
      String string0 = "";
      TextBox textBox0 = new TextBox(string0);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01D);
      assertNotNull(textBox0);
      
      PieLabelRecord pieLabelRecord0 = new PieLabelRecord((Comparable) numberTickUnit0, double0, double0, textBox0, double0, double0, double0);
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getLinkPercent(), 0.01D);
      assertEquals(180.0, pieLabelRecord0.getLowerY(), 0.01D);
      assertEquals(540.0, pieLabelRecord0.getUpperY(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getAllocatedY(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getAngle(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getBaseY(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getGap(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getLabelHeight(), 0.01D);
      assertNotNull(pieLabelRecord0);
      
      Color color0 = (Color)ringPlot0.lookupSectionPaint(pieLabelRecord0);
      assertEquals(1.0, numberTickUnit0.getSize(), 0.01D);
      assertEquals(0, numberTickUnit0.getMinorTickCount());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, textBox0.getShadowYOffset(), 0.01D);
      assertEquals(2.0, textBox0.getShadowXOffset(), 0.01D);
      assertEquals(128, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getRed());
      assertEquals(128, color0.getGreen());
      assertEquals(360.0, pieLabelRecord0.getLinkPercent(), 0.01D);
      assertEquals(180.0, pieLabelRecord0.getLowerY(), 0.01D);
      assertEquals(540.0, pieLabelRecord0.getUpperY(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getAllocatedY(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getAngle(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getBaseY(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getGap(), 0.01D);
      assertEquals(360.0, pieLabelRecord0.getLabelHeight(), 0.01D);
      assertNotNull(color0);
  }

  @Test
  public void test081()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertNotNull(ringPlot0);
      
      int int0 = 1833;
      ringPlot0.setMinimumArcAngleToDraw((double) int0);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1833.0, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
  }

  @Test
  public void test082()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getLabelOutlinePaint();
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertNotNull(color0);
  }

  @Test
  public void test083()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(piePlot3D0);
      
      int int0 = piePlot3D0.getPieIndex();
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, int0);
  }

  @Test
  public void test084()  throws Throwable  {
      float float0 = 0.0F;
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNotNull(ringPlot0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(float0, float0, float0, float0);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      Paint paint0 = ringPlot0.getSectionPaint((Comparable) rectangle2D_Float0.width);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertNull(paint0);
  }

  @Test
  public void test085()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(ringPlot0);
      
      PieDataset pieDataset0 = ringPlot0.getDataset();
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(pieDataset0);
      
      PiePlot3D piePlot3D0 = new PiePlot3D(pieDataset0);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getBaseSectionPaint();
      assertEquals("java.awt.Color[r=128,g=128,b=128]", color0.toString());
      assertEquals(128, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(-8355712, color0.getRGB());
      assertEquals(128, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(128, color0.getRed());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNotNull(color0);
  }

  @Test
  public void test086()  throws Throwable  {
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      PiePlot piePlot0 = new PiePlot((PieDataset) defaultPieDataset0);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(piePlot0);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertNotNull(point2D_Float0);
      
      Stroke stroke0 = piePlot0.getSectionOutlineStroke((Comparable) point2D_Float0.x);
      assertEquals(0.0F, point2D_Float0.x, 0.01F);
      assertEquals(0.0F, point2D_Float0.y, 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNull(stroke0);
  }

  @Test
  public void test087()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertNotNull(ringPlot0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertNotNull(ganttRenderer0);
      
      Color color0 = (Color)ganttRenderer0.getBaseItemLabelPaint();
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertNotNull(color0);
      
      ringPlot0.setLabelShadowPaint((Paint) color0);
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, ringPlot0.isOutlineVisible());
  }

  @Test
  public void test088()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = piePlot3D0.getSimpleLabels();
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test089()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertNotNull(piePlot3D0);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot3D0.getLegendLabelGenerator();
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
      assertNotNull(standardPieSectionLabelGenerator0);
      
      piePlot3D0.setLegendLabelToolTipGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(false, piePlot3D0.isCircular());
  }

  @Test
  public void test090()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int0 = 0;
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset(categoryDataset0, tableOrder0, int0);
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(categoryToPieDataset0);
      
      PiePlot piePlot0 = new PiePlot((PieDataset) categoryToPieDataset0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(piePlot0);
      
      LegendItemCollection legendItemCollection0 = piePlot0.getLegendItems();
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test091()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertNotNull(ringPlot0);
      
      boolean boolean0 = ringPlot0.getLabelLinksVisible();
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, ringPlot0.getPieIndex());
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertTrue(boolean0);
  }

  @Test
  public void test092()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(piePlot0);
      
      RectangleInsets rectangleInsets0 = piePlot0.getLabelPadding();
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(2.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(2.0, rectangleInsets0.getBottom(), 0.01D);
      assertNotNull(rectangleInsets0);
  }

  @Test
  public void test093()  throws Throwable  {
      PieDataset pieDataset0 = null;
      PiePlot piePlot0 = new PiePlot(pieDataset0);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNotNull(piePlot0);
      
      Line2D.Float line2D_Float0 = new Line2D.Float();
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertNotNull(line2D_Float0);
      
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(line2D_Float0.y1, line2D_Float0.y2, line2D_Float0.x1, line2D_Float0.x1);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Float0);
      
      BasicStroke basicStroke0 = (BasicStroke)piePlot0.lookupSectionOutlineStroke(rectangle2D_Float0.y);
      assertEquals(0.0F, rectangle2D_Float0.width, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.height, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.y, 0.01F);
      assertEquals(0.0F, rectangle2D_Float0.x, 0.01F);
      assertEquals(0.0F, line2D_Float0.y2, 0.01F);
      assertEquals(0.0F, line2D_Float0.y1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x1, 0.01F);
      assertEquals(0.0F, line2D_Float0.x2, 0.01F);
      assertEquals(0.0, rectangle2D_Float0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Float0.getMinY(), 0.01D);
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test094()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(piePlot0);
      
      double double0 = piePlot0.getMinimumArcAngleToDraw();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0E-5, double0, 0.01D);
  }

  @Test
  public void test095()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = true;
      piePlot3D0.setIgnoreNullValues(boolean0);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(true, piePlot3D0.getIgnoreNullValues());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
  }

  @Test
  public void test096()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertNotNull(piePlot0);
      
      StandardPieSectionLabelGenerator standardPieSectionLabelGenerator0 = (StandardPieSectionLabelGenerator)piePlot0.getLegendLabelGenerator();
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
      assertNotNull(standardPieSectionLabelGenerator0);
      
      piePlot0.setLabelGenerator((PieSectionLabelGenerator) standardPieSectionLabelGenerator0);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot0.isSubplot());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals("{0}", standardPieSectionLabelGenerator0.getLabelFormat());
  }

  @Test
  public void test097()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = piePlot3D0.getIgnoreNullValues();
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertNull(piePlot3D0.getNoDataMessage());
      assertFalse(boolean0);
  }

  @Test
  public void test098()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(ringPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)ringPlot0.getBaseSectionOutlineStroke();
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test099()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNotNull(piePlot3D0);
      
      Color color0 = (Color)piePlot3D0.getLabelPaint();
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertNotNull(color0);
  }

  //@Test
  public void test100()  throws Throwable  {
      PiePlot piePlot0 = new PiePlot();
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(true, piePlot0.isCircular());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
      assertNotNull(piePlot0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      piePlot0.setCircular(boolean0);
      assertEquals(90.0, piePlot0.getStartAngle(), 0.01D);
      assertEquals(0.08, piePlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, piePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0, piePlot0.getPieIndex());
      assertEquals(4.0, piePlot0.getShadowXOffset(), 0.01D);
      assertEquals(15, piePlot0.getBackgroundImageAlignment());
      assertEquals(0.025, piePlot0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, piePlot0.isOutlineVisible());
      assertNull(piePlot0.getNoDataMessage());
      assertEquals(false, piePlot0.isCircular());
      assertEquals(0.025, piePlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(1.0F, piePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.14, piePlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, piePlot0.getLabelLinksVisible());
      assertEquals(1.0E-5, piePlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(true, piePlot0.getSectionOutlinesVisible());
      assertEquals(false, piePlot0.getIgnoreNullValues());
      assertEquals(false, piePlot0.getIgnoreZeroValues());
      assertEquals(false, piePlot0.getSimpleLabels());
      assertEquals(4.0, piePlot0.getShadowYOffset(), 0.01D);
      assertEquals(false, piePlot0.isSubplot());
  }

  @Test
  public void test101()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertNotNull(piePlot3D0);
      
      Comparable<DefaultTableModel> comparable0 = null;
      // Undeclared exception!
      try {
        Paint paint0 = piePlot3D0.getSectionOutlinePaint(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test
  public void test102()  throws Throwable  {
      PiePlot3D piePlot3D0 = new PiePlot3D();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertNotNull(piePlot3D0);
      
      boolean boolean0 = piePlot3D0.isCircular();
      assertEquals(0.14, piePlot3D0.getMaximumLabelWidth(), 0.01D);
      assertEquals(4.0, piePlot3D0.getShadowXOffset(), 0.01D);
      assertEquals(true, piePlot3D0.isOutlineVisible());
      assertEquals(4.0, piePlot3D0.getShadowYOffset(), 0.01D);
      assertEquals(true, piePlot3D0.getLabelLinksVisible());
      assertNull(piePlot3D0.getNoDataMessage());
      assertEquals(0, piePlot3D0.getPieIndex());
      assertEquals(0.08, piePlot3D0.getInteriorGap(), 0.01D);
      assertEquals(0.025, piePlot3D0.getLabelLinkMargin(), 0.01D);
      assertEquals(false, piePlot3D0.getSimpleLabels());
      assertEquals(false, piePlot3D0.getDarkerSides());
      assertEquals(0.12, piePlot3D0.getDepthFactor(), 0.01D);
      assertEquals(false, piePlot3D0.isCircular());
      assertEquals(true, piePlot3D0.getSectionOutlinesVisible());
      assertEquals(15, piePlot3D0.getBackgroundImageAlignment());
      assertEquals(1.0F, piePlot3D0.getForegroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.isSubplot());
      assertEquals(90.0, piePlot3D0.getStartAngle(), 0.01D);
      assertEquals(false, piePlot3D0.getIgnoreZeroValues());
      assertEquals(1.0F, piePlot3D0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, piePlot3D0.getIgnoreNullValues());
      assertEquals(0.025, piePlot3D0.getLabelGap(), 0.01D);
      assertEquals(0.5F, piePlot3D0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-5, piePlot3D0.getMinimumArcAngleToDraw(), 0.01D);
      assertFalse(boolean0);
  }

  @Test
  public void test103()  throws Throwable  {
      RingPlot ringPlot0 = new RingPlot();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertNotNull(ringPlot0);
      
      String string0 = ringPlot0.getPlotType();
      assertEquals(0.2, ringPlot0.getSectionDepth(), 0.01D);
      assertEquals(false, ringPlot0.getIgnoreZeroValues());
      assertEquals(0.14, ringPlot0.getMaximumLabelWidth(), 0.01D);
      assertEquals(true, ringPlot0.getLabelLinksVisible());
      assertEquals(15, ringPlot0.getBackgroundImageAlignment());
      assertEquals(0.025, ringPlot0.getLabelGap(), 0.01D);
      assertEquals(true, ringPlot0.getSectionOutlinesVisible());
      assertEquals(0, ringPlot0.getPieIndex());
      assertEquals(0.08, ringPlot0.getInteriorGap(), 0.01D);
      assertNull(ringPlot0.getNoDataMessage());
      assertEquals(0.2, ringPlot0.getOuterSeparatorExtension(), 0.01D);
      assertEquals(true, ringPlot0.isCircular());
      assertEquals(false, ringPlot0.getIgnoreNullValues());
      assertEquals(0.5F, ringPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, ringPlot0.isSubplot());
      assertEquals(0.025, ringPlot0.getLabelLinkMargin(), 0.01D);
      assertEquals(0.2, ringPlot0.getInnerSeparatorExtension(), 0.01D);
      assertEquals(4.0, ringPlot0.getShadowYOffset(), 0.01D);
      assertEquals(1.0F, ringPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, ringPlot0.getSimpleLabels());
      assertEquals(true, ringPlot0.isOutlineVisible());
      assertEquals(1.0E-5, ringPlot0.getMinimumArcAngleToDraw(), 0.01D);
      assertEquals(90.0, ringPlot0.getStartAngle(), 0.01D);
      assertEquals(true, ringPlot0.getSeparatorsVisible());
      assertEquals(1.0F, ringPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(4.0, ringPlot0.getShadowXOffset(), 0.01D);
      assertEquals("Pie Plot", string0);
      assertNotNull(string0);
  }
}
