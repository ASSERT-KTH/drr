/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:51:22 GMT 2014
 */

package org.jfree.data.general;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.AWTEvent;
import java.awt.Component;
import java.awt.Frame;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.event.ContainerEvent;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.lang.reflect.Array;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.colorchooser.ColorSelectionModel;
import javax.swing.colorchooser.DefaultColorSelectionModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.System;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.event.DatasetChangeListener;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.LineFunction2D;
import org.jfree.data.function.NormalDistributionFunction2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.jdbc.JDBCCategoryDataset;
import org.jfree.data.jdbc.JDBCPieDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.BoxAndWhiskerItem;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.IntervalXYDelegate;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.data.xy.YIntervalSeriesCollection;
import org.junit.runner.RunWith;
import sun.awt.SunHints;
import sun.util.calendar.ZoneInfo;

 
public class DatasetUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      int int0 = 2869;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel((TableXYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertNotNull(xYDatasetTableModel0);
      
      taskSeriesCollection0.removeChangeListener((DatasetChangeListener) xYDatasetTableModel0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      int int1 = taskSeriesCollection0.getColumnCount();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertFalse(int0 == int1);
      assertEquals(2869, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      int int2 = (-520);
      assertFalse(int2 == int1);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset1 = new SlidingGanttCategoryDataset((GanttCategoryDataset) slidingGanttCategoryDataset0, int2, int2);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(2869, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-520, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(-520, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotNull(slidingGanttCategoryDataset1);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset2 = (SlidingGanttCategoryDataset)slidingGanttCategoryDataset1.getUnderlyingDataset();
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(2869, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2869, slidingGanttCategoryDataset2.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset2.getMaximumCategoryCount());
      assertEquals(-520, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(-520, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset1);
      assertSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotNull(slidingGanttCategoryDataset2);
      
      int int3 = 0;
      assertTrue(int3 == int1);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) slidingGanttCategoryDataset2, int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(2869, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2869, slidingGanttCategoryDataset2.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset2.getMaximumCategoryCount());
      assertEquals(-520, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(-520, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset1);
      assertSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      assertNotNull(defaultPieDataset0);
      
      double double0 = DatasetUtilities.calculateStackTotal((TableXYDataset) defaultTableXYDataset0, int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      KeyedValues keyedValues0 = null;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(slidingGanttCategoryDataset0.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset2.equals((Object)slidingGanttCategoryDataset1));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset2));
      assertFalse(slidingGanttCategoryDataset1.equals((Object)slidingGanttCategoryDataset0));
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(2869, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(2869, slidingGanttCategoryDataset2.getFirstCategoryIndex());
      assertEquals(2869, slidingGanttCategoryDataset2.getMaximumCategoryCount());
      assertEquals(-520, slidingGanttCategoryDataset1.getFirstCategoryIndex());
      assertEquals(-520, slidingGanttCategoryDataset1.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset0, slidingGanttCategoryDataset1);
      assertNotSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset1);
      assertSame(slidingGanttCategoryDataset2, slidingGanttCategoryDataset0);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset2);
      assertNotSame(slidingGanttCategoryDataset1, slidingGanttCategoryDataset0);
      
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset((Comparable) int3, keyedValues0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'rowData' argument.
         //
      }
  }

  @Test
  public void test01()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) vector0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = 23;
      Quarter quarter0 = new Quarter();
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertNotNull(quarter0);
      
      int int1 = quarter0.compareTo((Object) defaultStatisticalCategoryDataset0);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNull(number0);
      
      MockDate mockDate0 = (MockDate)quarter0.getStart();
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Day day0 = new Day((Date) mockDate0);
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(2014, day0.getYear());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals(1388577599999L, day0.getMiddleMillisecond());
      assertEquals(41640L, day0.getSerialIndex());
      assertEquals(1388620799999L, day0.getLastMillisecond());
      assertEquals(1388534400000L, day0.getFirstMillisecond());
      assertEquals(1, day0.getMonth());
      assertNotNull(day0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) day0);
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(2014, day0.getYear());
      assertEquals(1, day0.getDayOfMonth());
      assertEquals(1388577599999L, day0.getMiddleMillisecond());
      assertEquals(41640L, day0.getSerialIndex());
      assertEquals(1388620799999L, day0.getLastMillisecond());
      assertEquals(1388534400000L, day0.getFirstMillisecond());
      assertEquals(1, day0.getMonth());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      
      Date[] dateArray0 = new Date[2];
      dateArray0[0] = (Date) mockDate0;
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", dateArray0[0].toString());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertNotNull(dateArray0[0]);
      
      dateArray0[1] = (Date) mockDate0;
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals("Wed Jan 01 00:00:00 GMT 2014", dateArray0[1].toString());
      assertNotNull(dateArray0[1]);
      
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      doubleArray0[0] = double0;
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((Comparable) int0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertFalse(int0 == int1);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(defaultHighLowDataset0);
      
      // Undeclared exception!
      try {
        Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
      }
  }

  @Test
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double double0 = (-2.147483648E9);
      doubleArray0[0] = double0;
      double double1 = 0.0;
      doubleArray0[1] = double1;
      double double2 = 1061.0186460269413;
      doubleArray0[2] = double2;
      double double3 = 0.0;
      doubleArray0[3] = double3;
      double double4 = (-665.788);
      doubleArray0[4] = double4;
      double double5 = 3780.726619347522;
      doubleArray0[5] = double5;
      double double6 = (-862.801235);
      doubleArray0[6] = double6;
      double double7 = (-689.06583892832);
      doubleArray0[7] = double7;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {(-2.147483648E9), 0.0, 1061.0186460269413, 0.0, (-665.788), 3780.726619347522, (-862.801235), (-689.06583892832)}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      double double8 = (-1.0);
      double double9 = 3891.11;
      int int0 = 851;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D((Function2D) polynomialFunction2D0, double8, double9, int0, (Comparable) doubleArray0[1]);
      assertFalse(double8 == double3);
      assertFalse(double8 == double7);
      assertFalse(double8 == double0);
      assertFalse(double8 == double6);
      assertFalse(double8 == double2);
      assertFalse(double8 == double4);
      assertFalse(double8 == double1);
      assertFalse(double8 == double5);
      assertFalse(double8 == double9);
      assertFalse(double9 == double2);
      assertFalse(double9 == double1);
      assertFalse(double9 == double8);
      assertFalse(double9 == double0);
      assertFalse(double9 == double7);
      assertFalse(double9 == double3);
      assertFalse(double9 == double6);
      assertFalse(double9 == double4);
      assertFalse(double9 == double5);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertArrayEquals(new double[] {(-2.147483648E9), 0.0, 1061.0186460269413, 0.0, (-665.788), 3780.726619347522, (-862.801235), (-689.06583892832)}, doubleArray0, 0.01);
      assertNotNull(xYSeriesCollection0);
      
      LinkedList<CategoryTableXYDataset> linkedList0 = new LinkedList<CategoryTableXYDataset>();
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertNotNull(timeTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertNotNull(range0);
      
      boolean boolean0 = false;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, (List) linkedList0, range0, boolean0);
      assertFalse(double8 == double3);
      assertFalse(double8 == double7);
      assertFalse(double8 == double0);
      assertFalse(double8 == double6);
      assertFalse(double8 == double2);
      assertFalse(double8 == double4);
      assertFalse(double8 == double1);
      assertFalse(double8 == double5);
      assertFalse(double8 == double9);
      assertFalse(double9 == double2);
      assertFalse(double9 == double1);
      assertFalse(double9 == double8);
      assertFalse(double9 == double0);
      assertFalse(double9 == double7);
      assertFalse(double9 == double3);
      assertFalse(double9 == double6);
      assertFalse(double9 == double4);
      assertFalse(double9 == double5);
      assertEquals(7, polynomialFunction2D0.getOrder());
      assertEquals("[]", linkedList0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertArrayEquals(new double[] {(-2.147483648E9), 0.0, 1061.0186460269413, 0.0, (-665.788), 3780.726619347522, (-862.801235), (-689.06583892832)}, doubleArray0, 0.01);
      assertNull(range1);
  }

  @Test
  public void test04()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[5];
      int int0 = KeyEvent.KEY_LOCATION_STANDARD;
      assertEquals(1, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(1, numberArray1[0].shortValue());
      assertEquals(1.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(1, numberArray1[0].byteValue());
      assertEquals(1, numberArray1[0].intValue());
      assertEquals(1L, numberArray1[0].longValue());
      assertEquals(1.0, numberArray1[0].doubleValue(), 0.01D);
      assertNotNull(numberArray1[0]);
      
      int int1 = SwingConstants.CENTER;
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      numberArray1[1] = (Number) int1;
      assertEquals(0.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(0L, numberArray1[1].longValue());
      assertEquals(0, numberArray1[1].intValue());
      assertEquals(0, numberArray1[1].shortValue());
      assertEquals(0.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(0, numberArray1[1].byteValue());
      assertNotNull(numberArray1[1]);
      
      int int2 = SwingConstants.TRAILING;
      assertEquals(11, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      numberArray1[2] = (Number) int2;
      assertEquals(11L, numberArray1[2].longValue());
      assertEquals(11, numberArray1[2].intValue());
      assertEquals(11, numberArray1[2].byteValue());
      assertEquals(11.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(11, numberArray1[2].shortValue());
      assertEquals(11.0, numberArray1[2].doubleValue(), 0.01D);
      assertNotNull(numberArray1[2]);
      
      int int3 = SwingConstants.SOUTH;
      assertEquals(5, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      numberArray1[3] = (Number) int3;
      assertEquals(5.0, numberArray1[3].doubleValue(), 0.01D);
      assertEquals(5, numberArray1[3].shortValue());
      assertEquals(5.0F, numberArray1[3].floatValue(), 0.01F);
      assertEquals(5, numberArray1[3].intValue());
      assertEquals(5L, numberArray1[3].longValue());
      assertEquals(5, numberArray1[3].byteValue());
      assertNotNull(numberArray1[3]);
      
      int int4 = ImageObserver.FRAMEBITS;
      assertEquals(16, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      
      numberArray1[4] = (Number) int4;
      assertEquals(16.0F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(16, numberArray1[4].byteValue());
      assertEquals(16, numberArray1[4].shortValue());
      assertEquals(16, numberArray1[4].intValue());
      assertEquals(16L, numberArray1[4].longValue());
      assertEquals(16.0, numberArray1[4].doubleValue(), 0.01D);
      assertNotNull(numberArray1[4]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) int0;
      assertEquals(1, numberArray2[0].intValue());
      assertEquals(1L, numberArray2[0].longValue());
      assertEquals(1, numberArray2[0].shortValue());
      assertEquals(1, numberArray2[0].byteValue());
      assertEquals(1.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(1.0F, numberArray2[0].floatValue(), 0.01F);
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) int2;
      assertEquals(11.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(11, numberArray2[1].intValue());
      assertEquals(11L, numberArray2[1].longValue());
      assertEquals(11, numberArray2[1].shortValue());
      assertEquals(11.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(11, numberArray2[1].byteValue());
      assertNotNull(numberArray2[1]);
      
      int int5 = SwingConstants.TOP;
      assertEquals(1, int5);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      
      numberArray2[2] = (Number) int5;
      assertEquals(1, numberArray2[2].shortValue());
      assertEquals(1, numberArray2[2].byteValue());
      assertEquals(1.0, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(1L, numberArray2[2].longValue());
      assertEquals(1.0F, numberArray2[2].floatValue(), 0.01F);
      assertEquals(1, numberArray2[2].intValue());
      assertNotNull(numberArray2[2]);
      
      numberArray2[3] = (Number) int3;
      assertEquals(5.0F, numberArray2[3].floatValue(), 0.01F);
      assertEquals(5L, numberArray2[3].longValue());
      assertEquals(5, numberArray2[3].shortValue());
      assertEquals(5, numberArray2[3].intValue());
      assertEquals(5.0, numberArray2[3].doubleValue(), 0.01D);
      assertEquals(5, numberArray2[3].byteValue());
      assertNotNull(numberArray2[3]);
      
      numberArray2[4] = (Number) int2;
      assertEquals(11L, numberArray2[4].longValue());
      assertEquals(11, numberArray2[4].byteValue());
      assertEquals(11.0, numberArray2[4].doubleValue(), 0.01D);
      assertEquals(11, numberArray2[4].intValue());
      assertEquals(11, numberArray2[4].shortValue());
      assertEquals(11.0F, numberArray2[4].floatValue(), 0.01F);
      assertNotNull(numberArray2[4]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[8];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      
      numberArray3[0] = (Number) int5;
      assertEquals(1, numberArray3[0].byteValue());
      assertEquals(1, numberArray3[0].intValue());
      assertEquals(1.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(1.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(1L, numberArray3[0].longValue());
      assertEquals(1, numberArray3[0].shortValue());
      assertNotNull(numberArray3[0]);
      
      numberArray3[1] = (Number) int0;
      assertEquals(1.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(1.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(1, numberArray3[1].intValue());
      assertEquals(1, numberArray3[1].shortValue());
      assertEquals(1, numberArray3[1].byteValue());
      assertEquals(1L, numberArray3[1].longValue());
      assertNotNull(numberArray3[1]);
      
      numberArray3[2] = (Number) int3;
      assertEquals(5, numberArray3[2].intValue());
      assertEquals(5, numberArray3[2].shortValue());
      assertEquals(5, numberArray3[2].byteValue());
      assertEquals(5.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(5L, numberArray3[2].longValue());
      assertEquals(5.0F, numberArray3[2].floatValue(), 0.01F);
      assertNotNull(numberArray3[2]);
      
      numberArray3[3] = (Number) int1;
      assertEquals(0, numberArray3[3].byteValue());
      assertEquals(0, numberArray3[3].shortValue());
      assertEquals(0.0, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(0, numberArray3[3].intValue());
      assertEquals(0.0F, numberArray3[3].floatValue(), 0.01F);
      assertEquals(0L, numberArray3[3].longValue());
      assertNotNull(numberArray3[3]);
      
      numberArray3[4] = (Number) int0;
      assertEquals(1.0, numberArray3[4].doubleValue(), 0.01D);
      assertEquals(1, numberArray3[4].byteValue());
      assertEquals(1L, numberArray3[4].longValue());
      assertEquals(1, numberArray3[4].intValue());
      assertEquals(1, numberArray3[4].shortValue());
      assertEquals(1.0F, numberArray3[4].floatValue(), 0.01F);
      assertNotNull(numberArray3[4]);
      
      numberArray3[5] = (Number) int0;
      assertEquals(1.0, numberArray3[5].doubleValue(), 0.01D);
      assertEquals(1, numberArray3[5].byteValue());
      assertEquals(1.0F, numberArray3[5].floatValue(), 0.01F);
      assertEquals(1, numberArray3[5].intValue());
      assertEquals(1, numberArray3[5].shortValue());
      assertEquals(1L, numberArray3[5].longValue());
      assertNotNull(numberArray3[5]);
      
      numberArray3[6] = (Number) int4;
      assertEquals(16, numberArray3[6].shortValue());
      assertEquals(16, numberArray3[6].intValue());
      assertEquals(16L, numberArray3[6].longValue());
      assertEquals(16.0F, numberArray3[6].floatValue(), 0.01F);
      assertEquals(16, numberArray3[6].byteValue());
      assertEquals(16.0, numberArray3[6].doubleValue(), 0.01D);
      assertNotNull(numberArray3[6]);
      
      numberArray3[7] = (Number) int3;
      assertEquals(5L, numberArray3[7].longValue());
      assertEquals(5.0, numberArray3[7].doubleValue(), 0.01D);
      assertEquals(5.0F, numberArray3[7].floatValue(), 0.01F);
      assertEquals(5, numberArray3[7].byteValue());
      assertEquals(5, numberArray3[7].intValue());
      assertEquals(5, numberArray3[7].shortValue());
      assertNotNull(numberArray3[7]);
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, boolean0);
      assertEquals(false, list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertNull(range0);
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "org.jfree.data.time.Minute";
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) zoneInfo0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(timeTableXYDataset0);
      
      int int0 = 2371;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) int0;
      doubleArray0[1] = (double) int0;
      doubleArray0[2] = (double) int0;
      doubleArray0[3] = (double) int0;
      doubleArray0[4] = (double) int0;
      doubleArray0[5] = (double) int0;
      doubleArray0[6] = (double) int0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {2371.0, 2371.0, 2371.0, 2371.0, 2371.0, 2371.0, 2371.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      // Undeclared exception!
      try {
        XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) polynomialFunction2D0, doubleArray0[5], doubleArray0[2], int0, (Comparable) doubleArray0[6]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
      }
  }

  @Test
  public void test06()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[10];
      double double0 = 3205.812664;
      doubleArray0[0] = double0;
      double double1 = 3862.86926388;
      doubleArray0[1] = double1;
      double double2 = (-70.78733796);
      doubleArray0[2] = double2;
      double double3 = (-945.66111403239);
      doubleArray0[3] = double3;
      double double4 = 650.76536627383;
      doubleArray0[4] = double4;
      double double5 = 1.7976931348623157E308;
      doubleArray0[5] = double5;
      double double6 = 0.0;
      doubleArray0[6] = double6;
      double double7 = 5433.9581;
      doubleArray0[7] = double7;
      double double8 = 1.0;
      doubleArray0[8] = double8;
      double double9 = 621.88;
      doubleArray0[9] = double9;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(9, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {3205.812664, 3862.86926388, (-70.78733796), (-945.66111403239), 650.76536627383, 1.7976931348623157E308, 0.0, 5433.9581, 1.0, 621.88}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      int int0 = 3331;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D((Function2D) polynomialFunction2D0, double3, doubleArray0[6], int0, (Comparable) int0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double9);
      assertFalse(double3 == double5);
      assertFalse(double3 == double8);
      assertFalse(double3 == double6);
      assertFalse(double3 == double7);
      assertEquals(9, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {3205.812664, 3862.86926388, (-70.78733796), (-945.66111403239), 650.76536627383, 1.7976931348623157E308, 0.0, 5433.9581, 1.0, 621.88}, doubleArray0, 0.01);
      assertNotNull(xYSeriesCollection0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, boolean0);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double4);
      assertFalse(double3 == double9);
      assertFalse(double3 == double5);
      assertFalse(double3 == double8);
      assertFalse(double3 == double6);
      assertFalse(double3 == double7);
      assertEquals(946.66111403239, range0.getLength(), 0.01D);
      assertEquals((-946.16111403239), range0.getLowerBound(), 0.01D);
      assertEquals((-472.830557016195), range0.getCentralValue(), 0.01D);
      assertEquals(0.5, range0.getUpperBound(), 0.01D);
      assertEquals(9, polynomialFunction2D0.getOrder());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertArrayEquals(new double[] {3205.812664, 3862.86926388, (-70.78733796), (-945.66111403239), 650.76536627383, 1.7976931348623157E308, 0.0, 5433.9581, 1.0, 621.88}, doubleArray0, 0.01);
      assertNotNull(range0);
  }

  @Test
  public void test08()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMinimumRangeValue(xYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      int int0 = 2135;
      int int1 = 0;
      int int2 = 408;
      String string0 = "Invalid day-of-the-week code.";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals("java.util.SimpleTimeZone[id=Invalid day-of-the-week code.,offset=2135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Invalid day-of-the-week code.", simpleTimeZone0.getID());
      assertEquals(2135, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) simpleTimeZone0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("java.util.SimpleTimeZone[id=Invalid day-of-the-week code.,offset=2135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Invalid day-of-the-week code.", simpleTimeZone0.getID());
      assertEquals(2135, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(timeSeriesCollection0);
      
      double double0 = (-1465.397);
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = (-645.6);
      double double3 = 156.1;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, (double) int1, (double) int1, double1, double2, (double) int1, double3, (double) int2, (List) list0);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(boxAndWhiskerItem0);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertTrue(list0.equals((Object)list1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertTrue(list1.equals((Object)list0));
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertEquals(true, list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertNotNull(range0);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) list1, range0, boolean0);
      assertTrue(list0.equals((Object)list1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(list1.equals((Object)list0));
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double1 == double2);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0, list1.size());
      assertEquals(true, list1.isEmpty());
      assertEquals("java.util.SimpleTimeZone[id=Invalid day-of-the-week code.,offset=2135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Invalid day-of-the-week code.", simpleTimeZone0.getID());
      assertEquals(2135, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNull(range1);
      
      Minute minute0 = null;
      try {
        minute0 = new Minute(int1, int0, int1, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = 2135;
      int int1 = 0;
      int int2 = 408;
      String string0 = "Invalid day-of-the-week code.";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals("java.util.SimpleTimeZone[id=Invalid day-of-the-week code.,offset=2135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Invalid day-of-the-week code.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2135, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) simpleTimeZone0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals("java.util.SimpleTimeZone[id=Invalid day-of-the-week code.,offset=2135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Invalid day-of-the-week code.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2135, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertNotNull(timeSeriesCollection0);
      
      double double0 = (-1465.397);
      double double1 = Double.NEGATIVE_INFINITY;
      double double2 = (-645.6);
      double double3 = 156.1;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      List list0 = defaultBoxAndWhiskerCategoryDataset0.getRowKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(list0);
      
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(double0, (double) int1, (double) int1, double1, double2, (double) int1, double3, (double) int2, (List) list0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(boxAndWhiskerItem0);
      
      List list1 = boxAndWhiskerItem0.getOutliers();
      assertTrue(list0.equals((Object)list1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(list1.equals((Object)list0));
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(true, list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(range0);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection0, (List) list1, range0, boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double0 == double3);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double3 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertTrue(list0.equals((Object)list1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(list1.equals((Object)list0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("java.util.SimpleTimeZone[id=Invalid day-of-the-week code.,offset=2135,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Invalid day-of-the-week code.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2135, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNull(range1);
      
      Minute minute0 = null;
      try {
        minute0 = new Minute(int1, int0, int1, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'year' argument must be in range 1900 to 9999.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(range0);
      
      int int0 = 1800;
      Range range1 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertFalse(range1.equals((Object)range0));
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range1.getLength(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotSame(range1, range0);
      assertNotNull(range1);
      
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean1 == boolean0);
      assertFalse(range0.equals((Object)range1));
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range1.getLength(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotSame(range1, range0);
      assertNotSame(range0, range1);
      
      double double0 = range0.getCentralValue();
      assertEquals(Double.NaN, double0, 0.01D);
      assertTrue(boolean0 == boolean1);
      assertFalse(range0.equals((Object)range1));
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotSame(range0, range1);
      
      int int1 = 0;
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      Object[][] objectArray0 = new Object[5][3];
      Object[] objectArray1 = new Object[6];
      objectArray1[0] = (Object) double0;
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(objectArray1[0]);
      
      objectArray1[1] = (Object) range0;
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(objectArray1[1]);
      
      objectArray1[5] = (Object) range1;
      assertEquals(Double.NaN, range1.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range1.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range1.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range1.getLength(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(objectArray1[5]);
      
      objectArray0[0] = objectArray1;
      assertNotNull(objectArray0[0]);
      
      Object[] objectArray2 = new Object[4];
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertNotSame(objectArray2, objectArray1);
      
      objectArray2[0] = (Object) boolean0;
      assertNotNull(objectArray2[0]);
      
      objectArray2[1] = (Object) double0;
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(objectArray2[1]);
      
      objectArray2[3] = (Object) double0;
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(objectArray2[3]);
      
      objectArray0[1] = objectArray2;
      assertNotNull(objectArray0[1]);
      
      Object[] objectArray3 = new Object[10];
      assertFalse(objectArray3.equals((Object)objectArray1));
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertNotSame(objectArray3, objectArray1);
      assertNotSame(objectArray3, objectArray2);
      
      objectArray3[0] = (Object) vectorSeriesCollection0;
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(objectArray3[0]);
      
      objectArray3[2] = (Object) int0;
      assertNotNull(objectArray3[2]);
      
      objectArray3[3] = (Object) vectorSeriesCollection0;
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(objectArray3[3]);
      
      objectArray3[5] = (Object) int1;
      assertNotNull(objectArray3[5]);
      
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_ON;
      assertNotNull(sunHints_Value0);
      
      objectArray3[6] = (Object) sunHints_Value0;
      assertNotNull(objectArray3[6]);
      
      objectArray3[7] = (Object) int1;
      assertNotNull(objectArray3[7]);
      
      objectArray0[2] = objectArray3;
      assertNotNull(objectArray0[2]);
      
      Object[] objectArray4 = new Object[2];
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertNotSame(objectArray4, objectArray1);
      assertNotSame(objectArray4, objectArray3);
      assertNotSame(objectArray4, objectArray2);
      
      String string0 = (String)JOptionPane.UNINITIALIZED_VALUE;
      assertEquals("uninitializedValue", string0);
      assertNotNull(string0);
      
      objectArray4[1] = (Object) string0;
      assertNotNull(objectArray4[1]);
      
      objectArray0[3] = objectArray4;
      assertNotNull(objectArray0[3]);
      
      Object[] objectArray5 = new Object[4];
      assertFalse(objectArray5.equals((Object)objectArray1));
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertNotSame(objectArray5, objectArray1);
      assertNotSame(objectArray5, objectArray2);
      assertNotSame(objectArray5, objectArray4);
      assertNotSame(objectArray5, objectArray3);
      
      objectArray5[0] = (Object) range0;
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(objectArray5[0]);
      
      objectArray5[2] = (Object) int0;
      assertNotNull(objectArray5[2]);
      
      objectArray0[4] = objectArray5;
      assertNotNull(objectArray0[4]);
      
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertEquals(false, list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      boolean boolean2 = false;
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try {
        Range range2 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) list0, range0, boolean2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "Duplicate items in 'rowKeys'.";
      Number[][] numberArray0 = new Number[2][9];
      Number[] numberArray1 = new Number[3];
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) string0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, boolean0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(categoryTableXYDataset0);
      
      int int0 = 0;
      int int1 = 0;
      // Undeclared exception!
      try {
        Number number0 = categoryTableXYDataset0.getY(int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "Category 1";
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[8];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = doubleArray1[1];
      double double1 = 0.0;
      doubleArray1[3] = double1;
      double double2 = (-1693.3);
      doubleArray1[4] = double2;
      double double3 = (-2766.66);
      doubleArray1[5] = double3;
      double double4 = 1.5;
      doubleArray1[6] = double4;
      double double5 = 831.3873766;
      doubleArray1[7] = double5;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[1];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = double4;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      doubleArray3[0] = double5;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-966.8863116999999), range0.getCentralValue(), 0.01D);
      assertEquals(832.8873766, range0.getUpperBound(), 0.01D);
      assertEquals(3599.5473766, range0.getLength(), 0.01D);
      assertEquals((-2766.66), range0.getLowerBound(), 0.01D);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertNotNull(range0);
  }

  @Test
  public void test14()  throws Throwable  {
      Day day0 = new Day();
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertNotNull(day0);
      
      Day day1 = (Day)day0.previous();
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertEquals(2014, day1.getYear());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(2, day1.getMonth());
      assertEquals(1392335999999L, day1.getLastMillisecond());
      assertEquals(1392292799999L, day1.getMiddleMillisecond());
      assertEquals(1392249600000L, day1.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertNotNull(day1);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) day1, boolean0);
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertEquals(2014, day1.getYear());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(2, day1.getMonth());
      assertEquals(1392335999999L, day1.getLastMillisecond());
      assertEquals(1392292799999L, day1.getMiddleMillisecond());
      assertEquals(1392249600000L, day1.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01D);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01D);
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertNotNull(xYSeries0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertEquals(2014, day1.getYear());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(2, day1.getMonth());
      assertEquals(1392335999999L, day1.getLastMillisecond());
      assertEquals(1392292799999L, day1.getMiddleMillisecond());
      assertEquals(1392249600000L, day1.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01D);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01D);
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertNotNull(xYSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xYSeriesCollection0, boolean0);
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertEquals(2014, day1.getYear());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(2, day1.getMonth());
      assertEquals(1392335999999L, day1.getLastMillisecond());
      assertEquals(1392292799999L, day1.getMiddleMillisecond());
      assertEquals(1392249600000L, day1.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(Double.NaN, xYSeries0.getMaxY(), 0.01D);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(Double.NaN, xYSeries0.getMinY(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMaxX(), 0.01D);
      assertEquals(Double.NaN, xYSeries0.getMinX(), 0.01D);
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertNull(range0);
      
      String string0 = "3g9KG[5^-rHU%";
      String string1 = null;
      double[][] doubleArray0 = new double[1][6];
      double[] doubleArray1 = new double[6];
      double double0 = Double.NEGATIVE_INFINITY;
      doubleArray1[0] = double0;
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray1[1] = double1;
      double double2 = (-1.0);
      doubleArray1[2] = double2;
      double double3 = (-2686.6418936);
      doubleArray1[3] = double3;
      double double4 = 3183.6738317923;
      doubleArray1[4] = double4;
      double double5 = (-1.7976931348623157E308);
      doubleArray1[5] = double5;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string1, string0, doubleArray0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(string0, string1, string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(xYTaskDataset0);
      
      boolean boolean0 = false;
      boolean boolean1 = xYTaskDataset0.isTransposed();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultTableXYDataset0);
      assertTrue(boolean0 == boolean1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertNull(number1);
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotNull(taskSeriesCollection1);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection1, keyToGroupMap0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((XYDataset) xYTaskDataset0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNull(range1);
      
      DefaultTableXYDataset defaultTableXYDataset1 = new DefaultTableXYDataset();
      assertTrue(defaultTableXYDataset1.equals((Object)defaultTableXYDataset0));
      assertEquals(0, defaultTableXYDataset1.getItemCount());
      assertEquals(false, defaultTableXYDataset1.isAutoWidth());
      assertEquals(false, defaultTableXYDataset1.isAutoPrune());
      assertEquals(0, defaultTableXYDataset1.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset1.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset1.getIntervalWidth(), 0.01D);
      assertNotSame(defaultTableXYDataset1, defaultTableXYDataset0);
      assertNotNull(defaultTableXYDataset1);
      
      int int0 = (-2872);
      String string0 = "P0_";
      String string1 = "Lxf m0B^)aDxMZqhf2";
      assertNotSame(string1, string0);
      
      JDBCPieDataset jDBCPieDataset0 = null;
      try {
        jDBCPieDataset0 = new JDBCPieDataset(string0, string0, string0, string1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class 'P0_.class' should be in target project, but could not be found!
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      boolean boolean0 = false;
      double[] doubleArray0 = new double[7];
      double double0 = 1046.29223;
      doubleArray0[0] = double0;
      double double1 = (-395.0896);
      doubleArray0[1] = double1;
      double double2 = 0.8;
      doubleArray0[2] = double1;
      double double3 = (-1833.8);
      doubleArray0[3] = double3;
      double double4 = 0.0;
      doubleArray0[4] = double4;
      double double5 = 508.0;
      doubleArray0[5] = double5;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      int int0 = 0;
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      Second second0 = millisecond0.getSecond();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertNotNull(second0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertNotNull(minute0);
      
      Second second1 = new Second(int0, minute0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(second1);
      
      MockDate mockDate0 = (MockDate)second1.getStart();
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(mockDate0);
      
      double double6 = 0.0;
      double double7 = (-1615.9939750984922);
      double double8 = 909.0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, double6, doubleArray0[0], double7, double8, doubleArray0[0]);
      assertFalse(double7 == double2);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double0);
      assertFalse(double7 == double8);
      assertFalse(double7 == double5);
      assertFalse(double7 == double1);
      assertFalse(double7 == double4);
      assertFalse(double8 == double2);
      assertFalse(double8 == double6);
      assertFalse(double8 == double5);
      assertFalse(double8 == double1);
      assertFalse(double8 == double4);
      assertFalse(double8 == double3);
      assertFalse(double8 == double0);
      assertFalse(double8 == double7);
      assertTrue(double6 == double4);
      assertFalse(double6 == double8);
      assertFalse(double6 == double2);
      assertFalse(double6 == double1);
      assertFalse(double6 == double5);
      assertFalse(double6 == double0);
      assertFalse(double6 == double3);
      assertFalse(double6 == double7);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertArrayEquals(new double[] {1046.29223, (-395.0896), (-395.0896), (-1833.8), 0.0, 508.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotNull(oHLCDataItemArray0[0]);
      
      double double9 = 0.0;
      double double10 = Double.POSITIVE_INFINITY;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem((Date) mockDate0, double9, double8, (double) int0, double10, double8);
      assertFalse(double8 == double2);
      assertFalse(double8 == double10);
      assertFalse(double8 == double6);
      assertFalse(double8 == double5);
      assertFalse(double8 == double1);
      assertFalse(double8 == double4);
      assertFalse(double8 == double9);
      assertFalse(double8 == double3);
      assertFalse(double8 == double0);
      assertFalse(double8 == double7);
      assertFalse(double9 == double8);
      assertFalse(double9 == double1);
      assertFalse(double9 == double3);
      assertFalse(double9 == double10);
      assertTrue(double9 == double6);
      assertFalse(double9 == double0);
      assertFalse(double9 == double2);
      assertFalse(double9 == double7);
      assertFalse(double9 == double5);
      assertTrue(double9 == double4);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(double10 == double9);
      assertFalse(double10 == double7);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double4);
      assertFalse(double10 == double1);
      assertFalse(double10 == double6);
      assertFalse(double10 == double8);
      assertFalse(double10 == double3);
      assertFalse(double10 == double0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotNull(oHLCDataItemArray0[1]);
      
      double double11 = 6011.199654256;
      double double12 = 1165.01;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem((Date) mockDate0, (double) int0, double11, double4, double8, double12);
      assertFalse(double11 == double1);
      assertFalse(double11 == double12);
      assertFalse(double11 == double5);
      assertFalse(double11 == double3);
      assertFalse(double11 == double2);
      assertFalse(double11 == double10);
      assertFalse(double11 == double4);
      assertFalse(double11 == double7);
      assertFalse(double11 == double9);
      assertFalse(double11 == double0);
      assertFalse(double11 == double6);
      assertFalse(double11 == double8);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(double8 == double11);
      assertFalse(double8 == double2);
      assertFalse(double8 == double12);
      assertFalse(double8 == double10);
      assertFalse(double8 == double6);
      assertFalse(double8 == double5);
      assertFalse(double8 == double1);
      assertFalse(double8 == double4);
      assertFalse(double8 == double9);
      assertFalse(double8 == double3);
      assertFalse(double8 == double0);
      assertFalse(double8 == double7);
      assertFalse(double4 == double10);
      assertFalse(double4 == double8);
      assertFalse(double4 == double0);
      assertFalse(double4 == double11);
      assertFalse(double4 == double7);
      assertFalse(double4 == double1);
      assertFalse(double4 == double3);
      assertFalse(double4 == double5);
      assertTrue(double4 == double6);
      assertTrue(double4 == double9);
      assertFalse(double4 == double12);
      assertFalse(double4 == double2);
      assertFalse(double12 == double7);
      assertFalse(double12 == double2);
      assertFalse(double12 == double9);
      assertFalse(double12 == double0);
      assertFalse(double12 == double5);
      assertFalse(double12 == double10);
      assertFalse(double12 == double8);
      assertFalse(double12 == double6);
      assertFalse(double12 == double4);
      assertFalse(double12 == double1);
      assertFalse(double12 == double3);
      assertFalse(double12 == double11);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotNull(oHLCDataItemArray0[2]);
      
      double double13 = Double.POSITIVE_INFINITY;
      double double14 = (-794.7644901145);
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem((Date) mockDate0, double13, double12, double4, doubleArray0[2], double14);
      assertFalse(double13 == double4);
      assertFalse(double13 == double1);
      assertFalse(double13 == double14);
      assertFalse(double13 == double11);
      assertFalse(double13 == double0);
      assertFalse(double13 == double6);
      assertFalse(double13 == double3);
      assertFalse(double13 == double9);
      assertFalse(double13 == double7);
      assertFalse(double13 == double2);
      assertFalse(double13 == double8);
      assertFalse(double13 == double5);
      assertTrue(double13 == double10);
      assertFalse(double13 == double12);
      assertFalse(double4 == double0);
      assertFalse(double4 == double11);
      assertFalse(double4 == double10);
      assertFalse(double4 == double13);
      assertFalse(double4 == double8);
      assertFalse(double4 == double7);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double5);
      assertFalse(double4 == double14);
      assertTrue(double4 == double6);
      assertTrue(double4 == double9);
      assertFalse(double4 == double12);
      assertFalse(double4 == double2);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(double14 == double7);
      assertFalse(double14 == double9);
      assertFalse(double14 == double8);
      assertFalse(double14 == double11);
      assertFalse(double14 == double3);
      assertFalse(double14 == double13);
      assertFalse(double14 == double12);
      assertFalse(double14 == double0);
      assertFalse(double14 == double5);
      assertFalse(double14 == double2);
      assertFalse(double14 == double1);
      assertFalse(double14 == double4);
      assertFalse(double14 == double6);
      assertFalse(double14 == double10);
      assertFalse(double12 == double7);
      assertFalse(double12 == double2);
      assertFalse(double12 == double9);
      assertFalse(double12 == double10);
      assertFalse(double12 == double8);
      assertFalse(double12 == double4);
      assertFalse(double12 == double13);
      assertFalse(double12 == double0);
      assertFalse(double12 == double5);
      assertFalse(double12 == double6);
      assertFalse(double12 == double14);
      assertFalse(double12 == double1);
      assertFalse(double12 == double3);
      assertFalse(double12 == double11);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertArrayEquals(new double[] {1046.29223, (-395.0896), (-395.0896), (-1833.8), 0.0, 508.0, 0.0}, doubleArray0, 0.01);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertNotNull(oHLCDataItemArray0[3]);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) doubleArray0[3], oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1046.29223, (-395.0896), (-395.0896), (-1833.8), 0.0, 508.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(defaultOHLCDataset0);
      
      Double double15 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
      assertEquals(6011.199654256, (double)double15, 0.01D);
      assertFalse(double15.equals((Object)double9));
      assertFalse(double15.equals((Object)double5));
      assertFalse(double15.equals((Object)double14));
      assertFalse(double15.equals((Object)double2));
      assertFalse(double15.equals((Object)double8));
      assertFalse(double15.equals((Object)double4));
      assertFalse(double15.equals((Object)double0));
      assertFalse(double15.equals((Object)double13));
      assertFalse(double15.equals((Object)double3));
      assertFalse(double15.equals((Object)double12));
      assertFalse(double15.equals((Object)double6));
      assertTrue(double15.equals((Object)double11));
      assertFalse(double15.equals((Object)double7));
      assertFalse(double15.equals((Object)double10));
      assertFalse(double15.equals((Object)double1));
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertArrayEquals(new double[] {1046.29223, (-395.0896), (-395.0896), (-1833.8), 0.0, 508.0, 0.0}, doubleArray0, 0.01);
      
      double double16 = 0.0;
      doubleArray0[6] = double16;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {1046.29223, (-395.0896), (-395.0896), (-1833.8), 0.0, 508.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(polynomialFunction2D0);
      
      double double17 = 1306.0;
      int int1 = 0;
      int int2 = ContainerEvent.COMPONENT_REMOVED;
      assertEquals(301, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) polynomialFunction2D0, double4, double17, int1, (Comparable) int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      String string0 = "You are trying to add data where the time period class ";
      double[][] doubleArray0 = new double[9][3];
      double[] doubleArray1 = new double[4];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = (-1.0);
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      double double3 = 42.436805;
      doubleArray1[3] = double3;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = double3;
      doubleArray2[1] = double2;
      doubleArray2[2] = double0;
      doubleArray2[3] = double1;
      doubleArray2[4] = double3;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      doubleArray3[0] = double0;
      doubleArray3[1] = double3;
      doubleArray3[2] = double3;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      
      doubleArray4[0] = double0;
      doubleArray4[1] = double2;
      doubleArray4[2] = double1;
      doubleArray4[3] = double1;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[9];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      
      doubleArray5[0] = double3;
      double double4 = (-1.0);
      doubleArray5[1] = double4;
      doubleArray5[2] = double2;
      doubleArray5[3] = double1;
      doubleArray5[4] = double2;
      double double5 = 0.0;
      doubleArray5[5] = double5;
      doubleArray5[6] = double0;
      double double6 = 1024.89671;
      doubleArray5[7] = double6;
      doubleArray5[8] = double3;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray6 = new double[1];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray5);
      
      doubleArray6[0] = double6;
      doubleArray0[5] = doubleArray6;
      assertNotNull(doubleArray0[5]);
      
      double[] doubleArray7 = new double[9];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray1);
      
      doubleArray7[0] = double3;
      doubleArray7[1] = double4;
      doubleArray7[2] = double6;
      doubleArray7[3] = double4;
      doubleArray7[4] = double6;
      doubleArray7[5] = double5;
      doubleArray7[6] = double3;
      doubleArray7[7] = double6;
      doubleArray7[8] = double5;
      doubleArray0[6] = doubleArray7;
      assertNotNull(doubleArray0[6]);
      
      double[] doubleArray8 = new double[1];
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertNotSame(doubleArray8, doubleArray5);
      assertNotSame(doubleArray8, doubleArray3);
      assertNotSame(doubleArray8, doubleArray6);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray7);
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray4);
      
      doubleArray8[0] = double6;
      doubleArray0[7] = doubleArray8;
      assertNotNull(doubleArray0[7]);
      
      double[] doubleArray9 = new double[8];
      assertFalse(doubleArray9.equals((Object)doubleArray4));
      assertFalse(doubleArray9.equals((Object)doubleArray1));
      assertFalse(doubleArray9.equals((Object)doubleArray8));
      assertFalse(doubleArray9.equals((Object)doubleArray5));
      assertFalse(doubleArray9.equals((Object)doubleArray7));
      assertFalse(doubleArray9.equals((Object)doubleArray3));
      assertFalse(doubleArray9.equals((Object)doubleArray2));
      assertFalse(doubleArray9.equals((Object)doubleArray6));
      assertNotSame(doubleArray9, doubleArray4);
      assertNotSame(doubleArray9, doubleArray1);
      assertNotSame(doubleArray9, doubleArray8);
      assertNotSame(doubleArray9, doubleArray5);
      assertNotSame(doubleArray9, doubleArray7);
      assertNotSame(doubleArray9, doubleArray3);
      assertNotSame(doubleArray9, doubleArray2);
      assertNotSame(doubleArray9, doubleArray6);
      
      doubleArray9[0] = double6;
      doubleArray9[1] = double2;
      doubleArray9[2] = double2;
      doubleArray9[3] = double0;
      double double7 = 0.0;
      doubleArray9[4] = double7;
      doubleArray9[5] = double5;
      doubleArray9[6] = double5;
      doubleArray9[7] = double3;
      doubleArray0[8] = doubleArray9;
      assertNotNull(doubleArray0[8]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      int int0 = 0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, int0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      int int1 = 1304;
      int int2 = (-1254);
      PieDataset pieDataset0 = null;
      boolean boolean1 = DatasetUtilities.isEmptyOrNull(pieDataset0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double[][] doubleArray0 = new double[2][8];
      double[] doubleArray1 = new double[10];
      doubleArray1[0] = (double) int2;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray1[3] = (double) int2;
      doubleArray1[4] = (double) int2;
      doubleArray1[5] = (double) int1;
      doubleArray1[6] = (double) int0;
      doubleArray1[7] = (double) int1;
      doubleArray1[8] = (double) int1;
      doubleArray1[9] = (double) int1;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = (double) int2;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = (double) int1;
      doubleArray2[3] = (double) int1;
      double double1 = (-1122.29386425);
      doubleArray2[4] = double1;
      doubleArray2[5] = (double) int2;
      doubleArray2[6] = (double) int0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "Category 5";
      Number[][] numberArray0 = new Number[2][3];
      Number[] numberArray1 = new Number[6];
      int int0 = SwingConstants.SOUTH;
      assertEquals(5, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(5, numberArray1[0].shortValue());
      assertEquals(5.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(5, numberArray1[0].byteValue());
      assertEquals(5L, numberArray1[0].longValue());
      assertEquals(5.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(5, numberArray1[0].intValue());
      assertNotNull(numberArray1[0]);
      
      int int1 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      numberArray1[1] = (Number) int1;
      assertEquals(-1, numberArray1[1].intValue());
      assertEquals((-1L), numberArray1[1].longValue());
      assertEquals(-1, numberArray1[1].shortValue());
      assertEquals((-1.0F), numberArray1[1].floatValue(), 0.01F);
      assertEquals((-1.0), numberArray1[1].doubleValue(), 0.01D);
      assertEquals(-1, numberArray1[1].byteValue());
      assertNotNull(numberArray1[1]);
      
      int int2 = MonthConstants.FEBRUARY;
      assertEquals(2, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) int1, (KeyedValues) defaultPieDataset0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultCategoryDataset0);
      
      numberArray1[2] = (Number) int2;
      assertEquals(2L, numberArray1[2].longValue());
      assertEquals(2.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(2, numberArray1[2].intValue());
      assertEquals(2.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[2].shortValue());
      assertEquals(2, numberArray1[2].byteValue());
      assertNotNull(numberArray1[2]);
      
      int int3 = Frame.MAXIMIZED_HORIZ;
      assertEquals(2, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      numberArray1[3] = (Number) int3;
      assertEquals(2, numberArray1[3].intValue());
      assertEquals(2L, numberArray1[3].longValue());
      assertEquals(2, numberArray1[3].byteValue());
      assertEquals(2, numberArray1[3].shortValue());
      assertEquals(2.0F, numberArray1[3].floatValue(), 0.01F);
      assertEquals(2.0, numberArray1[3].doubleValue(), 0.01D);
      assertNotNull(numberArray1[3]);
      
      byte byte0 = Character.DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING;
      assertEquals((byte)14, byte0);
      
      numberArray1[4] = (Number) byte0;
      assertEquals(14.0F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(14, numberArray1[4].byteValue());
      assertEquals(14, numberArray1[4].intValue());
      assertEquals(14, numberArray1[4].shortValue());
      assertEquals(14.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(14L, numberArray1[4].longValue());
      assertNotNull(numberArray1[4]);
      
      int int4 = KeyEvent.KEY_LOCATION_LEFT;
      assertEquals(2, int4);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      
      numberArray1[5] = (Number) int4;
      assertEquals(2, numberArray1[5].intValue());
      assertEquals(2, numberArray1[5].byteValue());
      assertEquals(2L, numberArray1[5].longValue());
      assertEquals(2, numberArray1[5].shortValue());
      assertEquals(2.0F, numberArray1[5].floatValue(), 0.01F);
      assertEquals(2.0, numberArray1[5].doubleValue(), 0.01D);
      assertNotNull(numberArray1[5]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[10];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) int3;
      assertEquals(2.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(2L, numberArray2[0].longValue());
      assertEquals(2, numberArray2[0].shortValue());
      assertEquals(2.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(2, numberArray2[0].intValue());
      assertEquals(2, numberArray2[0].byteValue());
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) int3;
      assertEquals(2.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(2, numberArray2[1].intValue());
      assertEquals(2.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(2, numberArray2[1].byteValue());
      assertEquals(2L, numberArray2[1].longValue());
      assertEquals(2, numberArray2[1].shortValue());
      assertNotNull(numberArray2[1]);
      
      numberArray2[2] = (Number) int0;
      assertEquals(5, numberArray2[2].intValue());
      assertEquals(5, numberArray2[2].shortValue());
      assertEquals(5L, numberArray2[2].longValue());
      assertEquals(5.0, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(5, numberArray2[2].byteValue());
      assertEquals(5.0F, numberArray2[2].floatValue(), 0.01F);
      assertNotNull(numberArray2[2]);
      
      int int5 = ImageObserver.SOMEBITS;
      assertEquals(8, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      
      numberArray2[3] = (Number) int5;
      assertEquals(8, numberArray2[3].byteValue());
      assertEquals(8, numberArray2[3].shortValue());
      assertEquals(8.0F, numberArray2[3].floatValue(), 0.01F);
      assertEquals(8L, numberArray2[3].longValue());
      assertEquals(8, numberArray2[3].intValue());
      assertEquals(8.0, numberArray2[3].doubleValue(), 0.01D);
      assertNotNull(numberArray2[3]);
      
      numberArray2[4] = (Number) int1;
      assertEquals(-1, numberArray2[4].intValue());
      assertEquals((-1.0F), numberArray2[4].floatValue(), 0.01F);
      assertEquals(-1, numberArray2[4].byteValue());
      assertEquals((-1.0), numberArray2[4].doubleValue(), 0.01D);
      assertEquals(-1, numberArray2[4].shortValue());
      assertEquals((-1L), numberArray2[4].longValue());
      assertNotNull(numberArray2[4]);
      
      numberArray2[5] = (Number) int0;
      assertEquals(5.0, numberArray2[5].doubleValue(), 0.01D);
      assertEquals(5, numberArray2[5].shortValue());
      assertEquals(5, numberArray2[5].intValue());
      assertEquals(5.0F, numberArray2[5].floatValue(), 0.01F);
      assertEquals(5, numberArray2[5].byteValue());
      assertEquals(5L, numberArray2[5].longValue());
      assertNotNull(numberArray2[5]);
      
      float float0 = Component.CENTER_ALIGNMENT;
      assertEquals(0.5F, float0, 0.01F);
      
      numberArray2[6] = (Number) float0;
      assertEquals(0L, numberArray2[6].longValue());
      assertEquals(0, numberArray2[6].intValue());
      assertEquals(0.5F, numberArray2[6].floatValue(), 0.01F);
      assertEquals(0.5, numberArray2[6].doubleValue(), 0.01D);
      assertEquals(0, numberArray2[6].shortValue());
      assertEquals(0, numberArray2[6].byteValue());
      assertNotNull(numberArray2[6]);
      
      numberArray2[7] = (Number) int2;
      assertEquals(2.0F, numberArray2[7].floatValue(), 0.01F);
      assertEquals(2, numberArray2[7].byteValue());
      assertEquals(2, numberArray2[7].intValue());
      assertEquals(2.0, numberArray2[7].doubleValue(), 0.01D);
      assertEquals(2L, numberArray2[7].longValue());
      assertEquals(2, numberArray2[7].shortValue());
      assertNotNull(numberArray2[7]);
      
      numberArray2[8] = (Number) int2;
      assertEquals(2L, numberArray2[8].longValue());
      assertEquals(2, numberArray2[8].byteValue());
      assertEquals(2, numberArray2[8].shortValue());
      assertEquals(2, numberArray2[8].intValue());
      assertEquals(2.0F, numberArray2[8].floatValue(), 0.01F);
      assertEquals(2.0, numberArray2[8].doubleValue(), 0.01D);
      assertNotNull(numberArray2[8]);
      
      numberArray2[9] = (Number) int1;
      assertEquals((-1.0F), numberArray2[9].floatValue(), 0.01F);
      assertEquals((-1L), numberArray2[9].longValue());
      assertEquals(-1, numberArray2[9].intValue());
      assertEquals(-1, numberArray2[9].shortValue());
      assertEquals(-1, numberArray2[9].byteValue());
      assertEquals((-1.0), numberArray2[9].doubleValue(), 0.01D);
      assertNotNull(numberArray2[9]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(10, defaultCategoryDataset1.getColumnCount());
      assertEquals(2, defaultCategoryDataset1.getRowCount());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(defaultCategoryDataset1);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset1);
      assertEquals((-1.0), (double)double0, 0.01D);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(10, defaultCategoryDataset1.getColumnCount());
      assertEquals(2, defaultCategoryDataset1.getRowCount());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
  }

  @Test
  public void test20()  throws Throwable  {
      Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
      int int0 = 0;
      Millisecond millisecond0 = new Millisecond();
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(millisecond0);
      
      Second second0 = millisecond0.getSecond();
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(second0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(minute0);
      
      Second second1 = new Second(int0, minute0);
      assertFalse(second0.equals((Object)second1));
      assertFalse(second1.equals((Object)second0));
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotSame(second0, second1);
      assertNotSame(second1, second0);
      assertNotNull(second1);
      
      comparableArray0[0] = (Comparable<IntervalXYDelegate>) second1;
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(comparableArray0[0]);
      
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[2];
      double double0 = 1485.090079994533;
      doubleArray1[0] = double0;
      double double1 = 1.5;
      doubleArray1[1] = double1;
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = double0;
      doubleArray2[2] = double1;
      doubleArray0[2] = doubleArray2;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray3 = new double[2];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      doubleArray3[0] = double1;
      doubleArray3[1] = (double) int0;
      doubleArray0[3] = doubleArray3;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      
      doubleArray4[0] = (double) int0;
      doubleArray4[1] = double0;
      doubleArray4[2] = (double) int0;
      doubleArray4[3] = double0;
      doubleArray4[4] = (double) int0;
      doubleArray4[5] = (double) int0;
      doubleArray4[6] = double0;
      doubleArray4[7] = (double) int0;
      doubleArray0[4] = doubleArray4;
      assertNotNull(doubleArray0[4]);
      
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      Comparable<IntervalXYDelegate>[] comparableArray0 = (Comparable<IntervalXYDelegate>[]) Array.newInstance(Comparable.class, 1);
      int int0 = 0;
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertNotNull(millisecond0);
      
      Second second0 = millisecond0.getSecond();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(second0);
      
      Minute minute0 = second0.getMinute();
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotNull(minute0);
      
      Second second1 = new Second(int0, minute0);
      assertFalse(second1.equals((Object)second0));
      assertFalse(second0.equals((Object)second1));
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409260999L, second1.getLastMillisecond());
      assertEquals(1392409260499L, second1.getMiddleMillisecond());
      assertEquals(1392409260000L, second1.getFirstMillisecond());
      assertEquals(0, second1.getSecond());
      assertEquals(3601570860L, second1.getSerialIndex());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertNotSame(second1, second0);
      assertNotSame(second0, second1);
      assertNotNull(second1);
      
      double[][] doubleArray0 = new double[5][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[2];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = 1485.090079994533;
      doubleArray2[0] = double0;
      double double1 = 1.5;
      doubleArray2[1] = double1;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[3];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      doubleArray3[0] = (double) int0;
      doubleArray3[1] = double0;
      doubleArray3[2] = double1;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[2];
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      
      doubleArray4[0] = double1;
      doubleArray4[1] = (double) int0;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[8];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      
      doubleArray5[0] = (double) int0;
      doubleArray5[1] = doubleArray3[1];
      doubleArray5[2] = (double) int0;
      doubleArray5[3] = double0;
      doubleArray5[4] = (double) int0;
      doubleArray5[5] = (double) int0;
      doubleArray5[6] = double0;
      doubleArray5[7] = (double) int0;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) xIntervalSeriesCollection0, boolean0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      int int0 = defaultCategoryDataset0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      List list0 = defaultStatisticalCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean1 = true;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertNotNull(xYDatasetTableModel0);
      
      xIntervalSeriesCollection0.removeChangeListener((DatasetChangeListener) xYDatasetTableModel0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      
      Number number1 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(number1);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNull(range2);
      
      System.setCurrentTimeMillis((long) int0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(defaultTableXYDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset1 = new DefaultStatisticalCategoryDataset();
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      assertNotNull(defaultStatisticalCategoryDataset1);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultStatisticalCategoryDataset1);
      assertTrue(boolean2);
      assertTrue(defaultStatisticalCategoryDataset1.equals((Object)defaultStatisticalCategoryDataset0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, defaultStatisticalCategoryDataset1.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset1.getRowCount());
      assertNotSame(defaultStatisticalCategoryDataset1, defaultStatisticalCategoryDataset0);
      
      int int1 = 0;
      assertTrue(int1 == int0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset2 = null;
      // Undeclared exception!
      try {
        Range range3 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset2, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test23()  throws Throwable  {
      XYDataset xYDataset0 = null;
      long long0 = 127L;
      String string0 = "org.jfree.data.statistics.SimpleHistogramDataset";
      String string1 = "Ykn,*M\".L**/";
      assertNotSame(string1, string0);
      
      Number[][] numberArray0 = new Number[5][4];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) long0;
      assertEquals(127, numberArray1[0].intValue());
      assertEquals(127.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(127, numberArray1[0].byteValue());
      assertEquals(127, numberArray1[0].shortValue());
      assertEquals(127.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(127L, numberArray1[0].longValue());
      assertNotNull(numberArray1[0]);
      
      numberArray1[1] = (Number) long0;
      assertEquals(127, numberArray1[1].intValue());
      assertEquals(127.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(127, numberArray1[1].shortValue());
      assertEquals(127, numberArray1[1].byteValue());
      assertEquals(127.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(127L, numberArray1[1].longValue());
      assertNotNull(numberArray1[1]);
      
      numberArray1[2] = (Number) long0;
      assertEquals(127.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(127, numberArray1[2].byteValue());
      assertEquals(127.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(127, numberArray1[2].shortValue());
      assertEquals(127L, numberArray1[2].longValue());
      assertEquals(127, numberArray1[2].intValue());
      assertNotNull(numberArray1[2]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[7];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) long0;
      assertEquals(127.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(127, numberArray2[0].byteValue());
      assertEquals(127.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(127L, numberArray2[0].longValue());
      assertEquals(127, numberArray2[0].shortValue());
      assertEquals(127, numberArray2[0].intValue());
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) long0;
      assertEquals(127L, numberArray2[1].longValue());
      assertEquals(127, numberArray2[1].byteValue());
      assertEquals(127, numberArray2[1].shortValue());
      assertEquals(127, numberArray2[1].intValue());
      assertEquals(127.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(127.0F, numberArray2[1].floatValue(), 0.01F);
      assertNotNull(numberArray2[1]);
      
      numberArray2[2] = (Number) long0;
      assertEquals(127, numberArray2[2].shortValue());
      assertEquals(127, numberArray2[2].byteValue());
      assertEquals(127.0F, numberArray2[2].floatValue(), 0.01F);
      assertEquals(127L, numberArray2[2].longValue());
      assertEquals(127, numberArray2[2].intValue());
      assertEquals(127.0, numberArray2[2].doubleValue(), 0.01D);
      assertNotNull(numberArray2[2]);
      
      numberArray2[3] = (Number) long0;
      assertEquals(127, numberArray2[3].byteValue());
      assertEquals(127, numberArray2[3].shortValue());
      assertEquals(127.0, numberArray2[3].doubleValue(), 0.01D);
      assertEquals(127.0F, numberArray2[3].floatValue(), 0.01F);
      assertEquals(127L, numberArray2[3].longValue());
      assertEquals(127, numberArray2[3].intValue());
      assertNotNull(numberArray2[3]);
      
      numberArray2[4] = (Number) long0;
      assertEquals(127, numberArray2[4].byteValue());
      assertEquals(127, numberArray2[4].shortValue());
      assertEquals(127, numberArray2[4].intValue());
      assertEquals(127L, numberArray2[4].longValue());
      assertEquals(127.0F, numberArray2[4].floatValue(), 0.01F);
      assertEquals(127.0, numberArray2[4].doubleValue(), 0.01D);
      assertNotNull(numberArray2[4]);
      
      numberArray2[5] = (Number) long0;
      assertEquals(127, numberArray2[5].intValue());
      assertEquals(127.0F, numberArray2[5].floatValue(), 0.01F);
      assertEquals(127L, numberArray2[5].longValue());
      assertEquals(127, numberArray2[5].byteValue());
      assertEquals(127.0, numberArray2[5].doubleValue(), 0.01D);
      assertEquals(127, numberArray2[5].shortValue());
      assertNotNull(numberArray2[5]);
      
      int int0 = KeyEvent.VK_L;
      assertEquals(76, int0);
      
      numberArray2[6] = (Number) int0;
      assertEquals(76.0, numberArray2[6].doubleValue(), 0.01D);
      assertEquals(76, numberArray2[6].intValue());
      assertEquals(76.0F, numberArray2[6].floatValue(), 0.01F);
      assertEquals(76, numberArray2[6].shortValue());
      assertEquals(76, numberArray2[6].byteValue());
      assertEquals(76L, numberArray2[6].longValue());
      assertNotNull(numberArray2[6]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[7];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertNotSame(numberArray3, numberArray2);
      assertNotSame(numberArray3, numberArray1);
      
      numberArray3[0] = (Number) long0;
      assertEquals(127, numberArray3[0].intValue());
      assertEquals(127L, numberArray3[0].longValue());
      assertEquals(127.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(127, numberArray3[0].byteValue());
      assertEquals(127, numberArray3[0].shortValue());
      assertEquals(127.0F, numberArray3[0].floatValue(), 0.01F);
      assertNotNull(numberArray3[0]);
      
      numberArray3[1] = (Number) int0;
      assertEquals(76.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(76.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(76, numberArray3[1].intValue());
      assertEquals(76, numberArray3[1].shortValue());
      assertEquals(76L, numberArray3[1].longValue());
      assertEquals(76, numberArray3[1].byteValue());
      assertNotNull(numberArray3[1]);
      
      numberArray3[2] = (Number) long0;
      assertEquals(127.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(127, numberArray3[2].byteValue());
      assertEquals(127.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(127, numberArray3[2].shortValue());
      assertEquals(127, numberArray3[2].intValue());
      assertEquals(127L, numberArray3[2].longValue());
      assertNotNull(numberArray3[2]);
      
      int int1 = ImageObserver.HEIGHT;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      numberArray3[3] = (Number) int1;
      assertEquals(2L, numberArray3[3].longValue());
      assertEquals(2.0, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(2, numberArray3[3].intValue());
      assertEquals(2, numberArray3[3].byteValue());
      assertEquals(2, numberArray3[3].shortValue());
      assertEquals(2.0F, numberArray3[3].floatValue(), 0.01F);
      assertNotNull(numberArray3[3]);
      
      numberArray3[4] = (Number) long0;
      assertEquals(127, numberArray3[4].shortValue());
      assertEquals(127L, numberArray3[4].longValue());
      assertEquals(127, numberArray3[4].intValue());
      assertEquals(127.0F, numberArray3[4].floatValue(), 0.01F);
      assertEquals(127.0, numberArray3[4].doubleValue(), 0.01D);
      assertEquals(127, numberArray3[4].byteValue());
      assertNotNull(numberArray3[4]);
      
      numberArray3[5] = (Number) int0;
      assertEquals(76, numberArray3[5].byteValue());
      assertEquals(76, numberArray3[5].intValue());
      assertEquals(76L, numberArray3[5].longValue());
      assertEquals(76, numberArray3[5].shortValue());
      assertEquals(76.0, numberArray3[5].doubleValue(), 0.01D);
      assertEquals(76.0F, numberArray3[5].floatValue(), 0.01F);
      assertNotNull(numberArray3[5]);
      
      numberArray3[6] = (Number) long0;
      assertEquals(127, numberArray3[6].byteValue());
      assertEquals(127, numberArray3[6].shortValue());
      assertEquals(127, numberArray3[6].intValue());
      assertEquals(127.0, numberArray3[6].doubleValue(), 0.01D);
      assertEquals(127.0F, numberArray3[6].floatValue(), 0.01F);
      assertEquals(127L, numberArray3[6].longValue());
      assertNotNull(numberArray3[6]);
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      Number[] numberArray4 = new Number[8];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertNotSame(numberArray4, numberArray1);
      assertNotSame(numberArray4, numberArray3);
      assertNotSame(numberArray4, numberArray2);
      
      numberArray4[0] = (Number) int0;
      assertEquals(76, numberArray4[0].intValue());
      assertEquals(76.0, numberArray4[0].doubleValue(), 0.01D);
      assertEquals(76, numberArray4[0].shortValue());
      assertEquals(76, numberArray4[0].byteValue());
      assertEquals(76.0F, numberArray4[0].floatValue(), 0.01F);
      assertEquals(76L, numberArray4[0].longValue());
      assertNotNull(numberArray4[0]);
      
      numberArray4[1] = (Number) int1;
      assertEquals(2.0F, numberArray4[1].floatValue(), 0.01F);
      assertEquals(2L, numberArray4[1].longValue());
      assertEquals(2, numberArray4[1].shortValue());
      assertEquals(2, numberArray4[1].byteValue());
      assertEquals(2, numberArray4[1].intValue());
      assertEquals(2.0, numberArray4[1].doubleValue(), 0.01D);
      assertNotNull(numberArray4[1]);
      
      numberArray4[2] = (Number) int1;
      assertEquals(2, numberArray4[2].intValue());
      assertEquals(2, numberArray4[2].byteValue());
      assertEquals(2.0, numberArray4[2].doubleValue(), 0.01D);
      assertEquals(2, numberArray4[2].shortValue());
      assertEquals(2.0F, numberArray4[2].floatValue(), 0.01F);
      assertEquals(2L, numberArray4[2].longValue());
      assertNotNull(numberArray4[2]);
      
      numberArray4[3] = (Number) long0;
      assertEquals(127.0F, numberArray4[3].floatValue(), 0.01F);
      assertEquals(127.0, numberArray4[3].doubleValue(), 0.01D);
      assertEquals(127, numberArray4[3].intValue());
      assertEquals(127L, numberArray4[3].longValue());
      assertEquals(127, numberArray4[3].shortValue());
      assertEquals(127, numberArray4[3].byteValue());
      assertNotNull(numberArray4[3]);
      
      numberArray4[4] = (Number) long0;
      assertEquals(127, numberArray4[4].intValue());
      assertEquals(127L, numberArray4[4].longValue());
      assertEquals(127.0F, numberArray4[4].floatValue(), 0.01F);
      assertEquals(127, numberArray4[4].shortValue());
      assertEquals(127.0, numberArray4[4].doubleValue(), 0.01D);
      assertEquals(127, numberArray4[4].byteValue());
      assertNotNull(numberArray4[4]);
      
      int int2 = KeyEvent.VK_CONTROL;
      assertEquals(17, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      numberArray4[5] = (Number) int2;
      assertEquals(17, numberArray4[5].intValue());
      assertEquals(17L, numberArray4[5].longValue());
      assertEquals(17, numberArray4[5].byteValue());
      assertEquals(17.0, numberArray4[5].doubleValue(), 0.01D);
      assertEquals(17.0F, numberArray4[5].floatValue(), 0.01F);
      assertEquals(17, numberArray4[5].shortValue());
      assertNotNull(numberArray4[5]);
      
      numberArray4[6] = (Number) long0;
      assertEquals(127, numberArray4[6].shortValue());
      assertEquals(127L, numberArray4[6].longValue());
      assertEquals(127, numberArray4[6].byteValue());
      assertEquals(127, numberArray4[6].intValue());
      assertEquals(127.0F, numberArray4[6].floatValue(), 0.01F);
      assertEquals(127.0, numberArray4[6].doubleValue(), 0.01D);
      assertNotNull(numberArray4[6]);
      
      numberArray4[7] = (Number) int1;
      assertEquals(2, numberArray4[7].shortValue());
      assertEquals(2, numberArray4[7].intValue());
      assertEquals(2, numberArray4[7].byteValue());
      assertEquals(2L, numberArray4[7].longValue());
      assertEquals(2.0, numberArray4[7].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray4[7].floatValue(), 0.01F);
      assertNotNull(numberArray4[7]);
      
      numberArray0[3] = numberArray4;
      assertNotNull(numberArray0[3]);
      
      numberArray0[4] = numberArray0[1];
      assertNotNull(numberArray0[4]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string1, numberArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(5, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, boolean0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(125.0, range0.getLength(), 0.01D);
      assertEquals(127.0, range0.getUpperBound(), 0.01D);
      assertEquals(2.0, range0.getLowerBound(), 0.01D);
      assertEquals(64.5, range0.getCentralValue(), 0.01D);
      assertEquals(5, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(long0);
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findDomainBounds(xYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      String string0 = "Unknown key: ";
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[8];
      double double0 = (-1.0);
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = 0.0;
      doubleArray1[2] = double2;
      double double3 = (-3008.415121);
      doubleArray1[3] = double3;
      double double4 = Double.POSITIVE_INFINITY;
      doubleArray1[4] = double4;
      double double5 = (-2284.0);
      doubleArray1[5] = double5;
      double double6 = 0.0;
      doubleArray1[6] = double6;
      double double7 = 0.0;
      doubleArray1[7] = double7;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[7];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = double4;
      doubleArray2[1] = double0;
      doubleArray2[2] = double7;
      doubleArray2[3] = double4;
      doubleArray2[4] = double1;
      doubleArray2[5] = double5;
      doubleArray2[6] = double5;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[6];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      doubleArray3[0] = double3;
      doubleArray3[1] = double6;
      doubleArray3[2] = double6;
      doubleArray3[3] = double1;
      doubleArray3[4] = double1;
      doubleArray3[5] = double0;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[8];
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      
      doubleArray4[0] = double6;
      doubleArray4[1] = double0;
      doubleArray4[2] = double4;
      doubleArray4[3] = double4;
      doubleArray4[4] = double3;
      doubleArray4[5] = double7;
      doubleArray4[6] = double3;
      doubleArray4[7] = double0;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      
      doubleArray5[0] = double5;
      doubleArray5[1] = double2;
      doubleArray5[2] = double6;
      doubleArray5[3] = double6;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray6 = new double[5];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      
      doubleArray6[0] = double2;
      doubleArray6[1] = double5;
      doubleArray6[2] = double3;
      double double8 = 2155.3062717527228;
      doubleArray6[3] = double8;
      doubleArray6[4] = double6;
      doubleArray0[5] = doubleArray6;
      assertNotNull(doubleArray0[5]);
      
      double[] doubleArray7 = new double[8];
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray4);
      
      doubleArray7[0] = double4;
      doubleArray7[1] = double0;
      doubleArray7[2] = double2;
      doubleArray7[3] = double0;
      doubleArray7[4] = double3;
      doubleArray7[5] = double2;
      doubleArray7[6] = double6;
      double double9 = 2165.093450933022;
      doubleArray7[7] = double9;
      doubleArray0[6] = doubleArray7;
      assertNotNull(doubleArray0[6]);
      
      double[] doubleArray8 = new double[3];
      assertFalse(doubleArray8.equals((Object)doubleArray1));
      assertFalse(doubleArray8.equals((Object)doubleArray5));
      assertFalse(doubleArray8.equals((Object)doubleArray4));
      assertFalse(doubleArray8.equals((Object)doubleArray6));
      assertFalse(doubleArray8.equals((Object)doubleArray7));
      assertFalse(doubleArray8.equals((Object)doubleArray2));
      assertFalse(doubleArray8.equals((Object)doubleArray3));
      assertNotSame(doubleArray8, doubleArray1);
      assertNotSame(doubleArray8, doubleArray5);
      assertNotSame(doubleArray8, doubleArray4);
      assertNotSame(doubleArray8, doubleArray6);
      assertNotSame(doubleArray8, doubleArray7);
      assertNotSame(doubleArray8, doubleArray2);
      assertNotSame(doubleArray8, doubleArray3);
      
      doubleArray8[0] = double5;
      doubleArray8[1] = double2;
      double double10 = Double.POSITIVE_INFINITY;
      doubleArray8[2] = double10;
      doubleArray0[7] = doubleArray8;
      assertNotNull(doubleArray0[7]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      Double double11 = (Double)DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(Double.POSITIVE_INFINITY, (double)double11, 0.01D);
      assertFalse(double11.equals((Object)double5));
      assertFalse(double11.equals((Object)double3));
      assertTrue(double11.equals((Object)double4));
      assertFalse(double11.equals((Object)double8));
      assertFalse(double11.equals((Object)double1));
      assertFalse(double11.equals((Object)double2));
      assertFalse(double11.equals((Object)double9));
      assertFalse(double11.equals((Object)double7));
      assertFalse(double11.equals((Object)double6));
      assertTrue(double11.equals((Object)double10));
      assertFalse(double11.equals((Object)double0));
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "Category 1";
      double[][] doubleArray0 = new double[1][10];
      double[] doubleArray1 = new double[10];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = (-227.2);
      doubleArray1[2] = double2;
      double double3 = 0.0;
      doubleArray1[3] = double3;
      double double4 = Double.NEGATIVE_INFINITY;
      doubleArray1[4] = double4;
      double double5 = (-1.0);
      doubleArray1[5] = double5;
      double double6 = (-1118.354952);
      doubleArray1[6] = double6;
      double double7 = 1.0;
      doubleArray1[7] = double7;
      double double8 = 0.0;
      doubleArray1[8] = double8;
      double double9 = 6.283185307179586;
      doubleArray1[9] = double9;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      double double10 = 4182.917350705;
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, double10);
      assertFalse(double10 == double0);
      assertFalse(double10 == double3);
      assertFalse(double10 == double2);
      assertFalse(double10 == double4);
      assertFalse(double10 == double1);
      assertFalse(double10 == double9);
      assertFalse(double10 == double8);
      assertFalse(double10 == double6);
      assertFalse(double10 == double7);
      assertFalse(double10 == double5);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(Double.POSITIVE_INFINITY, range0.getLength(), 0.01D);
      assertEquals(4189.200536012179, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NEGATIVE_INFINITY, range0.getLowerBound(), 0.01D);
      assertNotNull(range0);
  }

  @Test
  public void test26()  throws Throwable  {
      long long0 = 999L;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
      int int0 = (-312);
      int int1 = (-1353);
      int int2 = (-417);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int1, int2, int0, int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-312,MONTH=-1353,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-417,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-312,HOUR_OF_DAY=-312,MINUTE=-312,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(date0);
      
      double double0 = Double.NEGATIVE_INFINITY;
      double double1 = 0.0;
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem(date0, (double) int2, double0, (double) int1, (double) long0, double1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double1 == double0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[0]);
      
      double double2 = 2124.155295096;
      double double3 = (-195.2099983802591);
      double double4 = Double.POSITIVE_INFINITY;
      OHLCDataItem oHLCDataItem1 = new OHLCDataItem(date0, double2, double3, double4, (double) int1, double3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double3 == double4);
      assertFalse(double3 == double0);
      assertFalse(oHLCDataItem1.equals((Object)oHLCDataItem0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double0);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem1, oHLCDataItem0);
      assertNotNull(oHLCDataItem1);
      
      oHLCDataItemArray0[1] = oHLCDataItem1;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[1]);
      
      double double5 = 0.0;
      double double6 = 0.5;
      double double7 = 0.0;
      double double8 = (-1.0);
      double double9 = 0.0;
      OHLCDataItem oHLCDataItem2 = new OHLCDataItem(date0, double5, double6, double7, double8, double9);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(double5 == double2);
      assertFalse(double5 == double6);
      assertTrue(double5 == double7);
      assertFalse(double5 == double0);
      assertFalse(double5 == double3);
      assertFalse(double5 == double4);
      assertTrue(double5 == double9);
      assertTrue(double5 == double1);
      assertFalse(double5 == double8);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double8 == double1);
      assertFalse(double8 == double3);
      assertFalse(double8 == double2);
      assertFalse(double8 == double5);
      assertFalse(double8 == double4);
      assertFalse(double8 == double0);
      assertFalse(double8 == double7);
      assertFalse(double8 == double9);
      assertFalse(double8 == double6);
      assertTrue(double7 == double1);
      assertFalse(double7 == double6);
      assertFalse(double7 == double3);
      assertFalse(double7 == double4);
      assertTrue(double7 == double9);
      assertFalse(double7 == double8);
      assertFalse(double7 == double0);
      assertFalse(double7 == double2);
      assertTrue(double7 == double5);
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem2.equals((Object)oHLCDataItem1));
      assertFalse(double9 == double6);
      assertFalse(double9 == double8);
      assertFalse(double9 == double2);
      assertFalse(double9 == double0);
      assertFalse(double9 == double4);
      assertTrue(double9 == double7);
      assertFalse(double9 == double3);
      assertTrue(double9 == double5);
      assertTrue(double9 == double1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double6 == double5);
      assertFalse(double6 == double1);
      assertFalse(double6 == double2);
      assertFalse(double6 == double7);
      assertFalse(double6 == double0);
      assertFalse(double6 == double9);
      assertFalse(double6 == double4);
      assertFalse(double6 == double8);
      assertFalse(double6 == double3);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem2, oHLCDataItem0);
      assertNotSame(oHLCDataItem2, oHLCDataItem1);
      assertNotNull(oHLCDataItem2);
      
      oHLCDataItemArray0[2] = oHLCDataItem2;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[2]);
      
      double double10 = (-2495.130150226);
      double double11 = 0.0;
      double double12 = (-3784.71777);
      OHLCDataItem oHLCDataItem3 = new OHLCDataItem(date0, double2, double8, double10, double11, double12);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem3.equals((Object)oHLCDataItem2));
      assertTrue(double11 == double9);
      assertTrue(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double6);
      assertFalse(double11 == double12);
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double8);
      assertTrue(double11 == double5);
      assertFalse(double11 == double4);
      assertFalse(double11 == double0);
      assertFalse(double11 == double3);
      assertFalse(double8 == double1);
      assertFalse(double8 == double3);
      assertFalse(double8 == double2);
      assertFalse(double8 == double12);
      assertFalse(double8 == double5);
      assertFalse(double8 == double4);
      assertFalse(double8 == double0);
      assertFalse(double8 == double7);
      assertFalse(double8 == double9);
      assertFalse(double8 == double10);
      assertFalse(double8 == double6);
      assertFalse(double8 == double11);
      assertFalse(double12 == double0);
      assertFalse(double12 == double8);
      assertFalse(double12 == double6);
      assertFalse(double12 == double4);
      assertFalse(double12 == double10);
      assertFalse(double12 == double2);
      assertFalse(double12 == double7);
      assertFalse(double12 == double5);
      assertFalse(double12 == double1);
      assertFalse(double12 == double3);
      assertFalse(double12 == double9);
      assertFalse(double12 == double11);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double10 == double1);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double12);
      assertFalse(double10 == double11);
      assertFalse(double10 == double8);
      assertFalse(double10 == double3);
      assertFalse(double10 == double4);
      assertFalse(double10 == double0);
      assertFalse(double10 == double7);
      assertFalse(double10 == double6);
      assertFalse(double10 == double9);
      assertFalse(double2 == double9);
      assertFalse(double2 == double10);
      assertFalse(double2 == double4);
      assertFalse(double2 == double1);
      assertFalse(double2 == double5);
      assertFalse(double2 == double12);
      assertFalse(double2 == double6);
      assertFalse(double2 == double8);
      assertFalse(double2 == double7);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double11);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem3, oHLCDataItem0);
      assertNotSame(oHLCDataItem3, oHLCDataItem1);
      assertNotSame(oHLCDataItem3, oHLCDataItem2);
      assertNotNull(oHLCDataItem3);
      
      oHLCDataItemArray0[3] = oHLCDataItem3;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[3]);
      
      double double13 = 0.0;
      double double14 = 0.0;
      double double15 = 454.5;
      OHLCDataItem oHLCDataItem4 = new OHLCDataItem(date0, double2, double13, double6, double14, double15);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(double15 == double7);
      assertFalse(double15 == double8);
      assertFalse(double15 == double9);
      assertFalse(double15 == double10);
      assertFalse(double15 == double14);
      assertFalse(double15 == double12);
      assertFalse(double15 == double11);
      assertFalse(double15 == double4);
      assertFalse(double15 == double6);
      assertFalse(double15 == double1);
      assertFalse(double15 == double5);
      assertFalse(double15 == double13);
      assertFalse(double15 == double3);
      assertFalse(double15 == double0);
      assertFalse(double15 == double2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem4.equals((Object)oHLCDataItem1));
      assertFalse(double13 == double10);
      assertTrue(double13 == double14);
      assertTrue(double13 == double7);
      assertTrue(double13 == double9);
      assertFalse(double13 == double0);
      assertFalse(double13 == double12);
      assertFalse(double13 == double6);
      assertFalse(double13 == double2);
      assertTrue(double13 == double1);
      assertFalse(double13 == double4);
      assertTrue(double13 == double5);
      assertTrue(double13 == double11);
      assertFalse(double13 == double15);
      assertFalse(double13 == double8);
      assertFalse(double13 == double3);
      assertFalse(double14 == double15);
      assertTrue(double14 == double1);
      assertTrue(double14 == double13);
      assertFalse(double14 == double10);
      assertFalse(double14 == double6);
      assertFalse(double14 == double2);
      assertTrue(double14 == double9);
      assertTrue(double14 == double5);
      assertTrue(double14 == double7);
      assertFalse(double14 == double0);
      assertFalse(double14 == double4);
      assertTrue(double14 == double11);
      assertFalse(double14 == double8);
      assertFalse(double14 == double12);
      assertFalse(double14 == double3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double6 == double5);
      assertFalse(double6 == double2);
      assertFalse(double6 == double11);
      assertFalse(double6 == double14);
      assertFalse(double6 == double9);
      assertFalse(double6 == double12);
      assertFalse(double6 == double4);
      assertFalse(double6 == double1);
      assertFalse(double6 == double13);
      assertFalse(double6 == double7);
      assertFalse(double6 == double0);
      assertFalse(double6 == double15);
      assertFalse(double6 == double8);
      assertFalse(double6 == double10);
      assertFalse(double6 == double3);
      assertFalse(double2 == double9);
      assertFalse(double2 == double10);
      assertFalse(double2 == double1);
      assertFalse(double2 == double4);
      assertFalse(double2 == double5);
      assertFalse(double2 == double12);
      assertFalse(double2 == double6);
      assertFalse(double2 == double8);
      assertFalse(double2 == double7);
      assertFalse(double2 == double3);
      assertFalse(double2 == double0);
      assertFalse(double2 == double11);
      assertFalse(double2 == double13);
      assertFalse(double2 == double15);
      assertFalse(double2 == double14);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem4, oHLCDataItem0);
      assertNotSame(oHLCDataItem4, oHLCDataItem2);
      assertNotSame(oHLCDataItem4, oHLCDataItem3);
      assertNotSame(oHLCDataItem4, oHLCDataItem1);
      assertNotNull(oHLCDataItem4);
      
      oHLCDataItemArray0[4] = oHLCDataItem4;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[4]);
      
      double double16 = 1839.3;
      double double17 = 0.0;
      double double18 = 0.0;
      OHLCDataItem oHLCDataItem5 = new OHLCDataItem(date0, double10, double16, double17, double14, double18);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(double17 == double18);
      assertTrue(double17 == double1);
      assertTrue(double17 == double14);
      assertTrue(double17 == double11);
      assertFalse(double17 == double12);
      assertFalse(double17 == double3);
      assertFalse(double17 == double10);
      assertTrue(double17 == double13);
      assertFalse(double17 == double8);
      assertFalse(double17 == double6);
      assertTrue(double17 == double5);
      assertFalse(double17 == double15);
      assertFalse(double17 == double0);
      assertTrue(double17 == double7);
      assertFalse(double17 == double16);
      assertFalse(double17 == double2);
      assertTrue(double17 == double9);
      assertFalse(double17 == double4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem5.equals((Object)oHLCDataItem2));
      assertFalse(double18 == double2);
      assertFalse(double18 == double8);
      assertFalse(double18 == double12);
      assertFalse(double18 == double10);
      assertTrue(double18 == double7);
      assertTrue(double18 == double17);
      assertFalse(double18 == double4);
      assertTrue(double18 == double11);
      assertTrue(double18 == double9);
      assertTrue(double18 == double13);
      assertFalse(double18 == double3);
      assertTrue(double18 == double1);
      assertTrue(double18 == double5);
      assertFalse(double18 == double0);
      assertFalse(double18 == double6);
      assertFalse(double18 == double15);
      assertTrue(double18 == double14);
      assertFalse(double18 == double16);
      assertFalse(double16 == double10);
      assertFalse(double16 == double2);
      assertFalse(double16 == double5);
      assertFalse(double16 == double0);
      assertFalse(double16 == double14);
      assertFalse(double16 == double18);
      assertFalse(double16 == double8);
      assertFalse(double16 == double12);
      assertFalse(double16 == double4);
      assertFalse(double16 == double13);
      assertFalse(double16 == double7);
      assertFalse(double16 == double1);
      assertFalse(double16 == double17);
      assertFalse(double16 == double6);
      assertFalse(double16 == double15);
      assertFalse(double16 == double11);
      assertFalse(double16 == double3);
      assertFalse(double16 == double9);
      assertFalse(double14 == double15);
      assertTrue(double14 == double1);
      assertTrue(double14 == double13);
      assertFalse(double14 == double10);
      assertFalse(double14 == double6);
      assertFalse(double14 == double2);
      assertTrue(double14 == double9);
      assertTrue(double14 == double7);
      assertTrue(double14 == double5);
      assertFalse(double14 == double0);
      assertFalse(double14 == double4);
      assertTrue(double14 == double11);
      assertFalse(double14 == double8);
      assertTrue(double14 == double18);
      assertFalse(double14 == double12);
      assertFalse(double14 == double3);
      assertTrue(double14 == double17);
      assertFalse(double14 == double16);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double12);
      assertFalse(double10 == double8);
      assertFalse(double10 == double3);
      assertFalse(double10 == double16);
      assertFalse(double10 == double4);
      assertFalse(double10 == double0);
      assertFalse(double10 == double17);
      assertFalse(double10 == double7);
      assertFalse(double10 == double13);
      assertFalse(double10 == double1);
      assertFalse(double10 == double11);
      assertFalse(double10 == double14);
      assertFalse(double10 == double6);
      assertFalse(double10 == double15);
      assertFalse(double10 == double9);
      assertFalse(double10 == double18);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem5, oHLCDataItem4);
      assertNotSame(oHLCDataItem5, oHLCDataItem1);
      assertNotSame(oHLCDataItem5, oHLCDataItem0);
      assertNotSame(oHLCDataItem5, oHLCDataItem3);
      assertNotSame(oHLCDataItem5, oHLCDataItem2);
      assertNotNull(oHLCDataItem5);
      
      oHLCDataItemArray0[5] = oHLCDataItem5;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[5]);
      
      double double19 = 1.0;
      double double20 = (-3896.0);
      double double21 = 0.0;
      OHLCDataItem oHLCDataItem6 = new OHLCDataItem(date0, double12, double19, double20, (double) long0, double21);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(double19 == double4);
      assertFalse(double19 == double9);
      assertFalse(double19 == double8);
      assertFalse(double19 == double15);
      assertFalse(double19 == double20);
      assertFalse(double19 == double21);
      assertFalse(double19 == double12);
      assertFalse(double19 == double0);
      assertFalse(double19 == double7);
      assertFalse(double19 == double1);
      assertFalse(double19 == double13);
      assertFalse(double19 == double14);
      assertFalse(double19 == double16);
      assertFalse(double19 == double2);
      assertFalse(double19 == double5);
      assertFalse(double19 == double6);
      assertFalse(double19 == double18);
      assertFalse(double19 == double10);
      assertFalse(double19 == double3);
      assertFalse(double19 == double17);
      assertFalse(double19 == double11);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double21 == double3);
      assertFalse(double21 == double6);
      assertFalse(double21 == double12);
      assertTrue(double21 == double5);
      assertFalse(double21 == double15);
      assertFalse(double21 == double20);
      assertTrue(double21 == double7);
      assertTrue(double21 == double11);
      assertTrue(double21 == double1);
      assertTrue(double21 == double18);
      assertTrue(double21 == double9);
      assertFalse(double21 == double2);
      assertFalse(double21 == double16);
      assertFalse(double21 == double8);
      assertTrue(double21 == double13);
      assertFalse(double21 == double4);
      assertFalse(double21 == double19);
      assertTrue(double21 == double17);
      assertFalse(double21 == double10);
      assertFalse(double21 == double0);
      assertTrue(double21 == double14);
      assertFalse(double20 == double6);
      assertFalse(double20 == double9);
      assertFalse(double20 == double7);
      assertFalse(double20 == double16);
      assertFalse(double20 == double13);
      assertFalse(double20 == double4);
      assertFalse(double20 == double2);
      assertFalse(double20 == double12);
      assertFalse(double20 == double17);
      assertFalse(double20 == double1);
      assertFalse(double20 == double11);
      assertFalse(double20 == double19);
      assertFalse(double20 == double15);
      assertFalse(double20 == double10);
      assertFalse(double20 == double21);
      assertFalse(double20 == double3);
      assertFalse(double20 == double18);
      assertFalse(double20 == double14);
      assertFalse(double20 == double0);
      assertFalse(double20 == double8);
      assertFalse(double20 == double5);
      assertFalse(double12 == double19);
      assertFalse(double12 == double13);
      assertFalse(double12 == double7);
      assertFalse(double12 == double15);
      assertFalse(double12 == double3);
      assertFalse(double12 == double21);
      assertFalse(double12 == double20);
      assertFalse(double12 == double16);
      assertFalse(double12 == double0);
      assertFalse(double12 == double8);
      assertFalse(double12 == double6);
      assertFalse(double12 == double4);
      assertFalse(double12 == double10);
      assertFalse(double12 == double2);
      assertFalse(double12 == double17);
      assertFalse(double12 == double5);
      assertFalse(double12 == double1);
      assertFalse(double12 == double9);
      assertFalse(double12 == double18);
      assertFalse(double12 == double14);
      assertFalse(double12 == double11);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem6.equals((Object)oHLCDataItem3));
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem6, oHLCDataItem5);
      assertNotSame(oHLCDataItem6, oHLCDataItem1);
      assertNotSame(oHLCDataItem6, oHLCDataItem2);
      assertNotSame(oHLCDataItem6, oHLCDataItem0);
      assertNotSame(oHLCDataItem6, oHLCDataItem4);
      assertNotSame(oHLCDataItem6, oHLCDataItem3);
      assertNotNull(oHLCDataItem6);
      
      oHLCDataItemArray0[6] = oHLCDataItem6;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[6]);
      
      double double22 = 0.0;
      double double23 = 0.0;
      OHLCDataItem oHLCDataItem7 = new OHLCDataItem(date0, double4, double22, double14, double23, double15);
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem7.equals((Object)oHLCDataItem3));
      assertFalse(double22 == double20);
      assertFalse(double22 == double3);
      assertFalse(double22 == double19);
      assertTrue(double22 == double13);
      assertTrue(double22 == double17);
      assertFalse(double22 == double10);
      assertFalse(double22 == double0);
      assertFalse(double22 == double16);
      assertTrue(double22 == double11);
      assertFalse(double22 == double2);
      assertTrue(double22 == double18);
      assertTrue(double22 == double21);
      assertFalse(double22 == double4);
      assertTrue(double22 == double5);
      assertFalse(double22 == double8);
      assertTrue(double22 == double9);
      assertTrue(double22 == double23);
      assertFalse(double22 == double12);
      assertFalse(double22 == double15);
      assertTrue(double22 == double7);
      assertTrue(double22 == double14);
      assertFalse(double22 == double6);
      assertTrue(double22 == double1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(double23 == double6);
      assertFalse(double23 == double10);
      assertTrue(double23 == double5);
      assertFalse(double23 == double20);
      assertFalse(double23 == double3);
      assertTrue(double23 == double21);
      assertTrue(double23 == double1);
      assertTrue(double23 == double18);
      assertTrue(double23 == double22);
      assertTrue(double23 == double14);
      assertFalse(double23 == double15);
      assertFalse(double23 == double2);
      assertFalse(double23 == double19);
      assertFalse(double23 == double16);
      assertTrue(double23 == double13);
      assertFalse(double23 == double8);
      assertFalse(double23 == double12);
      assertTrue(double23 == double11);
      assertTrue(double23 == double9);
      assertTrue(double23 == double7);
      assertFalse(double23 == double4);
      assertFalse(double23 == double0);
      assertTrue(double23 == double17);
      assertFalse(double15 == double7);
      assertFalse(double15 == double8);
      assertFalse(double15 == double21);
      assertFalse(double15 == double9);
      assertFalse(double15 == double16);
      assertFalse(double15 == double10);
      assertFalse(double15 == double17);
      assertFalse(double15 == double20);
      assertFalse(double15 == double19);
      assertFalse(double15 == double14);
      assertFalse(double15 == double23);
      assertFalse(double15 == double18);
      assertFalse(double15 == double12);
      assertFalse(double15 == double11);
      assertFalse(double15 == double4);
      assertFalse(double15 == double22);
      assertFalse(double15 == double6);
      assertFalse(double15 == double1);
      assertFalse(double15 == double13);
      assertFalse(double15 == double5);
      assertFalse(double15 == double0);
      assertFalse(double15 == double3);
      assertFalse(double15 == double2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertTrue(double14 == double23);
      assertFalse(double14 == double15);
      assertTrue(double14 == double1);
      assertFalse(double14 == double20);
      assertTrue(double14 == double13);
      assertFalse(double14 == double10);
      assertFalse(double14 == double6);
      assertFalse(double14 == double2);
      assertTrue(double14 == double9);
      assertTrue(double14 == double22);
      assertTrue(double14 == double7);
      assertTrue(double14 == double5);
      assertFalse(double14 == double0);
      assertFalse(double14 == double19);
      assertFalse(double14 == double4);
      assertTrue(double14 == double11);
      assertFalse(double14 == double8);
      assertTrue(double14 == double18);
      assertFalse(double14 == double12);
      assertTrue(double14 == double21);
      assertFalse(double14 == double3);
      assertTrue(double14 == double17);
      assertFalse(double14 == double16);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double4 == double1);
      assertFalse(double4 == double2);
      assertFalse(double4 == double7);
      assertFalse(double4 == double22);
      assertFalse(double4 == double23);
      assertFalse(double4 == double10);
      assertFalse(double4 == double18);
      assertFalse(double4 == double21);
      assertFalse(double4 == double11);
      assertFalse(double4 == double16);
      assertFalse(double4 == double6);
      assertFalse(double4 == double19);
      assertFalse(double4 == double3);
      assertFalse(double4 == double17);
      assertFalse(double4 == double15);
      assertFalse(double4 == double12);
      assertFalse(double4 == double20);
      assertFalse(double4 == double5);
      assertFalse(double4 == double9);
      assertFalse(double4 == double0);
      assertFalse(double4 == double14);
      assertFalse(double4 == double13);
      assertFalse(double4 == double8);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem7, oHLCDataItem6);
      assertNotSame(oHLCDataItem7, oHLCDataItem1);
      assertNotSame(oHLCDataItem7, oHLCDataItem4);
      assertNotSame(oHLCDataItem7, oHLCDataItem2);
      assertNotSame(oHLCDataItem7, oHLCDataItem5);
      assertNotSame(oHLCDataItem7, oHLCDataItem0);
      assertNotSame(oHLCDataItem7, oHLCDataItem3);
      assertNotNull(oHLCDataItem7);
      
      oHLCDataItemArray0[7] = oHLCDataItem7;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[7]);
      
      double double24 = 1085.3964580572033;
      double double25 = 3865.5892335967;
      OHLCDataItem oHLCDataItem8 = new OHLCDataItem(date0, double12, double11, double6, double24, double25);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem2));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem7));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem8.equals((Object)oHLCDataItem0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double25 == double22);
      assertFalse(double25 == double21);
      assertFalse(double25 == double19);
      assertFalse(double25 == double10);
      assertFalse(double25 == double14);
      assertFalse(double25 == double1);
      assertFalse(double25 == double6);
      assertFalse(double25 == double18);
      assertFalse(double25 == double5);
      assertFalse(double25 == double9);
      assertFalse(double25 == double0);
      assertFalse(double25 == double24);
      assertFalse(double25 == double12);
      assertFalse(double25 == double4);
      assertFalse(double25 == double16);
      assertFalse(double25 == double13);
      assertFalse(double25 == double3);
      assertFalse(double25 == double17);
      assertFalse(double25 == double2);
      assertFalse(double25 == double7);
      assertFalse(double25 == double20);
      assertFalse(double25 == double23);
      assertFalse(double25 == double8);
      assertFalse(double25 == double15);
      assertFalse(double25 == double11);
      assertTrue(double11 == double9);
      assertFalse(double11 == double10);
      assertFalse(double11 == double12);
      assertFalse(double11 == double2);
      assertTrue(double11 == double22);
      assertTrue(double11 == double17);
      assertFalse(double11 == double6);
      assertTrue(double11 == double1);
      assertTrue(double11 == double5);
      assertTrue(double11 == double13);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double0);
      assertTrue(double11 == double7);
      assertFalse(double11 == double16);
      assertFalse(double11 == double25);
      assertFalse(double11 == double24);
      assertFalse(double11 == double15);
      assertFalse(double11 == double19);
      assertTrue(double11 == double14);
      assertTrue(double11 == double23);
      assertTrue(double11 == double21);
      assertTrue(double11 == double18);
      assertFalse(double11 == double8);
      assertFalse(double11 == double20);
      assertFalse(double12 == double19);
      assertFalse(double12 == double13);
      assertFalse(double12 == double7);
      assertFalse(double12 == double15);
      assertFalse(double12 == double23);
      assertFalse(double12 == double3);
      assertFalse(double12 == double21);
      assertFalse(double12 == double20);
      assertFalse(double12 == double24);
      assertFalse(double12 == double16);
      assertFalse(double12 == double0);
      assertFalse(double12 == double8);
      assertFalse(double12 == double6);
      assertFalse(double12 == double4);
      assertFalse(double12 == double10);
      assertFalse(double12 == double22);
      assertFalse(double12 == double25);
      assertFalse(double12 == double2);
      assertFalse(double12 == double5);
      assertFalse(double12 == double17);
      assertFalse(double12 == double1);
      assertFalse(double12 == double9);
      assertFalse(double12 == double14);
      assertFalse(double12 == double11);
      assertFalse(double12 == double18);
      assertFalse(double24 == double13);
      assertFalse(double24 == double25);
      assertFalse(double24 == double18);
      assertFalse(double24 == double4);
      assertFalse(double24 == double11);
      assertFalse(double24 == double8);
      assertFalse(double24 == double21);
      assertFalse(double24 == double10);
      assertFalse(double24 == double23);
      assertFalse(double24 == double3);
      assertFalse(double24 == double0);
      assertFalse(double24 == double19);
      assertFalse(double24 == double15);
      assertFalse(double24 == double20);
      assertFalse(double24 == double14);
      assertFalse(double24 == double16);
      assertFalse(double24 == double6);
      assertFalse(double24 == double12);
      assertFalse(double24 == double9);
      assertFalse(double24 == double17);
      assertFalse(double24 == double5);
      assertFalse(double24 == double22);
      assertFalse(double24 == double7);
      assertFalse(double24 == double1);
      assertFalse(double24 == double2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double6 == double17);
      assertFalse(double6 == double5);
      assertFalse(double6 == double16);
      assertFalse(double6 == double22);
      assertFalse(double6 == double2);
      assertFalse(double6 == double25);
      assertFalse(double6 == double11);
      assertFalse(double6 == double21);
      assertFalse(double6 == double14);
      assertFalse(double6 == double12);
      assertFalse(double6 == double9);
      assertFalse(double6 == double20);
      assertFalse(double6 == double4);
      assertFalse(double6 == double24);
      assertFalse(double6 == double1);
      assertFalse(double6 == double18);
      assertFalse(double6 == double13);
      assertFalse(double6 == double23);
      assertFalse(double6 == double7);
      assertFalse(double6 == double0);
      assertFalse(double6 == double15);
      assertFalse(double6 == double8);
      assertFalse(double6 == double19);
      assertFalse(double6 == double10);
      assertFalse(double6 == double3);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem8, oHLCDataItem1);
      assertNotSame(oHLCDataItem8, oHLCDataItem3);
      assertNotSame(oHLCDataItem8, oHLCDataItem2);
      assertNotSame(oHLCDataItem8, oHLCDataItem6);
      assertNotSame(oHLCDataItem8, oHLCDataItem5);
      assertNotSame(oHLCDataItem8, oHLCDataItem7);
      assertNotSame(oHLCDataItem8, oHLCDataItem4);
      assertNotSame(oHLCDataItem8, oHLCDataItem0);
      assertNotNull(oHLCDataItem8);
      
      oHLCDataItemArray0[8] = oHLCDataItem8;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[8]);
      
      double double26 = 1.0;
      double double27 = (-2370.528207452945);
      double double28 = (-3171.971636);
      double double29 = 0.0;
      OHLCDataItem oHLCDataItem9 = new OHLCDataItem(date0, double26, double27, double27, double28, double29);
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem1));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem5));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem8));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem6));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem7));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem0));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem4));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem3));
      assertFalse(oHLCDataItem9.equals((Object)oHLCDataItem2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(double29 == double4);
      assertFalse(double29 == double27);
      assertTrue(double29 == double22);
      assertFalse(double29 == double12);
      assertFalse(double29 == double6);
      assertTrue(double29 == double14);
      assertFalse(double29 == double8);
      assertFalse(double29 == double10);
      assertTrue(double29 == double9);
      assertFalse(double29 == double3);
      assertTrue(double29 == double7);
      assertTrue(double29 == double18);
      assertFalse(double29 == double15);
      assertFalse(double29 == double26);
      assertTrue(double29 == double17);
      assertFalse(double29 == double25);
      assertFalse(double29 == double16);
      assertTrue(double29 == double13);
      assertTrue(double29 == double5);
      assertTrue(double29 == double21);
      assertTrue(double29 == double1);
      assertTrue(double29 == double11);
      assertFalse(double29 == double20);
      assertFalse(double29 == double28);
      assertTrue(double29 == double23);
      assertFalse(double29 == double2);
      assertFalse(double29 == double19);
      assertFalse(double29 == double24);
      assertFalse(double29 == double0);
      assertFalse(double26 == double15);
      assertFalse(double26 == double25);
      assertFalse(double26 == double0);
      assertFalse(double26 == double20);
      assertFalse(double26 == double28);
      assertFalse(double26 == double1);
      assertFalse(double26 == double9);
      assertFalse(double26 == double13);
      assertFalse(double26 == double11);
      assertFalse(double26 == double12);
      assertFalse(double26 == double14);
      assertFalse(double26 == double3);
      assertFalse(double26 == double5);
      assertTrue(double26 == double19);
      assertFalse(double26 == double24);
      assertFalse(double26 == double16);
      assertFalse(double26 == double8);
      assertFalse(double26 == double17);
      assertFalse(double26 == double29);
      assertFalse(double26 == double21);
      assertFalse(double26 == double22);
      assertFalse(double26 == double6);
      assertFalse(double26 == double10);
      assertFalse(double26 == double2);
      assertFalse(double26 == double23);
      assertFalse(double26 == double27);
      assertFalse(double26 == double18);
      assertFalse(double26 == double7);
      assertFalse(double26 == double4);
      assertFalse(double28 == double19);
      assertFalse(double28 == double23);
      assertFalse(double28 == double24);
      assertFalse(double28 == double21);
      assertFalse(double28 == double17);
      assertFalse(double28 == double4);
      assertFalse(double28 == double13);
      assertFalse(double28 == double5);
      assertFalse(double28 == double14);
      assertFalse(double28 == double3);
      assertFalse(double28 == double15);
      assertFalse(double28 == double18);
      assertFalse(double28 == double8);
      assertFalse(double28 == double20);
      assertFalse(double28 == double7);
      assertFalse(double28 == double9);
      assertFalse(double28 == double25);
      assertFalse(double28 == double12);
      assertFalse(double28 == double27);
      assertFalse(double28 == double11);
      assertFalse(double28 == double1);
      assertFalse(double28 == double10);
      assertFalse(double28 == double16);
      assertFalse(double28 == double0);
      assertFalse(double28 == double6);
      assertFalse(double28 == double29);
      assertFalse(double28 == double26);
      assertFalse(double28 == double2);
      assertFalse(double28 == double22);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(double27 == double5);
      assertFalse(double27 == double19);
      assertFalse(double27 == double6);
      assertFalse(double27 == double15);
      assertFalse(double27 == double22);
      assertFalse(double27 == double16);
      assertFalse(double27 == double26);
      assertFalse(double27 == double28);
      assertFalse(double27 == double17);
      assertFalse(double27 == double3);
      assertFalse(double27 == double13);
      assertFalse(double27 == double20);
      assertFalse(double27 == double11);
      assertFalse(double27 == double4);
      assertFalse(double27 == double14);
      assertFalse(double27 == double1);
      assertFalse(double27 == double2);
      assertFalse(double27 == double0);
      assertFalse(double27 == double10);
      assertFalse(double27 == double7);
      assertFalse(double27 == double9);
      assertFalse(double27 == double23);
      assertFalse(double27 == double12);
      assertFalse(double27 == double21);
      assertFalse(double27 == double18);
      assertFalse(double27 == double8);
      assertFalse(double27 == double24);
      assertFalse(double27 == double25);
      assertFalse(double27 == double29);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotSame(oHLCDataItem9, oHLCDataItem1);
      assertNotSame(oHLCDataItem9, oHLCDataItem5);
      assertNotSame(oHLCDataItem9, oHLCDataItem8);
      assertNotSame(oHLCDataItem9, oHLCDataItem6);
      assertNotSame(oHLCDataItem9, oHLCDataItem7);
      assertNotSame(oHLCDataItem9, oHLCDataItem0);
      assertNotSame(oHLCDataItem9, oHLCDataItem4);
      assertNotSame(oHLCDataItem9, oHLCDataItem3);
      assertNotSame(oHLCDataItem9, oHLCDataItem2);
      assertNotNull(oHLCDataItem9);
      
      oHLCDataItemArray0[9] = oHLCDataItem9;
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-75608831520000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=0,YEAR=427,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=24,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=6,HOUR_OF_DAY=18,MINUTE=48,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("Sat Jan 24 18:48:00 GMT 427", date0.toString());
      assertNotNull(oHLCDataItemArray0[9]);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) long0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals((-1028.35), range0.getCentralValue(), 0.01D);
      assertEquals(1839.3, range0.getUpperBound(), 0.01D);
      assertEquals(5735.3, range0.getLength(), 0.01D);
      assertEquals((-3896.0), range0.getLowerBound(), 0.01D);
      assertNotNull(range0);
      
      System.setCurrentTimeMillis(long0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = "+;{L\\_9*3mD+>";
      double[][] doubleArray0 = new double[1][9];
      double[] doubleArray1 = new double[8];
      double double0 = 2296.055;
      doubleArray1[0] = double0;
      double double1 = 0.0;
      doubleArray1[1] = double1;
      double double2 = (-1185.15792476714);
      doubleArray1[2] = double2;
      double double3 = (-1803.732412111);
      doubleArray1[3] = double3;
      double double4 = 387.49;
      doubleArray1[4] = double4;
      double double5 = 20.7948367492;
      doubleArray1[5] = double5;
      double double6 = (-804.263194309802);
      doubleArray1[6] = double6;
      double double7 = (-1720.7933);
      doubleArray1[7] = double7;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Double double8 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals((-1803.732412111), (double)double8, 0.01D);
      assertFalse(double8.equals((Object)double0));
      assertTrue(double8.equals((Object)double3));
      assertFalse(double8.equals((Object)double6));
      assertFalse(double8.equals((Object)double4));
      assertFalse(double8.equals((Object)double7));
      assertFalse(double8.equals((Object)double5));
      assertFalse(double8.equals((Object)double2));
      assertFalse(double8.equals((Object)double1));
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      int int0 = SwingConstants.PREVIOUS;
      assertEquals(13, int0);
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(categoryTableXYDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultStatisticalCategoryDataset0, int0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNotNull(defaultPieDataset0);
      
      Double double9 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) categoryTableXYDataset0);
      assertEquals(Double.NaN, (double)double9, 0.01D);
      assertFalse(double9.equals((Object)double5));
      assertFalse(double9.equals((Object)double4));
      assertFalse(double9.equals((Object)double8));
      assertFalse(double9.equals((Object)double0));
      assertFalse(double9.equals((Object)double6));
      assertFalse(double9.equals((Object)double7));
      assertFalse(double9.equals((Object)double2));
      assertFalse(double9.equals((Object)double3));
      assertFalse(double9.equals((Object)double1));
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotSame(double9, double8);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNull(range0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.0, range1.getLength(), 0.01D);
      assertEquals(0.0, range1.getLowerBound(), 0.01D);
      assertEquals(0.0, range1.getCentralValue(), 0.01D);
      assertEquals(0.0, range1.getUpperBound(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(range1);
      
      NormalDistributionFunction2D normalDistributionFunction2D0 = new NormalDistributionFunction2D((double) int0, (double) int0);
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertNotNull(normalDistributionFunction2D0);
      
      double double10 = (-781.37663089939);
      Range range2 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNull(range2);
      
      double double11 = 0.0;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D((Function2D) normalDistributionFunction2D0, double10, double11, int0, (Comparable) double10);
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double6);
      assertFalse(double11 == double0);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double5);
      assertFalse(double10 == double1);
      assertFalse(double10 == double7);
      assertFalse(double10 == double0);
      assertFalse(double10 == double4);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double6);
      assertFalse(double10 == double11);
      assertFalse(double10 == double3);
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertNotNull(xYSeriesCollection0);
      
      Range range3 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNull(range3);
      
      Double double12 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) xYSeriesCollection0);
      assertEquals(0.5, (double)double12, 0.01D);
      assertFalse(double12.equals((Object)double3));
      assertFalse(double12.equals((Object)double6));
      assertFalse(double12.equals((Object)double1));
      assertFalse(double12.equals((Object)double10));
      assertFalse(double12.equals((Object)double8));
      assertFalse(double12.equals((Object)double0));
      assertFalse(double12.equals((Object)double5));
      assertFalse(double12.equals((Object)double7));
      assertFalse(double12.equals((Object)double11));
      assertFalse(double12.equals((Object)double9));
      assertFalse(double12.equals((Object)double2));
      assertFalse(double12.equals((Object)double4));
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double6);
      assertFalse(double11 == double0);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double5);
      assertFalse(double10 == double1);
      assertFalse(double10 == double7);
      assertFalse(double10 == double0);
      assertFalse(double10 == double4);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double6);
      assertFalse(double10 == double11);
      assertFalse(double10 == double3);
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertNotSame(double12, double8);
      assertNotSame(double12, double9);
      
      Double double13 = (Double)DatasetUtilities.findMinimumDomainValue((XYDataset) xYSeriesCollection0);
      assertEquals((-781.87663089939), (double)double13, 0.01D);
      assertFalse(double13.equals((Object)double4));
      assertFalse(double13.equals((Object)double7));
      assertFalse(double13.equals((Object)double8));
      assertFalse(double13.equals((Object)double5));
      assertFalse(double13.equals((Object)double12));
      assertFalse(double13.equals((Object)double3));
      assertFalse(double13.equals((Object)double9));
      assertFalse(double13.equals((Object)double2));
      assertFalse(double13.equals((Object)double10));
      assertFalse(double13.equals((Object)double6));
      assertFalse(double13.equals((Object)double11));
      assertFalse(double13.equals((Object)double1));
      assertFalse(double13.equals((Object)double0));
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double6);
      assertFalse(double11 == double0);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double5);
      assertFalse(double10 == double1);
      assertFalse(double10 == double7);
      assertFalse(double10 == double0);
      assertFalse(double10 == double4);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double6);
      assertFalse(double10 == double11);
      assertFalse(double10 == double3);
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertNotSame(double13, double8);
      assertNotSame(double13, double12);
      assertNotSame(double13, double9);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) int0, (KeyedValues) defaultKeyedValuesDataset0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(defaultCategoryDataset1);
      
      double double14 = 1868.0;
      double double15 = 2653.878516;
      XYSeriesCollection xYSeriesCollection1 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D((Function2D) normalDistributionFunction2D0, double11, double15, int0, (Comparable) int0);
      assertFalse(xYSeriesCollection1.equals((Object)xYSeriesCollection0));
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double6);
      assertFalse(double11 == double15);
      assertFalse(double11 == double0);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double5);
      assertFalse(double11 == double14);
      assertFalse(double15 == double6);
      assertFalse(double15 == double3);
      assertFalse(double15 == double10);
      assertFalse(double15 == double2);
      assertFalse(double15 == double1);
      assertFalse(double15 == double14);
      assertFalse(double15 == double11);
      assertFalse(double15 == double5);
      assertFalse(double15 == double4);
      assertFalse(double15 == double0);
      assertFalse(double15 == double7);
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertEquals(0.5, xYSeriesCollection1.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection1.getIntervalWidth(), 0.01D);
      assertEquals(1, xYSeriesCollection1.getSeriesCount());
      assertEquals(false, xYSeriesCollection1.isAutoWidth());
      assertNotSame(xYSeriesCollection1, xYSeriesCollection0);
      assertNotNull(xYSeriesCollection1);
      
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) normalDistributionFunction2D0, double11, double14, int0, (Comparable) double14);
      assertFalse(double14 == double10);
      assertFalse(double14 == double2);
      assertFalse(double14 == double3);
      assertFalse(double14 == double15);
      assertFalse(double14 == double5);
      assertFalse(double14 == double11);
      assertFalse(double14 == double0);
      assertFalse(double14 == double7);
      assertFalse(double14 == double4);
      assertFalse(double14 == double1);
      assertFalse(double14 == double6);
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double6);
      assertFalse(double11 == double15);
      assertFalse(double11 == double0);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double5);
      assertFalse(double11 == double14);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertEquals(13, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1868.0, xYSeries0.getMaxX(), 0.01D);
      assertEquals(0.01861313265531872, xYSeries0.getMaxY(), 0.01D);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertNotNull(xYSeries0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset1);
      assertTrue(boolean0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) xYSeriesCollection0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double6);
      assertFalse(double11 == double15);
      assertFalse(double11 == double0);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double5);
      assertFalse(double11 == double14);
      assertFalse(xYSeriesCollection0.equals((Object)xYSeriesCollection1));
      assertFalse(double10 == double1);
      assertFalse(double10 == double7);
      assertFalse(double10 == double0);
      assertFalse(double10 == double4);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double6);
      assertFalse(double10 == double15);
      assertFalse(double10 == double11);
      assertFalse(double10 == double14);
      assertFalse(double10 == double3);
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultCategoryDataset1, int0, int0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertEquals(13, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(13, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(slidingCategoryDataset0);
      
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertEquals(13, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(13, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(list0);
      
      Range range4 = DatasetUtilities.iterateToFindDomainBounds((XYDataset) categoryTableXYDataset0, (List) list0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertTrue(double11 == double1);
      assertFalse(double11 == double2);
      assertFalse(double11 == double6);
      assertFalse(double11 == double15);
      assertFalse(double11 == double0);
      assertFalse(double11 == double4);
      assertFalse(double11 == double3);
      assertFalse(double11 == double7);
      assertFalse(double11 == double10);
      assertFalse(double11 == double5);
      assertFalse(double11 == double14);
      assertFalse(xYSeriesCollection0.equals((Object)xYSeriesCollection1));
      assertFalse(double10 == double1);
      assertFalse(double10 == double7);
      assertFalse(double10 == double0);
      assertFalse(double10 == double4);
      assertFalse(double10 == double2);
      assertFalse(double10 == double5);
      assertFalse(double10 == double6);
      assertFalse(double10 == double15);
      assertFalse(double10 == double11);
      assertFalse(double10 == double14);
      assertFalse(double10 == double3);
      assertEquals(0, defaultCategoryDataset1.getRowCount());
      assertEquals(0, defaultCategoryDataset1.getColumnCount());
      assertEquals(13.0, normalDistributionFunction2D0.getStandardDeviation(), 0.01D);
      assertEquals(13.0, normalDistributionFunction2D0.getMean(), 0.01D);
      assertEquals(13, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(13, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotSame(xYSeriesCollection0, xYSeriesCollection1);
      assertNull(range4);
      
      Range range5 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(range5);
  }

  @Test
  public void test28()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(xYDataset0);
      assertTrue(boolean0);
      
      Number[][] numberArray0 = new Number[6][4];
      Number[] numberArray1 = new Number[8];
      long long0 = AWTEvent.ADJUSTMENT_EVENT_MASK;
      assertEquals(256L, long0);
      
      numberArray1[0] = (Number) long0;
      assertEquals(256, numberArray1[0].intValue());
      assertEquals(256, numberArray1[0].shortValue());
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(256.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(256.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(256L, numberArray1[0].longValue());
      assertNotNull(numberArray1[0]);
      
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      assertEquals(2, int0);
      
      numberArray1[1] = (Number) int0;
      assertEquals(2, numberArray1[1].byteValue());
      assertEquals(2, numberArray1[1].shortValue());
      assertEquals(2, numberArray1[1].intValue());
      assertEquals(2L, numberArray1[1].longValue());
      assertEquals(2.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(2.0, numberArray1[1].doubleValue(), 0.01D);
      assertNotNull(numberArray1[1]);
      
      float float0 = Component.TOP_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      numberArray1[2] = (Number) float0;
      assertEquals(0, numberArray1[2].intValue());
      assertEquals(0, numberArray1[2].shortValue());
      assertEquals(0.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(0.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[2].byteValue());
      assertEquals(0L, numberArray1[2].longValue());
      assertNotNull(numberArray1[2]);
      
      int int1 = KeyEvent.VK_F12;
      assertEquals(123, int1);
      assertFalse(int1 == int0);
      
      int int2 = SwingConstants.LEFT;
      assertEquals(2, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      numberArray1[4] = (Number) int2;
      assertEquals(2.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[4].intValue());
      assertEquals(2, numberArray1[4].byteValue());
      assertEquals(2.0F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(2L, numberArray1[4].longValue());
      assertEquals(2, numberArray1[4].shortValue());
      assertNotNull(numberArray1[4]);
      
      float float1 = Component.RIGHT_ALIGNMENT;
      assertEquals(1.0F, float1, 0.01F);
      assertFalse(float1 == float0);
      
      numberArray1[5] = (Number) float1;
      assertEquals(1, numberArray1[5].shortValue());
      assertEquals(1.0, numberArray1[5].doubleValue(), 0.01D);
      assertEquals(1L, numberArray1[5].longValue());
      assertEquals(1, numberArray1[5].byteValue());
      assertEquals(1, numberArray1[5].intValue());
      assertEquals(1.0F, numberArray1[5].floatValue(), 0.01F);
      assertNotNull(numberArray1[5]);
      
      int int3 = ICC_Profile.icSigSpace5CLR;
      assertEquals(893602898, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      numberArray1[6] = (Number) int3;
      assertEquals(893602898, numberArray1[6].intValue());
      assertEquals(82, numberArray1[6].byteValue());
      assertEquals(8.9360288E8F, numberArray1[6].floatValue(), 0.01F);
      assertEquals(19538, numberArray1[6].shortValue());
      assertEquals(8.93602898E8, numberArray1[6].doubleValue(), 0.01D);
      assertEquals(893602898L, numberArray1[6].longValue());
      assertNotNull(numberArray1[6]);
      
      int int4 = FocusEvent.FOCUS_FIRST;
      assertEquals(1004, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      numberArray1[7] = (Number) int4;
      assertEquals(1004, numberArray1[7].intValue());
      assertEquals(1004.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(1004, numberArray1[7].shortValue());
      assertEquals(1004L, numberArray1[7].longValue());
      assertEquals(1004.0, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(-20, numberArray1[7].byteValue());
      assertNotNull(numberArray1[7]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[3];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) int3;
      assertEquals(8.9360288E8F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(893602898, numberArray2[0].intValue());
      assertEquals(893602898L, numberArray2[0].longValue());
      assertEquals(82, numberArray2[0].byteValue());
      assertEquals(19538, numberArray2[0].shortValue());
      assertEquals(8.93602898E8, numberArray2[0].doubleValue(), 0.01D);
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) int3;
      assertEquals(8.9360288E8F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(19538, numberArray2[1].shortValue());
      assertEquals(893602898, numberArray2[1].intValue());
      assertEquals(893602898L, numberArray2[1].longValue());
      assertEquals(8.93602898E8, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(82, numberArray2[1].byteValue());
      assertNotNull(numberArray2[1]);
      
      numberArray2[2] = (Number) int3;
      assertEquals(19538, numberArray2[2].shortValue());
      assertEquals(82, numberArray2[2].byteValue());
      assertEquals(8.9360288E8F, numberArray2[2].floatValue(), 0.01F);
      assertEquals(893602898L, numberArray2[2].longValue());
      assertEquals(893602898, numberArray2[2].intValue());
      assertEquals(8.93602898E8, numberArray2[2].doubleValue(), 0.01D);
      assertNotNull(numberArray2[2]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertNotSame(numberArray3, numberArray2);
      assertNotSame(numberArray3, numberArray1);
      
      numberArray3[0] = (Number) int2;
      assertEquals(2, numberArray3[0].byteValue());
      assertEquals(2.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(2, numberArray3[0].intValue());
      assertEquals(2, numberArray3[0].shortValue());
      assertEquals(2.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(2L, numberArray3[0].longValue());
      assertNotNull(numberArray3[0]);
      
      numberArray3[1] = (Number) int0;
      assertEquals(2, numberArray3[1].intValue());
      assertEquals(2L, numberArray3[1].longValue());
      assertEquals(2.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(2, numberArray3[1].shortValue());
      assertEquals(2, numberArray3[1].byteValue());
      assertNotNull(numberArray3[1]);
      
      numberArray3[2] = (Number) int1;
      assertEquals(123L, numberArray3[2].longValue());
      assertEquals(123, numberArray3[2].intValue());
      assertEquals(123, numberArray3[2].shortValue());
      assertEquals(123.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(123.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(123, numberArray3[2].byteValue());
      assertNotNull(numberArray3[2]);
      
      numberArray3[3] = (Number) int3;
      assertEquals(8.9360288E8F, numberArray3[3].floatValue(), 0.01F);
      assertEquals(893602898L, numberArray3[3].longValue());
      assertEquals(8.93602898E8, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(82, numberArray3[3].byteValue());
      assertEquals(893602898, numberArray3[3].intValue());
      assertEquals(19538, numberArray3[3].shortValue());
      assertNotNull(numberArray3[3]);
      
      int int5 = SerialDate.SUNDAY;
      assertEquals(1, int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      numberArray3[4] = (Number) int5;
      assertEquals(1, numberArray3[4].intValue());
      assertEquals(1, numberArray3[4].byteValue());
      assertEquals(1L, numberArray3[4].longValue());
      assertEquals(1.0, numberArray3[4].doubleValue(), 0.01D);
      assertEquals(1, numberArray3[4].shortValue());
      assertEquals(1.0F, numberArray3[4].floatValue(), 0.01F);
      assertNotNull(numberArray3[4]);
      
      numberArray0[3] = numberArray2;
      assertNotNull(numberArray0[3]);
      
      Number[] numberArray4 = new Number[17];
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertNotSame(numberArray4, numberArray2);
      assertNotSame(numberArray4, numberArray3);
      assertNotSame(numberArray4, numberArray1);
      
      numberArray4[0] = (Number) long0;
      assertEquals(256.0, numberArray4[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray4[0].byteValue());
      assertEquals(256.0F, numberArray4[0].floatValue(), 0.01F);
      assertEquals(256, numberArray4[0].intValue());
      assertEquals(256, numberArray4[0].shortValue());
      assertEquals(256L, numberArray4[0].longValue());
      assertNotNull(numberArray4[0]);
      
      numberArray4[1] = (Number) int2;
      assertEquals(2, numberArray4[1].intValue());
      assertEquals(2, numberArray4[1].byteValue());
      assertEquals(2L, numberArray4[1].longValue());
      assertEquals(2, numberArray4[1].shortValue());
      assertEquals(2.0, numberArray4[1].doubleValue(), 0.01D);
      assertEquals(2.0F, numberArray4[1].floatValue(), 0.01F);
      assertNotNull(numberArray4[1]);
      
      numberArray4[2] = (Number) int0;
      assertEquals(2L, numberArray4[2].longValue());
      assertEquals(2, numberArray4[2].shortValue());
      assertEquals(2.0F, numberArray4[2].floatValue(), 0.01F);
      assertEquals(2, numberArray4[2].byteValue());
      assertEquals(2, numberArray4[2].intValue());
      assertEquals(2.0, numberArray4[2].doubleValue(), 0.01D);
      assertNotNull(numberArray4[2]);
      
      numberArray4[3] = (Number) int2;
      assertEquals(2.0, numberArray4[3].doubleValue(), 0.01D);
      assertEquals(2, numberArray4[3].intValue());
      assertEquals(2L, numberArray4[3].longValue());
      assertEquals(2, numberArray4[3].byteValue());
      assertEquals(2, numberArray4[3].shortValue());
      assertEquals(2.0F, numberArray4[3].floatValue(), 0.01F);
      assertNotNull(numberArray4[3]);
      
      numberArray4[4] = (Number) int5;
      assertEquals(1.0F, numberArray4[4].floatValue(), 0.01F);
      assertEquals(1, numberArray4[4].shortValue());
      assertEquals(1L, numberArray4[4].longValue());
      assertEquals(1.0, numberArray4[4].doubleValue(), 0.01D);
      assertEquals(1, numberArray4[4].intValue());
      assertEquals(1, numberArray4[4].byteValue());
      assertNotNull(numberArray4[4]);
      
      numberArray4[5] = (Number) float0;
      assertEquals(0, numberArray4[5].intValue());
      assertEquals(0, numberArray4[5].shortValue());
      assertEquals(0.0, numberArray4[5].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray4[5].floatValue(), 0.01F);
      assertEquals(0, numberArray4[5].byteValue());
      assertEquals(0L, numberArray4[5].longValue());
      assertNotNull(numberArray4[5]);
      
      numberArray4[6] = (Number) int1;
      assertEquals(123.0, numberArray4[6].doubleValue(), 0.01D);
      assertEquals(123, numberArray4[6].intValue());
      assertEquals(123.0F, numberArray4[6].floatValue(), 0.01F);
      assertEquals(123, numberArray4[6].shortValue());
      assertEquals(123L, numberArray4[6].longValue());
      assertEquals(123, numberArray4[6].byteValue());
      assertNotNull(numberArray4[6]);
      
      numberArray4[7] = (Number) float1;
      assertEquals(1, numberArray4[7].intValue());
      assertEquals(1.0F, numberArray4[7].floatValue(), 0.01F);
      assertEquals(1, numberArray4[7].byteValue());
      assertEquals(1, numberArray4[7].shortValue());
      assertEquals(1L, numberArray4[7].longValue());
      assertEquals(1.0, numberArray4[7].doubleValue(), 0.01D);
      assertNotNull(numberArray4[7]);
      
      numberArray4[9] = (Number) float0;
      assertEquals(0, numberArray4[9].byteValue());
      assertEquals(0, numberArray4[9].intValue());
      assertEquals(0.0F, numberArray4[9].floatValue(), 0.01F);
      assertEquals(0.0, numberArray4[9].doubleValue(), 0.01D);
      assertEquals(0, numberArray4[9].shortValue());
      assertEquals(0L, numberArray4[9].longValue());
      assertNotNull(numberArray4[9]);
      
      numberArray0[4] = numberArray4;
      assertNotNull(numberArray0[4]);
      
      Number[] numberArray5 = new Number[6];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertNotSame(numberArray5, numberArray4);
      assertNotSame(numberArray5, numberArray2);
      assertNotSame(numberArray5, numberArray3);
      assertNotSame(numberArray5, numberArray1);
      
      numberArray5[0] = (Number) int4;
      assertEquals(1004, numberArray5[0].intValue());
      assertEquals(1004, numberArray5[0].shortValue());
      assertEquals(1004.0, numberArray5[0].doubleValue(), 0.01D);
      assertEquals(1004L, numberArray5[0].longValue());
      assertEquals(-20, numberArray5[0].byteValue());
      assertEquals(1004.0F, numberArray5[0].floatValue(), 0.01F);
      assertNotNull(numberArray5[0]);
      
      numberArray5[1] = (Number) int4;
      assertEquals(1004, numberArray5[1].shortValue());
      assertEquals(1004L, numberArray5[1].longValue());
      assertEquals(1004, numberArray5[1].intValue());
      assertEquals(1004.0F, numberArray5[1].floatValue(), 0.01F);
      assertEquals(-20, numberArray5[1].byteValue());
      assertEquals(1004.0, numberArray5[1].doubleValue(), 0.01D);
      assertNotNull(numberArray5[1]);
      
      numberArray5[2] = (Number) int3;
      assertEquals(893602898, numberArray5[2].intValue());
      assertEquals(8.93602898E8, numberArray5[2].doubleValue(), 0.01D);
      assertEquals(82, numberArray5[2].byteValue());
      assertEquals(893602898L, numberArray5[2].longValue());
      assertEquals(19538, numberArray5[2].shortValue());
      assertEquals(8.9360288E8F, numberArray5[2].floatValue(), 0.01F);
      assertNotNull(numberArray5[2]);
      
      numberArray5[3] = (Number) long0;
      assertEquals(256, numberArray5[3].intValue());
      assertEquals(256.0, numberArray5[3].doubleValue(), 0.01D);
      assertEquals(256.0F, numberArray5[3].floatValue(), 0.01F);
      assertEquals(256, numberArray5[3].shortValue());
      assertEquals(256L, numberArray5[3].longValue());
      assertEquals(0, numberArray5[3].byteValue());
      assertNotNull(numberArray5[3]);
      
      int int6 = SwingConstants.HORIZONTAL;
      assertEquals(0, int6);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      
      numberArray5[4] = (Number) int6;
      assertEquals(0, numberArray5[4].intValue());
      assertEquals(0.0, numberArray5[4].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray5[4].floatValue(), 0.01F);
      assertEquals(0L, numberArray5[4].longValue());
      assertEquals(0, numberArray5[4].shortValue());
      assertEquals(0, numberArray5[4].byteValue());
      assertNotNull(numberArray5[4]);
      
      numberArray5[5] = (Number) int3;
      assertEquals(8.9360288E8F, numberArray5[5].floatValue(), 0.01F);
      assertEquals(82, numberArray5[5].byteValue());
      assertEquals(19538, numberArray5[5].shortValue());
      assertEquals(8.93602898E8, numberArray5[5].doubleValue(), 0.01D);
      assertEquals(893602898, numberArray5[5].intValue());
      assertEquals(893602898L, numberArray5[5].longValue());
      assertNotNull(numberArray5[5]);
      
      numberArray0[5] = numberArray5;
      assertNotNull(numberArray0[5]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int7 = 2110;
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, int7);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertEquals(2110, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(categoryToPieDataset0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset1 = (DefaultIntervalCategoryDataset)categoryToPieDataset0.getUnderlyingDataset();
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertEquals(2110, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset1.getCategoryCount());
      assertSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultIntervalCategoryDataset1);
      
      int int8 = 0;
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      
      CategoryToPieDataset categoryToPieDataset1 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset1, tableOrder0, int8);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int8);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(2110, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset1.getCategoryCount());
      assertSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(categoryToPieDataset1);
      
      double double0 = (-1.0);
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset1, (Comparable) int3, double0);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int8);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int6);
      assertFalse(int3 == int7);
      assertFalse(int3 == int0);
      assertFalse(int3 == int8);
      assertFalse(int3 == int5);
      assertFalse(int3 == int2);
      assertEquals(0, categoryToPieDataset1.getExtractIndex());
      assertEquals(2110, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset1.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset1.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset1.getCategoryCount());
      assertEquals(5, defaultPieDataset0.getItemCount());
      assertSame(defaultIntervalCategoryDataset0, defaultIntervalCategoryDataset1);
      assertSame(defaultIntervalCategoryDataset1, defaultIntervalCategoryDataset0);
      assertNotNull(defaultPieDataset0);
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(number0);
      
      Object[][] objectArray0 = new Object[5][2];
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) number0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(objectArray1[0]);
      
      objectArray1[1] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray1[1]);
      
      Object object0 = Image.UndefinedProperty;
      assertNotNull(object0);
      
      objectArray1[2] = object0;
      assertNotNull(objectArray1[2]);
      
      objectArray1[0] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray1[0]);
      
      objectArray1[4] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray1[4]);
      
      objectArray1[5] = (Object) number0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(objectArray1[5]);
      
      objectArray1[6] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray1[6]);
      
      objectArray1[7] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray1[7]);
      
      objectArray0[0] = objectArray1;
      assertNotNull(objectArray0[0]);
      
      Object[] objectArray2 = new Object[7];
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertNotSame(objectArray2, objectArray1);
      
      objectArray2[0] = object0;
      assertNotNull(objectArray2[0]);
      
      objectArray2[1] = object0;
      assertNotNull(objectArray2[1]);
      
      objectArray2[2] = object0;
      assertNotNull(objectArray2[2]);
      
      objectArray2[3] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray2[3]);
      
      objectArray2[4] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray2[4]);
      
      objectArray2[5] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray2[5]);
      
      objectArray2[6] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray2[6]);
      
      objectArray0[1] = objectArray2;
      assertNotNull(objectArray0[1]);
      
      Object[] objectArray3 = new Object[7];
      assertFalse(objectArray3.equals((Object)objectArray1));
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertNotSame(objectArray3, objectArray1);
      assertNotSame(objectArray3, objectArray2);
      
      objectArray3[0] = object0;
      assertNotNull(objectArray3[0]);
      
      objectArray3[1] = object0;
      assertNotNull(objectArray3[1]);
      
      objectArray3[2] = object0;
      assertNotNull(objectArray3[2]);
      
      SunHints.Value sunHints_Value0 = (SunHints.Value)RenderingHints.VALUE_TEXT_ANTIALIAS_ON;
      assertNotNull(sunHints_Value0);
      
      objectArray3[3] = objectArray1[2];
      assertNotNull(objectArray3[3]);
      
      objectArray3[4] = (Object) number0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(objectArray3[4]);
      
      objectArray3[5] = object0;
      assertNotNull(objectArray3[5]);
      
      objectArray3[6] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray3[6]);
      
      objectArray0[2] = objectArray3;
      assertNotNull(objectArray0[2]);
      
      Object[] objectArray4 = new Object[6];
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertNotSame(objectArray4, objectArray2);
      assertNotSame(objectArray4, objectArray1);
      assertNotSame(objectArray4, objectArray3);
      
      objectArray4[0] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray4[0]);
      
      SunHints.Value sunHints_Value1 = (SunHints.Value)RenderingHints.VALUE_COLOR_RENDER_DEFAULT;
      assertFalse(sunHints_Value1.equals((Object)sunHints_Value0));
      assertNotSame(sunHints_Value1, sunHints_Value0);
      assertNotNull(sunHints_Value1);
      
      objectArray4[1] = (Object) sunHints_Value1;
      assertNotNull(objectArray4[1]);
      
      objectArray4[2] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray4[2]);
      
      objectArray4[3] = (Object) sunHints_Value0;
      assertNotNull(objectArray4[3]);
      
      objectArray4[4] = object0;
      assertNotNull(objectArray4[4]);
      
      objectArray4[5] = (Object) number0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(objectArray4[5]);
      
      objectArray0[3] = objectArray4;
      assertNotNull(objectArray0[3]);
      
      Object[] objectArray5 = new Object[3];
      assertFalse(objectArray5.equals((Object)objectArray2));
      assertFalse(objectArray5.equals((Object)objectArray4));
      assertFalse(objectArray5.equals((Object)objectArray3));
      assertFalse(objectArray5.equals((Object)objectArray1));
      assertNotSame(objectArray5, objectArray2);
      assertNotSame(objectArray5, objectArray4);
      assertNotSame(objectArray5, objectArray3);
      assertNotSame(objectArray5, objectArray1);
      
      objectArray5[0] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray5[0]);
      
      objectArray5[1] = (Object) sunHints_Value1;
      assertNotNull(objectArray5[1]);
      
      objectArray5[2] = (Object) defaultCategoryDataset0;
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(objectArray5[2]);
      
      objectArray0[4] = objectArray5;
      assertNotNull(objectArray0[4]);
      
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertEquals(5, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
      assertEquals(5, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNull(range0);
      
      TableXYDataset tableXYDataset0 = null;
      int int0 = 442;
      // Undeclared exception!
      try {
        Comparable comparable0 = defaultCategoryDataset0.getColumnKey(int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 442, Size: 0
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(xYTaskDataset0);
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(taskSeriesCollection1);
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNotNull(xYTaskDataset1);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue((XYDataset) xYTaskDataset1);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertNull(number0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertNotNull(xYDatasetTableModel0);
      
      defaultWindDataset0.addChangeListener((DatasetChangeListener) xYDatasetTableModel0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      int int0 = 141;
      xYDatasetTableModel0.fireTableRowsUpdated(int0, int0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      xYDatasetTableModel0.setValueAt((Object) xYDatasetTableModel0, int0, int0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number2);
  }

  @Test
  public void test31()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertNotNull(xYTaskDataset0);
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotNull(taskSeriesCollection1);
      
      XYTaskDataset xYTaskDataset1 = new XYTaskDataset(taskSeriesCollection1);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNotNull(xYTaskDataset1);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue((XYDataset) xYTaskDataset1);
      assertTrue(xYTaskDataset0.equals((Object)xYTaskDataset1));
      assertTrue(xYTaskDataset1.equals((Object)xYTaskDataset0));
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0.8, xYTaskDataset1.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset1.getSeriesCount());
      assertEquals(false, xYTaskDataset1.isTransposed());
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotSame(xYTaskDataset0, xYTaskDataset1);
      assertNotSame(xYTaskDataset1, xYTaskDataset0);
      assertNull(number0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertNotNull(xYDatasetTableModel0);
      
      defaultWindDataset0.addChangeListener((DatasetChangeListener) xYDatasetTableModel0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      int int0 = 141;
      xYDatasetTableModel0.fireTableRowsUpdated(int0, int0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      xYDatasetTableModel0.setValueAt((Object) xYDatasetTableModel0, int0, int0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number1);
      
      Number number2 = DatasetUtilities.findMaximumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number2);
  }

  @Test
  public void test32()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1390);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int1, (TimeZone) zoneInfo0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(-1391, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(-1391, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals("GMT", zoneInfo0.getID());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) int1;
      assertEquals(-1390, numberArray1[0].intValue());
      assertEquals(-110, numberArray1[0].byteValue());
      assertEquals((-1390L), numberArray1[0].longValue());
      assertEquals((-1390.0F), numberArray1[0].floatValue(), 0.01F);
      assertEquals((-1390.0), numberArray1[0].doubleValue(), 0.01D);
      assertEquals(-1390, numberArray1[0].shortValue());
      assertNotNull(numberArray1[0]);
      
      numberArray1[1] = (Number) int1;
      assertEquals((-1390.0F), numberArray1[1].floatValue(), 0.01F);
      assertEquals((-1390.0), numberArray1[1].doubleValue(), 0.01D);
      assertEquals(-110, numberArray1[1].byteValue());
      assertEquals(-1390, numberArray1[1].shortValue());
      assertEquals(-1390, numberArray1[1].intValue());
      assertEquals((-1390L), numberArray1[1].longValue());
      assertNotNull(numberArray1[1]);
      
      numberArray1[2] = (Number) int0;
      assertEquals(0, numberArray1[2].intValue());
      assertEquals(0.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(0.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[2].byteValue());
      assertEquals(0L, numberArray1[2].longValue());
      assertEquals(0, numberArray1[2].shortValue());
      assertNotNull(numberArray1[2]);
      
      numberArray1[3] = (Number) int1;
      assertEquals((-1390.0F), numberArray1[3].floatValue(), 0.01F);
      assertEquals((-1390L), numberArray1[3].longValue());
      assertEquals(-110, numberArray1[3].byteValue());
      assertEquals((-1390.0), numberArray1[3].doubleValue(), 0.01D);
      assertEquals(-1390, numberArray1[3].intValue());
      assertEquals(-1390, numberArray1[3].shortValue());
      assertNotNull(numberArray1[3]);
      
      numberArray1[4] = (Number) int0;
      assertEquals(0, numberArray1[4].shortValue());
      assertEquals(0.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[4].intValue());
      assertEquals(0.0F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[4].longValue());
      assertEquals(0, numberArray1[4].byteValue());
      assertNotNull(numberArray1[4]);
      
      numberArray1[5] = (Number) int1;
      assertEquals((-1390.0), numberArray1[5].doubleValue(), 0.01D);
      assertEquals((-1390L), numberArray1[5].longValue());
      assertEquals((-1390.0F), numberArray1[5].floatValue(), 0.01F);
      assertEquals(-110, numberArray1[5].byteValue());
      assertEquals(-1390, numberArray1[5].intValue());
      assertEquals(-1390, numberArray1[5].shortValue());
      assertNotNull(numberArray1[5]);
      
      numberArray1[6] = (Number) int1;
      assertEquals(-1390, numberArray1[6].intValue());
      assertEquals(-110, numberArray1[6].byteValue());
      assertEquals((-1390L), numberArray1[6].longValue());
      assertEquals(-1390, numberArray1[6].shortValue());
      assertEquals((-1390.0), numberArray1[6].doubleValue(), 0.01D);
      assertEquals((-1390.0F), numberArray1[6].floatValue(), 0.01F);
      assertNotNull(numberArray1[6]);
      
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      numberArray1[7] = (Number) float0;
      assertEquals(0L, numberArray1[7].longValue());
      assertEquals(0.0, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[7].intValue());
      assertEquals(0.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(0, numberArray1[7].shortValue());
      assertEquals(0, numberArray1[7].byteValue());
      assertNotNull(numberArray1[7]);
      
      int int2 = ContainerEvent.CONTAINER_LAST;
      assertEquals(301, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      numberArray1[8] = (Number) int2;
      assertEquals(301.0F, numberArray1[8].floatValue(), 0.01F);
      assertEquals(301.0, numberArray1[8].doubleValue(), 0.01D);
      assertEquals(301, numberArray1[8].intValue());
      assertEquals(45, numberArray1[8].byteValue());
      assertEquals(301L, numberArray1[8].longValue());
      assertEquals(301, numberArray1[8].shortValue());
      assertNotNull(numberArray1[8]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) int1;
      assertEquals(-110, numberArray2[0].byteValue());
      assertEquals(-1390, numberArray2[0].intValue());
      assertEquals(-1390, numberArray2[0].shortValue());
      assertEquals((-1390.0), numberArray2[0].doubleValue(), 0.01D);
      assertEquals((-1390L), numberArray2[0].longValue());
      assertEquals((-1390.0F), numberArray2[0].floatValue(), 0.01F);
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) int1;
      assertEquals((-1390.0F), numberArray2[1].floatValue(), 0.01F);
      assertEquals(-1390, numberArray2[1].intValue());
      assertEquals(-110, numberArray2[1].byteValue());
      assertEquals((-1390L), numberArray2[1].longValue());
      assertEquals(-1390, numberArray2[1].shortValue());
      assertEquals((-1390.0), numberArray2[1].doubleValue(), 0.01D);
      assertNotNull(numberArray2[1]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      
      numberArray3[0] = (Number) int2;
      assertEquals(301.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(45, numberArray3[0].byteValue());
      assertEquals(301.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(301, numberArray3[0].shortValue());
      assertEquals(301, numberArray3[0].intValue());
      assertEquals(301L, numberArray3[0].longValue());
      assertNotNull(numberArray3[0]);
      
      numberArray3[1] = (Number) int2;
      assertEquals(301L, numberArray3[1].longValue());
      assertEquals(301, numberArray3[1].intValue());
      assertEquals(301.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(45, numberArray3[1].byteValue());
      assertEquals(301, numberArray3[1].shortValue());
      assertEquals(301.0F, numberArray3[1].floatValue(), 0.01F);
      assertNotNull(numberArray3[1]);
      
      numberArray3[2] = (Number) int0;
      assertEquals(0, numberArray3[2].byteValue());
      assertEquals(0, numberArray3[2].intValue());
      assertEquals(0.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(0L, numberArray3[2].longValue());
      assertEquals(0.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray3[2].shortValue());
      assertNotNull(numberArray3[2]);
      
      numberArray3[3] = (Number) int0;
      assertEquals(0.0F, numberArray3[3].floatValue(), 0.01F);
      assertEquals(0, numberArray3[3].byteValue());
      assertEquals(0.0, numberArray3[3].doubleValue(), 0.01D);
      assertEquals(0, numberArray3[3].shortValue());
      assertEquals(0L, numberArray3[3].longValue());
      assertEquals(0, numberArray3[3].intValue());
      assertNotNull(numberArray3[3]);
      
      numberArray3[4] = (Number) int1;
      assertEquals((-1390.0), numberArray3[4].doubleValue(), 0.01D);
      assertEquals(-110, numberArray3[4].byteValue());
      assertEquals((-1390.0F), numberArray3[4].floatValue(), 0.01F);
      assertEquals(-1390, numberArray3[4].shortValue());
      assertEquals((-1390L), numberArray3[4].longValue());
      assertEquals(-1390, numberArray3[4].intValue());
      assertNotNull(numberArray3[4]);
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int3 = 0;
      assertFalse(int3 == int2);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(categoryToPieDataset0);
      
      double double0 = 0.0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) float0, double0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, defaultPieDataset0.getItemCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      boolean boolean0 = false;
      Range range1 = DatasetUtilities.iterateToFindDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) list0, boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNull(range1);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test
  public void test34()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1390);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int1, (TimeZone) zoneInfo0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(-1391, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNotNull(dynamicTimeSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) dynamicTimeSeriesCollection0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(-1391, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertNull(range0);
      
      Number[][] numberArray0 = new Number[3][3];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) int0;
      assertEquals(0, numberArray1[0].shortValue());
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[0].longValue());
      assertNotNull(numberArray1[0]);
      
      numberArray1[1] = (Number) int1;
      assertEquals(-1390, numberArray1[1].intValue());
      assertEquals((-1390.0F), numberArray1[1].floatValue(), 0.01F);
      assertEquals((-1390L), numberArray1[1].longValue());
      assertEquals((-1390.0), numberArray1[1].doubleValue(), 0.01D);
      assertEquals(-110, numberArray1[1].byteValue());
      assertEquals(-1390, numberArray1[1].shortValue());
      assertNotNull(numberArray1[1]);
      
      numberArray1[2] = (Number) int0;
      assertEquals(0, numberArray1[2].byteValue());
      assertEquals(0.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[2].shortValue());
      assertEquals(0.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(0, numberArray1[2].intValue());
      assertEquals(0L, numberArray1[2].longValue());
      assertNotNull(numberArray1[2]);
      
      numberArray1[3] = (Number) int1;
      assertEquals((-1390.0F), numberArray1[3].floatValue(), 0.01F);
      assertEquals(-110, numberArray1[3].byteValue());
      assertEquals(-1390, numberArray1[3].shortValue());
      assertEquals((-1390L), numberArray1[3].longValue());
      assertEquals(-1390, numberArray1[3].intValue());
      assertEquals((-1390.0), numberArray1[3].doubleValue(), 0.01D);
      assertNotNull(numberArray1[3]);
      
      numberArray1[4] = (Number) int0;
      assertEquals(0L, numberArray1[4].longValue());
      assertEquals(0.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray1[4].floatValue(), 0.01F);
      assertEquals(0, numberArray1[4].byteValue());
      assertEquals(0, numberArray1[4].shortValue());
      assertEquals(0, numberArray1[4].intValue());
      assertNotNull(numberArray1[4]);
      
      numberArray1[2] = (Number) int1;
      assertEquals(-1390, numberArray1[2].shortValue());
      assertEquals((-1390L), numberArray1[2].longValue());
      assertEquals(-1390, numberArray1[2].intValue());
      assertEquals((-1390.0), numberArray1[2].doubleValue(), 0.01D);
      assertEquals((-1390.0F), numberArray1[2].floatValue(), 0.01F);
      assertEquals(-110, numberArray1[2].byteValue());
      assertNotNull(numberArray1[2]);
      
      numberArray1[6] = (Number) int1;
      assertEquals(-1390, numberArray1[6].intValue());
      assertEquals(-1390, numberArray1[6].shortValue());
      assertEquals((-1390.0F), numberArray1[6].floatValue(), 0.01F);
      assertEquals((-1390L), numberArray1[6].longValue());
      assertEquals(-110, numberArray1[6].byteValue());
      assertEquals((-1390.0), numberArray1[6].doubleValue(), 0.01D);
      assertNotNull(numberArray1[6]);
      
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      numberArray1[7] = (Number) float0;
      assertEquals(0.0, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[7].byteValue());
      assertEquals(0.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[7].longValue());
      assertEquals(0, numberArray1[7].intValue());
      assertEquals(0, numberArray1[7].shortValue());
      assertNotNull(numberArray1[7]);
      
      int int2 = ContainerEvent.CONTAINER_LAST;
      assertEquals(301, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      numberArray1[8] = (Number) int2;
      assertEquals(301, numberArray1[8].intValue());
      assertEquals(301L, numberArray1[8].longValue());
      assertEquals(301.0F, numberArray1[8].floatValue(), 0.01F);
      assertEquals(301, numberArray1[8].shortValue());
      assertEquals(45, numberArray1[8].byteValue());
      assertEquals(301.0, numberArray1[8].doubleValue(), 0.01D);
      assertNotNull(numberArray1[8]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[2];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) int1;
      assertEquals(-1390, numberArray2[0].shortValue());
      assertEquals(-1390, numberArray2[0].intValue());
      assertEquals((-1390.0), numberArray2[0].doubleValue(), 0.01D);
      assertEquals((-1390L), numberArray2[0].longValue());
      assertEquals((-1390.0F), numberArray2[0].floatValue(), 0.01F);
      assertEquals(-110, numberArray2[0].byteValue());
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) int1;
      assertEquals(-1390, numberArray2[1].shortValue());
      assertEquals((-1390.0F), numberArray2[1].floatValue(), 0.01F);
      assertEquals((-1390.0), numberArray2[1].doubleValue(), 0.01D);
      assertEquals((-1390L), numberArray2[1].longValue());
      assertEquals(-1390, numberArray2[1].intValue());
      assertEquals(-110, numberArray2[1].byteValue());
      assertNotNull(numberArray2[1]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[5];
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertNotSame(numberArray3, numberArray2);
      assertNotSame(numberArray3, numberArray1);
      
      numberArray3[0] = (Number) int2;
      assertEquals(301L, numberArray3[0].longValue());
      assertEquals(301.0, numberArray3[0].doubleValue(), 0.01D);
      assertEquals(301, numberArray3[0].shortValue());
      assertEquals(301, numberArray3[0].intValue());
      assertEquals(45, numberArray3[0].byteValue());
      assertEquals(301.0F, numberArray3[0].floatValue(), 0.01F);
      assertNotNull(numberArray3[0]);
      
      numberArray3[1] = (Number) int2;
      assertEquals(45, numberArray3[1].byteValue());
      assertEquals(301, numberArray3[1].intValue());
      assertEquals(301, numberArray3[1].shortValue());
      assertEquals(301L, numberArray3[1].longValue());
      assertEquals(301.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(301.0F, numberArray3[1].floatValue(), 0.01F);
      assertNotNull(numberArray3[1]);
      
      numberArray3[2] = (Number) int0;
      assertEquals(0, numberArray3[2].intValue());
      assertEquals(0, numberArray3[2].shortValue());
      assertEquals(0.0F, numberArray3[2].floatValue(), 0.01F);
      assertEquals(0L, numberArray3[2].longValue());
      assertEquals(0.0, numberArray3[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray3[2].byteValue());
      assertNotNull(numberArray3[2]);
      
      numberArray3[3] = (Number) int0;
      assertEquals(0, numberArray3[3].byteValue());
      assertEquals(0, numberArray3[3].shortValue());
      assertEquals(0.0F, numberArray3[3].floatValue(), 0.01F);
      assertEquals(0L, numberArray3[3].longValue());
      assertEquals(0, numberArray3[3].intValue());
      assertEquals(0.0, numberArray3[3].doubleValue(), 0.01D);
      assertNotNull(numberArray3[3]);
      
      numberArray3[4] = (Number) int1;
      assertEquals(-1390, numberArray3[4].shortValue());
      assertEquals(-110, numberArray3[4].byteValue());
      assertEquals((-1390.0), numberArray3[4].doubleValue(), 0.01D);
      assertEquals(-1390, numberArray3[4].intValue());
      assertEquals((-1390L), numberArray3[4].longValue());
      assertEquals((-1390.0F), numberArray3[4].floatValue(), 0.01F);
      assertNotNull(numberArray3[4]);
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      int int3 = 0;
      assertFalse(int3 == int2);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(categoryToPieDataset0);
      
      double double0 = 0.0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) float0, double0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultPieDataset0.getItemCount());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(defaultPieDataset0);
      
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNotNull(defaultIntervalXYDataset0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.iterateToFindDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) list0, boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNull(range1);
      
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test
  public void test35()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      String string0 = null;
      String string1 = "nj>tzS8n|Sh";
      double[][] doubleArray0 = new double[2][5];
      double[] doubleArray1 = new double[7];
      double double0 = 0.0;
      doubleArray1[0] = double0;
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[10];
      numberArray1[0] = (Number) double0;
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0L, numberArray1[0].longValue());
      assertEquals(0, numberArray1[0].shortValue());
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      assertNotNull(numberArray1[0]);
      
      numberArray1[1] = (Number) double0;
      assertEquals(0, numberArray1[1].shortValue());
      assertEquals(0L, numberArray1[1].longValue());
      assertEquals(0.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(0, numberArray1[1].byteValue());
      assertEquals(0.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[1].intValue());
      assertNotNull(numberArray1[1]);
      
      numberArray1[2] = (Number) doubleArray1[0];
      assertEquals(0.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[2].shortValue());
      assertEquals(0, numberArray1[2].byteValue());
      assertEquals(0L, numberArray1[2].longValue());
      assertEquals(0.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(0, numberArray1[2].intValue());
      assertNotNull(numberArray1[2]);
      
      numberArray1[3] = (Number) double0;
      assertEquals(0, numberArray1[3].shortValue());
      assertEquals(0L, numberArray1[3].longValue());
      assertEquals(0, numberArray1[3].intValue());
      assertEquals(0.0F, numberArray1[3].floatValue(), 0.01F);
      assertEquals(0, numberArray1[3].byteValue());
      assertEquals(0.0, numberArray1[3].doubleValue(), 0.01D);
      assertNotNull(numberArray1[3]);
      
      numberArray1[4] = (Number) double0;
      assertEquals(0, numberArray1[4].intValue());
      assertEquals(0, numberArray1[4].byteValue());
      assertEquals(0.0, numberArray1[4].doubleValue(), 0.01D);
      assertEquals(0L, numberArray1[4].longValue());
      assertEquals(0, numberArray1[4].shortValue());
      assertEquals(0.0F, numberArray1[4].floatValue(), 0.01F);
      assertNotNull(numberArray1[4]);
      
      numberArray1[5] = (Number) double0;
      assertEquals(0, numberArray1[5].shortValue());
      assertEquals(0, numberArray1[5].byteValue());
      assertEquals(0.0F, numberArray1[5].floatValue(), 0.01F);
      assertEquals(0, numberArray1[5].intValue());
      assertEquals(0L, numberArray1[5].longValue());
      assertEquals(0.0, numberArray1[5].doubleValue(), 0.01D);
      assertNotNull(numberArray1[5]);
      
      numberArray1[6] = (Number) double0;
      assertEquals(0L, numberArray1[6].longValue());
      assertEquals(0, numberArray1[6].intValue());
      assertEquals(0, numberArray1[6].shortValue());
      assertEquals(0.0F, numberArray1[6].floatValue(), 0.01F);
      assertEquals(0, numberArray1[6].byteValue());
      assertEquals(0.0, numberArray1[6].doubleValue(), 0.01D);
      assertNotNull(numberArray1[6]);
      
      numberArray1[7] = (Number) double0;
      assertEquals(0, numberArray1[7].byteValue());
      assertEquals(0, numberArray1[7].shortValue());
      assertEquals(0.0F, numberArray1[7].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[7].longValue());
      assertEquals(0, numberArray1[7].intValue());
      assertEquals(0.0, numberArray1[7].doubleValue(), 0.01D);
      assertNotNull(numberArray1[7]);
      
      int int0 = KeyEvent.VK_E;
      assertEquals(69, int0);
      
      numberArray1[8] = (Number) int0;
      assertEquals(69L, numberArray1[8].longValue());
      assertEquals(69, numberArray1[8].byteValue());
      assertEquals(69.0F, numberArray1[8].floatValue(), 0.01F);
      assertEquals(69.0, numberArray1[8].doubleValue(), 0.01D);
      assertEquals(69, numberArray1[8].shortValue());
      assertEquals(69, numberArray1[8].intValue());
      assertNotNull(numberArray1[8]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      Number[] numberArray2 = new Number[5];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) doubleArray1[0];
      assertEquals(0L, numberArray2[0].longValue());
      assertEquals(0.0F, numberArray2[0].floatValue(), 0.01F);
      assertEquals(0, numberArray2[0].byteValue());
      assertEquals(0, numberArray2[0].intValue());
      assertEquals(0.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray2[0].shortValue());
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) doubleArray1[0];
      assertEquals(0, numberArray2[1].byteValue());
      assertEquals(0, numberArray2[1].intValue());
      assertEquals(0.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(0, numberArray2[1].shortValue());
      assertEquals(0.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(0L, numberArray2[1].longValue());
      assertNotNull(numberArray2[1]);
      
      numberArray2[2] = (Number) double0;
      assertEquals(0, numberArray2[2].intValue());
      assertEquals(0.0, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(0L, numberArray2[2].longValue());
      assertEquals(0, numberArray2[2].shortValue());
      assertEquals(0, numberArray2[2].byteValue());
      assertEquals(0.0F, numberArray2[2].floatValue(), 0.01F);
      assertNotNull(numberArray2[2]);
      
      numberArray2[3] = (Number) doubleArray1[0];
      assertEquals(0.0F, numberArray2[3].floatValue(), 0.01F);
      assertEquals(0L, numberArray2[3].longValue());
      assertEquals(0, numberArray2[3].shortValue());
      assertEquals(0.0, numberArray2[3].doubleValue(), 0.01D);
      assertEquals(0, numberArray2[3].intValue());
      assertEquals(0, numberArray2[3].byteValue());
      assertNotNull(numberArray2[3]);
      
      numberArray2[4] = (Number) int0;
      assertEquals(69, numberArray2[4].shortValue());
      assertEquals(69, numberArray2[4].byteValue());
      assertEquals(69.0F, numberArray2[4].floatValue(), 0.01F);
      assertEquals(69L, numberArray2[4].longValue());
      assertEquals(69, numberArray2[4].intValue());
      assertEquals(69.0, numberArray2[4].doubleValue(), 0.01D);
      assertNotNull(numberArray2[4]);
      
      numberArray0[1] = numberArray2;
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray3 = new Number[2];
      assertFalse(numberArray3.equals((Object)numberArray1));
      assertFalse(numberArray3.equals((Object)numberArray2));
      assertNotSame(numberArray3, numberArray1);
      assertNotSame(numberArray3, numberArray2);
      
      numberArray3[0] = (Number) int0;
      assertEquals(69L, numberArray3[0].longValue());
      assertEquals(69, numberArray3[0].shortValue());
      assertEquals(69, numberArray3[0].byteValue());
      assertEquals(69, numberArray3[0].intValue());
      assertEquals(69.0F, numberArray3[0].floatValue(), 0.01F);
      assertEquals(69.0, numberArray3[0].doubleValue(), 0.01D);
      assertNotNull(numberArray3[0]);
      
      numberArray3[1] = (Number) int0;
      assertEquals(69, numberArray3[1].intValue());
      assertEquals(69.0, numberArray3[1].doubleValue(), 0.01D);
      assertEquals(69.0F, numberArray3[1].floatValue(), 0.01F);
      assertEquals(69, numberArray3[1].byteValue());
      assertEquals(69, numberArray3[1].shortValue());
      assertEquals(69L, numberArray3[1].longValue());
      assertNotNull(numberArray3[1]);
      
      numberArray0[2] = numberArray3;
      assertNotNull(numberArray0[2]);
      
      Number[] numberArray4 = new Number[7];
      assertFalse(numberArray4.equals((Object)numberArray1));
      assertFalse(numberArray4.equals((Object)numberArray3));
      assertFalse(numberArray4.equals((Object)numberArray2));
      assertNotSame(numberArray4, numberArray1);
      assertNotSame(numberArray4, numberArray3);
      assertNotSame(numberArray4, numberArray2);
      
      numberArray4[0] = (Number) double0;
      assertEquals(0L, numberArray4[0].longValue());
      assertEquals(0, numberArray4[0].intValue());
      assertEquals(0, numberArray4[0].shortValue());
      assertEquals(0, numberArray4[0].byteValue());
      assertEquals(0.0F, numberArray4[0].floatValue(), 0.01F);
      assertEquals(0.0, numberArray4[0].doubleValue(), 0.01D);
      assertNotNull(numberArray4[0]);
      
      numberArray4[1] = (Number) int0;
      assertEquals(69.0F, numberArray4[1].floatValue(), 0.01F);
      assertEquals(69, numberArray4[1].byteValue());
      assertEquals(69, numberArray4[1].shortValue());
      assertEquals(69.0, numberArray4[1].doubleValue(), 0.01D);
      assertEquals(69L, numberArray4[1].longValue());
      assertEquals(69, numberArray4[1].intValue());
      assertNotNull(numberArray4[1]);
      
      numberArray4[2] = (Number) doubleArray1[0];
      assertEquals(0, numberArray4[2].byteValue());
      assertEquals(0L, numberArray4[2].longValue());
      assertEquals(0.0F, numberArray4[2].floatValue(), 0.01F);
      assertEquals(0, numberArray4[2].shortValue());
      assertEquals(0, numberArray4[2].intValue());
      assertEquals(0.0, numberArray4[2].doubleValue(), 0.01D);
      assertNotNull(numberArray4[2]);
      
      numberArray4[3] = (Number) double0;
      assertEquals(0.0, numberArray4[3].doubleValue(), 0.01D);
      assertEquals(0, numberArray4[3].byteValue());
      assertEquals(0, numberArray4[3].shortValue());
      assertEquals(0, numberArray4[3].intValue());
      assertEquals(0.0F, numberArray4[3].floatValue(), 0.01F);
      assertEquals(0L, numberArray4[3].longValue());
      assertNotNull(numberArray4[3]);
      
      float float0 = Component.TOP_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      numberArray4[4] = (Number) float0;
      assertEquals(0L, numberArray4[4].longValue());
      assertEquals(0, numberArray4[4].byteValue());
      assertEquals(0.0, numberArray4[4].doubleValue(), 0.01D);
      assertEquals(0, numberArray4[4].shortValue());
      assertEquals(0.0F, numberArray4[4].floatValue(), 0.01F);
      assertEquals(0, numberArray4[4].intValue());
      assertNotNull(numberArray4[4]);
      
      numberArray4[5] = (Number) doubleArray1[0];
      assertEquals(0, numberArray4[5].byteValue());
      assertEquals(0.0F, numberArray4[5].floatValue(), 0.01F);
      assertEquals(0L, numberArray4[5].longValue());
      assertEquals(0.0, numberArray4[5].doubleValue(), 0.01D);
      assertEquals(0, numberArray4[5].shortValue());
      assertEquals(0, numberArray4[5].intValue());
      assertNotNull(numberArray4[5]);
      
      numberArray4[6] = (Number) int0;
      assertEquals(69.0, numberArray4[6].doubleValue(), 0.01D);
      assertEquals(69L, numberArray4[6].longValue());
      assertEquals(69, numberArray4[6].shortValue());
      assertEquals(69, numberArray4[6].intValue());
      assertEquals(69, numberArray4[6].byteValue());
      assertEquals(69.0F, numberArray4[6].floatValue(), 0.01F);
      assertNotNull(numberArray4[6]);
      
      numberArray0[3] = numberArray4;
      assertNotNull(numberArray0[3]);
      
      Number[] numberArray5 = new Number[5];
      assertFalse(numberArray5.equals((Object)numberArray4));
      assertFalse(numberArray5.equals((Object)numberArray1));
      assertFalse(numberArray5.equals((Object)numberArray3));
      assertFalse(numberArray5.equals((Object)numberArray2));
      assertNotSame(numberArray5, numberArray4);
      assertNotSame(numberArray5, numberArray1);
      assertNotSame(numberArray5, numberArray3);
      assertNotSame(numberArray5, numberArray2);
      
      numberArray5[0] = (Number) double0;
      assertEquals(0, numberArray5[0].byteValue());
      assertEquals(0L, numberArray5[0].longValue());
      assertEquals(0.0, numberArray5[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray5[0].intValue());
      assertEquals(0, numberArray5[0].shortValue());
      assertEquals(0.0F, numberArray5[0].floatValue(), 0.01F);
      assertNotNull(numberArray5[0]);
      
      numberArray5[1] = (Number) float0;
      assertEquals(0, numberArray5[1].shortValue());
      assertEquals(0, numberArray5[1].intValue());
      assertEquals(0.0F, numberArray5[1].floatValue(), 0.01F);
      assertEquals(0L, numberArray5[1].longValue());
      assertEquals(0, numberArray5[1].byteValue());
      assertEquals(0.0, numberArray5[1].doubleValue(), 0.01D);
      assertNotNull(numberArray5[1]);
      
      numberArray5[2] = (Number) int0;
      assertEquals(69L, numberArray5[2].longValue());
      assertEquals(69, numberArray5[2].byteValue());
      assertEquals(69.0, numberArray5[2].doubleValue(), 0.01D);
      assertEquals(69, numberArray5[2].intValue());
      assertEquals(69, numberArray5[2].shortValue());
      assertEquals(69.0F, numberArray5[2].floatValue(), 0.01F);
      assertNotNull(numberArray5[2]);
      
      numberArray5[3] = (Number) doubleArray1[0];
      assertEquals(0, numberArray5[3].intValue());
      assertEquals(0.0, numberArray5[3].doubleValue(), 0.01D);
      assertEquals(0.0F, numberArray5[3].floatValue(), 0.01F);
      assertEquals(0L, numberArray5[3].longValue());
      assertEquals(0, numberArray5[3].shortValue());
      assertEquals(0, numberArray5[3].byteValue());
      assertNotNull(numberArray5[3]);
      
      numberArray5[4] = (Number) doubleArray1[0];
      assertEquals(0, numberArray5[4].shortValue());
      assertEquals(0, numberArray5[4].intValue());
      assertEquals(0.0F, numberArray5[4].floatValue(), 0.01F);
      assertEquals(0, numberArray5[4].byteValue());
      assertEquals(0.0, numberArray5[4].doubleValue(), 0.01D);
      assertEquals(0L, numberArray5[4].longValue());
      assertNotNull(numberArray5[4]);
      
      numberArray0[4] = numberArray5;
      assertNotNull(numberArray0[4]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNotNull(list0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, boolean0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNull(range0);
      
      double double1 = Double.POSITIVE_INFINITY;
      doubleArray1[1] = double1;
      double double2 = (-2926.9394595580798);
      doubleArray1[2] = double2;
      double double3 = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = double3;
      double double4 = 2179.298;
      doubleArray1[4] = double4;
      double double5 = 1.0;
      doubleArray1[5] = double5;
      double double6 = 1309.7101;
      doubleArray1[6] = double6;
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      Range range1 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0);
      assertEquals(0.0, range1.getCentralValue(), 0.01D);
      assertEquals(0.0, range1.getUpperBound(), 0.01D);
      assertEquals(0.0, range1.getLength(), 0.01D);
      assertEquals(0.0, range1.getLowerBound(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(range1);
      
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[3];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = double3;
      doubleArray2[1] = double5;
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultXYDataset0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      doubleArray2[2] = double4;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string1, doubleArray0);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean2 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test
  public void test36()  throws Throwable  {
      Number[][] numberArray0 = new Number[4][5];
      Number[] numberArray1 = new Number[6];
      int int0 = Calendar.WEEK_OF_YEAR;
      assertEquals(3, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(3, numberArray1[0].byteValue());
      assertEquals(3, numberArray1[0].shortValue());
      assertEquals(3.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(3, numberArray1[0].intValue());
      assertEquals(3.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(3L, numberArray1[0].longValue());
      assertNotNull(numberArray1[0]);
      
      int int1 = DateFormat.TIMEZONE_FIELD;
      assertEquals(17, int1);
      assertFalse(int1 == int0);
      
      numberArray1[1] = (Number) int1;
      assertEquals(17, numberArray1[1].shortValue());
      assertEquals(17.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(17, numberArray1[1].byteValue());
      assertEquals(17, numberArray1[1].intValue());
      assertEquals(17.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(17L, numberArray1[1].longValue());
      assertNotNull(numberArray1[1]);
      
      int int2 = SwingConstants.NEXT;
      assertEquals(12, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      numberArray1[2] = (Number) int2;
      assertEquals(12L, numberArray1[2].longValue());
      assertEquals(12.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(12, numberArray1[2].byteValue());
      assertEquals(12, numberArray1[2].intValue());
      assertEquals(12, numberArray1[2].shortValue());
      assertEquals(12.0, numberArray1[2].doubleValue(), 0.01D);
      assertNotNull(numberArray1[2]);
      
      int int3 = SwingConstants.TOP;
      assertEquals(1, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      numberArray1[3] = (Number) int3;
      assertEquals(1, numberArray1[3].shortValue());
      assertEquals(1, numberArray1[3].intValue());
      assertEquals(1.0, numberArray1[3].doubleValue(), 0.01D);
      assertEquals(1.0F, numberArray1[3].floatValue(), 0.01F);
      assertEquals(1L, numberArray1[3].longValue());
      assertEquals(1, numberArray1[3].byteValue());
      assertNotNull(numberArray1[3]);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertFalse(integer0.equals((Object)int3));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      
      int int4 = KeyEvent.VK_DECIMAL;
      assertEquals(110, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      
      numberArray1[5] = (Number) int4;
      assertEquals(110, numberArray1[5].intValue());
      assertEquals(110.0F, numberArray1[5].floatValue(), 0.01F);
      assertEquals(110L, numberArray1[5].longValue());
      assertEquals(110, numberArray1[5].byteValue());
      assertEquals(110, numberArray1[5].shortValue());
      assertEquals(110.0, numberArray1[5].doubleValue(), 0.01D);
      assertNotNull(numberArray1[5]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      numberArray0[1] = numberArray0[0];
      assertNotNull(numberArray0[1]);
      
      Number[] numberArray2 = new Number[4];
      assertFalse(numberArray2.equals((Object)numberArray1));
      assertNotSame(numberArray2, numberArray1);
      
      numberArray2[0] = (Number) integer0;
      assertEquals(-56, numberArray2[0].byteValue());
      assertEquals(200, numberArray2[0].shortValue());
      assertEquals(200L, numberArray2[0].longValue());
      assertEquals(200, numberArray2[0].intValue());
      assertEquals(200.0, numberArray2[0].doubleValue(), 0.01D);
      assertEquals(200.0F, numberArray2[0].floatValue(), 0.01F);
      assertNotNull(numberArray2[0]);
      
      numberArray2[1] = (Number) int4;
      assertEquals(110, numberArray2[1].shortValue());
      assertEquals(110L, numberArray2[1].longValue());
      assertEquals(110.0, numberArray2[1].doubleValue(), 0.01D);
      assertEquals(110.0F, numberArray2[1].floatValue(), 0.01F);
      assertEquals(110, numberArray2[1].byteValue());
      assertEquals(110, numberArray2[1].intValue());
      assertNotNull(numberArray2[1]);
      
      numberArray2[2] = (Number) int0;
      assertEquals(3L, numberArray2[2].longValue());
      assertEquals(3, numberArray2[2].shortValue());
      assertEquals(3, numberArray2[2].intValue());
      assertEquals(3.0F, numberArray2[2].floatValue(), 0.01F);
      assertEquals(3.0, numberArray2[2].doubleValue(), 0.01D);
      assertEquals(3, numberArray2[2].byteValue());
      assertNotNull(numberArray2[2]);
      
      numberArray2[3] = (Number) int1;
      assertEquals(17L, numberArray2[3].longValue());
      assertEquals(17, numberArray2[3].shortValue());
      assertEquals(17, numberArray2[3].intValue());
      assertEquals(17, numberArray2[3].byteValue());
      assertEquals(17.0, numberArray2[3].doubleValue(), 0.01D);
      assertEquals(17.0F, numberArray2[3].floatValue(), 0.01F);
      assertNotNull(numberArray2[3]);
      
      numberArray0[2] = numberArray2;
      assertNotNull(numberArray0[2]);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(xYTaskDataset0);
      
      TaskSeriesCollection taskSeriesCollection1 = xYTaskDataset0.getTasks();
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotNull(taskSeriesCollection1);
      
      int int5 = (-2932);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection1, int5, int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int5);
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(12, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-2932, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotNull(slidingGanttCategoryDataset0);
      
      TaskSeriesCollection taskSeriesCollection2 = (TaskSeriesCollection)slidingGanttCategoryDataset0.getUnderlyingDataset();
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int5);
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertEquals(0, taskSeriesCollection2.getSeriesCount());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(12, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-2932, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertSame(taskSeriesCollection2, taskSeriesCollection1);
      assertSame(taskSeriesCollection2, taskSeriesCollection0);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection1, taskSeriesCollection2);
      assertSame(taskSeriesCollection0, taskSeriesCollection2);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNotNull(taskSeriesCollection2);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) taskSeriesCollection2, boolean0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int5);
      assertEquals(0, taskSeriesCollection2.getRowCount());
      assertEquals(0, taskSeriesCollection2.getSeriesCount());
      assertEquals(0, taskSeriesCollection2.getColumnCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection1.getRowCount());
      assertEquals(0, taskSeriesCollection1.getSeriesCount());
      assertEquals(0, taskSeriesCollection1.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(12, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-2932, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertSame(taskSeriesCollection2, taskSeriesCollection1);
      assertSame(taskSeriesCollection2, taskSeriesCollection0);
      assertSame(taskSeriesCollection1, taskSeriesCollection0);
      assertSame(taskSeriesCollection1, taskSeriesCollection2);
      assertSame(taskSeriesCollection0, taskSeriesCollection2);
      assertSame(taskSeriesCollection0, taskSeriesCollection1);
      assertNull(range0);
      
      numberArray0[3] = numberArray1;
      assertNotNull(numberArray0[3]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, keyToGroupMap0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
      }
  }

  @Test
  public void test37()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      int int0 = 0;
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>(int0);
      assertEquals(true, vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = "";
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) int0;
      double double0 = 2322.1643;
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = double0;
      double double1 = (-1364.66);
      doubleArray2[1] = double1;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      doubleArray2[6] = (double) int0;
      doubleArray2[7] = (double) int0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      doubleArray3[0] = double0;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[16];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      
      doubleArray4[0] = double0;
      doubleArray4[1] = (double) int0;
      doubleArray0[3] = doubleArray2;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray2);
      
      doubleArray5[0] = double0;
      doubleArray2[2] = double1;
      doubleArray5[2] = double0;
      doubleArray5[3] = (double) int0;
      doubleArray5[4] = double1;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray1);
      
      doubleArray6[0] = double1;
      double double2 = 0.0;
      doubleArray6[1] = double2;
      doubleArray6[2] = (double) int0;
      doubleArray6[3] = (double) int0;
      doubleArray6[4] = (double) int0;
      doubleArray6[5] = double1;
      doubleArray6[6] = double0;
      doubleArray4[10] = (double) int0;
      double[] doubleArray7 = new double[10];
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertNotSame(doubleArray7, doubleArray4);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray1);
      
      doubleArray7[0] = (double) int0;
      doubleArray7[1] = double1;
      doubleArray7[2] = double0;
      doubleArray7[3] = (double) int0;
      doubleArray7[4] = double0;
      doubleArray7[5] = double1;
      doubleArray7[6] = double0;
      doubleArray7[7] = double1;
      doubleArray7[8] = double1;
      doubleArray1[1] = double1;
      doubleArray0[6] = doubleArray7;
      assertNotNull(doubleArray0[6]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, boolean0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, (List) vector0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
      }
  }

  @Test
  public void test38()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNotNull(defaultXYZDataset0);
      
      int int0 = 0;
      Vector<YIntervalSeriesCollection> vector0 = new Vector<YIntervalSeriesCollection>(int0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertEquals(true, vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = "";
      double[][] doubleArray0 = new double[7][3];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) int0;
      double double0 = 2322.1643;
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[8];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = double0;
      double double1 = (-1364.66);
      doubleArray2[1] = double1;
      doubleArray2[2] = double0;
      doubleArray2[3] = double0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      doubleArray2[6] = (double) int0;
      doubleArray2[7] = (double) int0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[1];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      doubleArray3[0] = double0;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[16];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      
      doubleArray4[0] = double0;
      doubleArray4[1] = (double) int0;
      doubleArray0[3] = doubleArray2;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[5];
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      
      doubleArray5[0] = double0;
      doubleArray2[2] = double1;
      doubleArray5[2] = double0;
      doubleArray5[3] = (double) int0;
      doubleArray5[4] = double1;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray3);
      
      doubleArray6[0] = double1;
      double double2 = 0.0;
      doubleArray6[1] = double2;
      doubleArray6[2] = (double) int0;
      doubleArray6[3] = (double) int0;
      doubleArray6[4] = (double) int0;
      doubleArray6[5] = double1;
      doubleArray6[6] = double0;
      doubleArray4[10] = (double) int0;
      doubleArray0[5] = doubleArray6;
      assertNotNull(doubleArray0[5]);
      
      double[] doubleArray7 = new double[10];
      assertFalse(doubleArray7.equals((Object)doubleArray6));
      assertFalse(doubleArray7.equals((Object)doubleArray2));
      assertFalse(doubleArray7.equals((Object)doubleArray3));
      assertFalse(doubleArray7.equals((Object)doubleArray5));
      assertFalse(doubleArray7.equals((Object)doubleArray1));
      assertFalse(doubleArray7.equals((Object)doubleArray4));
      assertNotSame(doubleArray7, doubleArray6);
      assertNotSame(doubleArray7, doubleArray2);
      assertNotSame(doubleArray7, doubleArray3);
      assertNotSame(doubleArray7, doubleArray5);
      assertNotSame(doubleArray7, doubleArray1);
      assertNotSame(doubleArray7, doubleArray4);
      
      doubleArray7[0] = (double) int0;
      doubleArray7[1] = double1;
      doubleArray7[2] = double0;
      doubleArray7[3] = (double) int0;
      doubleArray7[4] = double0;
      doubleArray7[5] = double1;
      doubleArray7[6] = double0;
      doubleArray7[7] = double1;
      doubleArray7[8] = double1;
      doubleArray1[1] = double1;
      doubleArray0[6] = doubleArray7;
      assertNotNull(doubleArray0[6]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, boolean0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertNull(range0);
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultXYZDataset0, (List) vector0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      yIntervalSeriesCollection0.validateObject();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      float float0 = Component.RIGHT_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) float0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(range0);
      
      int int0 = 0;
      int int1 = 1834;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1834, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range1 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1834, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range1);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(xYSeriesCollection0);
      
      List list1 = xYSeriesCollection0.getSeries();
      assertTrue(list1.equals((Object)list0));
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      boolean boolean1 = true;
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) list1, boolean1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list1, list0);
      assertNull(range2);
      
      int int2 = 1934;
      // Undeclared exception!
      try {
        double double0 = yIntervalSeriesCollection0.getStartXValue(int2, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1934, Size: 0
         //
      }
  }

  @Test
  public void test40()  throws Throwable  {
      YIntervalSeriesCollection yIntervalSeriesCollection0 = new YIntervalSeriesCollection();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(yIntervalSeriesCollection0);
      
      yIntervalSeriesCollection0.validateObject();
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = 0;
      int int1 = 1854;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1854, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(slidingGanttCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1854, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNull(range0);
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertNotNull(xYSeriesCollection0);
      
      List list0 = xYSeriesCollection0.getSeries();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) yIntervalSeriesCollection0, (List) list0, boolean0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, yIntervalSeriesCollection0.getSeriesCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(range1);
      
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, boolean0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertNull(range2);
      
      int int2 = 1934;
      // Undeclared exception!
      try {
        double double0 = yIntervalSeriesCollection0.getStartXValue(int2, int2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1934, Size: 0
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      int int0 = 0;
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, (List) list0, boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNull(range0);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range1 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertNull(range1);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset1 = new DefaultKeyedValues2DDataset();
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertEquals(0, defaultKeyedValues2DDataset1.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset1.getColumnCount());
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      assertNotNull(defaultKeyedValues2DDataset1);
      
      Range range2 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultKeyedValues2DDataset1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertEquals(0, defaultKeyedValues2DDataset1.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset1.getColumnCount());
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      assertNull(range2);
      
      boolean boolean1 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultKeyedValues2DDataset1);
      assertTrue(boolean1);
      assertTrue(defaultKeyedValues2DDataset1.equals((Object)defaultKeyedValues2DDataset0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultKeyedValues2DDataset1.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset1.getColumnCount());
      assertNotSame(defaultKeyedValues2DDataset1, defaultKeyedValues2DDataset0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      String string0 = ")1p.Gz";
      String string1 = "1|CJ(_(?PnMM9b";
      assertNotSame(string1, string0);
      
      String string2 = "KiEKX.o\\b$R`Uef2";
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      String string3 = "";
      assertNotSame(string3, string1);
      assertNotSame(string3, string0);
      assertNotSame(string3, string2);
      
      JDBCCategoryDataset jDBCCategoryDataset0 = null;
      try {
        jDBCCategoryDataset0 = new JDBCCategoryDataset(string0, string1, string2, string3);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Class '1|CJ(_(?PnMM9b.class' should be in target project, but could not be found!
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      int int0 = 0;
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) xIntervalSeriesCollection0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(number0);
      
      int int1 = 1664;
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, boolean0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
      
      Class<Integer> class0 = Integer.class;
      int int2 = (-2490);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int2, int2, int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2490,MONTH=-2490,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2490,MONTH=-2490,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(date0);
      
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int1;
      doubleArray1[1] = (double) int2;
      doubleArray1[2] = (double) int0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[9];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = (double) int0;
      doubleArray2[1] = (double) int2;
      doubleArray2[2] = (double) int0;
      doubleArray2[3] = (double) int1;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      doubleArray2[6] = (double) int0;
      doubleArray2[7] = (double) int2;
      doubleArray2[8] = (double) int0;
      double[] doubleArray3 = new double[10];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      doubleArray3[0] = (double) int0;
      double double0 = 2.0;
      doubleArray3[1] = double0;
      doubleArray3[2] = (double) int0;
      doubleArray3[4] = doubleArray1[2];
      doubleArray3[5] = (double) int1;
      doubleArray3[6] = (double) int2;
      doubleArray3[7] = (double) int1;
      doubleArray3[8] = (double) int2;
      doubleArray3[9] = (double) int0;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[4];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      
      doubleArray4[0] = (double) int0;
      doubleArray1[2] = (double) int1;
      doubleArray4[2] = (double) int2;
      doubleArray4[3] = (double) int0;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      
      doubleArray5[0] = double0;
      doubleArray5[1] = (double) int0;
      doubleArray5[2] = (double) int2;
      doubleArray5[3] = (double) int0;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray6 = new double[7];
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray5);
      
      doubleArray6[0] = double0;
      doubleArray6[1] = (double) int1;
      doubleArray6[2] = doubleArray2[7];
      doubleArray6[3] = (double) int0;
      doubleArray6[4] = (double) int1;
      doubleArray6[5] = (double) int2;
      double double1 = (-2.147483648E9);
      doubleArray6[6] = double1;
      doubleArray0[5] = doubleArray6;
      assertNotNull(doubleArray0[5]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range1 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4154.0, range1.getLength(), 0.01D);
      assertEquals((-2490.0), range1.getLowerBound(), 0.01D);
      assertEquals(1664.0, range1.getUpperBound(), 0.01D);
      assertEquals((-413.0), range1.getCentralValue(), 0.01D);
      assertNotNull(range1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2490,MONTH=-2490,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNotNull(zoneInfo0);
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2490,MONTH=-2490,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertNull(regularTimePeriod0);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = null;
      try {
        dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int1, regularTimePeriod0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test43()  throws Throwable  {
      String string0 = "YR[zNg7\\o/Y1#txDGDM";
      Number[][] numberArray0 = new Number[10][3];
      Number[] numberArray1 = new Number[2];
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(1, numberArray1[0].shortValue());
      assertEquals(1.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(1, numberArray1[0].byteValue());
      assertEquals(1L, numberArray1[0].longValue());
      assertEquals(1, numberArray1[0].intValue());
      assertEquals(1.0, numberArray1[0].doubleValue(), 0.01D);
      assertNotNull(numberArray1[0]);
      
      numberArray1[1] = (Number) int0;
      assertEquals(1, numberArray1[1].intValue());
      assertEquals(1L, numberArray1[1].longValue());
      assertEquals(1.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(1.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(1, numberArray1[1].byteValue());
      assertEquals(1, numberArray1[1].shortValue());
      assertNotNull(numberArray1[1]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(2.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) string0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = false;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, boolean0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) simpleHistogramDataset0);
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertNull(number0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean1 = true;
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, int0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int1 = 292;
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, int1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int1 == int0);
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "YR[zNg7\\o/Y1#txDGDM";
      Number[][] numberArray0 = new Number[10][3];
      Number[] numberArray1 = new Number[2];
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(1.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(1, numberArray1[0].intValue());
      assertEquals(1.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(1, numberArray1[0].shortValue());
      assertEquals(1L, numberArray1[0].longValue());
      assertEquals(1, numberArray1[0].byteValue());
      assertNotNull(numberArray1[0]);
      
      int int1 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      numberArray1[1] = (Number) int1;
      assertEquals(2, numberArray1[1].shortValue());
      assertEquals(2L, numberArray1[1].longValue());
      assertEquals(2.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[1].byteValue());
      assertEquals(2, numberArray1[1].intValue());
      assertEquals(2.0F, numberArray1[1].floatValue(), 0.01F);
      assertNotNull(numberArray1[1]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(3.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.5, range0.getCentralValue(), 0.01D);
      assertEquals(3.0, range0.getLength(), 0.01D);
      assertNotNull(range0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) string0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNotNull(simpleHistogramDataset0);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) simpleHistogramDataset0, boolean0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) simpleHistogramDataset0);
      assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
      assertEquals(1, simpleHistogramDataset0.getSeriesCount());
      assertNull(number0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean1 = true;
      Range range2 = DatasetUtilities.findRangeBounds((XYDataset) xIntervalSeriesCollection0, boolean1);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(range2);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, int1);
      assertFalse(int1 == int0);
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      int int2 = 292;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
  }

  @Test
  public void test45()  throws Throwable  {
      double double0 = 504.32990608013836;
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultKeyedValuesDataset0, (Comparable) double0, double0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset((KeyedValues) defaultPieDataset0);
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      
      int int0 = (-2267);
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) double0, double0, int0);
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultPieDataset1.getItemCount());
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotNull(defaultPieDataset2);
      
      double double1 = 0.0;
      NormalDistributionFunction2D normalDistributionFunction2D0 = null;
      try {
        normalDistributionFunction2D0 = new NormalDistributionFunction2D(double0, double1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'std' > 0.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      double double0 = 0.0;
      double double1 = 0.0;
      defaultCategoryDataset0.setValue(double0, (Comparable) double0, (Comparable) double1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      LineFunction2D lineFunction2D0 = new LineFunction2D(double0, double1);
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01D);
      assertNotNull(lineFunction2D0);
      
      double double2 = (-2903.069467);
      double double3 = (-316.0);
      int int0 = 999;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D((Function2D) lineFunction2D0, double2, double3, int0, (Comparable) int0);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertTrue(double1 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double0);
      assertFalse(double3 == double2);
      assertFalse(double2 == double1);
      assertFalse(double2 == double0);
      assertFalse(double2 == double3);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01D);
      assertNotNull(xYSeriesCollection0);
      
      String string0 = "Null 'rowKey' argument.";
      String string1 = "D-Il}\\dmGd%";
      assertNotSame(string1, string0);
      
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = double3;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = double1;
      doubleArray1[3] = double2;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      doubleArray1[6] = double3;
      doubleArray1[7] = double3;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      double double4 = 0.0;
      doubleArray2[0] = double4;
      doubleArray2[1] = (double) int0;
      doubleArray2[2] = double2;
      doubleArray2[3] = double0;
      doubleArray2[4] = double3;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[10];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      doubleArray3[0] = double2;
      doubleArray3[1] = double2;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = double4;
      doubleArray3[4] = double0;
      double double5 = 1.0;
      doubleArray3[5] = double5;
      doubleArray3[6] = double3;
      doubleArray3[7] = double1;
      doubleArray3[9] = double4;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray1);
      assertNotSame(doubleArray4, doubleArray3);
      
      doubleArray4[0] = (double) int0;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      
      doubleArray5[0] = double5;
      doubleArray5[1] = double5;
      double double6 = (-1.7976931348623157E308);
      doubleArray5[2] = double6;
      doubleArray5[3] = double2;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray4);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      
      doubleArray6[0] = double5;
      doubleArray6[1] = double5;
      doubleArray6[2] = double4;
      doubleArray6[3] = (double) int0;
      doubleArray6[4] = double0;
      doubleArray6[5] = double3;
      doubleArray6[6] = double1;
      doubleArray6[7] = double3;
      doubleArray0[5] = doubleArray6;
      assertNotNull(doubleArray0[5]);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      Double double7 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double7, 0.01D);
      assertFalse(double7.equals((Object)double3));
      assertFalse(double7.equals((Object)double2));
      assertTrue(double7.equals((Object)double4));
      assertFalse(double7.equals((Object)double5));
      assertTrue(double7.equals((Object)double1));
      assertFalse(double7.equals((Object)double6));
      assertTrue(double7.equals((Object)double0));
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      
      Double double8 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double8, 0.01D);
      assertTrue(double8.equals((Object)double1));
      assertTrue(double8.equals((Object)double4));
      assertTrue(double8.equals((Object)double7));
      assertTrue(double8.equals((Object)double0));
      assertFalse(double8.equals((Object)double2));
      assertFalse(double8.equals((Object)double6));
      assertFalse(double8.equals((Object)double3));
      assertFalse(double8.equals((Object)double5));
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertNotSame(double8, double7);
  }

  @Test
  public void test47()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      double double0 = 0.0;
      double double1 = 0.0;
      LineFunction2D lineFunction2D0 = new LineFunction2D(double0, double1);
      assertTrue(double1 == double0);
      assertTrue(double0 == double1);
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01D);
      assertNotNull(lineFunction2D0);
      
      double double2 = (-2903.069467);
      double double3 = (-316.0);
      int int0 = 999;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D((Function2D) lineFunction2D0, double2, double3, int0, (Comparable) int0);
      assertTrue(double1 == double0);
      assertFalse(double1 == double3);
      assertFalse(double1 == double2);
      assertFalse(double3 == double0);
      assertFalse(double3 == double1);
      assertFalse(double3 == double2);
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(double2 == double3);
      assertTrue(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(double0 == double3);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.0, lineFunction2D0.getIntercept(), 0.01D);
      assertEquals(0.0, lineFunction2D0.getSlope(), 0.01D);
      assertNotNull(xYSeriesCollection0);
      
      String string0 = "Null 'rowKey' argument.";
      String string1 = "D-Il}\\dmGd%";
      assertNotSame(string1, string0);
      
      double[][] doubleArray0 = new double[6][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = double3;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = double1;
      doubleArray1[3] = double2;
      doubleArray1[4] = double0;
      doubleArray1[5] = double0;
      doubleArray1[6] = double3;
      doubleArray1[7] = double3;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[5];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      double double4 = 0.0;
      doubleArray2[0] = double4;
      doubleArray2[2] = double2;
      doubleArray2[3] = double0;
      doubleArray2[4] = double3;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[10];
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertNotSame(doubleArray3, doubleArray1);
      assertNotSame(doubleArray3, doubleArray2);
      
      doubleArray3[0] = double2;
      doubleArray3[1] = double2;
      doubleArray3[2] = (double) int0;
      doubleArray3[3] = double4;
      doubleArray3[4] = double0;
      double double5 = 1.0;
      doubleArray3[5] = double5;
      doubleArray3[6] = double3;
      doubleArray3[7] = double1;
      doubleArray3[9] = double4;
      double[] doubleArray4 = new double[1];
      assertFalse(doubleArray4.equals((Object)doubleArray2));
      assertFalse(doubleArray4.equals((Object)doubleArray3));
      assertFalse(doubleArray4.equals((Object)doubleArray1));
      assertNotSame(doubleArray4, doubleArray2);
      assertNotSame(doubleArray4, doubleArray3);
      assertNotSame(doubleArray4, doubleArray1);
      
      doubleArray4[0] = (double) int0;
      doubleArray0[3] = doubleArray4;
      assertNotNull(doubleArray0[3]);
      
      double[] doubleArray5 = new double[4];
      assertFalse(doubleArray5.equals((Object)doubleArray3));
      assertFalse(doubleArray5.equals((Object)doubleArray4));
      assertFalse(doubleArray5.equals((Object)doubleArray1));
      assertFalse(doubleArray5.equals((Object)doubleArray2));
      assertNotSame(doubleArray5, doubleArray3);
      assertNotSame(doubleArray5, doubleArray4);
      assertNotSame(doubleArray5, doubleArray1);
      assertNotSame(doubleArray5, doubleArray2);
      
      doubleArray5[0] = double5;
      doubleArray5[1] = double5;
      double double6 = (-1.7976931348623157E308);
      doubleArray5[2] = double6;
      doubleArray0[4] = doubleArray5;
      assertNotNull(doubleArray0[4]);
      
      double[] doubleArray6 = new double[8];
      assertFalse(doubleArray6.equals((Object)doubleArray5));
      assertFalse(doubleArray6.equals((Object)doubleArray2));
      assertFalse(doubleArray6.equals((Object)doubleArray3));
      assertFalse(doubleArray6.equals((Object)doubleArray1));
      assertFalse(doubleArray6.equals((Object)doubleArray4));
      assertNotSame(doubleArray6, doubleArray5);
      assertNotSame(doubleArray6, doubleArray2);
      assertNotSame(doubleArray6, doubleArray3);
      assertNotSame(doubleArray6, doubleArray1);
      assertNotSame(doubleArray6, doubleArray4);
      
      doubleArray6[0] = double5;
      doubleArray6[1] = double5;
      doubleArray6[2] = double4;
      doubleArray6[3] = (double) int0;
      doubleArray6[4] = double0;
      doubleArray6[5] = double3;
      doubleArray6[6] = double1;
      doubleArray6[7] = double3;
      doubleArray0[5] = doubleArray6;
      assertNotNull(doubleArray0[5]);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string1, doubleArray0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(6, defaultCategoryDataset1.getRowCount());
      assertEquals(8, defaultCategoryDataset1.getColumnCount());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotNull(defaultCategoryDataset1);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultCategoryDataset1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertEquals(6, defaultCategoryDataset1.getRowCount());
      assertEquals(8, defaultCategoryDataset1.getColumnCount());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNull(number0);
      
      Number number1 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
      assertNull(number1);
  }

  @Test
  public void test48()  throws Throwable  {
      int int0 = 0;
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      assertNotNull(defaultColorSelectionModel0);
      
      JColorChooser jColorChooser0 = new JColorChooser((ColorSelectionModel) defaultColorSelectionModel0);
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertNotNull(jColorChooser0);
      
      Locale locale0 = jColorChooser0.getLocale();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertNotNull(locale0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getDateTimeInstance(int0, int0, locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toPattern());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertNotNull(simpleDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toPattern());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      String string0 = "";
      String string1 = " ^&$P6V~;{d";
      assertNotSame(string1, string0);
      
      double[][] doubleArray0 = new double[3][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) int0;
      doubleArray1[1] = (double) int0;
      doubleArray1[2] = (double) int0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      double[] doubleArray2 = new double[6];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = (double) int0;
      double double0 = (-3483.474809638);
      doubleArray2[1] = double0;
      double double1 = (-862.6834890786);
      doubleArray2[2] = double1;
      doubleArray2[3] = (double) int0;
      doubleArray2[4] = (double) int0;
      doubleArray2[5] = (double) int0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      double[] doubleArray3 = new double[8];
      assertFalse(doubleArray3.equals((Object)doubleArray2));
      assertFalse(doubleArray3.equals((Object)doubleArray1));
      assertNotSame(doubleArray3, doubleArray2);
      assertNotSame(doubleArray3, doubleArray1);
      
      doubleArray3[0] = double1;
      doubleArray3[1] = double1;
      doubleArray3[2] = double1;
      double double2 = (-2.147483648E9);
      doubleArray3[3] = double2;
      doubleArray3[4] = (double) int0;
      doubleArray3[5] = double0;
      double double3 = (-1935.9525086782);
      doubleArray3[6] = double3;
      doubleArray3[7] = double1;
      doubleArray0[2] = doubleArray3;
      assertNotNull(doubleArray0[2]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string1, doubleArray0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(defaultCategoryDataset0);
      
      int int1 = 0;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(8, defaultPieDataset0.getItemCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(defaultPieDataset0);
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) zoneInfo0, locale0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toPattern());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(timeTableXYDataset0);
      
      int int2 = (-646);
      double double4 = DatasetUtilities.calculateStackTotal((TableXYDataset) timeTableXYDataset0, int2);
      assertEquals(0.0, double4, 0.01D);
      assertFalse(int0 == int2);
      assertFalse(double4 == double2);
      assertFalse(double4 == double3);
      assertFalse(double4 == double1);
      assertFalse(double4 == double0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toLocalizedPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("EEEE, d MMMM yyyy HH:mm:ss 'o''clock' z", simpleDateFormat0.toPattern());
      assertEquals(false, jColorChooser0.isValid());
      assertEquals(true, jColorChooser0.isEnabled());
      assertEquals(false, jColorChooser0.isCursorSet());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicyProvider());
      assertEquals(false, jColorChooser0.isMinimumSizeSet());
      assertEquals(true, jColorChooser0.isVisible());
      assertEquals(true, jColorChooser0.isFontSet());
      assertEquals(2, jColorChooser0.countComponents());
      assertEquals(true, jColorChooser0.isBackgroundSet());
      assertEquals(false, jColorChooser0.isFocusCycleRoot());
      assertEquals(false, jColorChooser0.isFocusTraversalPolicySet());
      assertEquals(false, jColorChooser0.isMaximumSizeSet());
      assertEquals(false, jColorChooser0.isShowing());
      assertEquals(true, jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(false, jColorChooser0.isLightweight());
      assertEquals(false, jColorChooser0.getIgnoreRepaint());
      assertEquals(2, jColorChooser0.getComponentCount());
      assertEquals(false, jColorChooser0.isPreferredSizeSet());
      assertEquals(false, jColorChooser0.isDisplayable());
      assertEquals(true, jColorChooser0.isForegroundSet());
      assertEquals("GMT", zoneInfo0.getID());
      
      int int3 = 220;
      int int4 = (-1818);
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(range0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int3, int3, int4);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=220,MONTH=220,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1818,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo1 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=220,MONTH=220,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1818,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo1.getID());
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotNull(zoneInfo1);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection((TimeZone) zoneInfo1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=220,MONTH=220,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1818,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotNull(timeSeriesCollection0);
      
      TimeSeries timeSeries0 = timeSeriesCollection0.getSeries((Comparable) int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=220,MONTH=220,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1818,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNull(timeSeries0);
      
      TimeSeriesCollection timeSeriesCollection1 = new TimeSeriesCollection(timeSeries0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(timeSeriesCollection1.equals((Object)timeSeriesCollection0));
      assertTrue(zoneInfo1.equals((Object)zoneInfo0));
      assertTrue(timeSeriesCollection0.equals((Object)timeSeriesCollection1));
      assertEquals(0, timeSeriesCollection1.getSeriesCount());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=220,MONTH=220,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1818,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("GMT", zoneInfo1.getID());
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotSame(timeSeriesCollection1, timeSeriesCollection0);
      assertNotSame(zoneInfo1, zoneInfo0);
      assertNotSame(timeSeriesCollection0, timeSeriesCollection1);
      assertNotNull(timeSeriesCollection1);
      
      List<Float> list0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      boolean boolean1 = true;
      assertTrue(boolean1 == boolean0);
      
      Range range1 = defaultStatisticalCategoryDataset0.getRangeBounds(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNull(range1);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertNull(number0);
      
      boolean boolean2 = true;
      assertTrue(boolean2 == boolean0);
      
      // Undeclared exception!
      try {
        Range range2 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) timeSeriesCollection1, (List) list0, range1, boolean2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
      }
  }

  @Test
  public void test49()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNotNull(defaultXYDataset0);
      
      boolean boolean0 = false;
      CategoryDataset categoryDataset0 = null;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      Range range1 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range1);
      
      boolean boolean1 = true;
      Range range2 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range2);
      
      Range range3 = Range.combine(range1, range1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range3);
      
      Range range4 = DatasetUtilities.iterateXYRangeBounds((XYDataset) defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range4);
      
      Range range5 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertNull(range5);
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      int int0 = 0;
      double double0 = DatasetUtilities.calculateStackTotal((TableXYDataset) defaultTableXYDataset0, int0);
      assertEquals(0.0, double0, 0.01D);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultStatisticalCategoryDataset0, (Comparable) boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultPieDataset0);
  }
}
