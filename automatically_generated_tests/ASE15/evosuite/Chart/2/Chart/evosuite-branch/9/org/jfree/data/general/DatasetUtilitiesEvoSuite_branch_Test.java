/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:52:40 GMT 2014
 */

package org.jfree.data.general;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.AWTEvent;
import java.awt.GridBagConstraints;
import java.awt.event.KeyEvent;
import java.io.ObjectStreamConstants;
import java.lang.reflect.Array;
import java.util.Date;
import java.util.EventListener;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.SwingConstants;
import javax.swing.table.JTableHeader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.DefaultKeyedValues;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYIntervalSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

 
public class DatasetUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertNotNull(categoryTableXYDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      
      Number[][] numberArray0 = new Number[13][9];
      Number[] numberArray1 = new Number[9];
      numberArray1[7] = (Number) double0;
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(Float.NaN, numberArray1[7].floatValue(), 0.01F);
      assertEquals(Double.NaN, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[7].byteValue());
      assertEquals(0L, numberArray1[7].longValue());
      assertEquals(0, numberArray1[7].shortValue());
      assertEquals(0, numberArray1[7].intValue());
      assertNotNull(numberArray1[7]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(range0);
  }

  @Test
  public void test01()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][7];
      Number[] numberArray1 = new Number[5];
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      int int0 = KeyEvent.KEY_TYPED;
      assertEquals(400, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(400.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(400, numberArray1[0].shortValue());
      assertEquals(400.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(400, numberArray1[0].intValue());
      assertEquals(-112, numberArray1[0].byteValue());
      assertEquals(400L, numberArray1[0].longValue());
      assertNotNull(numberArray1[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(200.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(400.0, range0.getUpperBound(), 0.01D);
      assertEquals(400.0, range0.getLength(), 0.01D);
      assertNotNull(range0);
  }

  @Test
  public void test02()  throws Throwable  {
      Number[][] numberArray0 = new Number[5][7];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(5, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
  }

  @Test
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset(boolean0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertNotNull(defaultTableXYDataset0);
      
      int int0 = 0;
      double double0 = DatasetUtilities.calculateStackTotal((TableXYDataset) defaultTableXYDataset0, int0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(true, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = 11.300148367831948;
      String string0 = "Duplicate items in 'columnKeys'.";
      boolean boolean0 = false;
      categoryTableXYDataset0.add((Number) double0, (Number) double0, string0, boolean0);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, double0);
      assertEquals(11.300148367831948, range0.getLength(), 0.01D);
      assertEquals(11.300148367831948, range0.getLowerBound(), 0.01D);
      assertEquals(16.95022255174792, range0.getCentralValue(), 0.01D);
      assertEquals(22.600296735663896, range0.getUpperBound(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(range0);
  }

  @Test
  public void test05()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      double double0 = 0.0;
      String string0 = "Duplicate items in 'columnKeys'.";
      boolean boolean0 = true;
      categoryTableXYDataset0.add((Number) double0, (Number) double0, string0, boolean0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, double0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertNotNull(range0);
  }

  @Test
  public void test06()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      double double0 = 3181.0;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(tableXYDataset0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test07()  throws Throwable  {
      String string0 = "LqX";
      double[][] doubleArray0 = new double[2][2];
      double double0 = 1732.3498418471306;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = double0;
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertTrue(double1.equals((Object)double0));
      assertEquals(1732.3498418471306, (double)double1, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMaximumStackedRangeValue(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = 1368;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) taskSeriesCollection0, int0, int0);
      assertEquals(1368, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1368, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(slidingCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertEquals(1368, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(1368, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(number0);
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "MSXJnml*H>Uin5bN%r";
      DefaultKeyedValues defaultKeyedValues0 = new DefaultKeyedValues();
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultKeyedValues0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) string0, (KeyedValues) defaultKeyedValues0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNotNull(defaultCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues0.getItemCount());
      assertNull(number0);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[8];
      double double0 = (-1.0);
      doubleArray1[2] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertTrue(double1.equals((Object)double0));
      assertEquals((-1.0), (double)double1, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[3][8];
      double[] doubleArray1 = new double[9];
      doubleArray0[2] = doubleArray1;
      assertNotNull(doubleArray0[2]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.0, (double)double0, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0, keyToGroupMap0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNull(range0);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[6][10];
      double[] doubleArray1 = new double[12];
      double double0 = (-10.149236559371737);
      doubleArray1[0] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(6, defaultCategoryDataset0.getRowCount());
      assertEquals(12, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals((-10.149236559371737), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals((-5.074618279685868), range0.getCentralValue(), 0.01D);
      assertEquals(10.149236559371737, range0.getLength(), 0.01D);
      assertEquals(6, defaultCategoryDataset0.getRowCount());
      assertEquals(12, defaultCategoryDataset0.getColumnCount());
      assertNotNull(range0);
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "org.jfree.data.time.Millisecond";
      Number[][] numberArray0 = new Number[6][6];
      Number[] numberArray1 = new Number[3];
      long long0 = AWTEvent.ITEM_EVENT_MASK;
      assertEquals(512L, long0);
      
      numberArray1[0] = (Number) long0;
      assertEquals(512.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(512, numberArray1[0].intValue());
      assertEquals(512L, numberArray1[0].longValue());
      assertEquals(512, numberArray1[0].shortValue());
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(512.0, numberArray1[0].doubleValue(), 0.01D);
      assertNotNull(numberArray1[0]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      assertEquals(6, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) string0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(256.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(512.0, range0.getLength(), 0.01D);
      assertEquals(512.0, range0.getUpperBound(), 0.01D);
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      assertEquals(6, defaultCategoryDataset0.getRowCount());
      assertNotNull(range0);
  }

  @Test
  public void test16()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertNotNull(gridBagConstraints0);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(10, gridBagConstraints0.anchor);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (double) gridBagConstraints0.ipady);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNull(range0);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(10, gridBagConstraints0.anchor);
  }

  @Test
  public void test18()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][5];
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      Number[] numberArray1 = new Number[15];
      numberArray1[2] = (Number) int0;
      assertEquals(0.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[2].shortValue());
      assertEquals(0L, numberArray1[2].longValue());
      assertEquals(0.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(0, numberArray1[2].byteValue());
      assertEquals(0, numberArray1[2].intValue());
      assertNotNull(numberArray1[2]);
      
      numberArray0[2] = numberArray1;
      assertNotNull(numberArray0[2]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(range0);
  }

  @Test
  public void test19()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][5];
      Number[] numberArray1 = new Number[8];
      int int0 = SwingConstants.RIGHT;
      assertEquals(4, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(4.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(4, numberArray1[0].intValue());
      assertEquals(4L, numberArray1[0].longValue());
      assertEquals(4, numberArray1[0].byteValue());
      assertEquals(4.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(4, numberArray1[0].shortValue());
      assertNotNull(numberArray1[0]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = 0;
      Date[] dateArray0 = new Date[5];
      double[] doubleArray0 = new double[5];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((Comparable) int0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertEquals(0.0, (double)double0, 0.01D);
  }

  @Test
  public void test21()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertNotNull(categoryTableXYDataset0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertNotNull(gridBagConstraints0);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(1, gridBagConstraints0.gridheight);
      
      String string0 = "PbrS8J[fm1ZET:c2dgg";
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertTrue(boolean0);
      
      categoryTableXYDataset0.add((Number) gridBagConstraints0.gridy, (Number) gridBagConstraints0.weightx, string0, boolean0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(1, gridBagConstraints0.gridheight);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.0, (double)double0, 0.01D);
  }

  @Test
  public void test22()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertNotNull(categoryTableXYDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertNull(number0);
  }

  @Test
  public void test23()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMaximumRangeValue(xYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "MSXJnml*H>Uin5bN%r";
      double[][] doubleArray0 = new double[2][3];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(2, defaultCategoryDataset0.getRowCount());
      assertEquals(3, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.0, (double)double0, 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      Number[][] numberArray0 = new Number[13][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test28()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(categoryTableXYDataset0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertNotNull(gridBagConstraints0);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(1, gridBagConstraints0.gridheight);
      
      String string0 = "PbrS8J[fm1ZET:c2dgg";
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertTrue(boolean0);
      
      categoryTableXYDataset0.add((Number) gridBagConstraints0.gridy, (Number) gridBagConstraints0.weightx, string0, boolean0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals((-1), gridBagConstraints0.gridx);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals(1, gridBagConstraints0.gridheight);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) categoryTableXYDataset0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0.0, (double)double0, 0.01D);
  }

  @Test
  public void test29()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[7][1];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.0, (double)double0, 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNull(number0);
  }

  @Test
  public void test33()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMinimumRangeValue(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test34()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Number number0 = DatasetUtilities.findMaximumDomainValue((XYDataset) defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(number0);
  }

  @Test
  public void test36()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNull(number0);
  }

  @Test
  public void test37()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(xYSeriesCollection0);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue((XYDataset) xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(Double.NaN, (double)double0, 0.01D);
  }

  @Test
  public void test38()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertNotNull(defaultTableXYDataset0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertNotNull(range0);
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findRangeBounds((XYDataset) vectorSeriesCollection0, (List) list0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Series index out of bounds
         //
      }
  }

  @Test
  public void test39()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(defaultTableXYDataset0);
      
      double double0 = 0.5;
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) defaultTableXYDataset0, double0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0.5, range0.getCentralValue(), 0.01D);
      assertEquals(0.5, range0.getUpperBound(), 0.01D);
      assertEquals(0.5, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertNotNull(range0);
      
      double double1 = (-2316.80814);
      boolean boolean0 = range0.contains(double1);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0.5, range0.getCentralValue(), 0.01D);
      assertEquals(0.5, range0.getUpperBound(), 0.01D);
      assertEquals(0.5, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      assertFalse(boolean0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      List list0 = defaultCategoryDataset0.getColumnKeys();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      
      Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) defaultTableXYDataset0, (List) list0, range0, boolean0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0.5, range0.getCentralValue(), 0.01D);
      assertEquals(0.5, range0.getUpperBound(), 0.01D);
      assertEquals(0.5, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(range1);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test40()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertNotNull(keyToGroupMap0);
      
      List list0 = keyToGroupMap0.getGroups();
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(1, list0.size());
      assertEquals(false, list0.isEmpty());
      assertNotNull(list0);
      
      Range range0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.iterateToFindRangeBounds((XYDataset) vectorSeriesCollection0, (List) list0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
      }
  }

  @Test
  public void test41()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(defaultStatisticalCategoryDataset0);
      
      List list0 = defaultStatisticalCategoryDataset0.getRowKeys();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultStatisticalCategoryDataset0, (List) list0, boolean0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertNull(range0);
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.iterateToFindRangeBounds(xYDataset0, list0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertNotNull(xYTaskDataset0);
      
      List list0 = taskSeriesCollection0.getColumnKeys();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) list0, boolean0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test
  public void test43()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertNotNull(matrixSeriesCollection0);
      
      double double0 = 2041.78;
      XYBarDataset xYBarDataset0 = new XYBarDataset((XYDataset) matrixSeriesCollection0, double0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      assertEquals(2041.78, xYBarDataset0.getBarWidth(), 0.01D);
      assertNotNull(xYBarDataset0);
      
      List<TimeSeriesCollection> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.iterateToFindDomainBounds((XYDataset) xYBarDataset0, (List) list0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
      }
  }

  @Test
  public void test44()  throws Throwable  {
      Comparable<DynamicTimeSeriesCollection> comparable0 = null;
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[8];
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getTime();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(mockDate0);
      
      double double0 = (-1083.399537620546);
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, double0, double0, double0, double0, double0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(oHLCDataItem0);
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(oHLCDataItemArray0[0]);
      
      oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
      assertNotNull(oHLCDataItemArray0[1]);
      
      oHLCDataItemArray0[2] = oHLCDataItemArray0[1];
      assertNotNull(oHLCDataItemArray0[2]);
      
      oHLCDataItemArray0[3] = oHLCDataItem0;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(oHLCDataItemArray0[3]);
      
      oHLCDataItemArray0[4] = oHLCDataItem0;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertNotNull(oHLCDataItemArray0[4]);
      
      oHLCDataItemArray0[5] = oHLCDataItemArray0[1];
      assertNotNull(oHLCDataItemArray0[5]);
      
      oHLCDataItemArray0[6] = oHLCDataItemArray0[0];
      assertNotNull(oHLCDataItemArray0[6]);
      
      oHLCDataItemArray0[7] = oHLCDataItemArray0[0];
      assertNotNull(oHLCDataItemArray0[7]);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) comparable0, oHLCDataItemArray0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(defaultOHLCDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0);
      assertEquals((-1083.399537620546), range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals((-1083.399537620546), range0.getCentralValue(), 0.01D);
      assertEquals((-1083.399537620546), range0.getLowerBound(), 0.01D);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertNotNull(range0);
  }

  @Test
  public void test45()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
      
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0, boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test
  public void test46()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(categoryTableXYDataset0);
      
      GridBagConstraints gridBagConstraints0 = new GridBagConstraints();
      assertNotNull(gridBagConstraints0);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals((-1), gridBagConstraints0.gridx);
      
      String string0 = "PbrS8J[fm1ZET:c2dgg";
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) categoryTableXYDataset0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertTrue(boolean0);
      
      categoryTableXYDataset0.add((Number) gridBagConstraints0.gridy, (Number) gridBagConstraints0.weightx, string0, boolean0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, gridBagConstraints0.ipadx);
      assertEquals(1, gridBagConstraints0.gridheight);
      assertEquals(0, gridBagConstraints0.ipady);
      assertEquals(10, gridBagConstraints0.anchor);
      assertEquals(0.0, gridBagConstraints0.weighty, 0.01D);
      assertEquals(1, gridBagConstraints0.gridwidth);
      assertEquals(0.0, gridBagConstraints0.weightx, 0.01D);
      assertEquals(0, gridBagConstraints0.fill);
      assertEquals((-1), gridBagConstraints0.gridy);
      assertEquals((-1), gridBagConstraints0.gridx);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) categoryTableXYDataset0);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertNotNull(range0);
  }

  @Test
  public void test47()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultWindDataset0, boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[10][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      int int0 = 0;
      int int1 = 334;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultCategoryDataset0, int0, int1);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(334, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingCategoryDataset0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      List list0 = slidingCategoryDataset0.getColumnKeys();
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(5, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(334, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(list0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(5, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(334, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(range0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
  }

  @Test
  public void test49()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][4];
      Number[] numberArray1 = new Number[7];
      int int0 = SwingConstants.NORTH_EAST;
      assertEquals(2, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(2.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(2, numberArray1[0].byteValue());
      assertEquals(2L, numberArray1[0].longValue());
      assertEquals(2, numberArray1[0].intValue());
      assertEquals(2.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[0].shortValue());
      assertNotNull(numberArray1[0]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, int0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(categoryToPieDataset0);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(7, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
      }
  }

  @Test
  public void test50()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][4];
      int int0 = SwingConstants.NORTH_EAST;
      assertEquals(2, int0);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultIntervalCategoryDataset0, tableOrder0, int0);
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(categoryToPieDataset0);
      
      List list0 = categoryToPieDataset0.getKeys();
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, boolean0);
      assertEquals(2, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(2, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
  }

  @Test
  public void test51()  throws Throwable  {
      boolean boolean0 = true;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getColumnKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, (List) list0, boolean0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertNull(range0);
  }

  @Test
  public void test52()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getColumnKeys();
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) taskSeriesCollection0, (List) list0, boolean0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertNull(range0);
  }

  @Test
  public void test53()  throws Throwable  {
      double[][] doubleArray0 = new double[10][10];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      List<DefaultMultiValueCategoryDataset> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertNotNull(categoryTableXYDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, (double)double0, 0.01D);
      
      JTableHeader jTableHeader0 = new JTableHeader();
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTableHeader0.isEnabled());
      assertNotNull(jTableHeader0);
      
      boolean boolean0 = categoryTableXYDataset0.hasListener((EventListener) jTableHeader0);
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertFalse(boolean0);
      
      Number[][] numberArray0 = new Number[13][9];
      Number[] numberArray1 = new Number[9];
      numberArray1[7] = (Number) double0;
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(Double.NaN, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(0L, numberArray1[7].longValue());
      assertEquals(Float.NaN, numberArray1[7].floatValue(), 0.01F);
      assertEquals(0, numberArray1[7].intValue());
      assertEquals(0, numberArray1[7].shortValue());
      assertEquals(0, numberArray1[7].byteValue());
      assertNotNull(numberArray1[7]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, boolean0);
      assertEquals(true, jTableHeader0.isForegroundSet());
      assertEquals(false, jTableHeader0.isCursorSet());
      assertEquals(true, jTableHeader0.isVisible());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicySet());
      assertEquals(false, jTableHeader0.isDisplayable());
      assertEquals(true, jTableHeader0.isBackgroundSet());
      assertEquals(1, jTableHeader0.getComponentCount());
      assertEquals(false, jTableHeader0.getIgnoreRepaint());
      assertEquals(true, jTableHeader0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTableHeader0.isFontSet());
      assertEquals(false, jTableHeader0.isMinimumSizeSet());
      assertEquals(1, jTableHeader0.countComponents());
      assertEquals(false, jTableHeader0.isMaximumSizeSet());
      assertEquals(false, jTableHeader0.isLightweight());
      assertEquals(false, jTableHeader0.isShowing());
      assertEquals(false, jTableHeader0.isPreferredSizeSet());
      assertEquals(false, jTableHeader0.isValid());
      assertEquals(false, jTableHeader0.isFocusCycleRoot());
      assertEquals(false, jTableHeader0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTableHeader0.isEnabled());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test
  public void test55()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[7][1];
      double[] doubleArray1 = new double[2];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertNotNull(defaultCategoryDataset0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, boolean0);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(7, defaultCategoryDataset0.getRowCount());
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertNotNull(range0);
  }

  @Test
  public void test56()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(categoryTableXYDataset0);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) categoryTableXYDataset0);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(Double.NaN, (double)double0, 0.01D);
      
      Number[][] numberArray0 = new Number[13][9];
      Number[] numberArray1 = new Number[9];
      numberArray1[7] = (Number) double0;
      assertEquals(Float.NaN, numberArray1[7].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[7].longValue());
      assertEquals(0, numberArray1[7].intValue());
      assertEquals(0, numberArray1[7].shortValue());
      assertEquals(0, numberArray1[7].byteValue());
      assertEquals(Double.NaN, numberArray1[7].doubleValue(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertNotNull(numberArray1[7]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertNull(range0);
  }

  @Test
  public void test57()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      Number[][] numberArray0 = new Number[13][9];
      Number[] numberArray1 = new Number[9];
      numberArray1[0] = (Number) doubleArray0[2];
      assertEquals(0, numberArray1[0].shortValue());
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0L, numberArray1[0].longValue());
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      assertNotNull(numberArray1[0]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(13, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(range0);
  }

  @Test
  public void test58()  throws Throwable  {
      HistogramDataset histogramDataset0 = new HistogramDataset();
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertNotNull(histogramDataset0);
      
      Vector<TimeSeriesCollection> vector0 = new Vector<TimeSeriesCollection>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(range0);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) histogramDataset0, (List) vector0, range0, boolean0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(true, vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0, histogramDataset0.getSeriesCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNull(range1);
  }

  @Test
  public void test59()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNotNull(xYSeriesCollection0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYSeriesCollection0, boolean0);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertNull(range0);
  }

  @Test
  public void test60()  throws Throwable  {
      boolean boolean0 = false;
      CategoryDataset categoryDataset0 = null;
      List<XYBarDataset> list0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, list0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      boolean boolean0 = true;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, boolean0);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(range0);
  }

  @Test
  public void test62()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = "MSXJnml*H>Uin5bN%r";
      Date[] dateArray0 = new Date[6];
      Locale locale0 = JComponent.getDefaultLocale();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getTime();
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(date0);
      
      dateArray0[0] = date0;
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", dateArray0[0].toString());
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(dateArray0[0]);
      
      dateArray0[1] = dateArray0[0];
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", dateArray0[1].toString());
      assertNotNull(dateArray0[1]);
      
      dateArray0[2] = date0;
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", dateArray0[2].toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(dateArray0[2]);
      
      dateArray0[3] = date0;
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", dateArray0[3].toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(dateArray0[3]);
      
      dateArray0[4] = date0;
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", dateArray0[4].toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(dateArray0[4]);
      
      dateArray0[5] = date0;
      assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(true, mockGregorianCalendar0.isLenient());
      assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", dateArray0[5].toString());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      assertNotNull(dateArray0[5]);
      
      double[] doubleArray0 = new double[8];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((Comparable) string0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(defaultHighLowDataset0);
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) defaultHighLowDataset0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(1.39240928132E12, range0.getCentralValue(), 0.01D);
      assertEquals(1.39240928132E12, range0.getUpperBound(), 0.01D);
      assertEquals(1.39240928132E12, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertNotNull(range0);
  }

  @Test
  public void test64()  throws Throwable  {
      double double0 = (-616.2156363226);
      double double1 = 712.2863;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(double0, double1);
      assertEquals((-616.2156363226), powerFunction2D0.getA(), 0.01D);
      assertEquals(712.2863, powerFunction2D0.getB(), 0.01D);
      assertNotNull(powerFunction2D0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      int int0 = 1289;
      XYSeriesCollection xYSeriesCollection0 = (XYSeriesCollection)DatasetUtilities.sampleFunction2D((Function2D) powerFunction2D0, double0, double1, int0, (Comparable) double0);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals((-616.2156363226), powerFunction2D0.getA(), 0.01D);
      assertEquals(712.2863, powerFunction2D0.getB(), 0.01D);
      assertNotNull(xYSeriesCollection0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0, boolean0);
      assertEquals(48.03533183870002, range0.getCentralValue(), 0.01D);
      assertEquals(712.7863, range0.getUpperBound(), 0.01D);
      assertEquals(1329.5019363226, range0.getLength(), 0.01D);
      assertEquals((-616.7156363226), range0.getLowerBound(), 0.01D);
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals((-616.2156363226), powerFunction2D0.getA(), 0.01D);
      assertEquals(712.2863, powerFunction2D0.getB(), 0.01D);
      assertNotNull(range0);
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test65()  throws Throwable  {
      boolean boolean0 = false;
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.iterateDomainBounds(xYDataset0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(defaultMultiValueCategoryDataset0);
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timeSeriesCollection0, (List) list0, boolean0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertNull(range0);
  }

  @Test
  public void test67()  throws Throwable  {
      XYDataset xYDataset0 = null;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertNotNull(list0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findDomainBounds(xYDataset0, list0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test68()  throws Throwable  {
      boolean boolean0 = true;
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(taskSeriesCollection0);
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertNotNull(xYTaskDataset0);
      
      List list0 = taskSeriesCollection0.getColumnKeys();
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertNotNull(list0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, (List) list0, boolean0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertNull(range0);
  }

  @Test
  public void test69()  throws Throwable  {
      boolean boolean0 = true;
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultWindDataset0, boolean0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      assertNull(range0);
  }

  @Test
  public void test70()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findDomainBounds(xYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test71()  throws Throwable  {
      Object[][][] objectArray0 = new Object[3][10][1];
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset(objectArray0);
      assertEquals(3, defaultWindDataset0.getSeriesCount());
      assertNotNull(defaultWindDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultWindDataset0);
      assertEquals(3, defaultWindDataset0.getSeriesCount());
      assertTrue(boolean0);
  }

  @Test
  public void test72()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(xYDataset0);
      assertTrue(boolean0);
  }

  @Test
  public void test73()  throws Throwable  {
      double[][] doubleArray0 = new double[3][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      assertFalse(boolean0);
  }

  @Test
  public void test74()  throws Throwable  {
      Number[][] numberArray0 = new Number[2][5];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(boolean0);
  }

  @Test
  public void test75()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertTrue(boolean0);
  }

  @Test
  public void test76()  throws Throwable  {
      double[][] doubleArray0 = new double[3][10];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      int int0 = 0;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultIntervalCategoryDataset0, int0, int0);
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(slidingCategoryDataset0);
      
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) slidingCategoryDataset0, tableOrder0, int0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(categoryToPieDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) categoryToPieDataset0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(0, categoryToPieDataset0.getExtractIndex());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getColumnCount());
      assertTrue(boolean0);
  }

  @Test
  public void test77()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertNotNull(defaultKeyedValuesDataset0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertTrue(boolean0);
  }

  @Test
  public void test78()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertNotNull(polynomialFunction2D0);
      
      double double0 = (-1739.5656);
      int int0 = 0;
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) polynomialFunction2D0, double0, doubleArray0[1], int0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
      }
  }

  @Test
  public void test79()  throws Throwable  {
      double double0 = (-616.2156363226);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(double0, double0);
      assertEquals((-616.2156363226), powerFunction2D0.getB(), 0.01D);
      assertEquals((-616.2156363226), powerFunction2D0.getA(), 0.01D);
      assertNotNull(powerFunction2D0);
      
      int int0 = 1289;
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) powerFunction2D0, double0, double0, int0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
      }
  }

  @Test
  public void test80()  throws Throwable  {
      Comparable<XYDatasetTableModel>[] comparableArray0 = (Comparable<XYDatasetTableModel>[]) Array.newInstance(Comparable.class, 2);
      double[][] doubleArray0 = new double[3][10];
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test81()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 2);
      double[][] doubleArray0 = new double[2][7];
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of column keys does not match the number of columns in the data array.
         //
      }
  }

  @Test
  public void test82()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertNotNull(taskSeriesCollection0);
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(slidingGanttCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) int0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int0, (double) int0, int0);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
  }

  @Test
  public void test83()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][9];
      Number[] numberArray1 = new Number[4];
      int int0 = SwingConstants.NORTH_EAST;
      assertEquals(2, int0);
      
      numberArray1[0] = (Number) int0;
      assertEquals(2L, numberArray1[0].longValue());
      assertEquals(2.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[0].intValue());
      assertEquals(2, numberArray1[0].byteValue());
      assertEquals(2, numberArray1[0].shortValue());
      assertEquals(2.0F, numberArray1[0].floatValue(), 0.01F);
      assertNotNull(numberArray1[0]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, int1);
      assertEquals(10, defaultPieDataset0.getItemCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultPieDataset0);
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int0, (double) int1);
      assertEquals(10, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(int0 == int1);
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int1 == int0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test
  public void test84()  throws Throwable  {
      double[][] doubleArray0 = new double[4][1];
      double double0 = (-1.0);
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertEquals(4, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getSeriesCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      // Undeclared exception!
      try {
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultIntervalCategoryDataset0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // DefaultIntervalCategoryDataset.getValue(): series index out of range.
         //
      }
  }

  @Test
  public void test85()  throws Throwable  {
      Number[][] numberArray0 = new Number[10][9];
      Number[] numberArray1 = new Number[4];
      int int0 = SwingConstants.NORTH_EAST;
      assertEquals(2, int0);
      
      byte byte0 = ObjectStreamConstants.TC_CLASS;
      assertEquals((byte)118, byte0);
      
      numberArray1[2] = (Number) int0;
      assertEquals(2.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(2, numberArray1[2].shortValue());
      assertEquals(2.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(2, numberArray1[2].intValue());
      assertEquals(2L, numberArray1[2].longValue());
      assertEquals(2, numberArray1[2].byteValue());
      assertNotNull(numberArray1[2]);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultIntervalCategoryDataset0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultIntervalCategoryDataset0, int0);
      assertEquals(10, defaultPieDataset0.getItemCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) byte0, (double) int0, (int) byte0);
      assertEquals(10, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
      assertNotNull(defaultPieDataset1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test
  public void test86()  throws Throwable  {
      boolean boolean0 = true;
      double double0 = (-736.2447436949);
      PieDataset pieDataset0 = null;
      int int0 = 0;
      // Undeclared exception!
      try {
        PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, (Comparable) boolean0, double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test87()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) taskSeriesCollection0, boolean0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
  }

  @Test
  public void test88()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test89()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNotNull(taskSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertNull(range0);
  }

  @Test
  public void test90()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNotNull(defaultKeyedValues2DDataset0);
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertNull(range0);
  }

  @Test
  public void test91()  throws Throwable  {
      Function2D function2D0 = null;
      double double0 = 1.4950934066557473;
      int int0 = 0;
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D(function2D0, double0, double0, int0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
      }
  }

  @Test
  public void test92()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      int int0 = (-4190);
      // Undeclared exception!
      try {
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForColumn(categoryDataset0, (Comparable) int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test93()  throws Throwable  {
      XYIntervalSeriesCollection xYIntervalSeriesCollection0 = new XYIntervalSeriesCollection();
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xYIntervalSeriesCollection0);
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) xYIntervalSeriesCollection0);
      assertEquals(0, xYIntervalSeriesCollection0.getSeriesCount());
      assertNull(range0);
  }
}
