/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:17:37 GMT 2014
 */

package org.jfree.data.general;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.Event;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageConsumer;
import java.lang.reflect.Array;
import java.util.Date;
import java.util.EventListener;
import java.util.List;
import java.util.TimeZone;
import java.util.Vector;
import javax.swing.JComponent;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.CategoryToPieDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultKeyedValuesDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.statistics.SimpleHistogramBin;
import org.jfree.data.statistics.SimpleHistogramDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.MonthConstants;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.DefaultXYZDataset;
import org.jfree.data.xy.MatrixSeries;
import org.jfree.data.xy.MatrixSeriesCollection;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYIntervalSeries;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DatasetUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      String string0 = "Series 4";
      double[][] doubleArray0 = new double[10][7];
      double[] doubleArray1 = new double[4];
      doubleArray0[1] = doubleArray1;
      assertNotNull(doubleArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findCumulativeRangeBounds(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test02()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) slidingGanttCategoryDataset0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = 880;
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      
      double double0 = DatasetUtilities.calculateStackTotal((TableXYDataset) defaultTableXYDataset0, int0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
  }

  @Test
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      TableXYDataset tableXYDataset0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(tableXYDataset0, doubleArray0[4]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test05()  throws Throwable  {
      String string0 = "Series 4";
      double[][] doubleArray0 = new double[9][6];
      double[] doubleArray1 = new double[8];
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01D);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test06()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(8192.0, (double)double0, 0.01D);
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
  }

  @Test
  public void test07()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(number0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
  }

  @Test
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1011.0);
      doubleArray0[0] = double0;
      String string0 = "";
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      
      Double double1 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals((-1011.0), (double)double1, 0.01D);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertTrue(double1.equals((Object)double0));
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[3][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test10()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMinimumStackedRangeValue(categoryDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "Ra`\\PgDm'N+^ru?!yA";
      Number[][] numberArray0 = new Number[4][4];
      Number[] numberArray1 = new Number[10];
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      numberArray1[2] = (Number) float0;
      assertNotNull(numberArray1[2]);
      assertEquals(0, numberArray1[2].intValue());
      assertEquals(0.0, numberArray1[2].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[2].byteValue());
      assertEquals(0.0F, numberArray1[2].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[2].longValue());
      assertEquals(0, numberArray1[2].shortValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = "Ra`\\PgDm'N+^ru?!yA";
      Number[][] numberArray0 = new Number[4][4];
      Number[] numberArray1 = new Number[10];
      int int0 = MonthConstants.OCTOBER;
      assertEquals(10, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(10, numberArray1[0].shortValue());
      assertEquals(10.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(10, numberArray1[0].intValue());
      assertEquals(10L, numberArray1[0].longValue());
      assertEquals(10.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(10, numberArray1[0].byteValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(5.0, range0.getCentralValue(), 0.01D);
      assertEquals(10.0, range0.getUpperBound(), 0.01D);
      assertEquals(10.0, range0.getLength(), 0.01D);
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test
  public void test13()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, keyToGroupMap0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "Ra`\\PgDm'N+^ru?!yA";
      Number[][] numberArray0 = new Number[4][4];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(4, defaultCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(4, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = ",q3=";
      Number[][] numberArray0 = new Number[9][7];
      Number[] numberArray1 = new Number[9];
      int int0 = Event.F12;
      assertEquals(1019, int0);
      
      int int1 = JComponent.UNDEFINED_CONDITION;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      numberArray1[8] = (Number) int1;
      assertNotNull(numberArray1[8]);
      assertEquals((-1L), numberArray1[8].longValue());
      assertEquals(-1, numberArray1[8].intValue());
      assertEquals(-1, numberArray1[8].shortValue());
      assertEquals((-1.0F), numberArray1[8].floatValue(), 0.01F);
      assertEquals(-1, numberArray1[8].byteValue());
      assertEquals((-1.0), numberArray1[8].doubleValue(), 0.01D);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) int0);
      assertNotNull(range0);
      assertEquals(1018.5, range0.getCentralValue(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals(1018.0, range0.getLowerBound(), 0.01D);
      assertEquals(1019.0, range0.getUpperBound(), 0.01D);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(9, defaultCategoryDataset0.getColumnCount());
      assertFalse(int0 == int1);
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(4096.0, range0.getCentralValue(), 0.01D);
      assertEquals(8192.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(8192.0, range0.getUpperBound(), 0.01D);
  }

  @Test
  public void test17() {}
//   @Test
//   public void test17()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0);
//       assertNotNull(mockGregorianCalendar0);
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       int int0 = 0;
//       OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[10];
//       OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) int0, (double) int0, (double) int0, (double) int0, (double) int0);
//       assertNotNull(oHLCDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       oHLCDataItemArray0[0] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[0]);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
//       assertNotNull(oHLCDataItemArray0[1]);
//       
//       oHLCDataItemArray0[2] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[2]);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       oHLCDataItemArray0[3] = oHLCDataItemArray0[1];
//       assertNotNull(oHLCDataItemArray0[3]);
//       
//       oHLCDataItemArray0[4] = oHLCDataItemArray0[2];
//       assertNotNull(oHLCDataItemArray0[4]);
//       
//       oHLCDataItemArray0[5] = oHLCDataItemArray0[4];
//       assertNotNull(oHLCDataItemArray0[5]);
//       
//       oHLCDataItemArray0[6] = oHLCDataItemArray0[0];
//       assertNotNull(oHLCDataItemArray0[6]);
//       
//       oHLCDataItemArray0[7] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[7]);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       oHLCDataItemArray0[8] = oHLCDataItemArray0[3];
//       assertNotNull(oHLCDataItemArray0[8]);
//       
//       oHLCDataItemArray0[9] = oHLCDataItemArray0[2];
//       assertNotNull(oHLCDataItemArray0[9]);
//       
//       DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) mockGregorianCalendar0, oHLCDataItemArray0);
//       assertNotNull(defaultOHLCDataset0);
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultOHLCDataset0);
//       assertEquals(0.0, (double)double0, 0.01D);
//       assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
//       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
//       assertEquals(true, mockGregorianCalendar0.isLenient());
//       assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//       assertEquals("GMT", zoneInfo0.getID());
//   }

  @Test
  public void test18()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) categoryTableXYDataset0);
      assertNull(number0);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[5][5];
      Number[] numberArray1 = new Number[10];
      int int0 = JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT;
      assertEquals(1, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(1.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(1, numberArray1[0].intValue());
      assertEquals(1, numberArray1[0].byteValue());
      assertEquals(1L, numberArray1[0].longValue());
      assertEquals(1.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(1, numberArray1[0].shortValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(5, defaultCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(1.0, (double)double0, 0.01D);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(5, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[5][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(5, defaultCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(5, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
  }

  @Test
  public void test22() {}
//   @Test
//   public void test22()  throws Throwable  {
//       int int0 = 2969;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       assertNotNull(minute0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       Second second0 = new Second(int0, minute0);
//       assertNotNull(second0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409157999L, second0.getLastMillisecond());
//       assertEquals(-103, second0.getSecond());
//       assertEquals(1392409157499L, second0.getMiddleMillisecond());
//       assertEquals(3601570757L, second0.getSerialIndex());
//       assertEquals(1392409157000L, second0.getFirstMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0, (RegularTimePeriod) second0);
//       assertNotNull(dynamicTimeSeriesCollection0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
//       assertEquals(2968, dynamicTimeSeriesCollection0.getNewestIndex());
//       assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
//       assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
//       assertEquals(1392409157999L, second0.getLastMillisecond());
//       assertEquals(-103, second0.getSecond());
//       assertEquals(1392409157499L, second0.getMiddleMillisecond());
//       assertEquals(3601570757L, second0.getSerialIndex());
//       assertEquals(1392409157000L, second0.getFirstMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) dynamicTimeSeriesCollection0);
//       assertEquals(0.0, (double)double0, 0.01D);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
//       assertEquals(2968, dynamicTimeSeriesCollection0.getNewestIndex());
//       assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
//       assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
//       assertEquals(1392409157999L, second0.getLastMillisecond());
//       assertEquals(-103, second0.getSecond());
//       assertEquals(1392409157499L, second0.getMiddleMillisecond());
//       assertEquals(3601570757L, second0.getSerialIndex());
//       assertEquals(1392409157000L, second0.getFirstMillisecond());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//   }

  @Test
  public void test23()  throws Throwable  {
      XYDataset xYDataset0 = null;
      // Undeclared exception!
      try {
        Number number0 = DatasetUtilities.findMinimumRangeValue(xYDataset0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection();
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) matrixSeriesCollection0);
      assertNull(number0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      String string0 = "";
      Number[][] numberArray0 = new Number[3][8];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) doubleArray0[0];
      assertNotNull(numberArray1[0]);
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(0L, numberArray1[0].longValue());
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[0].shortValue());
      
      numberArray0[1] = numberArray1;
      assertNotNull(numberArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01D);
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[3][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(3, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test27()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test28()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue((XYDataset) defaultXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
  }

  @Test
  public void test29()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
  }

  @Test
  public void test30() {}
//   @Test
//   public void test30()  throws Throwable  {
//       long long0 = 0L;
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
//       assertNotNull(fixedMillisecond0);
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       
//       OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
//       int int0 = 1594;
//       Week week0 = new Week(int0, int0);
//       assertNotNull(week0);
//       assertEquals(58, week0.getWeek());
//       assertEquals(1594, week0.getYearValue());
//       assertEquals((-11830449600001L), week0.getMiddleMillisecond());
//       assertEquals((-11830752000000L), week0.getFirstMillisecond());
//       assertEquals(84540L, week0.getSerialIndex());
//       assertEquals((-11830147200001L), week0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)week0.getEnd();
//       assertNotNull(mockDate0);
//       assertEquals("Sun Feb 12 23:59:59 GMT 1595", mockDate0.toString());
//       assertEquals(58, week0.getWeek());
//       assertEquals(1594, week0.getYearValue());
//       assertEquals((-11830449600001L), week0.getMiddleMillisecond());
//       assertEquals((-11830752000000L), week0.getFirstMillisecond());
//       assertEquals(84540L, week0.getSerialIndex());
//       assertEquals((-11830147200001L), week0.getLastMillisecond());
//       
//       OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) int0, (double) int0, (double) int0, (double) int0, (double) int0);
//       assertNotNull(oHLCDataItem0);
//       assertEquals("Sun Feb 12 23:59:59 GMT 1595", mockDate0.toString());
//       assertEquals(58, week0.getWeek());
//       assertEquals(1594, week0.getYearValue());
//       assertEquals((-11830449600001L), week0.getMiddleMillisecond());
//       assertEquals((-11830752000000L), week0.getFirstMillisecond());
//       assertEquals(84540L, week0.getSerialIndex());
//       assertEquals((-11830147200001L), week0.getLastMillisecond());
//       
//       oHLCDataItemArray0[0] = oHLCDataItem0;
//       assertNotNull(oHLCDataItemArray0[0]);
//       assertEquals("Sun Feb 12 23:59:59 GMT 1595", mockDate0.toString());
//       assertEquals(58, week0.getWeek());
//       assertEquals(1594, week0.getYearValue());
//       assertEquals((-11830449600001L), week0.getMiddleMillisecond());
//       assertEquals((-11830752000000L), week0.getFirstMillisecond());
//       assertEquals(84540L, week0.getSerialIndex());
//       assertEquals((-11830147200001L), week0.getLastMillisecond());
//       
//       oHLCDataItemArray0[1] = oHLCDataItemArray0[0];
//       assertNotNull(oHLCDataItemArray0[1]);
//       
//       oHLCDataItemArray0[2] = oHLCDataItemArray0[0];
//       assertNotNull(oHLCDataItemArray0[2]);
//       
//       oHLCDataItemArray0[3] = oHLCDataItemArray0[1];
//       assertNotNull(oHLCDataItemArray0[3]);
//       
//       DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) fixedMillisecond0, oHLCDataItemArray0);
//       assertNotNull(defaultOHLCDataset0);
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//       
//       Double double0 = (Double)DatasetUtilities.findMinimumDomainValue((XYDataset) defaultOHLCDataset0);
//       assertEquals((-1.1830147200001E13), (double)double0, 0.01D);
//       assertEquals(1, defaultOHLCDataset0.getSeriesCount());
//       assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(0L, fixedMillisecond0.getSerialIndex());
//       assertEquals(0L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
//   }

  @Test
  public void test31()  throws Throwable  {
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) defaultXYZDataset0);
      assertNull(number0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue((XYDataset) defaultTableXYDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
  }

  @Test
  public void test33()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      int int0 = 0;
      Range range0 = new Range((double) int0, (double) int0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) list0, range0, boolean0);
      assertNull(range1);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test34()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      int int0 = 0;
      boolean boolean0 = false;
      Range range0 = new Range((double) int0, (double) int0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) list0, range0, boolean0);
      assertNull(range1);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
  }

  @Test
  public void test35()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindDomainBounds((XYDataset) xYTaskDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
  }

  @Test
  public void test36()  throws Throwable  {
      DefaultXYDataset defaultXYDataset0 = new DefaultXYDataset();
      assertNotNull(defaultXYDataset0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      List list0 = slidingGanttCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultXYDataset0.getSeriesCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test
  public void test37()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      double[][] doubleArray0 = new double[10][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Vector vector0 = null;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) vector0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
      }
  }

  @Test
  public void test38() {}
//   @Test
//   public void test38()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       Minute minute0 = new Minute((Date) mockDate0);
//       assertNotNull(minute0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) minute0);
//       assertNotNull(defaultBoxAndWhiskerXYDataset0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
//       assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
//       assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
//       assertNull(range0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(21, minute0.getMinute());
//       assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       assertEquals(1392409319999L, minute0.getLastMillisecond());
//       assertEquals(20, minute0.getHourValue());
//       assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       assertEquals(60026181L, minute0.getSerialIndex());
//       assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
//       assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
//       assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//   }

  @Test
  public void test39()  throws Throwable  {
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertNotNull(timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateRangeBounds((XYDataset) timeSeriesCollection0, boolean0);
      assertNull(range0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test40()  throws Throwable  {
      String string0 = "";
      double[][] doubleArray0 = new double[1][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      
      int int0 = 1;
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultCategoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
      assertNotNull(range0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1, slidingCategoryDataset0.getMaximumCategoryCount());
      assertEquals(1, slidingCategoryDataset0.getFirstCategoryIndex());
  }

  @Test
  public void test41()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      boolean boolean0 = false;
      Object[][] objectArray0 = new Object[6][5];
      List list0 = DefaultWindDataset.seriesNameListFromDataArray(objectArray0);
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(6, list0.size());
      
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, boolean0);
      assertNotNull(range0);
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(6, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test
  public void test43()  throws Throwable  {
      DefaultKeyedValuesDataset defaultKeyedValuesDataset0 = new DefaultKeyedValuesDataset();
      assertNotNull(defaultKeyedValuesDataset0);
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      List list0 = defaultKeyedValuesDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
      
      String string0 = "wU^iE@cNBYP%gY1v2";
      Number[][] numberArray0 = new Number[1][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, defaultKeyedValuesDataset0.getItemCount());
  }

  @Test
  public void test44()  throws Throwable  {
      String string0 = "Null 'rowKeys' argument.";
      Number[][] numberArray0 = new Number[9][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultCategoryDataset0, boolean0);
      assertNull(range0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test45()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(8192.0, range0.getCentralValue(), 0.01D);
      assertEquals(8192.0, range0.getLowerBound(), 0.01D);
      assertEquals(8192.0, range0.getUpperBound(), 0.01D);
  }

  @Test
  public void test46()  throws Throwable  {
      double[][] doubleArray0 = new double[10][2];
      double[] doubleArray1 = new double[9];
      double double0 = Double.NaN;
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, boolean0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test47()  throws Throwable  {
      Number[][] numberArray0 = new Number[9][5];
      Number[] numberArray1 = new Number[3];
      int int0 = ImageConsumer.RANDOMPIXELORDER;
      assertEquals(1, int0);
      
      numberArray1[1] = (Number) int0;
      assertNotNull(numberArray1[1]);
      assertEquals(1, numberArray1[1].shortValue());
      assertEquals(1, numberArray1[1].intValue());
      assertEquals(1.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(1, numberArray1[1].byteValue());
      assertEquals(1.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(1L, numberArray1[1].longValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getLowerBound(), 0.01D);
      assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(3, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test
  public void test48()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      
      boolean boolean0 = vectorSeriesCollection0.hasListener((EventListener) defaultTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, boolean0);
      assertNull(range0);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
  }

  @Test
  public void test49()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Series 4";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0);
      assertNotNull(timeSeries0);
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Series 4", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Series 4", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Series 4", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Series 4", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      List list0 = defaultPieDataset0.getKeys();
      assertNotNull(list0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) timeSeriesCollection0);
      assertNull(range0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Series 4", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Series 4", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeSeriesCollection0, (List) list0, range0, boolean0);
      assertNull(range1);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Series 4", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Series 4", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
  }

  @Test
  public void test50()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) defaultIntervalXYDataset0);
      assertNull(range0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      // Undeclared exception!
      try {
        Range range1 = DatasetUtilities.findRangeBounds((XYDataset) defaultIntervalXYDataset0, (List) list0, range0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'xRange' argument
         //
      }
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = ";)i;egP/KE.287xj";
      double[][] doubleArray0 = new double[9][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      
      List<DefaultHighLowDataset> list0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0, (List) list0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'visibleSeriesKeys' argument.
         //
      }
  }

  @Test
  public void test52()  throws Throwable  {
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertNotNull(vectorSeriesCollection0);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      
      boolean boolean0 = vectorSeriesCollection0.hasListener((EventListener) defaultTableXYDataset0);
      assertFalse(boolean0);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, boolean0);
      assertNotNull(range0);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test53()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findRangeBounds(categoryDataset0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      DefaultXYZDataset defaultXYZDataset0 = new DefaultXYZDataset();
      assertNotNull(defaultXYZDataset0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      
      boolean boolean0 = defaultKeyedValues2DDataset0.equals((Object) defaultKeyedValues2DDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultXYZDataset0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultXYZDataset0.getSeriesCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
  }

  @Test
  public void test55()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Vector<Byte> vector0 = null;
      int int0 = 2253;
      double[][] doubleArray0 = new double[10][2];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(10, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(10, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getCategoryCount());
      
      DefaultTableModel defaultTableModel0 = new DefaultTableModel((Vector) vector0, int0);
      assertNotNull(defaultTableModel0);
      
      Vector vector1 = defaultTableModel0.getDataVector();
      assertNotNull(vector1);
      assertEqualsvector1.toString());
      assertEquals(false, vector1.isEmpty());
      assertEquals(2253, vector1.capacity());
      assertEquals(2253, vector1.size());
      
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, (List) vector1, boolean0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector cannot be cast to java.lang.Comparable
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultIntervalXYDataset0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test
  public void test57()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findDomainBounds((XYDataset) tableXYDataset0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test58()  throws Throwable  {
      TableXYDataset tableXYDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) tableXYDataset0);
      assertTrue(boolean0);
  }

  @Test
  public void test59()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
  }

  @Test
  public void test60()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
  }

  @Test
  public void test61()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertFalse(int1 == int0);
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertFalse(boolean0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertFalse(int1 == int0);
  }

  @Test
  public void test62()  throws Throwable  {
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      double double0 = 0.0;
      TableOrder tableOrder0 = TableOrder.BY_COLUMN;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      int int0 = (-669);
      CategoryToPieDataset categoryToPieDataset0 = new CategoryToPieDataset((CategoryDataset) defaultCategoryDataset0, tableOrder0, int0);
      assertNotNull(categoryToPieDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(-669, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) categoryToPieDataset0, (Comparable) double0, (double) int0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(-669, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      
      DefaultPieDataset defaultPieDataset1 = new DefaultPieDataset((KeyedValues) defaultPieDataset0);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(-669, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset1);
      assertTrue(boolean0);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(-669, categoryToPieDataset0.getExtractIndex());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
  }

  @Test
  public void test63()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 0.0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(0, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      double double1 = 2176.717158383915;
      int int0 = 0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) polynomialFunction2D0, double0, double1, int0, (Comparable) fixedMillisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
      }
  }

  @Test
  public void test64()  throws Throwable  {
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[4] = (double) int0;
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 8192.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      double double0 = 0.0;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) polynomialFunction2D0, double0, doubleArray0[4], int0, (Comparable) doubleArray0[0]);
      assertNotNull(xYSeries0);
      assertEquals(6, polynomialFunction2D0.getOrder());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(3.6893488147419103E19, xYSeries0.getMaxY(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0.0, xYSeries0.getMinX(), 0.01D);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(8192, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(8192.0, xYSeries0.getMaxX(), 0.01D);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 8192.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test65()  throws Throwable  {
      int int0 = 59;
      Function2D function2D0 = null;
      // Undeclared exception!
      try {
        XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries(function2D0, (double) int0, (double) int0, int0, (Comparable) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'f' argument.
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      double double0 = (-598.454659273);
      boolean boolean0 = false;
      double double1 = 0.0;
      SimpleHistogramBin simpleHistogramBin0 = new SimpleHistogramBin(double0, double1, boolean0, boolean0);
      assertNotNull(simpleHistogramBin0);
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01D);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-598.454659273), simpleHistogramBin0.getLowerBound(), 0.01D);
      assertEquals(false, simpleHistogramBin0.isSelected());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      DefaultPieDataset defaultPieDataset0 = new DefaultPieDataset();
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) simpleHistogramBin0, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0.0, simpleHistogramBin0.getUpperBound(), 0.01D);
      assertEquals(0, simpleHistogramBin0.getItemCount());
      assertEquals((-598.454659273), simpleHistogramBin0.getLowerBound(), 0.01D);
      assertEquals(false, simpleHistogramBin0.isSelected());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
  }

  @Test
  public void test67()  throws Throwable  {
      Comparable<String>[] comparableArray0 = (Comparable<String>[]) Array.newInstance(Comparable.class, 1);
      double[][] doubleArray0 = new double[2][9];
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      double double0 = (-1011.0);
      String string0 = "";
      doubleArray0[1] = double0;
      double[][] doubleArray1 = new double[1][5];
      doubleArray1[0] = doubleArray0;
      assertNotNull(doubleArray1[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      int int0 = 1;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) doubleArray0[1], doubleArray0[4]);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertArrayEquals(new double[] {0.0, (-1011.0), 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test69()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      defaultKeyedValues2DDataset0.setValue((Number) int0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int1, (double) int0, int1);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
  }

  @Test
  public void test70()  throws Throwable  {
      String string0 = "DAYHsX";
      Number[][] numberArray0 = new Number[4][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      
      // Undeclared exception!
      try {
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) string0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test71()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      String string0 = "";
      double[][] doubleArray1 = new double[1][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray1);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      
      long long0 = 1L;
      int int0 = 1;
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultCategoryDataset0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) doubleArray0[1], (double) long0);
      assertNotNull(defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(1, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test72()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultIntervalXYDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      int int0 = 0;
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      XYIntervalSeries xYIntervalSeries0 = new XYIntervalSeries((Comparable) boolean0);
      assertNotNull(xYIntervalSeries0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(true, xYIntervalSeries0.isEmpty());
      assertEquals(true, xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertEquals(true, xYIntervalSeries0.getNotify());
      assertEquals(true, xYIntervalSeries0.getAutoSort());
      assertEquals(2147483647, xYIntervalSeries0.getMaximumItemCount());
      
      Comparable comparable0 = xYIntervalSeries0.getKey();
      assertEquals(true, comparable0);
      assertNotNull(comparable0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(true, xYIntervalSeries0.isEmpty());
      assertEquals(true, xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertEquals(true, xYIntervalSeries0.getNotify());
      assertEquals(true, xYIntervalSeries0.getAutoSort());
      assertEquals(2147483647, xYIntervalSeries0.getMaximumItemCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) slidingGanttCategoryDataset0, (Comparable) comparable0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      assertNull(xYIntervalSeries0.getDescription());
      assertEquals(true, xYIntervalSeries0.isEmpty());
      assertEquals(true, xYIntervalSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYIntervalSeries0.getItemCount());
      assertEquals(true, xYIntervalSeries0.getNotify());
      assertEquals(true, xYIntervalSeries0.getAutoSort());
      assertEquals(2147483647, xYIntervalSeries0.getMaximumItemCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test73()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      int int0 = InputEvent.ALT_GRAPH_DOWN_MASK;
      assertEquals(8192, int0);
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
  }

  @Test
  public void test74() {}
//   @Test
//   public void test74()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       SimpleHistogramDataset simpleHistogramDataset0 = new SimpleHistogramDataset((Comparable) mockDate0);
//       assertNotNull(simpleHistogramDataset0);
//       assertEquals(1, simpleHistogramDataset0.getSeriesCount());
//       assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) simpleHistogramDataset0);
//       assertNull(range0);
//       assertEquals(1, simpleHistogramDataset0.getSeriesCount());
//       assertEquals(true, simpleHistogramDataset0.getAdjustForBinSize());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//   }

  @Test
  public void test75()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) categoryTableXYDataset0);
      assertNull(range0);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
  }

  @Test
  public void test76()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
  }

  @Test
  public void test77()  throws Throwable  {
      MatrixSeries matrixSeries0 = null;
      MatrixSeriesCollection matrixSeriesCollection0 = new MatrixSeriesCollection(matrixSeries0);
      assertNotNull(matrixSeriesCollection0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) matrixSeriesCollection0);
      assertNull(range0);
      assertEquals(0, matrixSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test78()  throws Throwable  {
      int int0 = KeyEvent.VK_6;
      assertEquals(54, int0);
      
      PowerFunction2D powerFunction2D0 = new PowerFunction2D((double) int0, (double) int0);
      assertNotNull(powerFunction2D0);
      assertEquals(54.0, powerFunction2D0.getA(), 0.01D);
      assertEquals(54.0, powerFunction2D0.getB(), 0.01D);
      
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) powerFunction2D0, (double) int0, (double) int0, int0, (Comparable) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
      }
  }

  @Test
  public void test79()  throws Throwable  {
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
  }

  @Test
  public void test80() {}
//   @Test
//   public void test80()  throws Throwable  {
//       TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
//       assertNotNull(taskSeriesCollection0);
//       assertEquals(0, taskSeriesCollection0.getColumnCount());
//       assertEquals(0, taskSeriesCollection0.getSeriesCount());
//       assertEquals(0, taskSeriesCollection0.getRowCount());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
//       assertNotNull(mockDate0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
//       assertNotNull(zoneInfo0);
//       assertEquals("GMT", zoneInfo0.getID());
//       
//       Year year0 = new Year((Date) mockDate0, (TimeZone) zoneInfo0);
//       assertNotNull(year0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       
//       DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) year0);
//       assertNotNull(defaultPieDataset0);
//       assertEquals("GMT", zoneInfo0.getID());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
//       assertEquals(0, defaultPieDataset0.getItemCount());
//       assertEquals(1420070399999L, year0.getLastMillisecond());
//       assertEquals("2014", year0.toString());
//       assertEquals(2014, year0.getYear());
//       assertEquals(1404302399999L, year0.getMiddleMillisecond());
//       assertEquals(1388534400000L, year0.getFirstMillisecond());
//       assertEquals(2014L, year0.getSerialIndex());
//       assertEquals(0, taskSeriesCollection0.getColumnCount());
//       assertEquals(0, taskSeriesCollection0.getSeriesCount());
//       assertEquals(0, taskSeriesCollection0.getRowCount());
//   }
}
