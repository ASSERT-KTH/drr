/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:18:45 GMT 2014
 */

package org.jfree.data.general;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.Event;
import java.awt.Frame;
import java.awt.image.ImageObserver;
import java.lang.reflect.Array;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.text.DateFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.KeyToGroupMap;
import org.jfree.data.KeyedValues;
import org.jfree.data.Range;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.jfree.data.category.SlidingCategoryDataset;
import org.jfree.data.function.Function2D;
import org.jfree.data.function.PolynomialFunction2D;
import org.jfree.data.function.PowerFunction2D;
import org.jfree.data.gantt.GanttCategoryDataset;
import org.jfree.data.gantt.SlidingGanttCategoryDataset;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.gantt.TaskSeriesCollection;
import org.jfree.data.gantt.XYTaskDataset;
import org.jfree.data.general.DatasetUtilities;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.pie.DefaultPieDataset;
import org.jfree.data.pie.PieDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.jfree.data.xy.CategoryTableXYDataset;
import org.jfree.data.xy.DefaultHighLowDataset;
import org.jfree.data.xy.DefaultIntervalXYDataset;
import org.jfree.data.xy.DefaultOHLCDataset;
import org.jfree.data.xy.DefaultTableXYDataset;
import org.jfree.data.xy.DefaultWindDataset;
import org.jfree.data.xy.OHLCDataItem;
import org.jfree.data.xy.TableXYDataset;
import org.jfree.data.xy.XYBarDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class DatasetUtilitiesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = Event.MOUSE_DOWN;
      assertEquals(501, int0);
      
      String string0 = "@{AN_'zlj-\\t";
      Number[][] numberArray0 = new Number[10][5];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(-11, numberArray1[0].byteValue());
      assertEquals(501, numberArray1[0].shortValue());
      assertEquals(501.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(501L, numberArray1[0].longValue());
      assertEquals(501.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(501, numberArray1[0].intValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(250.5, range0.getCentralValue(), 0.01D);
      assertEquals(501.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(501.0, range0.getUpperBound(), 0.01D);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test01()  throws Throwable  {
      String string0 = "@{AN_'zlj-\\t";
      Number[][] numberArray0 = new Number[10][5];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findCumulativeRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNull(range0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = (-2354);
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      double double0 = DatasetUtilities.calculateStackTotal((TableXYDataset) defaultTableXYDataset0, int0);
      assertEquals(0.0, double0, 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
  }

  @Test
  public void test03()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      
      double double0 = 1.0;
      double double1 = 0.0;
      String string0 = "Null 'rowData' argument.";
      categoryTableXYDataset0.add(double0, double1, string0);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertFalse(double0 == double1);
      assertFalse(double1 == double0);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, double0);
      assertNotNull(range0);
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(1.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertFalse(double0 == double1);
  }

  @Test
  public void test04()  throws Throwable  {
      CategoryTableXYDataset categoryTableXYDataset0 = new CategoryTableXYDataset();
      assertNotNull(categoryTableXYDataset0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getItemCount());
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, categoryTableXYDataset0.getSeriesCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      
      double double0 = 1.0;
      String string0 = "Null 'rowData' argument.";
      categoryTableXYDataset0.add(double0, double0, string0);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) categoryTableXYDataset0, double0);
      assertNotNull(range0);
      assertEquals(1.5, range0.getCentralValue(), 0.01D);
      assertEquals(1.0, range0.getLowerBound(), 0.01D);
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals(1.0, categoryTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0.5, categoryTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1, categoryTableXYDataset0.getSeriesCount());
      assertEquals(1, categoryTableXYDataset0.getItemCount());
      assertEquals(true, categoryTableXYDataset0.isAutoWidth());
  }

  @Test
  public void test05()  throws Throwable  {
      double[][] doubleArray0 = new double[2][9];
      double[] doubleArray1 = new double[5];
      double double0 = 720.1564312381;
      doubleArray1[1] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      
      Double double1 = (Double)DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) defaultIntervalCategoryDataset0);
      assertEquals(720.1564312381, (double)double1, 0.01D);
      assertEquals(2, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(2, defaultIntervalCategoryDataset0.getSeriesCount());
      assertTrue(double1.equals((Object)double0));
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = 0;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      SlidingCategoryDataset slidingCategoryDataset0 = new SlidingCategoryDataset((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0, int0, int0);
      assertNotNull(slidingCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
      
      Number number0 = DatasetUtilities.findMaximumStackedRangeValue((CategoryDataset) slidingCategoryDataset0);
      assertNull(number0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, slidingCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, slidingCategoryDataset0.getMaximumCategoryCount());
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = (-4120);
      String string0 = "d8\"K3";
      Number[][] numberArray0 = new Number[9][7];
      Number[] numberArray1 = new Number[6];
      numberArray1[2] = (Number) int0;
      assertNotNull(numberArray1[2]);
      assertEquals((-4120.0), numberArray1[2].doubleValue(), 0.01D);
      assertEquals((-4120L), numberArray1[2].longValue());
      assertEquals(-4120, numberArray1[2].intValue());
      assertEquals((-4120.0F), numberArray1[2].floatValue(), 0.01F);
      assertEquals(-24, numberArray1[2].byteValue());
      assertEquals(-4120, numberArray1[2].shortValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals((-4120.0), (double)double0, 0.01D);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = "d8\"K3";
      Number[][] numberArray0 = new Number[9][7];
      Number[] numberArray1 = new Number[6];
      int int0 = Frame.MAXIMIZED_HORIZ;
      assertEquals(2, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(2, numberArray1[0].shortValue());
      assertEquals(2L, numberArray1[0].longValue());
      assertEquals(2, numberArray1[0].byteValue());
      assertEquals(2, numberArray1[0].intValue());
      assertEquals(2.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(2.0, numberArray1[0].doubleValue(), 0.01D);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01D);
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test09()  throws Throwable  {
      String string0 = "d8\"K3";
      Number[][] numberArray0 = new Number[9][7];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMinimumStackedRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(7, defaultCategoryDataset0.getColumnCount());
  }

  @Test
  public void test10()  throws Throwable  {
      String string0 = "Duplicate items in 'rowKeys'.";
      double[][] doubleArray0 = new double[4][10];
      double[] doubleArray1 = new double[9];
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      double double0 = (-4779.76468292581);
      doubleArray2[3] = double0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) doubleArray1[4]);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals((-4779.76468292581), range0.getLowerBound(), 0.01D);
      assertEquals((-2389.882341462905), range0.getCentralValue(), 0.01D);
      assertEquals(4779.76468292581, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = "Duplicate items in 'rowKeys'.";
      double[][] doubleArray0 = new double[4][10];
      double[] doubleArray1 = new double[9];
      double double0 = 1046.176037204421;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray1));
      assertNotSame(doubleArray2, doubleArray1);
      
      doubleArray2[0] = double0;
      doubleArray0[1] = doubleArray2;
      assertNotNull(doubleArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) doubleArray1[4]);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, keyToGroupMap0);
      assertNotNull(range0);
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(4, defaultCategoryDataset0.getRowCount());
      assertEquals(1046.176037204421, range0.getUpperBound(), 0.01D);
      assertEquals(523.0880186022105, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1046.176037204421, range0.getLength(), 0.01D);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertFalse(doubleArray1.equals((Object)doubleArray2));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotSame(doubleArray1, doubleArray2);
  }

  @Test
  public void test12()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      int int0 = (-1);
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap((Comparable) int0);
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0, keyToGroupMap0);
      assertNull(range0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = "]";
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[10];
      double double0 = (-1.0);
      doubleArray1[9] = double0;
      doubleArray0[6] = doubleArray1;
      assertNotNull(doubleArray0[6]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) int0);
      assertNotNull(range0);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(10, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
      assertEquals(0.5, range0.getCentralValue(), 0.01D);
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = "]";
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) int0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) defaultCategoryDataset0, (double) int0);
      assertNotNull(range0);
      assertEquals(2, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(1.0, range0.getLowerBound(), 0.01D);
      assertEquals(1.5, range0.getCentralValue(), 0.01D);
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      double double0 = (-1850.0);
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.findStackedRangeBounds(categoryDataset0, double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      String string0 = "";
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
  }

  @Test
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      assertNotNull(fixedMillisecond0);
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection(timeSeries0);
      assertNotNull(timeSeriesCollection0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((XYDataset) timeSeriesCollection0);
      assertNull(number0);
      assertEquals(1, timeSeriesCollection0.getSeriesCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(Double.NaN, timeSeries0.getMaxY(), 0.01D);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(Double.NaN, timeSeries0.getMinY(), 0.01D);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[1][8];
      Number[] numberArray1 = new Number[1];
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      int int0 = JComponent.WHEN_FOCUSED;
      assertEquals(0, int0);
      
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(0, numberArray1[0].shortValue());
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0L, numberArray1[0].longValue());
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      Double double0 = (Double)DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double0, 0.01D);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test19()  throws Throwable  {
      String string0 = "";
      Number[][] numberArray0 = new Number[1][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMaximumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      Date[] dateArray0 = new Date[1];
      DefaultHighLowDataset defaultHighLowDataset0 = new DefaultHighLowDataset((Comparable) double0, dateArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
      assertNotNull(defaultHighLowDataset0);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((XYDataset) defaultHighLowDataset0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertEquals(1, defaultHighLowDataset0.getSeriesCount());
      assertTrue(double1.equals((Object)double0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test21()  throws Throwable  {
      DefaultIntervalXYDataset defaultIntervalXYDataset0 = new DefaultIntervalXYDataset();
      assertNotNull(defaultIntervalXYDataset0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((XYDataset) defaultIntervalXYDataset0);
      assertNull(number0);
      assertEquals(0, defaultIntervalXYDataset0.getSeriesCount());
  }

  @Test
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      String string0 = "@{AN_'zlj-\\t1";
      Number[][] numberArray0 = new Number[9][8];
      Number[] numberArray1 = new Number[3];
      numberArray1[0] = (Number) double0;
      assertNotNull(numberArray1[0]);
      assertEquals(0, numberArray1[0].byteValue());
      assertEquals(0, numberArray1[0].intValue());
      assertEquals(0.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(0L, numberArray1[0].longValue());
      assertEquals(0, numberArray1[0].shortValue());
      assertEquals(0.0F, numberArray1[0].floatValue(), 0.01F);
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      Double double1 = (Double)DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0.0, (double)double1, 0.01D);
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertTrue(double1.equals((Object)double0));
  }

  @Test
  public void test23()  throws Throwable  {
      String string0 = "@{AN_'zlj-\\t1";
      Number[][] numberArray0 = new Number[9][8];
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
      
      Number number0 = DatasetUtilities.findMinimumRangeValue((CategoryDataset) defaultCategoryDataset0);
      assertNull(number0);
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(9, defaultCategoryDataset0.getRowCount());
  }

  @Test
  public void test24()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      Number number0 = DatasetUtilities.findMaximumDomainValue((XYDataset) xYTaskDataset0);
      assertNull(number0);
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test
  public void test25()  throws Throwable  {
      String string0 = "";
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      
      Number number0 = DatasetUtilities.findMinimumDomainValue((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(number0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      Double double0 = (Double)DatasetUtilities.findMinimumDomainValue((XYDataset) timePeriodValuesCollection0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = (-10);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertNotNull(defaultTableCellRenderer0);
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      
      Locale locale0 = defaultTableCellRenderer0.getLocale();
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) zoneInfo0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) int0);
      assertNotNull(range0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals((-10.0), range0.getCentralValue(), 0.01D);
      assertEquals((-10.0), range0.getUpperBound(), 0.01D);
      assertEquals((-10.0), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = true;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) list0, range0, boolean0);
      assertNull(range1);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals((-10.0), range0.getCentralValue(), 0.01D);
      assertEquals((-10.0), range0.getUpperBound(), 0.01D);
      assertEquals((-10.0), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test
  public void test28()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      int int0 = (-2751);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(-2751, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-2751, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(-2751, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-2751, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(-2751, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(-2751, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = 2;
      String string0 = "uD&wH=_3]9j*5n";
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[4];
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      
      Second second0 = millisecond0.getSecond();
      assertNotNull(second0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)second0.getEnd();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) int0, (double) int0, (double) int0, (double) int0, (double) int0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      assertNotNull(oHLCDataItemArray0[0]);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      assertNotNull(oHLCDataItemArray0[1]);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      oHLCDataItemArray0[2] = oHLCDataItemArray0[1];
      assertNotNull(oHLCDataItemArray0[2]);
      
      oHLCDataItemArray0[3] = oHLCDataItemArray0[1];
      assertNotNull(oHLCDataItemArray0[3]);
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) string0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultOHLCDataset0, boolean0);
      assertNotNull(range0);
      assertEquals(2.0, range0.getCentralValue(), 0.01D);
      assertEquals(2.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(2.0, range0.getLowerBound(), 0.01D);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
  }

  @Test
  public void test30()  throws Throwable  {
      DefaultWindDataset defaultWindDataset0 = new DefaultWindDataset();
      assertNotNull(defaultWindDataset0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultWindDataset0);
      assertNull(range0);
      assertEquals(0, defaultWindDataset0.getSeriesCount());
  }

  @Test
  public void test31()  throws Throwable  {
      long long0 = 0L;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      MockDate mockDate0 = (MockDate)fixedMillisecond0.getStart();
      assertNotNull(mockDate0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      OHLCDataItem[] oHLCDataItemArray0 = new OHLCDataItem[2];
      OHLCDataItem oHLCDataItem0 = new OHLCDataItem((Date) mockDate0, (double) long0, (double) long0, (double) long0, (double) long0, (double) long0);
      assertNotNull(oHLCDataItem0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      oHLCDataItemArray0[0] = oHLCDataItem0;
      assertNotNull(oHLCDataItemArray0[0]);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      oHLCDataItemArray0[1] = oHLCDataItem0;
      assertNotNull(oHLCDataItemArray0[1]);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      DefaultOHLCDataset defaultOHLCDataset0 = new DefaultOHLCDataset((Comparable) fixedMillisecond0, oHLCDataItemArray0);
      assertNotNull(defaultOHLCDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      XYBarDataset xYBarDataset0 = new XYBarDataset((XYDataset) defaultOHLCDataset0, (double) long0);
      assertNotNull(xYBarDataset0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) xYBarDataset0);
      assertNotNull(range0);
      assertEquals(1, defaultOHLCDataset0.getSeriesCount());
      assertEquals(0.0, xYBarDataset0.getBarWidth(), 0.01D);
      assertEquals(0L, fixedMillisecond0.getFirstMillisecond());
      assertEquals(0L, fixedMillisecond0.getMiddleMillisecond());
      assertEquals(0L, fixedMillisecond0.getLastMillisecond());
      assertEquals(0L, fixedMillisecond0.getSerialIndex());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultTableXYDataset0, boolean0);
      assertNull(range0);
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
  }

  @Test
  public void test33()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][1];
      Number[] numberArray1 = new Number[2];
      float float0 = Component.BOTTOM_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      numberArray1[0] = (Number) float0;
      assertNotNull(numberArray1[0]);
      assertEquals(1, numberArray1[0].byteValue());
      assertEquals(1.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(1.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(1, numberArray1[0].shortValue());
      assertEquals(1, numberArray1[0].intValue());
      assertEquals(1L, numberArray1[0].longValue());
      
      numberArray0[1] = numberArray1;
      assertNotNull(numberArray0[1]);
      
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, boolean0);
      assertNotNull(range0);
      assertEquals(8, list0.size());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(1.0, range0.getUpperBound(), 0.01D);
      assertEquals(1.0, range0.getCentralValue(), 0.01D);
      assertEquals(1.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test34()  throws Throwable  {
      Number[][] numberArray0 = new Number[8][1];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      
      List list0 = defaultIntervalCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(1, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(1, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(8, list0.size());
  }

  @Test
  public void test35()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      List list0 = defaultKeyedValues2DDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateToFindRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test36()  throws Throwable  {
      String string0 = null;
      double[][] doubleArray0 = new double[10][1];
      double[] doubleArray1 = new double[6];
      double double0 = Double.NaN;
      doubleArray1[3] = double0;
      doubleArray0[0] = doubleArray1;
      assertNotNull(doubleArray0[0]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, doubleArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultCategoryDataset0);
      assertNotNull(range0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test37()  throws Throwable  {
      Number[][] numberArray0 = new Number[6][9];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNull(range0);
      assertEquals(6, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(6, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(9, defaultIntervalCategoryDataset0.getColumnCount());
  }

  @Test
  public void test38()  throws Throwable  {
      int int0 = (-10);
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertNotNull(defaultTableCellRenderer0);
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      
      Locale locale0 = defaultTableCellRenderer0.getLocale();
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) zoneInfo0, locale0);
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals("GMT", zoneInfo0.getID());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0, (double) int0);
      assertNotNull(range0);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals((-10.0), range0.getUpperBound(), 0.01D);
      assertEquals((-10.0), range0.getCentralValue(), 0.01D);
      assertEquals((-10.0), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      
      KeyToGroupMap keyToGroupMap0 = new KeyToGroupMap();
      assertNotNull(keyToGroupMap0);
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      List list0 = keyToGroupMap0.getGroups();
      assertNotNull(list0);
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, keyToGroupMap0.getGroupCount());
      
      boolean boolean0 = false;
      Range range1 = DatasetUtilities.findRangeBounds((XYDataset) timeTableXYDataset0, (List) list0, range0, boolean0);
      assertNull(range1);
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals((-10.0), range0.getUpperBound(), 0.01D);
      assertEquals((-10.0), range0.getCentralValue(), 0.01D);
      assertEquals((-10.0), range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(1, keyToGroupMap0.getGroupCount());
  }

  @Test
  public void test39()  throws Throwable  {
      String string0 = "";
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      
      Range range0 = DatasetUtilities.findRangeBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
  }

  @Test
  public void test40()  throws Throwable  {
      int int0 = 0;
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) defaultKeyedValues2DDataset0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((PieDataset) defaultPieDataset0);
      assertTrue(boolean0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      List list0 = defaultMultiValueCategoryDataset0.getRowKeys();
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
  }

  @Test
  public void test41()  throws Throwable  {
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      
      Range range0 = DatasetUtilities.findRangeBounds((CategoryDataset) defaultMultiValueCategoryDataset0);
      assertNotNull(range0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test42()  throws Throwable  {
      String string0 = "";
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
  }

  @Test
  public void test43()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      
      String string0 = "Value:";
      TaskSeries taskSeries0 = new TaskSeries(string0);
      assertNotNull(taskSeries0);
      assertEquals(0, taskSeries0.getItemCount());
      assertEquals(true, taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(true, taskSeries0.isEmpty());
      
      taskSeriesCollection0.add(taskSeries0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(1, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeries0.getItemCount());
      assertEquals(true, taskSeries0.getNotify());
      assertNull(taskSeries0.getDescription());
      assertEquals(true, taskSeries0.isEmpty());
      
      boolean boolean0 = true;
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) xYTaskDataset0, boolean0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(1, taskSeriesCollection0.getRowCount());
      assertEquals(1, taskSeriesCollection0.getSeriesCount());
      assertEquals(1, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
  }

  @Test
  public void test44()  throws Throwable  {
      DefaultTableXYDataset defaultTableXYDataset0 = new DefaultTableXYDataset();
      assertNotNull(defaultTableXYDataset0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range0 = defaultTableXYDataset0.getDomainBounds(boolean0);
      assertNull(range0);
      assertEquals(1.0, defaultTableXYDataset0.getIntervalWidth(), 0.01D);
      assertEquals(0, defaultTableXYDataset0.getItemCount());
      assertEquals(0.5, defaultTableXYDataset0.getIntervalPositionFactor(), 0.01D);
      assertEquals(false, defaultTableXYDataset0.isAutoWidth());
      assertEquals(false, defaultTableXYDataset0.isAutoPrune());
      assertEquals(0, defaultTableXYDataset0.getSeriesCount());
  }

  @Test
  public void test45()  throws Throwable  {
      XYDataset xYDataset0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try {
        Range range0 = DatasetUtilities.iterateDomainBounds(xYDataset0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test46()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      int int0 = (-2751);
      SlidingGanttCategoryDataset slidingGanttCategoryDataset0 = new SlidingGanttCategoryDataset((GanttCategoryDataset) taskSeriesCollection0, int0, int0);
      assertNotNull(slidingGanttCategoryDataset0);
      assertEquals(-2751, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-2751, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertNotNull(timePeriodValuesCollection0);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      
      List list0 = slidingGanttCategoryDataset0.getColumnKeys();
      assertNotNull(list0);
      assertEquals(-2751, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-2751, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      
      Range range0 = DatasetUtilities.findDomainBounds((XYDataset) timePeriodValuesCollection0, (List) list0, boolean0);
      assertNull(range0);
      assertEquals(-2751, slidingGanttCategoryDataset0.getFirstCategoryIndex());
      assertEquals(-2751, slidingGanttCategoryDataset0.getMaximumCategoryCount());
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test47()  throws Throwable  {
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      assertNotNull(xYSeriesCollection0);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      
      Double double0 = (Double)DatasetUtilities.findMaximumDomainValue((XYDataset) xYSeriesCollection0);
      assertEquals(Double.NaN, (double)double0, 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
  }

  @Test
  public void test48()  throws Throwable  {
      String string0 = "";
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) string0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((XYDataset) defaultBoxAndWhiskerXYDataset0);
      assertTrue(boolean0);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
  }

  @Test
  public void test49()  throws Throwable  {
      double[][] doubleArray0 = new double[8][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) defaultIntervalCategoryDataset0);
      assertFalse(boolean0);
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
  }

  @Test
  public void test50()  throws Throwable  {
      CategoryDataset categoryDataset0 = null;
      boolean boolean0 = DatasetUtilities.isEmptyOrNull(categoryDataset0);
      assertTrue(boolean0);
  }

  @Test
  public void test51()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      
      boolean boolean0 = DatasetUtilities.isEmptyOrNull((CategoryDataset) taskSeriesCollection0);
      assertTrue(boolean0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
  }

  @Test
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double double0 = 0.0;
      double double1 = (-3058.743);
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(doubleArray0[2], double0);
      assertNotNull(powerFunction2D0);
      assertEquals(0.0, powerFunction2D0.getB(), 0.01D);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01D);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1548;
      XYSeries xYSeries0 = DatasetUtilities.sampleFunction2DToSeries((Function2D) powerFunction2D0, double1, double0, int0, (Comparable) doubleArray0[3]);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1548, xYSeries0.getItemCount());
      assertEquals((-3058.743), xYSeries0.getMinX(), 0.01D);
      assertEquals(0.0, xYSeries0.getMinY(), 0.01D);
      assertEquals(0.0, xYSeries0.getMaxX(), 0.01D);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0.0, xYSeries0.getMaxY(), 0.01D);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0.0, powerFunction2D0.getB(), 0.01D);
      assertEquals(0.0, powerFunction2D0.getA(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 0.0;
      double double1 = (-209.7768763304803);
      PolynomialFunction2D polynomialFunction2D0 = new PolynomialFunction2D(doubleArray0);
      assertNotNull(polynomialFunction2D0);
      assertEquals(8, polynomialFunction2D0.getOrder());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = 1;
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) polynomialFunction2D0, double1, doubleArray0[0], int0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'samples' > 1
         //
      }
  }

  @Test
  public void test54()  throws Throwable  {
      int int0 = Event.MOUSE_DOWN;
      assertEquals(501, int0);
      
      String string0 = "@{AN_'zlj-\\t";
      Number[][] numberArray0 = new Number[10][5];
      int int1 = SwingConstants.NORTH;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultPieDataset0.getItemCount());
      assertFalse(int1 == int0);
      
      DefaultCategoryDataset defaultCategoryDataset1 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset((Comparable) int0, (KeyedValues) defaultPieDataset0);
      assertNotNull(defaultCategoryDataset1);
      assertEquals(1, defaultCategoryDataset1.getRowCount());
      assertEquals(5, defaultCategoryDataset1.getColumnCount());
      assertEquals(5, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(5, defaultPieDataset0.getItemCount());
      assertFalse(defaultCategoryDataset1.equals((Object)defaultCategoryDataset0));
      assertFalse(int0 == int1);
      assertFalse(defaultCategoryDataset0.equals((Object)defaultCategoryDataset1));
      assertFalse(int1 == int0);
      assertNotSame(defaultCategoryDataset1, defaultCategoryDataset0);
      assertNotSame(defaultCategoryDataset0, defaultCategoryDataset1);
  }

  @Test
  public void test55()  throws Throwable  {
      Comparable<Integer>[] comparableArray0 = (Comparable<Integer>[]) Array.newInstance(Comparable.class, 6);
      double[][] doubleArray0 = new double[9][4];
      // Undeclared exception!
      try {
        CategoryDataset categoryDataset0 = DatasetUtilities.createCategoryDataset(comparableArray0, comparableArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The number of row keys does not match the number of rows in the data array.
         //
      }
  }

  @Test
  public void test56()  throws Throwable  {
      int int0 = Event.MOUSE_DOWN;
      assertEquals(501, int0);
      
      String string0 = "@{AN_'zlj-\\t";
      Number[][] numberArray0 = new Number[10][5];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(501, numberArray1[0].intValue());
      assertEquals(-11, numberArray1[0].byteValue());
      assertEquals(501, numberArray1[0].shortValue());
      assertEquals(501.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(501L, numberArray1[0].longValue());
      assertEquals(501.0, numberArray1[0].doubleValue(), 0.01D);
      
      numberArray1[1] = (Number) int0;
      assertNotNull(numberArray1[1]);
      assertEquals(501.0, numberArray1[1].doubleValue(), 0.01D);
      assertEquals(501, numberArray1[1].shortValue());
      assertEquals(501.0F, numberArray1[1].floatValue(), 0.01F);
      assertEquals(-11, numberArray1[1].byteValue());
      assertEquals(501L, numberArray1[1].longValue());
      assertEquals(501, numberArray1[1].intValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      int int1 = SwingConstants.NORTH;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      numberArray0[1] = numberArray0[0];
      assertNotNull(numberArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertEquals(8, defaultPieDataset0.getItemCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int1, (double) int1, int1);
      assertNotNull(defaultPieDataset1);
      assertEquals(8, defaultPieDataset0.getItemCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int1 == int0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
  }

  @Test
  public void test57()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, int0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int0, (double) int0, int1);
      assertNotNull(defaultPieDataset1);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertFalse(int1 == int0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int0 == int1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      
      DefaultPieDataset defaultPieDataset2 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset1, (Comparable) int1, (double) int0);
      assertNotNull(defaultPieDataset2);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(1, defaultPieDataset2.getItemCount());
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertFalse(int1 == int0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset2.equals((Object)defaultPieDataset0));
      assertTrue(defaultPieDataset2.equals((Object)defaultPieDataset1));
      assertTrue(defaultPieDataset1.equals((Object)defaultPieDataset2));
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int0 == int1);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
      assertNotSame(defaultPieDataset0, defaultPieDataset2);
      assertNotSame(defaultPieDataset2, defaultPieDataset0);
      assertNotSame(defaultPieDataset2, defaultPieDataset1);
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset1, defaultPieDataset2);
  }

  @Test
  public void test58()  throws Throwable  {
      int int0 = Event.MOUSE_DOWN;
      assertEquals(501, int0);
      
      String string0 = "@{AN_'zlj-\\t";
      Number[][] numberArray0 = new Number[10][5];
      Number[] numberArray1 = new Number[8];
      numberArray1[0] = (Number) int0;
      assertNotNull(numberArray1[0]);
      assertEquals(501L, numberArray1[0].longValue());
      assertEquals(501, numberArray1[0].intValue());
      assertEquals(501.0F, numberArray1[0].floatValue(), 0.01F);
      assertEquals(501, numberArray1[0].shortValue());
      assertEquals(501.0, numberArray1[0].doubleValue(), 0.01D);
      assertEquals(-11, numberArray1[0].byteValue());
      
      numberArray0[0] = numberArray1;
      assertNotNull(numberArray0[0]);
      
      int int1 = SwingConstants.NORTH;
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      numberArray0[1] = numberArray0[0];
      assertNotNull(numberArray0[1]);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, int1);
      assertNotNull(defaultPieDataset0);
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultPieDataset0.getItemCount());
      assertFalse(int1 == int0);
      
      DefaultPieDataset defaultPieDataset1 = (DefaultPieDataset)DatasetUtilities.createConsolidatedPieDataset((PieDataset) defaultPieDataset0, (Comparable) int0, (double) int0, int0);
      assertNotNull(defaultPieDataset1);
      assertEquals(1, defaultPieDataset1.getItemCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      assertEquals(8, defaultCategoryDataset0.getColumnCount());
      assertEquals(8, defaultPieDataset0.getItemCount());
      assertFalse(defaultPieDataset1.equals((Object)defaultPieDataset0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(defaultPieDataset0.equals((Object)defaultPieDataset1));
      assertNotSame(defaultPieDataset1, defaultPieDataset0);
      assertNotSame(defaultPieDataset0, defaultPieDataset1);
  }

  @Test
  public void test59()  throws Throwable  {
      PieDataset pieDataset0 = null;
      DateFormatter dateFormatter0 = new DateFormatter();
      assertNotNull(dateFormatter0);
      
      Comparable comparable0 = dateFormatter0.getMaximum();
      assertNull(comparable0);
      
      double double0 = 0.0;
      int int0 = 2338;
      // Undeclared exception!
      try {
        PieDataset pieDataset1 = DatasetUtilities.createConsolidatedPieDataset(pieDataset0, comparable0, double0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'dataset' argument.
         //
      }
  }

  @Test
  public void test60()  throws Throwable  {
      String string0 = "MG/0z";
      Number[][] numberArray0 = new Number[10][6];
      float float0 = Component.BOTTOM_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      DefaultCategoryDataset defaultCategoryDataset0 = (DefaultCategoryDataset)DatasetUtilities.createCategoryDataset(string0, string0, numberArray0);
      assertNotNull(defaultCategoryDataset0);
      assertEquals(6, defaultCategoryDataset0.getColumnCount());
      assertEquals(10, defaultCategoryDataset0.getRowCount());
      
      // Undeclared exception!
      try {
        PieDataset pieDataset0 = DatasetUtilities.createPieDatasetForRow((CategoryDataset) defaultCategoryDataset0, (Comparable) float0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test61()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      boolean boolean0 = false;
      Range range0 = DatasetUtilities.iterateCategoryRangeBounds((CategoryDataset) defaultKeyedValues2DDataset0, boolean0);
      assertNull(range0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
  }

  @Test
  public void test62()  throws Throwable  {
      XYSeries xYSeries0 = null;
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateDomainBounds((XYDataset) xYSeriesCollection0);
      assertNull(range0);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(0, xYSeriesCollection0.getSeriesCount());
  }

  @Test
  public void test63()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((CategoryDataset) taskSeriesCollection0);
      assertNull(range0);
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test
  public void test64()  throws Throwable  {
      double[][] doubleArray0 = new double[8][8];
      DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(doubleArray0, doubleArray0);
      assertNotNull(defaultIntervalCategoryDataset0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      
      Range range0 = DatasetUtilities.iterateRangeBounds((CategoryDataset) defaultIntervalCategoryDataset0);
      assertNotNull(range0);
      assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getColumnCount());
      assertEquals(8, defaultIntervalCategoryDataset0.getCategoryCount());
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
  }

  @Test
  public void test65()  throws Throwable  {
      double double0 = 258.60034;
      PowerFunction2D powerFunction2D0 = new PowerFunction2D(double0, double0);
      assertNotNull(powerFunction2D0);
      assertEquals(258.60034, powerFunction2D0.getB(), 0.01D);
      assertEquals(258.60034, powerFunction2D0.getA(), 0.01D);
      
      int int0 = 0;
      // Undeclared exception!
      try {
        XYDataset xYDataset0 = DatasetUtilities.sampleFunction2D((Function2D) powerFunction2D0, double0, double0, int0, (Comparable) double0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires 'start' < 'end'.
         //
      }
  }

  @Test
  public void test66()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getDefault();
      assertNotNull(zoneInfo0);
      assertEquals("GMT", zoneInfo0.getID());
      
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset((TimeZone) zoneInfo0);
      assertNotNull(timeTableXYDataset0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      Range range0 = DatasetUtilities.findStackedRangeBounds((TableXYDataset) timeTableXYDataset0);
      assertNotNull(range0);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
  }

  @Test
  public void test67()  throws Throwable  {
      String string0 = "";
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
      
      DefaultPieDataset defaultPieDataset0 = (DefaultPieDataset)DatasetUtilities.createPieDatasetForColumn((CategoryDataset) taskSeriesCollection0, (Comparable) string0);
      assertNotNull(defaultPieDataset0);
      assertEquals(0, defaultPieDataset0.getItemCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getRowCount());
  }

  @Test
  public void test68()  throws Throwable  {
      TaskSeriesCollection taskSeriesCollection0 = new TaskSeriesCollection();
      assertNotNull(taskSeriesCollection0);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      XYTaskDataset xYTaskDataset0 = new XYTaskDataset(taskSeriesCollection0);
      assertNotNull(xYTaskDataset0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
      
      Range range0 = DatasetUtilities.iterateXYRangeBounds((XYDataset) xYTaskDataset0);
      assertNull(range0);
      assertEquals(0, xYTaskDataset0.getSeriesCount());
      assertEquals(false, xYTaskDataset0.isTransposed());
      assertEquals(0.8, xYTaskDataset0.getSeriesWidth(), 0.01D);
      assertEquals(0, taskSeriesCollection0.getRowCount());
      assertEquals(0, taskSeriesCollection0.getColumnCount());
      assertEquals(0, taskSeriesCollection0.getSeriesCount());
  }
}
