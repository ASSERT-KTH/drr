/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:06:34 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Paint;
import java.awt.Rectangle;
import java.awt.Stroke;
import java.awt.geom.Line2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.BufferedImage;
import java.util.Collection;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JRadioButton;
import javax.swing.JSplitPane;
import javax.swing.plaf.FontUIResource;
import javax.swing.plaf.metal.MetalCheckBoxUI;
import javax.swing.table.DefaultTableCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.Drawable;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.annotations.XYAnnotation;
import org.jfree.chart.annotations.XYDrawableAnnotation;
import org.jfree.chart.annotations.XYPointerAnnotation;
import org.jfree.chart.annotations.XYPolygonAnnotation;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.AxisSpace;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.CategoryAxis3D;
import org.jfree.chart.axis.CyclicNumberAxis;
import org.jfree.chart.axis.DateAxis;
import org.jfree.chart.axis.LogAxis;
import org.jfree.chart.axis.LogarithmicAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberAxis3D;
import org.jfree.chart.axis.PeriodAxis;
import org.jfree.chart.axis.SegmentedTimeline;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.event.RendererChangeEvent;
import org.jfree.chart.labels.XYToolTipGenerator;
import org.jfree.chart.plot.CategoryMarker;
import org.jfree.chart.plot.CombinedDomainCategoryPlot;
import org.jfree.chart.plot.CombinedDomainXYPlot;
import org.jfree.chart.plot.CombinedRangeXYPlot;
import org.jfree.chart.plot.DatasetRenderingOrder;
import org.jfree.chart.plot.FastScatterPlot;
import org.jfree.chart.plot.IntervalMarker;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.PlotRenderingInfo;
import org.jfree.chart.plot.SeriesRenderingOrder;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BarRenderer3D;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.category.GanttRenderer;
import org.jfree.chart.renderer.xy.CandlestickRenderer;
import org.jfree.chart.renderer.xy.CyclicXYItemRenderer;
import org.jfree.chart.renderer.xy.StackedXYAreaRenderer2;
import org.jfree.chart.renderer.xy.WindItemRenderer;
import org.jfree.chart.renderer.xy.XYAreaRenderer;
import org.jfree.chart.renderer.xy.XYBarRenderer;
import org.jfree.chart.renderer.xy.XYBlockRenderer;
import org.jfree.chart.renderer.xy.XYDotRenderer;
import org.jfree.chart.renderer.xy.XYErrorRenderer;
import org.jfree.chart.renderer.xy.XYItemRenderer;
import org.jfree.chart.renderer.xy.XYItemRendererState;
import org.jfree.chart.renderer.xy.XYShapeRenderer;
import org.jfree.chart.renderer.xy.XYSplineRenderer;
import org.jfree.chart.renderer.xy.XYStepAreaRenderer;
import org.jfree.chart.title.CompositeTitle;
import org.jfree.chart.urls.XYURLGenerator;
import org.jfree.chart.util.Layer;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.RectangleInsets;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimePeriodValuesCollection;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.time.Year;
import org.jfree.data.xy.VectorSeriesCollection;
import org.jfree.data.xy.XIntervalSeriesCollection;
import org.jfree.data.xy.XYDataset;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class XYPlotEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearSelection();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test01()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedDomainXYPlot combinedDomainXYPlot1 = (CombinedDomainXYPlot)combinedDomainXYPlot0.clone();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot1.isSubplot());
      assertEquals(true, combinedDomainXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot1.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot1.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot1.isNotify());
      assertEquals(5.0, combinedDomainXYPlot1.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot1.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot1.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot1.getNoDataMessage());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot1.getPlotType());
      assertEquals(true, combinedDomainXYPlot1.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot1.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot1.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot1.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot1.getWeight());
      assertEquals(false, combinedDomainXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot1.isDomainPannable());
      assertNotSame(combinedDomainXYPlot0, combinedDomainXYPlot1);
      assertNotSame(combinedDomainXYPlot1, combinedDomainXYPlot0);
      assertNotNull(combinedDomainXYPlot1);
      assertTrue(combinedDomainXYPlot0.equals((Object)combinedDomainXYPlot1));
      assertTrue(combinedDomainXYPlot1.equals((Object)combinedDomainXYPlot0));
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = 65;
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) int0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      CyclicNumberAxis cyclicNumberAxis0 = new CyclicNumberAxis((double) int0, (double) int0);
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(65.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(65.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(65.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertNotNull(cyclicNumberAxis0);
      
      LogAxis logAxis0 = new LogAxis();
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertNotNull(logAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) logAxis0);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertNotNull(combinedRangeXYPlot0);
      
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(int0);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertNull(xYItemRenderer0);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) defaultBoxAndWhiskerXYDataset0, (ValueAxis) cyclicNumberAxis0, (ValueAxis) cyclicNumberAxis0, xYItemRenderer0);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-64.0), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(65.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(65.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(65.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotNull(xYPlot0);
      
      XYPlot xYPlot1 = (XYPlot)xYPlot0.clone();
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot1.isDomainPannable());
      assertEquals(false, xYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot1.getWeight());
      assertEquals(0.0, xYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot1.isSubplot());
      assertNull(xYPlot1.getNoDataMessage());
      assertEquals(false, xYPlot1.isRangePannable());
      assertEquals(false, xYPlot1.canSelectByPoint());
      assertEquals(true, xYPlot1.canSelectByRegion());
      assertEquals(true, xYPlot1.isNotify());
      assertEquals(false, xYPlot1.isRangeCrosshairVisible());
      assertEquals(false, xYPlot1.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, xYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot1.isRangeZoomable());
      assertEquals(1.0F, xYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot1.isDomainZoomable());
      assertEquals(1.0F, xYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot1.isDomainCrosshairVisible());
      assertEquals(false, xYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot1.isDomainGridlinesVisible());
      assertEquals(15, xYPlot1.getBackgroundImageAlignment());
      assertEquals(true, xYPlot1.isOutlineVisible());
      assertEquals(true, xYPlot1.isRangeGridlinesVisible());
      assertEquals(true, cyclicNumberAxis0.isAutoRange());
      assertEquals(1.0, cyclicNumberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isVerticalTickLabels());
      assertEquals(2.0F, cyclicNumberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(cyclicNumberAxis0.getLabelURL());
      assertEquals(false, cyclicNumberAxis0.isBoundMappedToLastCycle());
      assertEquals((-64.0), cyclicNumberAxis0.getLowerBound(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeStickyZero());
      assertEquals(true, cyclicNumberAxis0.isTickMarksVisible());
      assertEquals(0.05, cyclicNumberAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, cyclicNumberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isPositiveArrowVisible());
      assertEquals(true, cyclicNumberAxis0.isVisible());
      assertEquals(65.0, cyclicNumberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, cyclicNumberAxis0.getLowerMargin(), 0.01D);
      assertEquals(0, cyclicNumberAxis0.getMinorTickCount());
      assertEquals(true, cyclicNumberAxis0.isTickLabelsVisible());
      assertEquals(65.0, cyclicNumberAxis0.getPeriod(), 0.01D);
      assertNull(cyclicNumberAxis0.getLabelToolTip());
      assertEquals(0.0, cyclicNumberAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, cyclicNumberAxis0.isMinorTickMarksVisible());
      assertEquals(true, cyclicNumberAxis0.isAdvanceLineVisible());
      assertNull(cyclicNumberAxis0.getLabel());
      assertEquals(0.0F, cyclicNumberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, cyclicNumberAxis0.isAxisLineVisible());
      assertEquals(0.0, cyclicNumberAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.isAutoTickUnitSelection());
      assertEquals(false, cyclicNumberAxis0.isNegativeArrowVisible());
      assertEquals(1.0E-8, cyclicNumberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, cyclicNumberAxis0.getAutoRangeIncludesZero());
      assertEquals(2.0F, cyclicNumberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, cyclicNumberAxis0.isInverted());
      assertEquals(65.0, cyclicNumberAxis0.getOffset(), 0.01D);
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabel());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertNotSame(xYPlot0, xYPlot1);
      assertNotSame(xYPlot1, xYPlot0);
      assertNotNull(xYPlot1);
      assertTrue(xYPlot0.equals((Object)xYPlot1));
      assertTrue(xYPlot1.equals((Object)xYPlot0));
  }

  @Test
  public void test03()  throws Throwable  {
      LogAxis logAxis0 = new LogAxis();
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) logAxis0);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = (CombinedRangeXYPlot)combinedRangeXYPlot0.clone();
      assertEquals(true, combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot1.isNotify());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(false, combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot1.isSubplot());
      assertEquals(false, combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot1.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot1.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot1.isOutlineVisible());
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, logAxis0.isVisible());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertNull(logAxis0.getLabelURL());
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertNull(logAxis0.getLabel());
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotNull(combinedRangeXYPlot1);
      assertTrue(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      assertTrue(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
  }

  @Test
  public void test04()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNotNull(xYPlot0);
      
      LegendItemCollection legendItemCollection0 = xYPlot0.getLegendItems();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
  }

  @Test
  public void test05()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisSpace axisSpace0 = combinedRangeXYPlot0.getFixedDomainAxisSpace();
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(axisSpace0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test06()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisSpace axisSpace0 = combinedRangeXYPlot0.getFixedDomainAxisSpace();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(axisSpace0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setFixedRangeAxisSpace(axisSpace0, boolean0);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test07()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisSpace axisSpace0 = null;
      boolean boolean0 = true;
      combinedRangeXYPlot0.setFixedDomainAxisSpace(axisSpace0, boolean0);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = 2646;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNotNull(combinedRangeXYPlot0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(ganttRenderer0);
      
      Color color0 = (Color)ganttRenderer0.lookupSeriesPaint(int0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setRangeCrosshairPaint((Paint) color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getRed());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
  }

  @Test
  public void test09()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      boolean boolean0 = true;
      double double0 = (-1505.43327);
      IntervalMarker intervalMarker0 = new IntervalMarker(double0, double0);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1505.43327), intervalMarker0.getEndValue(), 0.01D);
      assertEquals((-1505.43327), intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean1 = xYPlot0.removeDomainMarker((Marker) intervalMarker0, layer0);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1505.43327), intervalMarker0.getEndValue(), 0.01D);
      assertEquals((-1505.43327), intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      xYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertFalse(boolean0 == boolean1);
      
      xYPlot0.setRangeCrosshairValue(double0, boolean1);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals((-1505.43327), xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals((-1505.43327), intervalMarker0.getEndValue(), 0.01D);
      assertEquals((-1505.43327), intervalMarker0.getStartValue(), 0.01D);
      assertNull(intervalMarker0.getLabel());
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test10()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = true;
      combinedRangeXYPlot0.setRangeCrosshairLockedOnData(boolean0);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
  }

  @Test
  public void test11()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = false;
      xYPlot0.setRangeCrosshairVisible(boolean0);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isSubplot());
  }

  @Test
  public void test12()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)PiePlot.DEFAULT_LABEL_OUTLINE_STROKE;
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainCrosshairStroke((Stroke) basicStroke0);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
  }

  @Test
  public void test13()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      XIntervalSeriesCollection xIntervalSeriesCollection0 = new XIntervalSeriesCollection();
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNotNull(xIntervalSeriesCollection0);
      
      boolean boolean0 = xYPlot0.isDomainGridlinesVisible();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertTrue(boolean0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) xIntervalSeriesCollection0, boolean0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertNotNull(rendererChangeEvent0);
      
      xYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(0, xIntervalSeriesCollection0.getSeriesCount());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, rendererChangeEvent0.getSeriesVisibilityChanged());
  }

  @Test
  public void test14()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairVisible();
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertFalse(boolean0);
      
      XYShapeRenderer xYShapeRenderer0 = new XYShapeRenderer();
      assertEquals(true, xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertEquals(true, xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYShapeRenderer0.isGuideLinesVisible());
      assertNotNull(xYShapeRenderer0);
      
      RendererChangeEvent rendererChangeEvent0 = new RendererChangeEvent((Object) xYShapeRenderer0, boolean0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertEquals(true, xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(false, rendererChangeEvent0.getSeriesVisibilityChanged());
      assertNotNull(rendererChangeEvent0);
      
      combinedDomainXYPlot0.rendererChanged(rendererChangeEvent0);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, xYShapeRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, xYShapeRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYShapeRenderer0.getDrawOutlines());
      assertEquals(true, xYShapeRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYShapeRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYShapeRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYShapeRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesShape());
      assertEquals(3, xYShapeRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYShapeRenderer0.getUseFillPaint());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYShapeRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYShapeRenderer0.getBaseCreateEntities());
      assertEquals(2, xYShapeRenderer0.getPassCount());
      assertEquals(true, xYShapeRenderer0.getUseOutlinePaint());
      assertEquals(2.0, xYShapeRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYShapeRenderer0.isGuideLinesVisible());
      assertEquals(false, rendererChangeEvent0.getSeriesVisibilityChanged());
  }

  @Test
  public void test15()  throws Throwable  {
      String string0 = "";
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[1];
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertNotNull(logarithmicAxis0);
      
      valueAxisArray0[0] = (ValueAxis) logarithmicAxis0;
      assertEquals(2.0F, valueAxisArray0[0].getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, valueAxisArray0[0].getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, valueAxisArray0[0].getLowerBound(), 0.01D);
      assertEquals(0, valueAxisArray0[0].getMinorTickCount());
      assertEquals(true, valueAxisArray0[0].isAutoRange());
      assertEquals(0.05, valueAxisArray0[0].getLowerMargin(), 0.01D);
      assertEquals(0.0, valueAxisArray0[0].getLabelAngle(), 0.01D);
      assertEquals(0.05, valueAxisArray0[0].getUpperMargin(), 0.01D);
      assertEquals(false, valueAxisArray0[0].isMinorTickMarksVisible());
      assertEquals(false, valueAxisArray0[0].isVerticalTickLabels());
      assertEquals(0.0F, valueAxisArray0[0].getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, valueAxisArray0[0].getTickMarkInsideLength(), 0.01F);
      assertEquals(true, valueAxisArray0[0].isVisible());
      assertNull(valueAxisArray0[0].getLabelToolTip());
      assertEquals("", valueAxisArray0[0].getLabel());
      assertEquals(true, valueAxisArray0[0].isTickLabelsVisible());
      assertEquals(true, valueAxisArray0[0].isAutoTickUnitSelection());
      assertNull(valueAxisArray0[0].getLabelURL());
      assertEquals(false, valueAxisArray0[0].isInverted());
      assertEquals(true, valueAxisArray0[0].isAxisLineVisible());
      assertEquals(false, valueAxisArray0[0].isNegativeArrowVisible());
      assertEquals(true, valueAxisArray0[0].isTickMarksVisible());
      assertEquals(0.0, valueAxisArray0[0].getFixedDimension(), 0.01D);
      assertEquals(1.0, valueAxisArray0[0].getUpperBound(), 0.01D);
      assertEquals(0.0, valueAxisArray0[0].getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, valueAxisArray0[0].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, valueAxisArray0[0].isPositiveArrowVisible());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals("", logarithmicAxis0.getLabel());
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertNotNull(valueAxisArray0[0]);
      
      xYPlot0.setRangeAxes(valueAxisArray0);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
  }

  ////@Test
  public void test16()  throws Throwable  {
      int int0 = 6;
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      String string0 = ";G]x";
      ValueAxis[] valueAxisArray0 = new ValueAxis[4];
      int int1 = 2811;
      Second second0 = new Second(int0, int0, int1, int0, int0, int1);
      assertEquals(26552862366000L, second0.getFirstMillisecond());
      assertEquals(26552862366499L, second0.getMiddleMillisecond());
      assertEquals(28762023966L, second0.getSerialIndex());
      assertEquals(26552862366999L, second0.getLastMillisecond());
      assertEquals(6, second0.getSecond());
      assertNotNull(second0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)SegmentedTimeline.DEFAULT_TIME_ZONE;
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      MetalCheckBoxUI metalCheckBoxUI0 = new MetalCheckBoxUI();
      assertNotNull(metalCheckBoxUI0);
      
      Icon icon0 = metalCheckBoxUI0.getDefaultIcon();
      assertNull(icon0);
      
      JButton jButton0 = new JButton(icon0);
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertNotNull(jButton0);
      
      Locale locale0 = jButton0.getLocale();
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(string0, (RegularTimePeriod) second0, (RegularTimePeriod) second0, (TimeZone) zoneInfo0, locale0);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(";G]x", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(26552862366000L, second0.getFirstMillisecond());
      assertEquals(26552862366499L, second0.getMiddleMillisecond());
      assertEquals(28762023966L, second0.getSerialIndex());
      assertEquals(26552862366999L, second0.getLastMillisecond());
      assertEquals(6, second0.getSecond());
      assertNotNull(periodAxis0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      valueAxisArray0[2] = (ValueAxis) periodAxis0;
      assertEquals(false, valueAxisArray0[2].isPositiveArrowVisible());
      assertEquals(false, valueAxisArray0[2].isVerticalTickLabels());
      assertEquals(0.0, valueAxisArray0[2].getFixedDimension(), 0.01D);
      assertNull(valueAxisArray0[2].getLabelToolTip());
      assertEquals(2.0F, valueAxisArray0[2].getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0F, valueAxisArray0[2].getMinorTickMarkInsideLength(), 0.01F);
      assertNull(valueAxisArray0[2].getLabelURL());
      assertEquals(0.05, valueAxisArray0[2].getUpperMargin(), 0.01D);
      assertEquals(true, valueAxisArray0[2].isAutoRange());
      assertEquals(false, valueAxisArray0[2].isNegativeArrowVisible());
      assertEquals(0.05, valueAxisArray0[2].getLowerMargin(), 0.01D);
      assertEquals(1.0, valueAxisArray0[2].getUpperBound(), 0.01D);
      assertEquals(2.0F, valueAxisArray0[2].getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, valueAxisArray0[2].getFixedAutoRange(), 0.01D);
      assertEquals(false, valueAxisArray0[2].isMinorTickMarksVisible());
      assertEquals(0.0F, valueAxisArray0[2].getTickMarkInsideLength(), 0.01F);
      assertEquals(true, valueAxisArray0[2].isTickMarksVisible());
      assertEquals(0.0, valueAxisArray0[2].getLabelAngle(), 0.01D);
      assertEquals(true, valueAxisArray0[2].isTickLabelsVisible());
      assertEquals(0.0, valueAxisArray0[2].getLowerBound(), 0.01D);
      assertEquals(true, valueAxisArray0[2].isVisible());
      assertEquals(true, valueAxisArray0[2].isAutoTickUnitSelection());
      assertEquals(";G]x", valueAxisArray0[2].getLabel());
      assertEquals(true, valueAxisArray0[2].isAxisLineVisible());
      assertEquals(false, valueAxisArray0[2].isInverted());
      assertEquals(1.0E-8, valueAxisArray0[2].getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0, valueAxisArray0[2].getMinorTickCount());
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertNull(periodAxis0.getLabelURL());
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(";G]x", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, jButton0.isLightweight());
      assertEquals(true, jButton0.isForegroundSet());
      assertEquals(false, jButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jButton0.getIgnoreRepaint());
      assertEquals(true, jButton0.isBackgroundSet());
      assertEquals(true, jButton0.isFontSet());
      assertEquals(0, jButton0.getComponentCount());
      assertEquals(false, jButton0.isFocusTraversalPolicySet());
      assertEquals(0, jButton0.countComponents());
      assertEquals(false, jButton0.isShowing());
      assertEquals(false, jButton0.isValid());
      assertEquals(false, jButton0.isMinimumSizeSet());
      assertEquals(false, jButton0.isFocusCycleRoot());
      assertEquals(false, jButton0.isDisplayable());
      assertEquals(true, jButton0.isVisible());
      assertEquals(false, jButton0.isCursorSet());
      assertEquals(false, jButton0.isPreferredSizeSet());
      assertEquals(true, jButton0.isEnabled());
      assertEquals(true, jButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jButton0.isMaximumSizeSet());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals(26552862366000L, second0.getFirstMillisecond());
      assertEquals(26552862366499L, second0.getMiddleMillisecond());
      assertEquals(28762023966L, second0.getSerialIndex());
      assertEquals(26552862366999L, second0.getLastMillisecond());
      assertEquals(6, second0.getSecond());
      assertNotNull(valueAxisArray0[2]);
      
      xYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test17()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertNotNull(xYPlot0);
      
      int int0 = (-642);
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      xYPlot0.handleClick(int0, int0, plotRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
  }

  @Test
  public void test18()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      Layer layer0 = null;
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(int0, layer0);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(collection0);
  }

  ////@Test
  public void test19()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = (-815.0);
      XYBarRenderer xYBarRenderer0 = new XYBarRenderer(double0);
      assertEquals((-815.0), xYBarRenderer0.getMargin(), 0.01D);
      assertEquals(true, xYBarRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, xYBarRenderer0.getBase(), 0.01D);
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYBarRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBarRenderer0.isDrawBarOutline());
      assertEquals(1, xYBarRenderer0.getPassCount());
      assertEquals(4.0, xYBarRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBarRenderer0.getBaseCreateEntities());
      assertEquals(4.0, xYBarRenderer0.getShadowXOffset(), 0.01D);
      assertEquals((-1.0), xYBarRenderer0.getBarAlignmentFactor(), 0.01D);
      assertEquals(true, xYBarRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYBarRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYBarRenderer0.getDefaultShadowsVisible());
      assertEquals(true, xYBarRenderer0.getShadowsVisible());
      assertEquals(3, xYBarRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYBarRenderer0.getUseYInterval());
      assertEquals(2.0, xYBarRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYBarRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYBarRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYBarRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYBarRenderer0.getBaseSeriesVisible());
      assertNotNull(xYBarRenderer0);
      
      Graphics2D graphics2D0 = null;
      String string0 = "Richard Atkinson";
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertNotNull(defaultListCellRenderer0);
      
      Icon icon0 = defaultListCellRenderer0.getDisabledIcon();
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertNull(icon0);
      
      JRadioButton jRadioButton0 = new JRadioButton(string0, icon0);
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertNotNull(jRadioButton0);
      
      Rectangle rectangle0 = jRadioButton0.bounds();
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      XYDataset xYDataset0 = combinedDomainXYPlot0.getDataset(rectangle0.y);
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNull(xYDataset0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      PlotRenderingInfo plotRenderingInfo0 = null;
      // Undeclared exception!
      try {
        XYItemRendererState xYItemRendererState0 = xYBarRenderer0.initialise(graphics2D0, (Rectangle2D) rectangle0, (XYPlot) combinedDomainXYPlot0, xYDataset0, plotRenderingInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 2646;
      // Undeclared exception!
      try {
        ValueAxis valueAxis0 = combinedDomainXYPlot0.getRangeAxisForDataset(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Index 2646 out of bounds.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      PlotRenderingInfo plotRenderingInfo0 = new PlotRenderingInfo(chartRenderingInfo0);
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertNotNull(plotRenderingInfo0);
      
      Graphics2D graphics2D0 = null;
      JSplitPane jSplitPane0 = new JSplitPane();
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(3, jSplitPane0.countComponents());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(3, jSplitPane0.getComponentCount());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertNotNull(jSplitPane0);
      
      Rectangle rectangle0 = jSplitPane0.bounds();
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(3, jSplitPane0.countComponents());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(3, jSplitPane0.getComponentCount());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      Map map0 = xYPlot0.drawAxes(graphics2D0, rectangle0, rectangle0, plotRenderingInfo0);
      assertEquals(true, map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, plotRenderingInfo0.getSubplotCount());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(3, jSplitPane0.countComponents());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(3, jSplitPane0.getComponentCount());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertNotNull(map0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
  }

  @Test
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      double[] doubleArray0 = new double[10];
      XYPolygonAnnotation xYPolygonAnnotation0 = new XYPolygonAnnotation(doubleArray0);
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertNull(xYPolygonAnnotation0.getURL());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(xYPolygonAnnotation0);
      
      combinedRangeXYPlot0.addAnnotation((XYAnnotation) xYPolygonAnnotation0, boolean0);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(xYPolygonAnnotation0.getToolTipText());
      assertNull(xYPolygonAnnotation0.getURL());
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
  }

  @Test
  public void test23()  throws Throwable  {
      int int0 = 586;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, combinedDomainXYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      //  // Unstable assertion: assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isNotify());
      //  // Unstable assertion: assertNull(combinedDomainXYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      //  // Unstable assertion: assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertNotNull(combinedDomainXYPlot0);
      
      Rectangle2D.Double rectangle2D_Double0 = (Rectangle2D.Double)Plot.DEFAULT_LEGEND_ITEM_BOX;
      //  // Unstable assertion: assertEquals(130.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(97.5, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertNotNull(rectangle2D_Double0);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      int int1 = rectangle2D_Double0.outcode((double) int0, (double) int0);
      //  // Unstable assertion: assertEquals(130.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(97.5, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals(13, int1);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      ValueMarker valueMarker0 = new ValueMarker((double) int1);
      //  // Unstable assertion: assertEquals(13.0, valueMarker0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(valueMarker0.getLabel());
      //  // Unstable assertion: assertEquals(130.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(97.5, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertNotNull(valueMarker0);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Layer layer0 = Layer.BACKGROUND;
      //  // Unstable assertion: assertEquals("Layer.BACKGROUND", layer0.toString());
      //  // Unstable assertion: assertNotNull(layer0);
      
      boolean boolean0 = true;
      boolean boolean1 = combinedDomainXYPlot0.removeRangeMarker(int0, (Marker) valueMarker0, layer0, boolean0);
      //  // Unstable assertion: assertEquals(13.0, valueMarker0.getValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      //  // Unstable assertion: assertNull(valueMarker0.getLabel());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isSubplot());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(1, combinedDomainXYPlot0.getWeight());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      //  // Unstable assertion: assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isNotify());
      //  // Unstable assertion: assertNull(combinedDomainXYPlot0.getNoDataMessage());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      //  // Unstable assertion: assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      //  // Unstable assertion: assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      //  // Unstable assertion: assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      //  // Unstable assertion: assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      //  // Unstable assertion: assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      //  // Unstable assertion: assertEquals(130.0, rectangle2D_Double0.getMaxY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMaxX(), 0.01D);
      //  // Unstable assertion: assertEquals(97.5, rectangle2D_Double0.getCenterY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinX(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getMinY(), 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.getCenterX(), 0.01D);
      //  // Unstable assertion: assertEquals("Layer.BACKGROUND", layer0.toString());
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.height, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.y, 0.01D);
      //  // Unstable assertion: assertEquals(65.0, rectangle2D_Double0.x, 0.01D);
      //  // Unstable assertion: assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      //  // Unstable assertion: assertFalse(boolean0 == boolean1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test
  public void test24()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      VectorSeriesCollection vectorSeriesCollection0 = new VectorSeriesCollection();
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNotNull(vectorSeriesCollection0);
      
      int int0 = 0;
      boolean boolean0 = false;
      int int1 = combinedRangeXYPlot0.indexOf((XYDataset) vectorSeriesCollection0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int1, (double) int0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(intervalMarker0.getLabel());
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertNotNull(intervalMarker0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      combinedRangeXYPlot0.addRangeMarker(int0, (Marker) intervalMarker0, layer0, boolean0);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertEquals(0, vectorSeriesCollection0.getSeriesCount());
      assertNull(intervalMarker0.getLabel());
      assertEquals((-1.0), intervalMarker0.getStartValue(), 0.01D);
      assertEquals(0.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test25()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearRangeMarkers();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = 71;
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearDomainMarkers(int0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test27()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNotNull(xYPlot0);
      
      int int0 = xYPlot0.getDatasetCount();
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, int0);
      
      IntervalMarker intervalMarker0 = new IntervalMarker((double) int0, (double) int0);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01D);
      assertNotNull(intervalMarker0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      boolean boolean0 = false;
      xYPlot0.addDomainMarker(int0, (Marker) intervalMarker0, layer0, boolean0);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertNull(intervalMarker0.getLabel());
      assertEquals(0.8F, intervalMarker0.getAlpha(), 0.01F);
      assertEquals(1.0, intervalMarker0.getStartValue(), 0.01D);
      assertEquals(1.0, intervalMarker0.getEndValue(), 0.01D);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      
      xYPlot0.clearDomainMarkers();
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test28()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        xYPlot0.setRangeZeroBaselinePaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test29()  throws Throwable  {
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertNotNull(defaultTableCellRenderer0);
      
      Rectangle rectangle0 = defaultTableCellRenderer0.bounds();
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      TimePeriodValuesCollection timePeriodValuesCollection0 = new TimePeriodValuesCollection();
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertNotNull(timePeriodValuesCollection0);
      
      String string0 = "a";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("a", logarithmicAxis0.getLabel());
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertNotNull(logarithmicAxis0);
      
      WindItemRenderer windItemRenderer0 = new WindItemRenderer();
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertNotNull(windItemRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = windItemRenderer0.getBaseToolTipGenerator();
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertNull(xYToolTipGenerator0);
      
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertNotNull(xYDotRenderer0);
      
      XYURLGenerator xYURLGenerator0 = xYDotRenderer0.getSeriesURLGenerator(rectangle0.height);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertNull(xYURLGenerator0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      CyclicXYItemRenderer cyclicXYItemRenderer0 = new CyclicXYItemRenderer(rectangle0.height, xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertNotNull(cyclicXYItemRenderer0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      XYPlot xYPlot0 = new XYPlot((XYDataset) timePeriodValuesCollection0, (ValueAxis) logarithmicAxis0, (ValueAxis) logarithmicAxis0, (XYItemRenderer) cyclicXYItemRenderer0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals("a", logarithmicAxis0.getLabel());
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, timePeriodValuesCollection0.getSeriesCount());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, cyclicXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(1, cyclicXYItemRenderer0.getPassCount());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, cyclicXYItemRenderer0.getPlotImages());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1.0, cyclicXYItemRenderer0.getGapThreshold(), 0.01D);
      assertEquals(false, cyclicXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, cyclicXYItemRenderer0.getBaseShapesFilled());
      assertEquals(false, cyclicXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, cyclicXYItemRenderer0.getPlotDiscontinuous());
      assertEquals(true, cyclicXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(true, cyclicXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, cyclicXYItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, cyclicXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, cyclicXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, cyclicXYItemRenderer0.getPlotLines());
      assertEquals(false, cyclicXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(2.0, cyclicXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNotNull(xYPlot0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      XYAreaRenderer xYAreaRenderer0 = new XYAreaRenderer(rectangle0.x, xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYAreaRenderer0.getPlotShapes());
      assertEquals(false, xYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertEquals(true, xYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer0.getPlotLines());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYAreaRenderer0.getUseFillPaint());
      assertEquals(false, xYAreaRenderer0.getPlotArea());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYAreaRenderer0.isOutline());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNotNull(xYAreaRenderer0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      Stroke stroke0 = xYAreaRenderer0.getSeriesStroke(rectangle0.y);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, defaultTableCellRenderer0.isForegroundSet());
      assertEquals(0, defaultTableCellRenderer0.countComponents());
      assertEquals(true, defaultTableCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultTableCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultTableCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultTableCellRenderer0.isFontSet());
      assertEquals(false, defaultTableCellRenderer0.isCursorSet());
      assertEquals(false, defaultTableCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultTableCellRenderer0.isShowing());
      assertEquals(false, defaultTableCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultTableCellRenderer0.isLightweight());
      assertEquals(false, defaultTableCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultTableCellRenderer0.isEnabled());
      assertEquals(true, defaultTableCellRenderer0.isVisible());
      assertEquals(false, defaultTableCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultTableCellRenderer0.isValid());
      assertEquals(false, defaultTableCellRenderer0.isDisplayable());
      assertEquals(0, defaultTableCellRenderer0.getComponentCount());
      assertEquals(false, defaultTableCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(1, windItemRenderer0.getPassCount());
      assertEquals(2.0, windItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, windItemRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, windItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, windItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, windItemRenderer0.getBaseCreateEntities());
      assertEquals(false, windItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, windItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, windItemRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYAreaRenderer0.getPlotShapes());
      assertEquals(false, xYAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, xYAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYAreaRenderer0.getPassCount());
      assertEquals(true, xYAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYAreaRenderer0.getPlotLines());
      assertEquals(3, xYAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYAreaRenderer0.getUseFillPaint());
      assertEquals(false, xYAreaRenderer0.getPlotArea());
      assertEquals(true, xYAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYAreaRenderer0.isOutline());
      assertEquals(2.0, xYAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertNull(stroke0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      
      // Undeclared exception!
      try {
        xYPlot0.setRangeZeroBaselineStroke(stroke0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stroke' argument.
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      XYErrorRenderer xYErrorRenderer0 = new XYErrorRenderer();
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertNotNull(xYErrorRenderer0);
      
      XYToolTipGenerator xYToolTipGenerator0 = xYErrorRenderer0.getBaseToolTipGenerator();
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertNull(xYToolTipGenerator0);
      
      double double0 = 0.0;
      CandlestickRenderer candlestickRenderer0 = new CandlestickRenderer(double0);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(candlestickRenderer0);
      
      XYURLGenerator xYURLGenerator0 = candlestickRenderer0.getBaseURLGenerator();
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertNull(xYURLGenerator0);
      
      StackedXYAreaRenderer2 stackedXYAreaRenderer2_0 = new StackedXYAreaRenderer2(xYToolTipGenerator0, xYURLGenerator0);
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(stackedXYAreaRenderer2_0);
      
      int int0 = 290;
      Color color0 = (Color)stackedXYAreaRenderer2_0.lookupSeriesFillPaint(int0);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainZeroBaselinePaint((Paint) color0);
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(true, xYErrorRenderer0.getBaseShapesVisible());
      assertEquals(2.0, xYErrorRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYErrorRenderer0.getUseFillPaint());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYErrorRenderer0.getDrawOutlines());
      assertEquals(true, xYErrorRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYErrorRenderer0.getBaseShapesFilled());
      assertEquals(4.0, xYErrorRenderer0.getCapLength(), 0.01D);
      assertEquals(2, xYErrorRenderer0.getPassCount());
      assertEquals(true, xYErrorRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYErrorRenderer0.getDrawYError());
      assertEquals(true, xYErrorRenderer0.getDrawXError());
      assertEquals(true, xYErrorRenderer0.getBaseCreateEntities());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, xYErrorRenderer0.getBaseLinesVisible());
      assertEquals(true, xYErrorRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYErrorRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYErrorRenderer0.getBaseItemLabelsVisible());
      assertEquals(3, xYErrorRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYErrorRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, xYErrorRenderer0.getUseOutlinePaint());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(2.0, stackedXYAreaRenderer2_0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisibleInLegend());
      assertEquals(false, stackedXYAreaRenderer2_0.isOutline());
      assertEquals(false, stackedXYAreaRenderer2_0.getBaseItemLabelsVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseSeriesVisible());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesShape());
      assertEquals(true, stackedXYAreaRenderer2_0.getBaseCreateEntities());
      assertEquals(1, stackedXYAreaRenderer2_0.getPassCount());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, stackedXYAreaRenderer2_0.getDefaultEntityRadius());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, stackedXYAreaRenderer2_0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedXYAreaRenderer2_0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedXYAreaRenderer2_0.getRoundXCoordinates());
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisible());
      assertEquals(0.0, candlestickRenderer0.getCandleWidth(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDrawVolume());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesShape());
      assertEquals(1, candlestickRenderer0.getPassCount());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.6428571428571429, candlestickRenderer0.getAutoWidthFactor(), 0.01D);
      assertEquals(7.2E7, candlestickRenderer0.getMaxCandleWidthInMilliseconds(), 0.01D);
      assertEquals(true, candlestickRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, candlestickRenderer0.getAutoWidthMethod());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, candlestickRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, candlestickRenderer0.getUseOutlinePaint());
      assertEquals(true, candlestickRenderer0.getBaseCreateEntities());
      assertEquals(false, candlestickRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(3, candlestickRenderer0.getDefaultEntityRadius());
      assertEquals(0.0, candlestickRenderer0.getAutoWidthGap(), 0.01D);
      assertEquals(2.0, candlestickRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, candlestickRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, candlestickRenderer0.getAutoPopulateSeriesPaint());
  }

  @Test
  public void test31()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainCrosshairStroke();
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(basicStroke0);
      
      combinedRangeXYPlot0.setDomainZeroBaselineStroke((Stroke) basicStroke0);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
  }

  @Test
  public void test32()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "PqU";
      CategoryAxis3D categoryAxis3D0 = new CategoryAxis3D(string0);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("PqU", categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertNotNull(categoryAxis3D0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot((CategoryAxis) categoryAxis3D0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("PqU", categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertNotNull(combinedDomainCategoryPlot0);
      
      Color color0 = (Color)combinedDomainCategoryPlot0.getNoDataMessagePaint();
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("PqU", categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setRangeMinorGridlinePaint((Paint) color0);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getBlue());
      assertNull(categoryAxis3D0.getLabelURL());
      assertEquals(0.0F, categoryAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickLabelsVisible());
      assertEquals(0.0, categoryAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.0F, categoryAxis3D0.getMaximumCategoryLabelWidthRatio(), 0.01F);
      assertEquals("PqU", categoryAxis3D0.getLabel());
      assertNull(categoryAxis3D0.getLabelToolTip());
      assertEquals(0.0F, categoryAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isAxisLineVisible());
      assertEquals(0.2, categoryAxis3D0.getCategoryMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.05, categoryAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(0.0, categoryAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(2.0F, categoryAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isVisible());
      assertEquals(false, categoryAxis3D0.isMinorTickMarksVisible());
      assertEquals(4, categoryAxis3D0.getCategoryLabelPositionOffset());
      assertEquals(1, categoryAxis3D0.getMaximumCategoryLabelLines());
      assertEquals(2.0F, categoryAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, categoryAxis3D0.isTickMarksVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  ////@Test
  public void test33()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "b+@DiTAS";
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      combinedRangeXYPlot0.setRangeMinorGridlinesVisible(boolean0);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test34()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeMinorGridlinePaint();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      combinedRangeXYPlot0.setDomainMinorGridlinePaint((Paint) color0);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(255, color0.getRed());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test35()  throws Throwable  {
      int int0 = 71;
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      XYSplineRenderer xYSplineRenderer0 = new XYSplineRenderer(int0);
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(71, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYSplineRenderer0);
      
      boolean boolean0 = true;
      Color color0 = (Color)xYSplineRenderer0.getItemLabelPaint(int0, int0, boolean0);
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(71, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(color0);
      
      combinedDomainXYPlot0.setDomainGridlinePaint((Paint) color0);
      assertEquals(1, color0.getTransparency());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getGreen());
      assertEquals(true, xYSplineRenderer0.getBaseShapesFilled());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYSplineRenderer0.getDrawSeriesLineAsPath());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYSplineRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYSplineRenderer0.getBaseShapesVisible());
      assertEquals(true, xYSplineRenderer0.getBaseCreateEntities());
      assertEquals(true, xYSplineRenderer0.getDrawOutlines());
      assertEquals(true, xYSplineRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYSplineRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYSplineRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(71, xYSplineRenderer0.getPrecision());
      assertEquals(false, xYSplineRenderer0.getUseFillPaint());
      assertEquals(3, xYSplineRenderer0.getDefaultEntityRadius());
      assertEquals(2.0, xYSplineRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2, xYSplineRenderer0.getPassCount());
      assertEquals(true, xYSplineRenderer0.getBaseLinesVisible());
      assertEquals(false, xYSplineRenderer0.getUseOutlinePaint());
      assertEquals(false, xYSplineRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test36()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getDomainCrosshairStroke();
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNotNull(basicStroke0);
      
      combinedDomainXYPlot0.setDomainMinorGridlineStroke((Stroke) basicStroke0);
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
  }

  @Test
  public void test37()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
  }

  @Test
  public void test38()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 290;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, (double) int0, (double) int0, double0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(145.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(290.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(290.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.isEmpty();
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(145.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertTrue(boolean0);
      assertEquals(290.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(290.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      combinedRangeXYPlot0.setDomainGridlinesVisible(boolean0);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(145.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(290.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(290.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
  }

  @Test
  public void test39()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = SeriesRenderingOrder.FORWARD;
      assertEquals("SeriesRenderingOrder.FORWARD", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
      
      xYPlot0.setSeriesRenderingOrder(seriesRenderingOrder0);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals("SeriesRenderingOrder.FORWARD", seriesRenderingOrder0.toString());
  }

  @Test
  public void test40()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(xYPlot0);
      
      DatasetRenderingOrder datasetRenderingOrder0 = DatasetRenderingOrder.REVERSE;
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
      assertNotNull(datasetRenderingOrder0);
      
      xYPlot0.setDatasetRenderingOrder(datasetRenderingOrder0);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("DatasetRenderingOrder.REVERSE", datasetRenderingOrder0.toString());
  }

  @Test
  public void test41()  throws Throwable  {
      XYDotRenderer xYDotRenderer0 = new XYDotRenderer();
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertNotNull(xYDotRenderer0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      XYItemRenderer[] xYItemRendererArray0 = new XYItemRenderer[5];
      xYItemRendererArray0[1] = (XYItemRenderer) xYDotRenderer0;
      assertEquals(2.0, xYDotRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, xYDotRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYDotRenderer0.getBaseCreateEntities());
      assertEquals(true, xYDotRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1, xYDotRenderer0.getPassCount());
      assertEquals(1, xYDotRenderer0.getDotWidth());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(1, xYDotRenderer0.getDotHeight());
      assertEquals(3, xYDotRenderer0.getDefaultEntityRadius());
      assertEquals(true, xYDotRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, xYDotRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYDotRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYItemRendererArray0[1].getBaseSeriesVisibleInLegend());
      assertEquals(true, xYItemRendererArray0[1].getBaseCreateEntities());
      assertEquals(true, xYItemRendererArray0[1].getBaseSeriesVisible());
      assertEquals(1, xYItemRendererArray0[1].getPassCount());
      assertEquals(false, xYItemRendererArray0[1].getBaseItemLabelsVisible());
      assertNotNull(xYItemRendererArray0[1]);
      
      combinedDomainXYPlot0.setRenderers(xYItemRendererArray0);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  ////@Test
  public void test42()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "Richard Atkinson";
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertNotNull(defaultListCellRenderer0);
      
      Icon icon0 = defaultListCellRenderer0.getDisabledIcon();
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertNull(icon0);
      
      JRadioButton jRadioButton0 = new JRadioButton(string0, icon0);
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertNotNull(jRadioButton0);
      
      Rectangle rectangle0 = jRadioButton0.bounds();
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(rectangle0.width);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(false, jRadioButton0.isDisplayable());
      assertEquals(false, jRadioButton0.isMinimumSizeSet());
      assertEquals(true, jRadioButton0.isForegroundSet());
      assertEquals(0, jRadioButton0.countComponents());
      assertEquals(true, jRadioButton0.isVisible());
      assertEquals(false, jRadioButton0.isFocusCycleRoot());
      assertEquals(0, jRadioButton0.getComponentCount());
      assertEquals(true, jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(false, jRadioButton0.isPreferredSizeSet());
      assertEquals(false, jRadioButton0.getIgnoreRepaint());
      assertEquals(true, jRadioButton0.isFontSet());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicySet());
      assertEquals(false, jRadioButton0.isShowing());
      assertEquals(false, jRadioButton0.isCursorSet());
      assertEquals(true, jRadioButton0.isEnabled());
      assertEquals(false, jRadioButton0.isFocusTraversalPolicyProvider());
      assertEquals(false, jRadioButton0.isMaximumSizeSet());
      assertEquals(false, jRadioButton0.isValid());
      assertEquals(false, jRadioButton0.isLightweight());
      assertEquals(true, jRadioButton0.isBackgroundSet());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertNotNull(axisLocation0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.height);
  }

  @Test
  public void test43()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearRangeAxes();
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
  }

  @Test
  public void test44()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 0.0;
      int int0 = 290;
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, (double) int0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(145.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(290.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      boolean boolean0 = rectangle2D_Double0.isEmpty();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(145.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertTrue(boolean0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(290.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      ValueAxis valueAxis0 = combinedRangeXYPlot0.getDomainAxis(int0);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(valueAxis0);
      
      combinedDomainXYPlot0.setRangeAxis(int0, valueAxis0, boolean0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(145.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(290.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(290.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
  }

  @Test
  public void test45()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      CombinedDomainCategoryPlot combinedDomainCategoryPlot0 = new CombinedDomainCategoryPlot();
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNotNull(combinedDomainCategoryPlot0);
      
      int int0 = 6;
      ValueAxis valueAxis0 = combinedDomainCategoryPlot0.getRangeAxisForDataset(int0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertNull(valueAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot1 = new CombinedRangeXYPlot(valueAxis0);
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot1.isOutlineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot1.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot1.isRangePannable());
      assertEquals(true, combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(true, combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot1.isSubplot());
      assertEquals(true, combinedRangeXYPlot1.isNotify());
      assertEquals(false, combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertNotNull(combinedRangeXYPlot1);
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
      
      combinedRangeXYPlot0.add((XYPlot) combinedRangeXYPlot1);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainCategoryPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isRangeZoomable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainZoomable());
      assertNull(combinedDomainCategoryPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainCategoryPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainCategoryPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.getDrawSharedDomainAxis());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainCategoryPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainCategoryPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainCategoryPlot0.getAnchorValue(), 0.01D);
      assertEquals(true, combinedDomainCategoryPlot0.isNotify());
      assertEquals(0, combinedDomainCategoryPlot0.getCrosshairDatasetIndex());
      assertEquals(false, combinedDomainCategoryPlot0.isSubplot());
      assertEquals(true, combinedDomainCategoryPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainCategoryPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, combinedDomainCategoryPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainCategoryPlot0.isDomainCrosshairVisible());
      assertEquals(0, combinedDomainCategoryPlot0.getWeight());
      assertEquals(false, combinedDomainCategoryPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot1.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot1.isSubplot());
      assertEquals(0.5F, combinedRangeXYPlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot1.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot1.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot1.isOutlineVisible());
      assertNull(combinedRangeXYPlot1.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot1.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot1.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot1.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot1.isRangePannable());
      assertEquals(true, combinedRangeXYPlot1.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot1.getWeight());
      assertEquals(true, combinedRangeXYPlot1.isDomainZoomable());
      assertEquals(0.0, combinedRangeXYPlot1.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot1.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot1.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot1.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot1.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot1.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot1.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot1.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot1.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot1.isNotify());
      assertEquals(false, combinedRangeXYPlot1.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot1.getRangeCrosshairValue(), 0.01D);
      assertNotSame(combinedRangeXYPlot0, combinedRangeXYPlot1);
      assertNotSame(combinedRangeXYPlot1, combinedRangeXYPlot0);
      assertFalse(combinedRangeXYPlot0.equals((Object)combinedRangeXYPlot1));
      assertFalse(combinedRangeXYPlot1.equals((Object)combinedRangeXYPlot0));
  }

  @Test
  public void test46()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "";
      LogarithmicAxis logarithmicAxis0 = new LogarithmicAxis(string0);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(1.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
      assertNotNull(logarithmicAxis0);
      
      combinedDomainXYPlot0.setRangeAxis((ValueAxis) logarithmicAxis0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, logarithmicAxis0.isAutoTickUnitSelection());
      assertEquals(false, logarithmicAxis0.getLog10TickLabelsFlag());
      assertEquals(1.0E-8, logarithmicAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0, logarithmicAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logarithmicAxis0.getAutoRangeNextLogFlag());
      assertEquals(0.05, logarithmicAxis0.getUpperMargin(), 0.01D);
      assertNull(logarithmicAxis0.getLabelURL());
      assertEquals(0.0F, logarithmicAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isVisible());
      assertEquals(0.0, logarithmicAxis0.getLabelAngle(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.getAutoRangeIncludesZero());
      assertEquals(true, logarithmicAxis0.getStrictValuesFlag());
      assertNull(logarithmicAxis0.getLabelToolTip());
      assertEquals(false, logarithmicAxis0.isNegativeArrowVisible());
      assertEquals(true, logarithmicAxis0.isAxisLineVisible());
      assertEquals(0.0, logarithmicAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(2.0F, logarithmicAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isTickMarksVisible());
      assertEquals(0.0, logarithmicAxis0.getLowerBound(), 0.01D);
      assertEquals(0, logarithmicAxis0.getMinorTickCount());
      assertEquals(0.0F, logarithmicAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, logarithmicAxis0.isAutoRange());
      assertEquals(false, logarithmicAxis0.getExpTickLabelsFlag());
      assertEquals(false, logarithmicAxis0.isInverted());
      assertEquals(true, logarithmicAxis0.isTickLabelsVisible());
      assertEquals(false, logarithmicAxis0.isVerticalTickLabels());
      assertEquals("", logarithmicAxis0.getLabel());
      assertEquals(0.0, logarithmicAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, logarithmicAxis0.getAutoRangeStickyZero());
      assertEquals(false, logarithmicAxis0.isMinorTickMarksVisible());
      assertEquals(0.05, logarithmicAxis0.getLowerMargin(), 0.01D);
      assertEquals(false, logarithmicAxis0.isPositiveArrowVisible());
      assertEquals(false, logarithmicAxis0.getAllowNegativesFlag());
  }

  @Test
  public void test47()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      RectangleEdge rectangleEdge0 = combinedDomainXYPlot0.getDomainAxisEdge(int0);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
  }

  @Test
  public void test48()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 290;
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getDomainAxisLocation(int0);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertNotNull(axisLocation0);
  }

  @Test
  public void test49()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      
      xYPlot0.clearDomainAxes();
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
  }

  @Test
  public void test50()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearDomainAxes();
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
  }

  @Test
  public void test51()  throws Throwable  {
      String string0 = "";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ValueAxis[] valueAxisArray0 = new ValueAxis[7];
      combinedDomainXYPlot0.setDomainAxes(valueAxisArray0);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test52()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      Graphics2D graphics2D0 = null;
      JSplitPane jSplitPane0 = new JSplitPane();
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(3, jSplitPane0.getComponentCount());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(3, jSplitPane0.countComponents());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertNotNull(jSplitPane0);
      
      Rectangle rectangle0 = jSplitPane0.bounds();
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(3, jSplitPane0.getComponentCount());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(3, jSplitPane0.countComponents());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      
      xYPlot0.drawZeroDomainBaseline(graphics2D0, rectangle0);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, jSplitPane0.isValid());
      assertEquals(false, jSplitPane0.getIgnoreRepaint());
      assertEquals(3, jSplitPane0.getComponentCount());
      assertEquals(false, jSplitPane0.isMinimumSizeSet());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicyProvider());
      assertEquals(false, jSplitPane0.isDisplayable());
      assertEquals(false, jSplitPane0.isFontSet());
      assertEquals(true, jSplitPane0.getFocusTraversalKeysEnabled());
      assertEquals(3, jSplitPane0.countComponents());
      assertEquals(true, jSplitPane0.isBackgroundSet());
      assertEquals(false, jSplitPane0.isShowing());
      assertEquals(false, jSplitPane0.isMaximumSizeSet());
      assertEquals(false, jSplitPane0.isForegroundSet());
      assertEquals(false, jSplitPane0.isPreferredSizeSet());
      assertEquals(true, jSplitPane0.isVisible());
      assertEquals(true, jSplitPane0.isEnabled());
      assertEquals(false, jSplitPane0.isCursorSet());
      assertEquals(false, jSplitPane0.isFocusCycleRoot());
      assertEquals(false, jSplitPane0.isLightweight());
      assertEquals(false, jSplitPane0.isFocusTraversalPolicySet());
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
  }

  @Test
  public void test53()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(combinedDomainXYPlot0);
      
      RectangleInsets rectangleInsets0 = combinedDomainXYPlot0.getAxisOffset();
      assertEquals(4.0, rectangleInsets0.getLeft(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getRight(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getBottom(), 0.01D);
      assertEquals(4.0, rectangleInsets0.getTop(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNotNull(rectangleInsets0);
  }

  @Test
  public void test54()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertNotNull(xYPlot0);
      
      CompositeTitle compositeTitle0 = new CompositeTitle();
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertNotNull(compositeTitle0);
      assertTrue(compositeTitle0.visible);
      
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertNotNull(defaultListCellRenderer0);
      
      FontUIResource fontUIResource0 = (FontUIResource)defaultListCellRenderer0.getFont();
      assertEquals(1, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertNotNull(fontUIResource0);
      
      String string0 = "";
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Font) fontUIResource0, (Plot) xYPlot0, compositeTitle0.visible);
      assertEquals(1, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertNotNull(jFreeChart0);
      assertTrue(compositeTitle0.visible);
      
      ChartPanel chartPanel0 = new ChartPanel(jFreeChart0);
      assertEquals(1, fontUIResource0.getStyle());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(10, chartPanel0.getZoomTriggerDistance());
      assertEquals(true, chartPanel0.isForegroundSet());
      assertEquals(false, chartPanel0.isLightweight());
      assertEquals(0.5, chartPanel0.getZoomInFactor(), 0.01D);
      assertEquals(false, chartPanel0.getRefreshBuffer());
      assertEquals(200, chartPanel0.getMinimumDrawHeight());
      assertEquals(true, chartPanel0.isRangeZoomable());
      assertEquals(true, chartPanel0.isEnabled());
      assertEquals(true, chartPanel0.isVisible());
      assertEquals(0, chartPanel0.getComponentCount());
      assertEquals(false, chartPanel0.isShowing());
      assertEquals(false, chartPanel0.getIgnoreRepaint());
      assertEquals(true, chartPanel0.getFillZoomRectangle());
      assertEquals(2.0, chartPanel0.getZoomOutFactor(), 0.01D);
      assertEquals(false, chartPanel0.isFocusCycleRoot());
      assertEquals(768, chartPanel0.getMaximumDrawHeight());
      assertEquals(true, chartPanel0.getFocusTraversalKeysEnabled());
      assertEquals(true, chartPanel0.isEnforceFileExtensions());
      assertEquals(true, chartPanel0.getUseBuffer());
      assertEquals(500, chartPanel0.getReshowDelay());
      assertEquals(4000, chartPanel0.getDismissDelay());
      assertEquals(0.0, chartPanel0.getScaleX(), 0.01D);
      assertEquals(false, chartPanel0.isValid());
      assertEquals(300, chartPanel0.getMinimumDrawWidth());
      assertEquals(750, chartPanel0.getInitialDelay());
      assertEquals(0, chartPanel0.countComponents());
      assertEquals(false, chartPanel0.isFocusTraversalPolicySet());
      assertEquals(false, chartPanel0.getZoomAroundAnchor());
      assertEquals(true, chartPanel0.isFontSet());
      assertEquals(true, chartPanel0.isDomainZoomable());
      assertEquals(false, chartPanel0.isCursorSet());
      assertEquals(false, chartPanel0.isFocusTraversalPolicyProvider());
      assertEquals(true, chartPanel0.isBackgroundSet());
      assertEquals(false, chartPanel0.isMouseWheelEnabled());
      assertEquals(false, chartPanel0.isDisplayable());
      assertEquals(1024, chartPanel0.getMaximumDrawWidth());
      assertEquals(false, chartPanel0.isMinimumSizeSet());
      assertEquals(0.0, chartPanel0.getScaleY(), 0.01D);
      assertEquals(true, chartPanel0.isPreferredSizeSet());
      assertEquals(false, chartPanel0.isMaximumSizeSet());
      assertEquals(false, defaultListCellRenderer0.isCursorSet());
      assertEquals(false, defaultListCellRenderer0.isLightweight());
      assertEquals(0, defaultListCellRenderer0.countComponents());
      assertEquals(false, defaultListCellRenderer0.isFocusCycleRoot());
      assertEquals(true, defaultListCellRenderer0.isEnabled());
      assertEquals(false, defaultListCellRenderer0.isShowing());
      assertEquals(false, defaultListCellRenderer0.isDisplayable());
      assertEquals(false, defaultListCellRenderer0.isValid());
      assertEquals(false, defaultListCellRenderer0.isPreferredSizeSet());
      assertEquals(0, defaultListCellRenderer0.getComponentCount());
      assertEquals(true, defaultListCellRenderer0.isBackgroundSet());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicySet());
      assertEquals(false, defaultListCellRenderer0.isMinimumSizeSet());
      assertEquals(false, defaultListCellRenderer0.getIgnoreRepaint());
      assertEquals(true, defaultListCellRenderer0.getFocusTraversalKeysEnabled());
      assertEquals(false, defaultListCellRenderer0.isMaximumSizeSet());
      assertEquals(true, defaultListCellRenderer0.isForegroundSet());
      assertEquals(true, defaultListCellRenderer0.isVisible());
      assertEquals(false, defaultListCellRenderer0.isFocusTraversalPolicyProvider());
      assertEquals(true, defaultListCellRenderer0.isFontSet());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(true, compositeTitle0.getNotify());
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertNull(compositeTitle0.getID());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertNotNull(chartPanel0);
      assertTrue(compositeTitle0.visible);
  }

  @Test
  public void test55()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNotNull(combinedRangeXYPlot0);
      
      Color color0 = (Color)combinedRangeXYPlot0.getRangeGridlinePaint();
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
  }

  @Test
  public void test56()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertNotNull(combinedDomainXYPlot0);
      
      XYBlockRenderer xYBlockRenderer0 = new XYBlockRenderer();
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertNotNull(xYBlockRenderer0);
      
      LegendItemCollection legendItemCollection0 = xYBlockRenderer0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
      assertNotNull(legendItemCollection0);
      
      combinedDomainXYPlot0.setFixedLegendItems(legendItemCollection0);
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, xYBlockRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(1.0, xYBlockRenderer0.getBlockWidth(), 0.01D);
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(1, xYBlockRenderer0.getPassCount());
      assertEquals(false, xYBlockRenderer0.getBaseItemLabelsVisible());
      assertEquals(false, xYBlockRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(2.0, xYBlockRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(1.0, xYBlockRenderer0.getBlockHeight(), 0.01D);
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, xYBlockRenderer0.getBaseSeriesVisible());
      assertEquals(true, xYBlockRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYBlockRenderer0.getBaseCreateEntities());
      assertEquals(3, xYBlockRenderer0.getDefaultEntityRadius());
  }

  @Test
  public void test57()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(xYPlot0);
      
      double double0 = 0.0;
      CompositeTitle compositeTitle0 = new CompositeTitle();
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(true, compositeTitle0.getNotify());
      assertNull(compositeTitle0.getID());
      assertNotNull(compositeTitle0);
      assertTrue(compositeTitle0.visible);
      
      XYDrawableAnnotation xYDrawableAnnotation0 = new XYDrawableAnnotation(double0, double0, double0, double0, (Drawable) compositeTitle0);
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(true, compositeTitle0.getNotify());
      assertNull(compositeTitle0.getID());
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertNotNull(xYDrawableAnnotation0);
      assertTrue(compositeTitle0.visible);
      
      boolean boolean0 = xYPlot0.removeAnnotation((XYAnnotation) xYDrawableAnnotation0);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentXOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getHeight(), 0.01D);
      assertEquals(1.0, compositeTitle0.getContentYOffset(), 0.01D);
      assertEquals(0.0, compositeTitle0.getWidth(), 0.01D);
      assertEquals(true, compositeTitle0.isVisible());
      assertEquals(true, compositeTitle0.getNotify());
      assertNull(compositeTitle0.getID());
      assertNull(xYDrawableAnnotation0.getURL());
      assertNull(xYDrawableAnnotation0.getToolTipText());
      assertFalse(boolean0);
      assertTrue(compositeTitle0.visible);
  }

  @Test
  public void test58()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = true;
      combinedDomainXYPlot0.setDomainPannable(boolean0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
  }

  @Test
  public void test59()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      boolean boolean0 = combinedRangeXYPlot0.isRangeZeroBaselineVisible();
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertFalse(boolean0);
  }

  @Test
  public void test60()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      SeriesRenderingOrder seriesRenderingOrder0 = combinedDomainXYPlot0.getSeriesRenderingOrder();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals("SeriesRenderingOrder.REVERSE", seriesRenderingOrder0.toString());
      assertNotNull(seriesRenderingOrder0);
  }

  @Test
  public void test61()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      Paint paint0 = combinedDomainXYPlot0.getRangeTickBandPaint();
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNull(paint0);
  }

  @Test
  public void test62()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      Layer layer0 = Layer.FOREGROUND;
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = combinedDomainXYPlot0.getDomainMarkers(layer0);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Layer.FOREGROUND", layer0.toString());
      assertNull(collection0);
  }

  @Test
  public void test63()  throws Throwable  {
      String string0 = "";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isVisible());
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 0.0;
      Line2D.Double line2D_Double0 = new Line2D.Double(double0, double0, double0, double0);
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      Rectangle rectangle0 = line2D_Double0.getBounds();
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      XYPointerAnnotation xYPointerAnnotation0 = new XYPointerAnnotation(string0, (double) rectangle0.width, (double) rectangle0.width, (double) rectangle0.width);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01D);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(false, xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01D);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01D);
      assertNotNull(xYPointerAnnotation0);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      combinedDomainXYPlot0.addAnnotation((XYAnnotation) xYPointerAnnotation0);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertNull(xYPointerAnnotation0.getToolTipText());
      assertEquals(10.0, xYPointerAnnotation0.getTipRadius(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getY(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getX(), 0.01D);
      assertEquals(3.0, xYPointerAnnotation0.getArrowWidth(), 0.01D);
      assertEquals(0.0, xYPointerAnnotation0.getAngle(), 0.01D);
      assertEquals(false, xYPointerAnnotation0.isOutlineVisible());
      assertEquals(3.0, xYPointerAnnotation0.getLabelOffset(), 0.01D);
      assertNull(xYPointerAnnotation0.getURL());
      assertEquals(0.0, xYPointerAnnotation0.getRotationAngle(), 0.01D);
      assertEquals(30.0, xYPointerAnnotation0.getBaseRadius(), 0.01D);
      assertEquals("", xYPointerAnnotation0.getText());
      assertEquals(5.0, xYPointerAnnotation0.getArrowLength(), 0.01D);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.width);
      assertEquals(0, rectangle0.height);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
  }

  @Test
  public void test64()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainGridlineStroke();
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test65()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      double double0 = 0.0;
      BarRenderer3D barRenderer3D0 = new BarRenderer3D(double0, double0);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertNotNull(barRenderer3D0);
      
      Color color0 = (Color)barRenderer3D0.getBasePaint();
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      
      xYPlot0.setRangeTickBandPaint((Paint) color0);
      assertEquals(0.0, barRenderer3D0.getBase(), 0.01D);
      assertEquals(0, barRenderer3D0.getColumnCount());
      assertEquals(1, barRenderer3D0.getPassCount());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, barRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowYOffset(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getYOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getIncludeBaseInRange());
      assertEquals(0.0, barRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(0.0, barRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(4.0, barRenderer3D0.getShadowXOffset(), 0.01D);
      assertEquals(false, barRenderer3D0.isDrawBarOutline());
      assertEquals(true, barRenderer3D0.getDefaultShadowsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(0, barRenderer3D0.getRowCount());
      assertEquals(0.0, barRenderer3D0.getXOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, barRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, barRenderer3D0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, barRenderer3D0.getBaseCreateEntities());
      assertEquals(3, barRenderer3D0.getDefaultEntityRadius());
      assertEquals(true, barRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisible());
      assertEquals(false, barRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(false, barRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, barRenderer3D0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, barRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals(true, barRenderer3D0.getShadowsVisible());
      assertEquals(0.2, barRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(1, color0.getTransparency());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test66()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      String string0 = "{Yq";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("{Yq", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("{Yq", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation();
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("{Yq", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertNotNull(axisLocation0);
      
      boolean boolean0 = false;
      combinedDomainXYPlot0.setDomainAxisLocation(axisLocation0, boolean0);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals("{Yq", dateAxis0.getLabel());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
  }

  ////@Test
  public void test67()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      String string0 = "";
      Year year0 = new Year(int0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNotNull(year0);
      
      PeriodAxis periodAxis0 = new PeriodAxis(string0, (RegularTimePeriod) year0, (RegularTimePeriod) year0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertNotNull(periodAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) periodAxis0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(3.1536E10, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      AxisLocation axisLocation0 = combinedRangeXYPlot0.getDomainAxisLocation(int0);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(3.1536E10, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isVisible());
      assertNotNull(axisLocation0);
      
      combinedDomainXYPlot0.setRangeAxisLocation(int0, axisLocation0);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals((-62135812800001L), year0.getMiddleMillisecond());
      assertEquals(0L, year0.getSerialIndex());
      assertEquals((-62167392000000L), year0.getFirstMillisecond());
      assertEquals(0, year0.getYear());
      assertEquals("0", year0.toString());
      assertEquals((-62104233600001L), year0.getLastMillisecond());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("AxisLocation.BOTTOM_OR_LEFT", axisLocation0.toString());
      assertNull(periodAxis0.getLabelToolTip());
      assertEquals(0.0, periodAxis0.getLabelAngle(), 0.01D);
      assertNull(periodAxis0.getLabelURL());
      assertEquals(false, periodAxis0.isMinorTickMarksVisible());
      assertEquals(false, periodAxis0.isNegativeArrowVisible());
      assertEquals("", periodAxis0.getLabel());
      assertEquals(true, periodAxis0.isTickMarksVisible());
      assertEquals(0.0, periodAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.0F, periodAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.05, periodAxis0.getLowerMargin(), 0.01D);
      assertEquals(0.0F, periodAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(3.1536E10, periodAxis0.getUpperBound(), 0.01D);
      assertEquals(2.0F, periodAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, periodAxis0.isVerticalTickLabels());
      assertEquals(true, periodAxis0.isAxisLineVisible());
      assertEquals(0.0, periodAxis0.getLowerBound(), 0.01D);
      assertEquals(false, periodAxis0.isInverted());
      assertEquals(0.05, periodAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, periodAxis0.isAutoRange());
      assertEquals(true, periodAxis0.isTickLabelsVisible());
      assertEquals(0.0, periodAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, periodAxis0.getMinorTickCount());
      assertEquals(true, periodAxis0.isAutoTickUnitSelection());
      assertEquals(2.0F, periodAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(1.0E-8, periodAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(false, periodAxis0.isPositiveArrowVisible());
      assertEquals(true, periodAxis0.isVisible());
  }

  @Test
  public void test68()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getRangeZeroBaselinePaint();
      assertEquals(0, color0.getBlue());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(color0);
  }

  @Test
  public void test69()  throws Throwable  {
      Line2D.Double line2D_Double0 = new Line2D.Double();
      assertNotNull(line2D_Double0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      XYPlot xYPlot0 = new XYPlot();
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(xYPlot0);
      
      BoxAndWhiskerRenderer boxAndWhiskerRenderer0 = new BoxAndWhiskerRenderer();
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertNotNull(boxAndWhiskerRenderer0);
      
      Color color0 = (Color)boxAndWhiskerRenderer0.getBaseFillPaint();
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      
      XYStepAreaRenderer xYStepAreaRenderer0 = new XYStepAreaRenderer();
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertNotNull(xYStepAreaRenderer0);
      
      int int0 = 74;
      boolean boolean0 = true;
      BasicStroke basicStroke0 = (BasicStroke)xYStepAreaRenderer0.getItemOutlineStroke(int0, int0, boolean0);
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
      
      ValueMarker valueMarker0 = new ValueMarker(line2D_Double0.y2, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertNotNull(valueMarker0);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      
      boolean boolean1 = xYPlot0.removeRangeMarker((Marker) valueMarker0);
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(0.0, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertEquals(false, xYStepAreaRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(true, xYStepAreaRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisible());
      assertEquals(false, xYStepAreaRenderer0.isOutline());
      assertEquals(true, xYStepAreaRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, xYStepAreaRenderer0.getRangeBase(), 0.01D);
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(2.0, xYStepAreaRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, xYStepAreaRenderer0.getPlotArea());
      assertEquals(false, xYStepAreaRenderer0.isShapesFilled());
      assertEquals(true, xYStepAreaRenderer0.getAutoPopulateSeriesShape());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(1, xYStepAreaRenderer0.getPassCount());
      assertEquals(3, xYStepAreaRenderer0.getDefaultEntityRadius());
      assertEquals(false, xYStepAreaRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(true, xYStepAreaRenderer0.getBaseCreateEntities());
      assertEquals(false, xYStepAreaRenderer0.getShapesVisible());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(1.0, boxAndWhiskerRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(1, boxAndWhiskerRenderer0.getPassCount());
      assertEquals(false, boxAndWhiskerRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, boxAndWhiskerRenderer0.isMeanVisible());
      assertEquals(true, boxAndWhiskerRenderer0.isMedianVisible());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, boxAndWhiskerRenderer0.getFillBox());
      assertEquals(true, boxAndWhiskerRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(0, boxAndWhiskerRenderer0.getColumnCount());
      assertEquals(false, boxAndWhiskerRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(2.0, boxAndWhiskerRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(true, boxAndWhiskerRenderer0.getBaseCreateEntities());
      assertEquals(0.2, boxAndWhiskerRenderer0.getItemMargin(), 0.01D);
      assertEquals(3, boxAndWhiskerRenderer0.getDefaultEntityRadius());
      assertEquals(true, boxAndWhiskerRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, boxAndWhiskerRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0, boxAndWhiskerRenderer0.getRowCount());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getGreen());
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertFalse(boolean1);
      assertEquals(0.0, line2D_Double0.x2, 0.01D);
      assertEquals(0.0, line2D_Double0.y1, 0.01D);
      assertEquals(0.0, line2D_Double0.y2, 0.01D);
      assertEquals(0.0, line2D_Double0.x1, 0.01D);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
  }

  @Test
  public void test70()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = combinedDomainXYPlot0.getDomainCrosshairValue();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test
  public void test71()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      AxisLocation axisLocation0 = null;
      // Undeclared exception!
      try {
        xYPlot0.setDomainAxisLocation(axisLocation0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'location' for index 0 not permitted.
         //
      }
  }

  @Test
  public void test72()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.clearAnnotations();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
  }

  @Test
  public void test73()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      Color color0 = (Color)xYPlot0.getDomainMinorGridlinePaint();
      assertEquals(-1, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals("java.awt.Color[r=255,g=255,b=255]", color0.toString());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(color0);
  }

  @Test
  public void test74()  throws Throwable  {
      String string0 = "";
      LogAxis logAxis0 = new LogAxis(string0);
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals(0.0, logAxis0.getLowerBound(), 0.01D);
      assertEquals("", logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(1.0, logAxis0.getUpperBound(), 0.01D);
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertNotNull(logAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) logAxis0);
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals("", logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainZeroBaselinePaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(-16777216, color0.getRGB());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, logAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, logAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(10.0, logAxis0.getBase(), 0.01D);
      assertEquals(0.0F, logAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, logAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, logAxis0.getUpperMargin(), 0.01D);
      assertEquals(0.00794328234724282, logAxis0.getLowerBound(), 0.01D);
      assertEquals(0, logAxis0.getMinorTickCount());
      assertEquals("", logAxis0.getLabel());
      assertEquals(true, logAxis0.isAutoRange());
      assertEquals(0.0, logAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, logAxis0.isTickMarksVisible());
      assertEquals(2.0F, logAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isPositiveArrowVisible());
      assertEquals(true, logAxis0.isVisible());
      assertEquals(false, logAxis0.isNegativeArrowVisible());
      assertEquals(2.0F, logAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, logAxis0.isMinorTickMarksVisible());
      assertEquals(false, logAxis0.isVerticalTickLabels());
      assertEquals(1.258925411794167, logAxis0.getUpperBound(), 0.01D);
      assertEquals(true, logAxis0.isAxisLineVisible());
      assertEquals(0.05, logAxis0.getLowerMargin(), 0.01D);
      assertNull(logAxis0.getLabelToolTip());
      assertEquals(0.0, logAxis0.getFixedDimension(), 0.01D);
      assertNull(logAxis0.getLabelURL());
      assertEquals(1.0E-8, logAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(true, logAxis0.isTickLabelsVisible());
      assertEquals(false, logAxis0.isInverted());
      assertEquals(1.0E-100, logAxis0.getSmallestValue(), 0.01D);
      assertNotNull(color0);
  }

  @Test
  public void test75()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNotNull(xYPlot0);
      
      Layer layer0 = Layer.BACKGROUND;
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertNotNull(layer0);
      
      Collection collection0 = xYPlot0.getRangeMarkers(layer0);
      assertEquals("Layer.BACKGROUND", layer0.toString());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(collection0);
  }

  @Test
  public void test76()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertNotNull(xYPlot0);
      
      boolean boolean0 = xYPlot0.isRangePannable();
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertNull(xYPlot0.getNoDataMessage());
      assertFalse(boolean0);
  }

  @Test
  public void test77()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertNotNull(xYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeMinorGridlineStroke();
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test78()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      XYDataset xYDataset0 = combinedRangeXYPlot0.getDataset();
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(xYDataset0);
  }

  @Test
  public void test79()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(xYPlot0);
      
      int int0 = xYPlot0.getWeight();
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, int0);
  }

  @Test
  public void test80()  throws Throwable  {
      String string0 = "'+=:.#)+G,d]__";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals("'+=:.#)+G,d]__", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertNotNull(dateAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) dateAxis0);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals("'+=:.#)+G,d]__", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 586;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertNotNull(axisLocation0);
      
      combinedRangeXYPlot0.setDomainAxisLocation(int0, axisLocation0);
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals("'+=:.#)+G,d]__", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertNull(dateAxis0.getLabelURL());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(false, dateAxis0.isInverted());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
  }

  @Test
  public void test81()  throws Throwable  {
      String string0 = "'+=:.#)+G,d]__";
      DateAxis dateAxis0 = new DateAxis(string0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals("'+=:.#)+G,d]__", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertNotNull(dateAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      combinedDomainXYPlot0.setDomainAxis((ValueAxis) dateAxis0);
      assertEquals(0.05, dateAxis0.getLowerMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAutoTickUnitSelection());
      assertEquals(0.0F, dateAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(1.0, dateAxis0.getUpperBound(), 0.01D);
      assertEquals(true, dateAxis0.isAutoRange());
      assertEquals(true, dateAxis0.isTickLabelsVisible());
      assertEquals(false, dateAxis0.isMinorTickMarksVisible());
      assertEquals(false, dateAxis0.isNegativeArrowVisible());
      assertEquals(0.05, dateAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, dateAxis0.isAxisLineVisible());
      assertEquals(false, dateAxis0.isInverted());
      assertNull(dateAxis0.getLabelToolTip());
      assertEquals(0, dateAxis0.getMinorTickCount());
      assertEquals(0.0, dateAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, dateAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0.0, dateAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.0, dateAxis0.getFixedDimension(), 0.01D);
      assertEquals(false, dateAxis0.isVerticalTickLabels());
      assertEquals(2.0, dateAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(dateAxis0.getLabelURL());
      assertEquals("'+=:.#)+G,d]__", dateAxis0.getLabel());
      assertEquals(true, dateAxis0.isVisible());
      assertEquals(true, dateAxis0.isTickMarksVisible());
      assertEquals(2.0F, dateAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(false, dateAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, dateAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
  }

  @Test
  public void test82()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertNotNull(xYPlot0);
      
      int int0 = xYPlot0.getDomainAxisCount();
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(1, int0);
  }

  @Test
  public void test83()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      int int0 = 74;
      FastScatterPlot fastScatterPlot0 = new FastScatterPlot();
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertNotNull(fastScatterPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)fastScatterPlot0.getDomainAxis();
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertNotNull(numberAxis0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis0);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertNotNull(combinedDomainXYPlot0);
      
      AxisLocation axisLocation0 = combinedDomainXYPlot0.getRangeAxisLocation(int0);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertNotNull(axisLocation0);
      
      xYPlot0.setRangeAxisLocation(axisLocation0);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertNull(numberAxis0.getLabelURL());
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals("X", numberAxis0.getLabel());
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(1.05, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(true, numberAxis0.isAutoRange());
      assertEquals(false, numberAxis0.isInverted());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals("AxisLocation.TOP_OR_RIGHT", axisLocation0.toString());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, fastScatterPlot0.isRangeZoomable());
      assertEquals(false, fastScatterPlot0.isRangePannable());
      assertEquals(true, fastScatterPlot0.isNotify());
      assertNull(fastScatterPlot0.getNoDataMessage());
      assertEquals(true, fastScatterPlot0.isOutlineVisible());
      assertEquals(true, fastScatterPlot0.isDomainGridlinesVisible());
      assertEquals(1.0F, fastScatterPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isRangeGridlinesVisible());
      assertEquals(0.5F, fastScatterPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, fastScatterPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, fastScatterPlot0.isDomainZoomable());
      assertEquals(false, fastScatterPlot0.isSubplot());
      assertEquals(15, fastScatterPlot0.getBackgroundImageAlignment());
      assertEquals(false, fastScatterPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
  }

  @Test
  public void test84()  throws Throwable  {
      XYPlot xYPlot0 = new XYPlot();
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(xYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)xYPlot0.getRangeCrosshairStroke();
      assertEquals(true, xYPlot0.canSelectByRegion());
      assertEquals(false, xYPlot0.isRangeCrosshairVisible());
      assertEquals(1, xYPlot0.getWeight());
      assertEquals(false, xYPlot0.isDomainPannable());
      assertEquals(true, xYPlot0.isRangeGridlinesVisible());
      assertEquals(true, xYPlot0.isOutlineVisible());
      assertEquals(true, xYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, xYPlot0.isNotify());
      assertEquals(1.0F, xYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isRangeZeroBaselineVisible());
      assertNull(xYPlot0.getNoDataMessage());
      assertEquals(false, xYPlot0.isDomainCrosshairVisible());
      assertEquals(15, xYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, xYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, xYPlot0.isSubplot());
      assertEquals(true, xYPlot0.isDomainZoomable());
      assertEquals(false, xYPlot0.isRangePannable());
      assertEquals(false, xYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, xYPlot0.isRangeZoomable());
      assertEquals(true, xYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, xYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, xYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, xYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, xYPlot0.canSelectByPoint());
      assertEquals(0.0, xYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, xYPlot0.isDomainGridlinesVisible());
      assertEquals(false, xYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0, basicStroke0.getEndCap());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test85()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeZeroBaselineStroke();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertNotNull(basicStroke0);
      
      int int0 = 2646;
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertNotNull(combinedRangeXYPlot0);
      
      GanttRenderer ganttRenderer0 = new GanttRenderer();
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertNotNull(ganttRenderer0);
      
      Color color0 = (Color)ganttRenderer0.lookupSeriesPaint(int0);
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertNotNull(color0);
      
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0, (Paint) color0, (Stroke) basicStroke0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
      assertNotNull(categoryMarker0);
      
      Layer layer0 = null;
      combinedRangeXYPlot0.addRangeMarker((Marker) categoryMarker0, layer0);
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertNull(categoryMarker0.getLabel());
      assertEquals(0, ganttRenderer0.getRowCount());
      assertEquals(0.0, ganttRenderer0.getMinimumBarLength(), 0.01D);
      assertEquals(true, ganttRenderer0.getShadowsVisible());
      assertEquals(true, ganttRenderer0.getDataBoundsIncludesVisibleSeriesOnly());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, ganttRenderer0.getBaseItemLabelsVisible());
      assertEquals(0.2, ganttRenderer0.getItemMargin(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(0.0, ganttRenderer0.getUpperClip(), 0.01D);
      assertEquals(0.0, ganttRenderer0.getBase(), 0.01D);
      assertEquals(0.65, ganttRenderer0.getEndPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseCreateEntities());
      assertEquals(true, ganttRenderer0.getDefaultShadowsVisible());
      assertEquals(1, ganttRenderer0.getPassCount());
      assertEquals(0.35, ganttRenderer0.getStartPercent(), 0.01D);
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(false, ganttRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(3, ganttRenderer0.getDefaultEntityRadius());
      assertEquals(4.0, ganttRenderer0.getShadowYOffset(), 0.01D);
      assertEquals(true, ganttRenderer0.getBaseSeriesVisible());
      assertEquals(0, ganttRenderer0.getColumnCount());
      assertEquals(2.0, ganttRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, ganttRenderer0.getIncludeBaseInRange());
      assertEquals(4.0, ganttRenderer0.getShadowXOffset(), 0.01D);
      assertEquals(1.0, ganttRenderer0.getMaximumBarWidth(), 0.01D);
      assertEquals(false, ganttRenderer0.isDrawBarOutline());
      assertEquals(true, ganttRenderer0.getAutoPopulateSeriesShape());
      assertEquals(true, ganttRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(0.0, ganttRenderer0.getLowerClip(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(-16776961, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(255, color0.getBlue());
  }

  @Test
  public void test86()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 4.0;
      combinedDomainXYPlot0.setRangeCrosshairValue(double0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(4.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
  }

  @Test
  public void test87()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertNotNull(combinedDomainXYPlot0);
      
      double double0 = 0.0;
      combinedDomainXYPlot0.setDomainCrosshairValue(double0);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
  }

  @Test
  public void test88()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      int int0 = 0;
      CategoryMarker categoryMarker0 = new CategoryMarker((Comparable) int0);
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
      assertNotNull(categoryMarker0);
      
      combinedDomainXYPlot0.addDomainMarker((Marker) categoryMarker0);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertNull(categoryMarker0.getLabel());
      assertEquals(false, categoryMarker0.getDrawAsLine());
      assertEquals(1.0F, categoryMarker0.getAlpha(), 0.01F);
  }

  @Test
  public void test89()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedRangeXYPlot0.getDomainMinorGridlineStroke();
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(basicStroke0);
  }

  @Test
  public void test90()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertNotNull(combinedDomainXYPlot0);
      
      TimeSeriesCollection timeSeriesCollection0 = new TimeSeriesCollection();
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertNotNull(timeSeriesCollection0);
      
      combinedDomainXYPlot0.setDataset((XYDataset) timeSeriesCollection0);
      assertEquals(0, timeSeriesCollection0.getSeriesCount());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
  }

  @Test
  public void test91()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertNotNull(combinedDomainXYPlot0);
      
      boolean boolean0 = combinedDomainXYPlot0.isRangeCrosshairLockedOnData();
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertTrue(boolean0);
  }

  @Test
  public void test92()  throws Throwable  {
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot();
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedDomainXYPlot0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot();
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertNotNull(thermometerPlot0);
      
      NumberAxis numberAxis0 = (NumberAxis)thermometerPlot0.getRangeAxis();
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertNotNull(numberAxis0);
      
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot((ValueAxis) numberAxis0);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 1346;
      XYItemRenderer xYItemRenderer0 = combinedRangeXYPlot0.getRenderer(int0);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(xYItemRenderer0);
      
      combinedDomainXYPlot0.setRenderer(xYItemRenderer0);
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0E-8, numberAxis0.getAutoRangeMinimumSize(), 0.01D);
      assertNull(numberAxis0.getLabelURL());
      assertEquals(false, numberAxis0.isInverted());
      assertNull(numberAxis0.getLabel());
      assertEquals(false, numberAxis0.isMinorTickMarksVisible());
      assertEquals(false, numberAxis0.isAxisLineVisible());
      assertEquals(false, numberAxis0.isPositiveArrowVisible());
      assertEquals(2.0F, numberAxis0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis0.isNegativeArrowVisible());
      assertNull(numberAxis0.getLabelToolTip());
      assertEquals(0.0, numberAxis0.getLowerBound(), 0.01D);
      assertEquals(0.0F, numberAxis0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isAutoTickUnitSelection());
      assertEquals(0.05, numberAxis0.getUpperMargin(), 0.01D);
      assertEquals(true, numberAxis0.isVisible());
      assertEquals(2.0F, numberAxis0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis0.isTickLabelsVisible());
      assertEquals(false, numberAxis0.isAutoRange());
      assertEquals(0.0, numberAxis0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis0.getLowerMargin(), 0.01D);
      assertEquals(100.0, numberAxis0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis0.isVerticalTickLabels());
      assertEquals(0.0, numberAxis0.getFixedDimension(), 0.01D);
      assertEquals(0, numberAxis0.getMinorTickCount());
      assertEquals(0.0, numberAxis0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis0.isTickMarksVisible());
      assertEquals(0.0F, numberAxis0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis0.getAutoRangeStickyZero());
      assertEquals(true, numberAxis0.getAutoRangeIncludesZero());
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(true, thermometerPlot0.isNotify());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
  }

  @Test
  public void test93()  throws Throwable  {
      ValueAxis valueAxis0 = null;
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot(valueAxis0);
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNotNull(combinedDomainXYPlot0);
      
      BasicStroke basicStroke0 = (BasicStroke)combinedDomainXYPlot0.getRangeGridlineStroke();
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(0, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0.5F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(2, basicStroke0.getLineJoin());
      assertNotNull(basicStroke0);
  }

  @Test
  public void test94()  throws Throwable  {
      CombinedRangeXYPlot combinedRangeXYPlot0 = new CombinedRangeXYPlot();
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(combinedRangeXYPlot0);
      
      int int0 = 631;
      String string0 = "Null 'stroke' argument.";
      JFreeChart jFreeChart0 = new JFreeChart(string0, (Plot) combinedRangeXYPlot0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertNotNull(jFreeChart0);
      
      ChartRenderingInfo chartRenderingInfo0 = null;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, chartRenderingInfo0);
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, combinedRangeXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedRangeXYPlot0.isRangeZeroBaselineVisible());
      assertEquals(1.0F, combinedRangeXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, combinedRangeXYPlot0.isRangeCrosshairVisible());
      assertEquals(false, combinedRangeXYPlot0.canSelectByPoint());
      assertEquals(true, combinedRangeXYPlot0.isNotify());
      assertEquals(true, combinedRangeXYPlot0.isRangeGridlinesVisible());
      assertEquals(0.0, combinedRangeXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(5.0, combinedRangeXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedRangeXYPlot0.isRangeZoomable());
      assertEquals(false, combinedRangeXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.canSelectByRegion());
      assertEquals(false, combinedRangeXYPlot0.isSubplot());
      assertEquals(true, combinedRangeXYPlot0.isOutlineVisible());
      assertEquals(true, combinedRangeXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedRangeXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, combinedRangeXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(combinedRangeXYPlot0.getNoDataMessage());
      assertEquals(1, combinedRangeXYPlot0.getWeight());
      assertEquals(false, combinedRangeXYPlot0.isRangePannable());
      assertEquals(true, combinedRangeXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(false, combinedRangeXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(true, combinedRangeXYPlot0.isDomainZoomable());
      assertEquals(false, combinedRangeXYPlot0.isDomainPannable());
      assertEquals(false, combinedRangeXYPlot0.isDomainCrosshairVisible());
      assertEquals(15, combinedRangeXYPlot0.getBackgroundImageAlignment());
      assertEquals(0.0, combinedRangeXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedRangeXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(631, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(631, bufferedImage0.getTileWidth());
      assertEquals(631, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(631, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertNotNull(bufferedImage0);
  }

  @Test
  public void test95()  throws Throwable  {
      String string0 = "";
      NumberAxis3D numberAxis3D0 = new NumberAxis3D(string0);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(1.0, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertNotNull(numberAxis3D0);
      
      CombinedDomainXYPlot combinedDomainXYPlot0 = new CombinedDomainXYPlot((ValueAxis) numberAxis3D0);
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertNotNull(combinedDomainXYPlot0);
      
      Color color0 = (Color)combinedDomainXYPlot0.getDomainCrosshairPaint();
      assertEquals(0.0, numberAxis3D0.getFixedAutoRange(), 0.01D);
      assertEquals(true, numberAxis3D0.isTickMarksVisible());
      assertEquals(true, numberAxis3D0.isTickLabelsVisible());
      assertEquals(0.0F, numberAxis3D0.getTickMarkInsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isAutoRange());
      assertEquals(1.0E-8, numberAxis3D0.getAutoRangeMinimumSize(), 0.01D);
      assertEquals(2.0F, numberAxis3D0.getTickMarkOutsideLength(), 0.01F);
      assertEquals(true, numberAxis3D0.isVisible());
      assertEquals(false, numberAxis3D0.isNegativeArrowVisible());
      assertEquals(2.0F, numberAxis3D0.getMinorTickMarkOutsideLength(), 0.01F);
      assertEquals(false, numberAxis3D0.isMinorTickMarksVisible());
      assertEquals(true, numberAxis3D0.isAxisLineVisible());
      assertEquals(0.0F, numberAxis3D0.getMinorTickMarkInsideLength(), 0.01F);
      assertEquals(0, numberAxis3D0.getMinorTickCount());
      assertEquals(false, numberAxis3D0.isInverted());
      assertEquals(false, numberAxis3D0.isPositiveArrowVisible());
      assertEquals(0.05, numberAxis3D0.getLowerMargin(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLowerBound(), 0.01D);
      assertEquals(0.0, numberAxis3D0.getLabelAngle(), 0.01D);
      assertEquals(0.05, numberAxis3D0.getUpperMargin(), 0.01D);
      assertEquals("", numberAxis3D0.getLabel());
      assertEquals(true, numberAxis3D0.getAutoRangeIncludesZero());
      assertNull(numberAxis3D0.getLabelURL());
      assertNull(numberAxis3D0.getLabelToolTip());
      assertEquals(true, numberAxis3D0.getAutoRangeStickyZero());
      assertEquals(0.0, numberAxis3D0.getFixedDimension(), 0.01D);
      assertEquals(true, numberAxis3D0.isAutoTickUnitSelection());
      assertEquals(1.05, numberAxis3D0.getUpperBound(), 0.01D);
      assertEquals(false, numberAxis3D0.isVerticalTickLabels());
      assertEquals(true, combinedDomainXYPlot0.isDomainCrosshairLockedOnData());
      assertEquals(0.0, combinedDomainXYPlot0.getRangeCrosshairValue(), 0.01D);
      assertEquals(false, combinedDomainXYPlot0.isDomainZeroBaselineVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeGridlinesVisible());
      assertEquals(true, combinedDomainXYPlot0.isRangeCrosshairLockedOnData());
      assertEquals(1.0F, combinedDomainXYPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, combinedDomainXYPlot0.isDomainMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isSubplot());
      assertEquals(0.5F, combinedDomainXYPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isNotify());
      assertEquals(5.0, combinedDomainXYPlot0.getGap(), 0.01D);
      assertEquals(true, combinedDomainXYPlot0.canSelectByRegion());
      assertEquals("Combined_Domain_XYPlot", combinedDomainXYPlot0.getPlotType());
      assertEquals(false, combinedDomainXYPlot0.isRangeZeroBaselineVisible());
      assertNull(combinedDomainXYPlot0.getNoDataMessage());
      assertEquals(false, combinedDomainXYPlot0.isRangeMinorGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.canSelectByPoint());
      assertEquals(true, combinedDomainXYPlot0.isOutlineVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangePannable());
      assertEquals(0.0, combinedDomainXYPlot0.getDomainCrosshairValue(), 0.01D);
      assertEquals(15, combinedDomainXYPlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, combinedDomainXYPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, combinedDomainXYPlot0.isRangeZoomable());
      assertEquals(true, combinedDomainXYPlot0.isDomainGridlinesVisible());
      assertEquals(false, combinedDomainXYPlot0.isDomainCrosshairVisible());
      assertEquals(false, combinedDomainXYPlot0.isRangeCrosshairVisible());
      assertEquals(1, combinedDomainXYPlot0.getWeight());
      assertEquals(true, combinedDomainXYPlot0.isDomainZoomable());
      assertEquals(false, combinedDomainXYPlot0.isDomainPannable());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=255]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals(-16776961, color0.getRGB());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
  }
}
