/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:29:14 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.util.ShapeList;
import org.junit.runner.RunWith;

 
public class ShapeListEvoSuite_branch_Test   {

  @Test
  public void test0()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      ShapeList shapeList1 = new ShapeList();
      assertNotNull(shapeList1);
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertEquals(0, shapeList1.size());
      assertNotSame(shapeList1, shapeList0);
      
      int int0 = 38;
      Point point0 = new Point();
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      
      Rectangle rectangle0 = new Rectangle(point0);
      assertNotNull(rectangle0);
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      
      shapeList0.setShape(int0, (Shape) rectangle0);
      assertFalse(shapeList0.equals((Object)shapeList1));
      assertEquals(0, rectangle0.height);
      assertEquals(0, rectangle0.x);
      assertEquals(0, rectangle0.y);
      assertEquals(0, rectangle0.width);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(39, shapeList0.size());
      assertEquals(0.0, rectangle0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle0.getCenterX(), 0.01D);
      assertEquals(true, rectangle0.isEmpty());
      assertEquals(0.0, rectangle0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle0.getMinX(), 0.01D);
      assertEquals("java.awt.Rectangle[x=0,y=0,width=0,height=0]", rectangle0.toString());
      assertEquals(0.0, rectangle0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle0.getY(), 0.01D);
      assertEquals(0.0, rectangle0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertNotSame(shapeList0, shapeList1);
      
      boolean boolean0 = shapeList0.equals((Object) shapeList1);
      assertFalse(shapeList0.equals((Object)shapeList1));
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertEquals(39, shapeList0.size());
      assertEquals(0, shapeList1.size());
      assertNotSame(shapeList0, shapeList1);
      assertNotSame(shapeList1, shapeList0);
      assertFalse(boolean0);
  }

  @Test
  public void test1()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      ShapeList shapeList1 = new ShapeList();
      assertNotNull(shapeList1);
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertEquals(0, shapeList1.size());
      assertNotSame(shapeList1, shapeList0);
      
      boolean boolean0 = shapeList0.equals((Object) shapeList1);
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertEquals(0, shapeList0.size());
      assertEquals(0, shapeList1.size());
      assertNotSame(shapeList0, shapeList1);
      assertNotSame(shapeList1, shapeList0);
      assertTrue(boolean0);
  }

  @Test
  public void test2()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = shapeList0.equals(object0);
      assertEquals(0, shapeList0.size());
      assertFalse(boolean0);
  }

  @Test
  public void test3()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      int int0 = 38;
      Shape shape0 = shapeList0.getShape(int0);
      assertNull(shape0);
      assertEquals(0, shapeList0.size());
  }

  @Test
  public void test4()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      ShapeList shapeList1 = (ShapeList)shapeList0.clone();
      assertNotNull(shapeList1);
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertEquals(0, shapeList1.size());
      assertEquals(0, shapeList0.size());
      assertNotSame(shapeList1, shapeList0);
      assertNotSame(shapeList0, shapeList1);
  }

  @Test
  public void test5()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertNotNull(shapeList0);
      assertEquals(0, shapeList0.size());
      
      int int0 = shapeList0.hashCode();
      assertEquals(0, shapeList0.size());
      assertEquals(4699, int0);
  }
}
