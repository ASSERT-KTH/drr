/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:08:24 GMT 2014
 */

package org.jfree.chart.util;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Polygon;
import java.awt.Shape;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.util.ShapeList;
import org.junit.runner.RunWith;

 
public class ShapeListEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertEquals(0, shapeList0.size());
      assertNotNull(shapeList0);
      
      ShapeList shapeList1 = new ShapeList();
      assertEquals(0, shapeList1.size());
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertNotSame(shapeList1, shapeList0);
      assertNotNull(shapeList1);
      
      int int0 = shapeList0.hashCode();
      assertEquals(0, shapeList0.size());
      assertEquals(4699, int0);
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertNotSame(shapeList0, shapeList1);
      
      Polygon polygon0 = new Polygon();
      assertEquals(0, polygon0.npoints);
      assertNotNull(polygon0);
      
      shapeList1.setShape(int0, (Shape) polygon0);
      assertEquals(0, shapeList0.size());
      assertEquals(4700, shapeList1.size());
      assertEquals(0, polygon0.npoints);
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertFalse(shapeList1.equals((Object)shapeList0));
      assertNotSame(shapeList0, shapeList1);
      assertNotSame(shapeList1, shapeList0);
      
      boolean boolean0 = shapeList1.equals((Object) shapeList0);
      assertEquals(0, shapeList0.size());
      assertEquals(4700, shapeList1.size());
      assertFalse(boolean0);
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertFalse(shapeList1.equals((Object)shapeList0));
      assertNotSame(shapeList0, shapeList1);
      assertNotSame(shapeList1, shapeList0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertEquals(0, shapeList0.size());
      assertNotNull(shapeList0);
      
      ShapeList shapeList1 = new ShapeList();
      assertEquals(0, shapeList1.size());
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertNotSame(shapeList1, shapeList0);
      assertNotNull(shapeList1);
      
      boolean boolean0 = shapeList0.equals((Object) shapeList1);
      assertEquals(0, shapeList0.size());
      assertEquals(0, shapeList1.size());
      assertTrue(boolean0);
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertNotSame(shapeList0, shapeList1);
      assertNotSame(shapeList1, shapeList0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertEquals(0, shapeList0.size());
      assertNotNull(shapeList0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = shapeList0.equals(object0);
      assertEquals(0, shapeList0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertEquals(0, shapeList0.size());
      assertNotNull(shapeList0);
      
      int int0 = shapeList0.hashCode();
      assertEquals(0, shapeList0.size());
      assertEquals(4699, int0);
      
      Shape shape0 = shapeList0.getShape(int0);
      assertEquals(0, shapeList0.size());
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      assertEquals(0, shapeList0.size());
      assertNotNull(shapeList0);
      
      ShapeList shapeList1 = (ShapeList)shapeList0.clone();
      assertEquals(0, shapeList1.size());
      assertEquals(0, shapeList0.size());
      assertTrue(shapeList1.equals((Object)shapeList0));
      assertTrue(shapeList0.equals((Object)shapeList1));
      assertNotSame(shapeList1, shapeList0);
      assertNotSame(shapeList0, shapeList1);
      assertNotNull(shapeList1);
  }
}
