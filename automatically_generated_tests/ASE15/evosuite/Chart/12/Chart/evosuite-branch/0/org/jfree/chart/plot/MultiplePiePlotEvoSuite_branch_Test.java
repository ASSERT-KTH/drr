/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:37:28 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.event.PlotChangeEvent;
import org.jfree.chart.needle.LineNeedle;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.plot.ThermometerPlot;
import org.jfree.chart.renderer.category.StackedBarRenderer3D;
import org.jfree.chart.renderer.xy.DefaultXYItemRenderer;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DatasetChangeListener;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultValueDataset;
import org.jfree.data.general.ValueDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultStatisticalCategoryDataset;
import org.jfree.data.time.Week;
import org.junit.runner.RunWith;

 
public class MultiplePiePlotEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot1);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      
      float float0 = 598.02716F;
      multiplePiePlot1.setBackgroundAlpha(float0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(598.02716F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      
      boolean boolean0 = multiplePiePlot1.equals((Object) multiplePiePlot0);
      assertFalse(boolean0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(598.02716F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
  }

  @Test
  public void test01()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot1);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      int int0 = ComponentEvent.COMPONENT_SHOWN;
      assertEquals(102, int0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) int0);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      assertNotNull(thermometerPlot0);
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      
      Color color0 = (Color)thermometerPlot0.getThermometerPaint();
      assertNotNull(color0);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      
      multiplePiePlot0.setAggregatedItemsPaint((Paint) color0);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(0, color0.getGreen());
      assertEquals(0, color0.getBlue());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(2, thermometerPlot0.getUnits());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultKeyedValues2DDataset0);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
  }

  @Test
  public void test02()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot1);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultKeyedValues2DDataset0);
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
  }

  @Test
  public void test03()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      int int0 = ComponentEvent.COMPONENT_SHOWN;
      assertEquals(102, int0);
      
      DefaultValueDataset defaultValueDataset0 = new DefaultValueDataset((Number) int0);
      assertNotNull(defaultValueDataset0);
      
      ThermometerPlot thermometerPlot0 = new ThermometerPlot((ValueDataset) defaultValueDataset0);
      assertNotNull(thermometerPlot0);
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
      
      defaultKeyedValues2DDataset0.removeChangeListener((DatasetChangeListener) thermometerPlot0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0.0, thermometerPlot0.getLowerBound(), 0.01D);
      assertEquals(0.5F, thermometerPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(2, thermometerPlot0.getAxisLocation());
      assertEquals(40, thermometerPlot0.getColumnDiameter());
      assertEquals(true, thermometerPlot0.getUseSubrangePaint());
      assertEquals(1.0F, thermometerPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, thermometerPlot0.getFollowDataInSubranges());
      assertEquals(40, thermometerPlot0.getBulbRadius());
      assertEquals(false, thermometerPlot0.isDomainZoomable());
      assertEquals(true, thermometerPlot0.isOutlineVisible());
      assertEquals(5, thermometerPlot0.getGap());
      assertEquals(100.0, thermometerPlot0.getUpperBound(), 0.01D);
      assertEquals(80, thermometerPlot0.getBulbDiameter());
      assertEquals(false, thermometerPlot0.isSubplot());
      assertEquals(true, thermometerPlot0.isRangeZoomable());
      assertNull(thermometerPlot0.getNoDataMessage());
      assertEquals(3, thermometerPlot0.getValueLocation());
      assertEquals(1.0F, thermometerPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, thermometerPlot0.getBackgroundImageAlignment());
      assertEquals(20, thermometerPlot0.getColumnRadius());
      assertEquals(2, thermometerPlot0.getUnits());
  }

  @Test
  public void test04()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      int int0 = 12;
      multiplePiePlot0.setLimit((double) int0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(12.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(12.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1, legendItemCollection0.getItemCount());
  }

  @Test
  public void test05()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      
      int int0 = 12;
      defaultStatisticalCategoryDataset0.add((Number) int0, (Number) int0, (Comparable) int0, (Comparable) int0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1, legendItemCollection0.getItemCount());
      
      LegendItemCollection legendItemCollection1 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection1);
      assertTrue(legendItemCollection1.equals((Object)legendItemCollection0));
      assertNotSame(legendItemCollection1, legendItemCollection0);
      assertEquals(1, legendItemCollection1.getItemCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(1, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
  }

  @Test
  public void test06()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      
      double double0 = (-217.93618965934445);
      defaultKeyedValues2DDataset0.setValue(double0, (Comparable) double0, (Comparable) double0);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(spiderWebPlot0);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1, legendItemCollection0.getItemCount());
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      
      LegendItemCollection legendItemCollection1 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection1);
      assertTrue(legendItemCollection1.equals((Object)legendItemCollection0));
      assertNotSame(legendItemCollection1, legendItemCollection0);
      assertEquals(1, legendItemCollection1.getItemCount());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test07()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      double double0 = (-215.36998);
      defaultKeyedValues2DDataset0.setValue(double0, (Comparable) double0, (Comparable) double0);
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(spiderWebPlot0);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultKeyedValues2DDataset0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(1, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(1, defaultKeyedValues2DDataset0.getRowCount());
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertNotNull(legendItemCollection0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1, legendItemCollection0.getItemCount());
  }

  @Test
  public void test08()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      
      String string0 = "[";
      DefaultXYItemRenderer defaultXYItemRenderer0 = new DefaultXYItemRenderer();
      assertNotNull(defaultXYItemRenderer0);
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      
      int int0 = 2604;
      Font font0 = defaultXYItemRenderer0.getItemLabelFont(int0, int0);
      assertNotNull(font0);
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertNotNull(jFreeChart0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      
      ChartRenderingInfo chartRenderingInfo0 = new ChartRenderingInfo();
      assertNotNull(chartRenderingInfo0);
      
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0, (double) int0, (double) int0, chartRenderingInfo0);
      assertNotNull(bufferedImage0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, defaultXYItemRenderer0.getBaseItemLabelsVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesVisible());
      assertEquals(true, defaultXYItemRenderer0.getBaseLinesVisible());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesPaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisibleInLegend());
      assertEquals(true, defaultXYItemRenderer0.getBaseCreateEntities());
      assertEquals(true, defaultXYItemRenderer0.getDrawOutlines());
      assertEquals(true, defaultXYItemRenderer0.getAutoPopulateSeriesShape());
      assertEquals(2.0, defaultXYItemRenderer0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(false, defaultXYItemRenderer0.getUseFillPaint());
      assertEquals(true, defaultXYItemRenderer0.getBaseSeriesVisible());
      assertEquals(3, defaultXYItemRenderer0.getDefaultEntityRadius());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(false, defaultXYItemRenderer0.getAutoPopulateSeriesStroke());
      assertEquals(true, defaultXYItemRenderer0.getBaseShapesFilled());
      assertEquals(2, defaultXYItemRenderer0.getPassCount());
      assertEquals(false, defaultXYItemRenderer0.getDrawSeriesLineAsPath());
      assertEquals(false, defaultXYItemRenderer0.getUseOutlinePaint());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(2604, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2604, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2604, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2604, bufferedImage0.getWidth());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, font0.getStyle());
      assertEquals(false, font0.isBold());
      assertEquals(true, font0.isPlain());
      assertEquals(10, font0.getSize());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
  }

  @Test
  public void test09()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      LineNeedle lineNeedle0 = new LineNeedle();
      assertNotNull(lineNeedle0);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      
      Paint paint0 = lineNeedle0.getHighlightPaint();
      assertNull(paint0);
      assertEquals(0.5, lineNeedle0.getRotateY(), 0.01D);
      assertEquals(5, lineNeedle0.getSize());
      assertEquals(0.5, lineNeedle0.getRotateX(), 0.01D);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      
      Comparable<MultiplePiePlot> comparable0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsKey(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  //@Test
  public void test11()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      
      int int0 = 12;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(12, week0.getWeek());
      assertEquals((-61781184000001L), week0.getLastMillisecond());
      assertEquals(648L, week0.getSerialIndex());
      assertEquals((-61781788800000L), week0.getFirstMillisecond());
      assertEquals(12, week0.getYearValue());
      
      multiplePiePlot0.setAggregatedItemsKey((Comparable) week0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(12, week0.getWeek());
      assertEquals((-61781184000001L), week0.getLastMillisecond());
      assertEquals(648L, week0.getSerialIndex());
      assertEquals((-61781788800000L), week0.getFirstMillisecond());
      assertEquals(12, week0.getYearValue());
  }

  @Test
  public void test12()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      TableOrder tableOrder0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setDataExtractOrder(tableOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertNotNull(jFreeChart0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      multiplePiePlot0.setPieChart(jFreeChart0);
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(true, jFreeChart0.isNotify());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
  }

  @Test
  public void test14()  throws Throwable  {
      DefaultKeyedValues2DDataset defaultKeyedValues2DDataset0 = new DefaultKeyedValues2DDataset();
      assertNotNull(defaultKeyedValues2DDataset0);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultKeyedValues2DDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      PlotChangeEvent plotChangeEvent0 = new PlotChangeEvent((Plot) multiplePiePlot0);
      assertNotNull(plotChangeEvent0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      JFreeChart jFreeChart0 = plotChangeEvent0.getChart();
      assertNull(jFreeChart0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultKeyedValues2DDataset0.getColumnCount());
      assertEquals(0, defaultKeyedValues2DDataset0.getRowCount());
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'pieChart' argument.
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      String string0 = "r> #QE*ckJ+*c)";
      double double0 = (-1502.2309076390163);
      StackedBarRenderer3D stackedBarRenderer3D0 = new StackedBarRenderer3D(double0, double0);
      assertNotNull(stackedBarRenderer3D0);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals((-1502.2309076390163), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals((-1502.2309076390163), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      
      int int0 = 9;
      Font font0 = stackedBarRenderer3D0.getSeriesItemLabelFont(int0);
      assertNull(font0);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals((-1502.2309076390163), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals((-1502.2309076390163), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertNotNull(jFreeChart0);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, stackedBarRenderer3D0.getBaseItemLabelsVisible());
      assertEquals(0.0, stackedBarRenderer3D0.getLowerClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesStroke());
      assertEquals(0, stackedBarRenderer3D0.getColumnCount());
      assertEquals(0.2, stackedBarRenderer3D0.getItemMargin(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesPaint());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlineStroke());
      assertEquals(1, stackedBarRenderer3D0.getPassCount());
      assertEquals(0.0, stackedBarRenderer3D0.getUpperClip(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.isDrawBarOutline());
      assertEquals(0.0, stackedBarRenderer3D0.getMinimumBarLength(), 0.01D);
      assertEquals((-1502.2309076390163), stackedBarRenderer3D0.getXOffset(), 0.01D);
      assertEquals(false, stackedBarRenderer3D0.getIgnoreZeroValues());
      assertEquals(1.0, stackedBarRenderer3D0.getMaximumBarWidth(), 0.01D);
      assertEquals(2.0, stackedBarRenderer3D0.getItemLabelAnchorOffset(), 0.01D);
      assertEquals(0.0, stackedBarRenderer3D0.getBase(), 0.01D);
      assertEquals(true, stackedBarRenderer3D0.getAutoPopulateSeriesShape());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesFillPaint());
      assertEquals(true, stackedBarRenderer3D0.getBaseCreateEntities());
      assertEquals(false, stackedBarRenderer3D0.getAutoPopulateSeriesOutlinePaint());
      assertEquals(true, stackedBarRenderer3D0.getIncludeBaseInRange());
      assertEquals(false, stackedBarRenderer3D0.getRenderAsPercentages());
      assertEquals((-1502.2309076390163), stackedBarRenderer3D0.getYOffset(), 0.01D);
      assertEquals(0, stackedBarRenderer3D0.getRowCount());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisible());
      assertEquals(true, stackedBarRenderer3D0.getBaseSeriesVisibleInLegend());
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'pieChart' argument must be a chart based on a PiePlot.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      
      Color color0 = (Color)multiplePiePlot0.getAggregatedItemsPaint();
      assertNotNull(color0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(192, color0.getBlue());
      assertEquals(-4144960, color0.getRGB());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals(255, color0.getAlpha());
      assertEquals(192, color0.getGreen());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
  }

  @Test
  public void test17()  throws Throwable  {
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultBoxAndWhiskerCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertNotNull(tableOrder0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
  }

  @Test
  public void test18()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      
      double double0 = multiplePiePlot0.getLimit();
      assertEquals(0.0, double0, 0.01D);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
  }

  @Test
  public void test19()  throws Throwable  {
      DefaultStatisticalCategoryDataset defaultStatisticalCategoryDataset0 = new DefaultStatisticalCategoryDataset();
      assertNotNull(defaultStatisticalCategoryDataset0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultStatisticalCategoryDataset0);
      assertNotNull(multiplePiePlot0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      
      Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
      assertEquals("Other", comparable0);
      assertNotNull(comparable0);
      assertEquals(0, defaultStatisticalCategoryDataset0.getColumnCount());
      assertEquals(0, defaultStatisticalCategoryDataset0.getRowCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
  }

  @Test
  public void test20()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNotNull(multiplePiePlot0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      
      String string0 = multiplePiePlot0.getPlotType();
      assertEquals("Multiple Pie Plot", string0);
      assertNotNull(string0);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
  }
}
