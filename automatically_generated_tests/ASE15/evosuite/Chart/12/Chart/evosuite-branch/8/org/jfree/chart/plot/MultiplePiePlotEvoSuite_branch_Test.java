/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:02:58 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Color;
import java.awt.Font;
import java.awt.Paint;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.text.DateFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.jfree.chart.JFreeChart;
import org.jfree.chart.LegendItemCollection;
import org.jfree.chart.plot.MultiplePiePlot;
import org.jfree.chart.plot.Plot;
import org.jfree.chart.plot.SpiderWebPlot;
import org.jfree.chart.renderer.AbstractRenderer;
import org.jfree.chart.title.TextTitle;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.TableOrder;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.DefaultIntervalCategoryDataset;
import org.junit.runner.RunWith;
import sun.swing.PrintColorUIResource;

 
public class MultiplePiePlotEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      
      int int0 = 0;
      multiplePiePlot0.setBackgroundImageAlignment(int0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      
      boolean boolean0 = multiplePiePlot0.equals((Object) multiplePiePlot1);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertFalse(boolean0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      
      boolean boolean0 = multiplePiePlot0.equals((Object) multiplePiePlot1);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertTrue(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      
      String string0 = "org.jfree.chart.renderer.xy.StandardXYItemRenderer";
      multiplePiePlot0.setAggregatedItemsKey((Comparable) string0);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      
      boolean boolean0 = multiplePiePlot1.equals((Object) multiplePiePlot0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertFalse(boolean0);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotNull(multiplePiePlot0);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertNotNull(spiderWebPlot0);
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertNotNull(tableOrder0);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot((CategoryDataset) defaultCategoryDataset0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultCategoryDataset0);
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      CategoryDataset categoryDataset0 = multiplePiePlot0.getDataset();
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(categoryDataset0);
      
      boolean boolean0 = multiplePiePlot0.equals((Object) categoryDataset0);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      
      MultiplePiePlot multiplePiePlot1 = new MultiplePiePlot();
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(multiplePiePlot1);
      
      String string0 = multiplePiePlot1.getNoDataMessage();
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNull(string0);
      
      boolean boolean0 = false;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(string0, boolean0);
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(jCheckBoxMenuItem0);
      
      PrintColorUIResource printColorUIResource0 = (PrintColorUIResource)jCheckBoxMenuItem0.getForeground();
      assertTrue(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getGreen());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotNull(printColorUIResource0);
      
      multiplePiePlot0.setAggregatedItemsPaint((Paint) printColorUIResource0);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(51, printColorUIResource0.getBlue());
      assertEquals(255, printColorUIResource0.getAlpha());
      assertEquals(-13421773, printColorUIResource0.getRGB());
      assertEquals(1, printColorUIResource0.getTransparency());
      assertEquals(51, printColorUIResource0.getRed());
      assertEquals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", printColorUIResource0.toString());
      assertEquals(51, printColorUIResource0.getGreen());
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
      
      boolean boolean1 = multiplePiePlot0.equals((Object) multiplePiePlot1);
      assertFalse(multiplePiePlot1.equals((Object)multiplePiePlot0));
      assertFalse(multiplePiePlot0.equals((Object)multiplePiePlot1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0, multiplePiePlot1.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot1.isSubplot());
      assertEquals(1.0F, multiplePiePlot1.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot1.getNoDataMessage());
      assertEquals(true, multiplePiePlot1.isOutlineVisible());
      assertEquals(15, multiplePiePlot1.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot1.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot1.getPlotType());
      assertEquals(0.5F, multiplePiePlot1.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertFalse(boolean1);
      assertNotSame(multiplePiePlot1, multiplePiePlot0);
      assertNotSame(multiplePiePlot0, multiplePiePlot1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotNull(multiplePiePlot0);
      
      double double0 = 3248.895382163712;
      String string0 = "Yan Liu";
      TextTitle textTitle0 = new TextTitle(string0);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertNull(textTitle0.getURLText());
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertEquals("Yan Liu", textTitle0.getText());
      assertNotNull(textTitle0);
      
      RectangleEdge rectangleEdge0 = textTitle0.getPosition();
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertNull(textTitle0.getURLText());
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertEquals("Yan Liu", textTitle0.getText());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      double double1 = multiplePiePlot0.getRectY(double0, double0, double0, rectangleEdge0);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertNull(textTitle0.getURLText());
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertEquals("Yan Liu", textTitle0.getText());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(6497.790764327424, double1, 0.01D);
      
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      multiplePiePlot0.setLimit(double1);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      assertNull(textTitle0.getID());
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertNull(textTitle0.getURLText());
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertEquals("Yan Liu", textTitle0.getText());
      assertEquals(6497.790764327424, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultCategoryDataset0);
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertEquals(6497.790764327424, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertEquals(1, legendItemCollection0.getItemCount());
      assertEquals(6497.790764327424, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertEquals(0, legendItemCollection0.getItemCount());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(legendItemCollection0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(multiplePiePlot0);
      
      double double0 = 3248.5818818;
      String string0 = "RL2'\"_GJyw62";
      DefaultCategoryDataset defaultCategoryDataset0 = new DefaultCategoryDataset();
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      assertNotNull(defaultCategoryDataset0);
      
      multiplePiePlot0.setDataset((CategoryDataset) defaultCategoryDataset0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0, defaultCategoryDataset0.getColumnCount());
      assertEquals(0, defaultCategoryDataset0.getRowCount());
      
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertNotNull(spiderWebPlot0);
      
      TableOrder tableOrder0 = spiderWebPlot0.getDataExtractOrder();
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertNotNull(tableOrder0);
      
      defaultCategoryDataset0.addValue(double0, (Comparable) double0, (Comparable) string0);
      assertEquals(1, defaultCategoryDataset0.getColumnCount());
      assertEquals(1, defaultCategoryDataset0.getRowCount());
      
      multiplePiePlot0.setDataExtractOrder(tableOrder0);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      LegendItemCollection legendItemCollection0 = multiplePiePlot0.getLegendItems();
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1, legendItemCollection0.getItemCount());
      assertNotNull(legendItemCollection0);
      
      LegendItemCollection legendItemCollection1 = multiplePiePlot0.getLegendItems();
      assertTrue(legendItemCollection1.equals((Object)legendItemCollection0));
      assertEquals(1, legendItemCollection1.getItemCount());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotSame(legendItemCollection1, legendItemCollection0);
      assertNotNull(legendItemCollection1);
  }

  @Test(timeout = 4000)
  public void test09() {}
//   @Test(timeout = 4000)
//   public void test09()  throws Throwable  {
//       Number[][] numberArray0 = new Number[9][4];
//       Number[] numberArray1 = new Number[5];
//       int int0 = KeyEvent.VK_1;
//       assertEquals(49, int0);
//       
//       numberArray0[0] = numberArray1;
//       assertNotNull(numberArray0[0]);
//       
//       numberArray0[1] = numberArray1;
//       assertNotNull(numberArray0[1]);
//       
//       numberArray0[2] = numberArray0[1];
//       assertNotNull(numberArray0[2]);
//       
//       Number[] numberArray2 = new Number[6];
//       assertFalse(numberArray2.equals((Object)numberArray1));
//       assertNotSame(numberArray2, numberArray1);
//       
//       numberArray2[0] = (Number) int0;
//       assertEquals(49.0F, numberArray2[0].floatValue(), 0.01F);
//       assertEquals(49, numberArray2[0].shortValue());
//       assertEquals(49, numberArray2[0].byteValue());
//       assertEquals(49.0, numberArray2[0].doubleValue(), 0.01D);
//       assertEquals(49L, numberArray2[0].longValue());
//       assertEquals(49, numberArray2[0].intValue());
//       assertNotNull(numberArray2[0]);
//       
//       numberArray0[3] = numberArray2;
//       assertNotNull(numberArray0[3]);
//       
//       DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
//       assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertNotNull(defaultIntervalCategoryDataset0);
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertNotNull(multiplePiePlot0);
//       
//       String string0 = "W";
//       Font font0 = null;
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertNotNull(jFreeChart0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test10() {}
//   @Test(timeout = 4000)
//   public void test10()  throws Throwable  {
//       Number[][] numberArray0 = new Number[9][4];
//       int int0 = KeyEvent.VK_1;
//       assertEquals(49, int0);
//       
//       Number[] numberArray1 = new Number[10];
//       numberArray1[3] = (Number) int0;
//       assertEquals(49, numberArray1[3].shortValue());
//       assertEquals(49, numberArray1[3].byteValue());
//       assertEquals(49.0F, numberArray1[3].floatValue(), 0.01F);
//       assertEquals(49.0, numberArray1[3].doubleValue(), 0.01D);
//       assertEquals(49, numberArray1[3].intValue());
//       assertEquals(49L, numberArray1[3].longValue());
//       assertNotNull(numberArray1[3]);
//       
//       numberArray0[1] = numberArray1;
//       assertNotNull(numberArray0[1]);
//       
//       DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
//       assertNotNull(defaultIntervalCategoryDataset0);
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNotNull(multiplePiePlot0);
//       
//       String string0 = "";
//       Font font0 = null;
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(4, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(4, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(9, defaultIntervalCategoryDataset0.getRowCount());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertNotNull(jFreeChart0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  //@Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      String string0 = "Yan Liu";
      TextTitle textTitle0 = new TextTitle(string0);
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals("Yan Liu", textTitle0.getText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertNull(textTitle0.getID());
      assertNotNull(textTitle0);
      
      Font font0 = textTitle0.getFont();
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals("Yan Liu", textTitle0.getText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertNull(textTitle0.getID());
      assertEquals(true, font0.isBold());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isPlain());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=bold,size=12]", font0.toString());
      assertEquals(12, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertNotNull(font0);
      
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals("Yan Liu", textTitle0.getText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertNull(textTitle0.getID());
      assertEquals(true, font0.isBold());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isPlain());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=bold,size=12]", font0.toString());
      assertEquals(12, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertNotNull(jFreeChart0);
      
      int int0 = 4430;
      BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(textTitle0.getToolTipText());
      assertEquals(0.0, textTitle0.getHeight(), 0.01D);
      assertEquals(1.0, textTitle0.getContentXOffset(), 0.01D);
      assertEquals(false, textTitle0.getExpandToFitSpace());
      assertNull(textTitle0.getURLText());
      assertEquals("Yan Liu", textTitle0.getText());
      assertEquals(0.0, textTitle0.getWidth(), 0.01D);
      assertEquals(true, textTitle0.getNotify());
      assertEquals(1.0, textTitle0.getContentYOffset(), 0.01D);
      assertNull(textTitle0.getID());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(false, bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(4430, bufferedImage0.getTileHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(true, bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(4430, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(4430, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(4430, bufferedImage0.getWidth());
      assertEquals(true, font0.isBold());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(false, font0.isPlain());
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(12.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.isItalic());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=bold,size=12]", font0.toString());
      assertEquals(12, font0.getSize());
      assertEquals(1, font0.getStyle());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.isTransformed());
      assertNotNull(bufferedImage0);
  }

  @Test(timeout = 4000)
  public void test12() {}
//   @Test(timeout = 4000)
//   public void test12()  throws Throwable  {
//       Number[][] numberArray0 = new Number[8][4];
//       Number[] numberArray1 = new Number[5];
//       int int0 = KeyEvent.VK_1;
//       assertEquals(49, int0);
//       
//       numberArray0[0] = numberArray1;
//       assertNotNull(numberArray0[0]);
//       
//       numberArray1[2] = (Number) int0;
//       assertEquals(49.0F, numberArray1[2].floatValue(), 0.01F);
//       assertEquals(49, numberArray1[2].intValue());
//       assertEquals(49, numberArray1[2].shortValue());
//       assertEquals(49.0, numberArray1[2].doubleValue(), 0.01D);
//       assertEquals(49, numberArray1[2].byteValue());
//       assertEquals(49L, numberArray1[2].longValue());
//       assertNotNull(numberArray1[2]);
//       
//       DefaultIntervalCategoryDataset defaultIntervalCategoryDataset0 = new DefaultIntervalCategoryDataset(numberArray0, numberArray0);
//       assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
//       assertNotNull(defaultIntervalCategoryDataset0);
//       
//       MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot((CategoryDataset) defaultIntervalCategoryDataset0);
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
//       assertNotNull(multiplePiePlot0);
//       
//       String string0 = "";
//       Font font0 = null;
//       boolean boolean0 = false;
//       JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
//       assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(0, jFreeChart0.getSubtitleCount());
//       assertEquals(true, jFreeChart0.getAntiAlias());
//       assertEquals(false, jFreeChart0.isBorderVisible());
//       assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
//       assertEquals(true, jFreeChart0.isNotify());
//       assertEquals(true, multiplePiePlot0.isOutlineVisible());
//       assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
//       assertEquals(false, multiplePiePlot0.isSubplot());
//       assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
//       assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
//       assertNull(multiplePiePlot0.getNoDataMessage());
//       assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
//       assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
//       assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
//       assertEquals(8, defaultIntervalCategoryDataset0.getSeriesCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getColumnCount());
//       assertEquals(5, defaultIntervalCategoryDataset0.getCategoryCount());
//       assertEquals(8, defaultIntervalCategoryDataset0.getRowCount());
//       assertNotNull(jFreeChart0);
//       
//       // Undeclared exception!
//       try {
//         BufferedImage bufferedImage0 = jFreeChart0.createBufferedImage(int0, int0);
//         fail("Expecting exception: NoClassDefFoundError");
//       
//       } catch(NoClassDefFoundError e) {
//          //
//          // Could not initialize class sun.dc.pr.Rasterizer
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SpiderWebPlot spiderWebPlot0 = new SpiderWebPlot();
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertNotNull(spiderWebPlot0);
      
      CategoryDataset categoryDataset0 = spiderWebPlot0.getDataset();
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertNull(categoryDataset0);
      
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot(categoryDataset0);
      assertEquals(1.0F, spiderWebPlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.1, spiderWebPlot0.getAxisLabelGap(), 0.01D);
      assertEquals(false, spiderWebPlot0.isSubplot());
      assertEquals(true, spiderWebPlot0.isWebFilled());
      assertEquals(0.5F, spiderWebPlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(90.0, spiderWebPlot0.getStartAngle(), 0.01D);
      assertEquals((-1.0), spiderWebPlot0.getMaxValue(), 0.01D);
      assertEquals(true, spiderWebPlot0.isOutlineVisible());
      assertEquals("Spider Web Plot", spiderWebPlot0.getPlotType());
      assertEquals(15, spiderWebPlot0.getBackgroundImageAlignment());
      assertEquals(0.25, spiderWebPlot0.getInteriorGap(), 0.01D);
      assertEquals(0.01, spiderWebPlot0.getHeadPercent(), 0.01D);
      assertEquals(1.0F, spiderWebPlot0.getForegroundAlpha(), 0.01F);
      assertNull(spiderWebPlot0.getNoDataMessage());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      
      Paint paint0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsPaint(paint0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'paint' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(multiplePiePlot0);
      
      DateFormatter dateFormatter0 = new DateFormatter();
      assertNotNull(dateFormatter0);
      
      Comparable comparable0 = dateFormatter0.getMaximum();
      assertNull(comparable0);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setAggregatedItemsKey(comparable0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'key' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setDataExtractOrder(tableOrder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'order' argument
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      String string0 = ">";
      Font font0 = AbstractRenderer.DEFAULT_VALUE_LABEL_FONT;
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertNotNull(font0);
      
      boolean boolean0 = true;
      JFreeChart jFreeChart0 = new JFreeChart(string0, font0, (Plot) multiplePiePlot0, boolean0);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(1, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, font0.isBold());
      assertEquals(10, font0.getSize());
      assertEquals(0, font0.getStyle());
      assertEquals("java.awt.Font[family=SansSerif,name=SansSerif,style=plain,size=10]", font0.toString());
      assertEquals("SansSerif", font0.getName());
      assertEquals(false, font0.hasLayoutAttributes());
      assertEquals(10.0F, font0.getSize2D(), 0.01F);
      assertEquals(false, font0.hasUniformLineMetrics());
      assertEquals(true, font0.isPlain());
      assertEquals(false, font0.isItalic());
      assertEquals(false, font0.isTransformed());
      assertNotNull(jFreeChart0);
      
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The 'pieChart' argument must be a chart based on a PiePlot.
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = null;
      // Undeclared exception!
      try {
        multiplePiePlot0.setPieChart(jFreeChart0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'pieChart' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(multiplePiePlot0);
      
      JFreeChart jFreeChart0 = multiplePiePlot0.getPieChart();
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(jFreeChart0);
      
      multiplePiePlot0.setPieChart(jFreeChart0);
      assertEquals(true, jFreeChart0.isNotify());
      assertEquals(true, jFreeChart0.getAntiAlias());
      assertEquals(0, jFreeChart0.getSubtitleCount());
      assertEquals(0.5F, jFreeChart0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, jFreeChart0.getBackgroundImageAlignment());
      assertEquals(false, jFreeChart0.isBorderVisible());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      Color color0 = (Color)multiplePiePlot0.getAggregatedItemsPaint();
      assertEquals(1, color0.getTransparency());
      assertEquals(192, color0.getBlue());
      assertEquals("java.awt.Color[r=192,g=192,b=192]", color0.toString());
      assertEquals(192, color0.getRed());
      assertEquals(192, color0.getGreen());
      assertEquals(-4144960, color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(multiplePiePlot0);
      
      TableOrder tableOrder0 = multiplePiePlot0.getDataExtractOrder();
      assertEquals("TableOrder.BY_COLUMN", tableOrder0.toString());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertNotNull(tableOrder0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertNotNull(multiplePiePlot0);
      
      double double0 = multiplePiePlot0.getLimit();
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(0.0, double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      
      Comparable comparable0 = multiplePiePlot0.getAggregatedItemsKey();
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Other", comparable0);
      assertNotNull(comparable0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiplePiePlot multiplePiePlot0 = new MultiplePiePlot();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertNotNull(multiplePiePlot0);
      
      String string0 = multiplePiePlot0.getPlotType();
      assertEquals(1.0F, multiplePiePlot0.getForegroundAlpha(), 0.01F);
      assertEquals(0.0, multiplePiePlot0.getLimit(), 0.01D);
      assertEquals(false, multiplePiePlot0.isSubplot());
      assertEquals(15, multiplePiePlot0.getBackgroundImageAlignment());
      assertEquals(0.5F, multiplePiePlot0.getBackgroundImageAlpha(), 0.01F);
      assertEquals(1.0F, multiplePiePlot0.getBackgroundAlpha(), 0.01F);
      assertEquals("Multiple Pie Plot", multiplePiePlot0.getPlotType());
      assertEquals(true, multiplePiePlot0.isOutlineVisible());
      assertNull(multiplePiePlot0.getNoDataMessage());
      assertEquals("Multiple Pie Plot", string0);
      assertNotNull(string0);
  }
}
