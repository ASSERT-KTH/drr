/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:07:55 GMT 2014
 */

package org.jfree.chart.plot;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Paint;
import java.awt.Stroke;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.jfree.chart.axis.Axis;
import org.jfree.chart.event.MarkerChangeEvent;
import org.jfree.chart.plot.Marker;
import org.jfree.chart.plot.ValueMarker;
import org.jfree.chart.renderer.AbstractRenderer;
import org.junit.runner.RunWith;

 
public class ValueMarkerEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      double double0 = 2444.8444292218605;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(2444.8444292218605, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      
      ValueMarker valueMarker1 = new ValueMarker(double0);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotNull(valueMarker1);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertNull(valueMarker1.getLabel());
      assertEquals(2444.8444292218605, valueMarker1.getValue(), 0.01D);
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      
      boolean boolean0 = valueMarker1.equals((Object) valueMarker0);
      assertTrue(boolean0);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotSame(valueMarker0, valueMarker1);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertNull(valueMarker1.getLabel());
      assertEquals(2444.8444292218605, valueMarker1.getValue(), 0.01D);
      assertEquals(2444.8444292218605, valueMarker0.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertTrue(valueMarker1.equals((Object)valueMarker0));
      assertTrue(valueMarker0.equals((Object)valueMarker1));
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      double double0 = 9.727883202517049;
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(9.727883202517049, valueMarker0.getValue(), 0.01D);
      
      MarkerChangeEvent markerChangeEvent0 = new MarkerChangeEvent((Marker) valueMarker0);
      assertNotNull(markerChangeEvent0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(9.727883202517049, valueMarker0.getValue(), 0.01D);
      
      boolean boolean0 = valueMarker0.equals((Object) markerChangeEvent0);
      assertFalse(boolean0);
      assertNull(valueMarker0.getLabel());
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals(9.727883202517049, valueMarker0.getValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      double double0 = 9.727883202517049;
      double double1 = (-16.617539534880418);
      ValueMarker valueMarker0 = new ValueMarker(double1);
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals((-16.617539534880418), valueMarker0.getValue(), 0.01D);
      assertFalse(double1 == double0);
      
      valueMarker0.setValue(double0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(9.727883202517049, valueMarker0.getValue(), 0.01D);
      assertFalse(double1 == double0);
      assertFalse(double0 == double1);
      
      ValueMarker valueMarker1 = new ValueMarker(double1);
      assertNotSame(valueMarker1, valueMarker0);
      assertNotNull(valueMarker1);
      assertNull(valueMarker1.getLabel());
      assertEquals((-16.617539534880418), valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertFalse(double1 == double0);
      assertFalse(valueMarker1.equals((Object)valueMarker0));
      
      boolean boolean0 = valueMarker1.equals((Object) valueMarker0);
      assertFalse(boolean0);
      assertNotSame(valueMarker0, valueMarker1);
      assertNotSame(valueMarker1, valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertNull(valueMarker0.getLabel());
      assertEquals(9.727883202517049, valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker1.getLabel());
      assertEquals((-16.617539534880418), valueMarker1.getValue(), 0.01D);
      assertEquals(0.8F, valueMarker1.getAlpha(), 0.01F);
      assertFalse(double1 == double0);
      assertFalse(valueMarker0.equals((Object)valueMarker1));
      assertFalse(valueMarker1.equals((Object)valueMarker0));
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      double double0 = (-1935.2809391586636);
      ValueMarker valueMarker0 = new ValueMarker(double0);
      assertNotNull(valueMarker0);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1935.2809391586636), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      
      double double1 = valueMarker0.getValue();
      assertEquals((-1935.2809391586636), double1, 0.01D);
      assertEquals(0.8F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1935.2809391586636), valueMarker0.getValue(), 0.01D);
      assertNull(valueMarker0.getLabel());
      assertTrue(double0 == double1);
      assertTrue(double1 == double0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      double double0 = (-1.8603154497836334);
      Color color0 = (Color)Axis.DEFAULT_TICK_LABEL_PAINT;
      assertNotNull(color0);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      
      BasicStroke basicStroke0 = (BasicStroke)AbstractRenderer.DEFAULT_OUTLINE_STROKE;
      assertNotNull(basicStroke0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      
      ValueMarker valueMarker0 = new ValueMarker(double0, (Paint) color0, (Stroke) basicStroke0);
      assertNotNull(valueMarker0);
      assertEquals(1.0F, basicStroke0.getLineWidth(), 0.01F);
      assertEquals(0, basicStroke0.getLineJoin());
      assertEquals(2, basicStroke0.getEndCap());
      assertEquals(0.0F, basicStroke0.getDashPhase(), 0.01F);
      assertEquals(10.0F, basicStroke0.getMiterLimit(), 0.01F);
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertEquals(0, color0.getRed());
      assertEquals(-16777216, color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getGreen());
      assertEquals("java.awt.Color[r=0,g=0,b=0]", color0.toString());
      assertNull(valueMarker0.getLabel());
      assertEquals(1.0F, valueMarker0.getAlpha(), 0.01F);
      assertEquals((-1.8603154497836334), valueMarker0.getValue(), 0.01D);
  }
}
