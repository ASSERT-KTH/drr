/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:32:42 GMT 2014
 */

package org.jfree.data.xy;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.util.List;
import javax.print.attribute.standard.Fidelity;
import javax.swing.JComponent;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.data.general.SeriesException;
import org.jfree.data.time.SerialDate;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

 
public class XYSeriesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      XYDataItem xYDataItem0 = new XYDataItem((double) int0, (double) int0);
      assertNotNull(xYDataItem0);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      
      xYSeries0.add(xYDataItem0, boolean0);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      double double0 = 35.819088;
      xYSeries0.add(double0, double0);
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2120410791, int1);
  }

  @Test
  public void test01()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      
      XYDataItem xYDataItem0 = new XYDataItem((double) int0, (double) int0);
      assertNotNull(xYDataItem0);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      
      xYSeries0.add(xYDataItem0, boolean0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      
      int int1 = xYSeries0.hashCode();
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(320365254, int1);
  }

  @Test
  public void test02()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals((-2083756032), int1);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-2146069897), int1);
  }

  @Test
  public void test04()  throws Throwable  {
      String string0 = ScrollPaneConstants.UPPER_LEADING_CORNER;
      assertNotNull(string0);
      assertEquals("UPPER_LEADING_CORNER", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test
  public void test05()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      
      boolean boolean1 = false;
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0, boolean1, boolean1);
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries1.getAutoSort());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean2 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries1.getAutoSort());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertTrue(boolean1 == boolean2);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean2);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      assertEquals(2, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      
      int int1 = SwingConstants.PREVIOUS;
      assertFalse(int1 == int0);
      assertEquals(13, int1);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int1);
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertFalse(int1 == int0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int0 == int1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = JComponent.WHEN_IN_FOCUSED_WINDOW;
      assertEquals(2, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) int0, (Number) int0);
      assertNotNull(xYDataItem0);
      assertEquals(2.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(2.0, xYDataItem0.getXValue(), 0.01D);
      
      boolean boolean1 = xYSeries0.equals((Object) xYDataItem0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(2.0, xYDataItem0.getXValue(), 0.01D);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      String string0 = ScrollPaneConstants.UPPER_LEADING_CORNER;
      assertNotNull(string0);
      assertEquals("UPPER_LEADING_CORNER", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      
      int int1 = (-1);
      assertFalse(int1 == int0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int1);
      assertNotNull(xYSeries1);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(false, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(false, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test
  public void test09()  throws Throwable  {
      Fidelity fidelity0 = Fidelity.FIDELITY_TRUE;
      assertNotNull(fidelity0);
      
      String string0 = fidelity0.getName();
      assertNotNull(string0);
      assertEquals("ipp-attribute-fidelity", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      Number number0 = null;
      xYSeries0.add((double) float0, number0, boolean0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test
  public void test10()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      
      int int1 = 6;
      assertFalse(int1 == int0);
      
      double double0 = 182.03333781271044;
      XYDataItem xYDataItem0 = new XYDataItem(double0, (double) int1);
      assertNotNull(xYDataItem0);
      assertEquals(182.03333781271044, xYDataItem0.getXValue(), 0.01D);
      assertEquals(6.0, xYDataItem0.getYValue(), 0.01D);
      assertFalse(int1 == int0);
      
      xYSeries0.add(xYDataItem0, boolean0);
      assertEquals(182.03333781271044, xYDataItem0.getXValue(), 0.01D);
      assertEquals(6.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      double double1 = 35.819088;
      xYSeries0.add(double1, double1);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      
      double double2 = Double.NaN;
      xYSeries0.add(double2, double1, boolean0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(4, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(double2 == double0);
      assertFalse(double2 == double1);
      assertFalse(int0 == int1);
      assertFalse(double1 == double0);
      assertFalse(double1 == double2);
      
      xYSeries0.add((Number) int1, (Number) int0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(5, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      xYSeries0.setMaximumItemCount(int1);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(5, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(6, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      XYDataItem xYDataItem1 = xYSeries0.addOrUpdate((double) int1, double0);
      assertNull(xYDataItem1);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(6, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(6, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(int0 == int1);
      assertFalse(double0 == double1);
      assertFalse(double0 == double2);
      assertFalse(int1 == int0);
      
      XYDataItem xYDataItem2 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem2);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(6, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(6, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertFalse(int0 == int1);
  }

  @Test
  public void test11()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean1);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      XYDataItem xYDataItem1 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNotNull(xYDataItem1);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0.0, xYDataItem1.getXValue(), 0.01D);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01D);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test
  public void test12()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = KeyEvent.VK_DEAD_IOTA;
      assertEquals(141, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      
      Number number0 = null;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, number0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.update((Number) int0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 0
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      
      xYSeries0.add((double) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.update((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
  }

  @Test
  public void test16()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (double) int0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.clear();
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.clear();
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
  }

  @Test
  public void test18()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      XYDataItem xYDataItem0 = new XYDataItem((double) int0, (double) int0);
      assertNotNull(xYDataItem0);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      
      xYSeries0.add(xYDataItem0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      
      xYSeries0.delete(int0, int0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      
      boolean boolean0 = true;
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
  }

  @Test
  public void test20()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.add((Number) int0, (Number) int0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      double double0 = 0.9903117456754373;
      xYSeries0.add(double0, (Number) double0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      
      boolean boolean0 = true;
      xYSeries0.add((double) int0, double0, boolean0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.add((double) int0, (double) int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(3, xYSeries0.getItemCount());
  }

  @Test
  public void test22()  throws Throwable  {
      Fidelity fidelity0 = Fidelity.FIDELITY_TRUE;
      assertNotNull(fidelity0);
      
      String string0 = fidelity0.getName();
      assertNotNull(string0);
      assertEquals("ipp-attribute-fidelity", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      xYSeries0.add((double) float0, (Number) float0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((Number) float0, (Number) float0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
  }

  @Test
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = null;
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (Number) int0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
  }

  @Test
  public void test25()  throws Throwable  {
      Fidelity fidelity0 = Fidelity.FIDELITY_TRUE;
      assertNotNull(fidelity0);
      
      String string0 = fidelity0.getName();
      assertNotNull(string0);
      assertEquals("ipp-attribute-fidelity", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      float float0 = Component.LEFT_ALIGNMENT;
      assertEquals(0.0F, float0, 0.01F);
      
      xYSeries0.add((double) float0, (Number) float0, boolean0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
  }

  @Test
  public void test26()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      
      boolean boolean0 = xYSeries0.getAutoSort();
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(boolean0);
  }

  @Test
  public void test27()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      boolean boolean1 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test28()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      double double0 = (-465.0);
      xYSeries0.add(double0, (Number) double0, boolean0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      
      int int0 = 0;
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      int int1 = xYSeries0.getMaximumItemCount();
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = SerialDate.SUNDAY;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      List list0 = xYSeries0.getItems();
      assertNotNull(list0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test
  public void test31()  throws Throwable  {
      String string0 = ScrollPaneConstants.UPPER_LEADING_CORNER;
      assertNotNull(string0);
      assertEquals("UPPER_LEADING_CORNER", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test
  public void test32()  throws Throwable  {
      int int0 = SwingConstants.VERTICAL;
      assertEquals(1, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.remove((Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test33()  throws Throwable  {
      String string0 = ScrollPaneConstants.UPPER_LEADING_CORNER;
      assertNotNull(string0);
      assertEquals("UPPER_LEADING_CORNER", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      // Undeclared exception!
      try {
        xYSeries0.updateByIndex(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
      }
  }
}
