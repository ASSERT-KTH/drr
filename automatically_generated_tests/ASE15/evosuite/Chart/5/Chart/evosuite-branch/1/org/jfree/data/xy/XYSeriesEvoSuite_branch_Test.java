/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 15:49:50 GMT 2014
 */

package org.jfree.data.xy;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.ImageConsumer;
import java.text.NumberFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import javax.swing.Action;
import javax.swing.JLayeredPane;
import javax.swing.SwingConstants;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.gantt.TaskSeries;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Second;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

 
public class XYSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      
      double double0 = 209.472187077518;
      int int0 = NumberFormat.INTEGER_FIELD;
      assertEquals(0, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) double0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      
      xYSeries0.add(double0, double0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      
      XYDataItem xYDataItem1 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem1);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      
      int int1 = xYSeries0.hashCode();
      assertEquals((-80227295), int1);
      assertFalse(int1 == int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      
      double double0 = 209.472187077518;
      int int0 = NumberFormat.INTEGER_FIELD;
      assertEquals(0, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) double0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.add(double0, double0);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(1577301148, int1);
      assertFalse(int1 == int0);
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertNotSame(xYSeries1, xYSeries0);
      
      double double0 = (-2548.0);
      xYSeries1.add(double0, double0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries1.equals((Object) xYSeries0);
      assertFalse(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries1.equals((Object) xYSeries0);
      assertTrue(boolean1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean1 == boolean0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean0 == boolean1);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries1.equals((Object) xYSeries0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2, month0.getMonth());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2, month0.getMonth());
      
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2, month0.getMonth());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = (-2282.5492330705397);
      XYSeries xYSeries0 = new XYSeries((Comparable) double0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      
      boolean boolean0 = xYSeries0.equals((Object) integer0);
      assertFalse(boolean0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) month0, boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertNotSame(xYSeries1, xYSeries0);
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertFalse(boolean1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      Minute minute0 = second0.getMinute();
      assertNotNull(minute0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)minute0.getEnd();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      assertNotNull(millisecond0);
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      
      int int0 = ImageConsumer.IMAGEABORTED;
      assertEquals(4, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int1, int1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertFalse(int1 == int0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) month0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      
      int int0 = SwingConstants.SOUTH_EAST;
      assertEquals(4, int0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotNull(xYSeries1);
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Action.SHORT_DESCRIPTION;
      assertEquals("ShortDescription", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = 1;
      Number number0 = null;
      xYSeries0.add((double) int0, number0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = Action.SHORT_DESCRIPTION;
      assertEquals("ShortDescription", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = 1;
      xYSeries0.setMaximumItemCount(int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getMaximumItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      Minute minute0 = second0.getMinute();
      assertNotNull(minute0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      MockDate mockDate0 = (MockDate)minute0.getEnd();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      assertNotNull(millisecond0);
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      int int0 = ImageConsumer.IMAGEABORTED;
      assertEquals(4, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = 91;
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNotNull(xYDataItem0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(91.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(91.0, xYDataItem0.getXValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "";
      TaskSeries taskSeries0 = new TaskSeries(string0);
      assertNotNull(taskSeries0);
      assertEquals(true, taskSeries0.getNotify());
      assertEquals(true, taskSeries0.isEmpty());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      
      Comparable comparable0 = taskSeries0.getKey();
      assertEquals("", comparable0);
      assertNotNull(comparable0);
      assertEquals(true, taskSeries0.getNotify());
      assertEquals(true, taskSeries0.isEmpty());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      assertSame(string0, comparable0);
      
      XYSeries xYSeries0 = new XYSeries(comparable0);
      assertNotNull(xYSeries0);
      assertEquals(true, taskSeries0.getNotify());
      assertEquals(true, taskSeries0.isEmpty());
      assertNull(taskSeries0.getDescription());
      assertEquals(0, taskSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertSame(string0, comparable0);
      
      Number number0 = null;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, number0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = SwingConstants.NEXT;
      assertEquals(12, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.update((Number) int0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 12
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1282;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      
      boolean boolean0 = false;
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.update((Number) int0, (Number) int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = SwingConstants.WEST;
      assertEquals(7, int0);
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.clear();
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1282;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      
      xYSeries0.clear();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = DefaultEditorKit.selectLineAction;
      assertEquals("select-line", string0);
      assertNotNull(string0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) string0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = xYSeries0.hashCode();
      assertEquals((-2146069897), int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.delete(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      
      Minute minute0 = second0.getMinute();
      assertNotNull(minute0);
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      
      MockDate mockDate0 = (MockDate)minute0.getEnd();
      assertNotNull(mockDate0);
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      assertNotNull(millisecond0);
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      
      int int0 = (-6);
      int int1 = (-3430);
      xYSeries0.delete(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = Action.SHORT_DESCRIPTION;
      assertEquals("ShortDescription", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = 1;
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getMaximumItemCount());
      
      int int1 = xYSeries0.hashCode();
      assertEquals(85703787, int1);
      assertFalse(int1 == int0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (Number) int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = Action.SHORT_DESCRIPTION;
      assertEquals("ShortDescription", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = 1;
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      // Undeclared exception!
      try {
        xYSeries0.add((double) int0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = SwingConstants.WEST;
      assertEquals(7, int0);
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      
      int int1 = Calendar.JULY;
      assertEquals(6, int1);
      assertFalse(int1 == int0);
      
      xYSeries0.add((double) int1, (double) int1, boolean0);
      assertFalse(int1 == int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      xYSeries0.add((Number) int1, (Number) int1);
      assertFalse(int1 == int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = false;
      boolean boolean1 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean1, boolean1, boolean0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      double double0 = 1.0;
      xYSeries0.add(double0, (Number) double0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      
      int int0 = 2393;
      // Undeclared exception!
      try {
        xYSeries0.add(double0, (double) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int0 = SwingConstants.WEST;
      assertEquals(7, int0);
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2282.5492330705397);
      XYSeries xYSeries0 = new XYSeries((Comparable) double0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = 0;
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(double0, (double) int0);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = Action.SHORT_DESCRIPTION;
      assertEquals("ShortDescription", string0);
      assertNotNull(string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      
      int int0 = 1;
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = SwingConstants.NEXT;
      assertEquals(12, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      boolean boolean0 = xYSeries0.getAutoSort();
      assertTrue(boolean0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-2282.5492330705397);
      XYSeries xYSeries0 = new XYSeries((Comparable) double0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      
      boolean boolean0 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = xYSeries0.getItemCount();
      assertEquals(0, int0);
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      
      Minute minute0 = second0.getMinute();
      assertNotNull(minute0);
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      
      MockDate mockDate0 = (MockDate)minute0.getEnd();
      assertNotNull(mockDate0);
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      
      Millisecond millisecond0 = new Millisecond((Date) mockDate0);
      assertNotNull(millisecond0);
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1392409319999L, millisecond0.getLastMillisecond());
      assertEquals(1392409319999L, millisecond0.getFirstMillisecond());
      assertEquals(1392409319999L, millisecond0.getMiddleMillisecond());
      assertEquals(999L, millisecond0.getMillisecond());
      assertEquals(3601570919999L, millisecond0.getSerialIndex());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:59 GMT 2014", mockDate0.toString());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-2282.5492330705397);
      XYSeries xYSeries0 = new XYSeries((Comparable) double0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      List list0 = xYSeries0.getItems();
      assertNotNull(list0);
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) minute0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotNull(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      double double0 = 1.0;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.remove((Number) double0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = SwingConstants.WEST;
      assertEquals(7, int0);
      
      // Undeclared exception!
      try {
        xYSeries0.updateByIndex(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 7, Size: 0
         //
      }
  }
}
