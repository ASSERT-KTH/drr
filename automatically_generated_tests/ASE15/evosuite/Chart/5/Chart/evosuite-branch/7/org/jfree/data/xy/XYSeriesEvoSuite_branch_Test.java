/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:54:00 GMT 2014
 */

package org.jfree.data.xy;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.util.List;
import javax.swing.SwingConstants;
import javax.swing.border.BevelBorder;
import javax.swing.text.DefaultEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.jfree.chart.util.TableOrder;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Second;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

 
public class XYSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-5111);
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      //  // Unstable assertion: assertNotNull(xYSeries0);
      //  // Unstable assertion: assertEquals(0, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(true, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2, xYSeries0.getItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(3, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int1 = xYSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-146150733), int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(3, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-5111);
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      //  // Unstable assertion: assertNotNull(xYSeries0);
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, xYSeries0.getItemCount());
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2, xYSeries0.getItemCount());
      
      int int1 = xYSeries0.hashCode();
      //  // Unstable assertion: assertEquals(1577203621, int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(2, xYSeries0.getItemCount());
  }

  ////@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = (-5111);
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      
      int int1 = xYSeries0.hashCode();
      assertEquals((-2061757124), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
  }

  ////@Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = xYSeries0.hashCode();
      assertEquals((-2146777208), int0);
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection(xYSeries0);
      assertNotNull(xYSeriesCollection0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      
      double double0 = 0.0;
      xYSeries1.add(double0, (Number) double0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      
      xYSeriesCollection0.removeSeries(xYSeries1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeriesCollection0.getSeriesCount());
      assertEquals(false, xYSeriesCollection0.isAutoWidth());
      assertEquals(0.5, xYSeriesCollection0.getIntervalPositionFactor(), 0.01D);
      assertEquals(1.0, xYSeriesCollection0.getIntervalWidth(), 0.01D);
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
  }

  ////@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = BevelBorder.RAISED;
      assertEquals(0, int0);
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertFalse(boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean1 == boolean0);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = DefaultEditorKit.endParagraphAction;
      assertNotNull(string0);
      assertEquals("caret-end-paragraph", string0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertFalse(boolean1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
  }

  ////@Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      
      int int0 = BevelBorder.RAISED;
      assertEquals(0, int0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertTrue(boolean1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      boolean boolean1 = xYSeries0.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      Number number0 = null;
      xYSeries0.add((double) int0, number0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  ////@Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      
      int int0 = second0.compareTo((Object) second0);
      assertEquals(0, int0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      xYSeries0.add((double) int0, (Number) int0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
  }

  ////@Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      int int0 = second0.compareTo((Object) second0);
      assertEquals(0, int0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean1, boolean0, boolean1);
      assertNotNull(xYSeries0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = ImageObserver.PROPERTIES;
      assertEquals(4, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      Number number0 = null;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, number0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      
      int int0 = KeyEvent.VK_KP_UP;
      assertEquals(224, int0);
      
      // Undeclared exception!
      try {
        xYSeries0.update((Number) int0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 224
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = (-5111);
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.update((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      String string0 = tableOrder0.toString();
      assertNotNull(string0);
      assertEquals("TableOrder.BY_ROW", string0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = (-148);
      xYSeries0.add((double) int0, (double) int0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.clear();
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
  }

  ////@Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      int int0 = second0.compareTo((Object) second0);
      assertEquals(0, int0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (Number) int0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      
      xYSeries0.delete(int0, int0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  ////@Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      int int0 = second0.compareTo((Object) second0);
      assertEquals(0, int0);
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      boolean boolean1 = xYSeries0.equals((Object) second0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      xYSeries0.setMaximumItemCount(int0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      
      xYSeries0.add((double) int0, (Number) int0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
  }

  ////@Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      int int0 = BevelBorder.RAISED;
      assertEquals(0, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      XYDataItem xYDataItem1 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNotNull(xYDataItem1);
      assertEquals(0.0, xYDataItem1.getXValue(), 0.01D);
      assertEquals(0.0, xYDataItem1.getYValue(), 0.01D);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      
      boolean boolean1 = xYSeries0.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      
      xYSeries0.add((double) int0, (Number) int0, boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      
      int int1 = ImageObserver.ABORT;
      assertEquals(128, int1);
      assertFalse(int1 == int0);
      
      xYSeries0.add((Number) int1, (Number) int1, boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      
      XYDataItem xYDataItem0 = new XYDataItem((double) int0, (double) int1);
      assertNotNull(xYDataItem0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(128.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      
      xYSeries0.add(xYDataItem0, boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(128.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      
      boolean boolean1 = xYSeries0.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      
      XYDataItem xYDataItem0 = new XYDataItem((double) int0, (double) int0);
      assertNotNull(xYDataItem0);
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
      
      boolean boolean2 = false;
      assertFalse(boolean2 == boolean1);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int0, boolean1, boolean2);
      assertNotNull(xYSeries1);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertNull(xYSeries1.getDescription());
      
      xYSeries1.add((double) int0, (Number) int0, boolean0);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      
      // Undeclared exception!
      try {
        xYSeries1.add(xYDataItem0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 31;
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  ////@Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Second second0 = new Second();
      assertNotNull(second0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      int int0 = second0.compareTo((Object) second0);
      assertEquals(0, int0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((double) int0, (Number) int0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      
      boolean boolean1 = xYSeries0.isEmpty();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      
      xYSeries0.add((double) int0, (Number) int0, boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertTrue(boolean0 == boolean1);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      
      boolean boolean1 = xYSeries0.getAutoSort();
      assertTrue(boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      String string0 = DefaultEditorKit.endParagraphAction;
      assertNotNull(string0);
      assertEquals("caret-end-paragraph", string0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      
      boolean boolean1 = xYSeries0.getAllowDuplicateXValues();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
  }

  ////@Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int0 = BevelBorder.RAISED;
      assertEquals(0, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(false, xYSeries1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int1 = xYSeries0.getMaximumItemCount();
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      
      List list0 = xYSeries0.getItems();
      assertNotNull(list0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = SwingConstants.NORTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.remove((Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TableOrder tableOrder0 = TableOrder.BY_ROW;
      assertNotNull(tableOrder0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      String string0 = tableOrder0.toString();
      assertNotNull(string0);
      assertEquals("TableOrder.BY_ROW", string0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals("TableOrder.BY_ROW", tableOrder0.toString());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      int int0 = (-148);
      // Undeclared exception!
      try {
        xYSeries0.updateByIndex(int0, (Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
