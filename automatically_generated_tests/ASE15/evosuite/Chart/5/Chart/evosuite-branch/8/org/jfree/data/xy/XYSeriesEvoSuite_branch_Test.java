/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:05:04 GMT 2014
 */

package org.jfree.data.xy;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Component;
import java.awt.event.PaintEvent;
import java.awt.image.ImageObserver;
import java.util.List;
import javax.swing.AbstractButton;
import javax.swing.ScrollPaneConstants;
import javax.swing.text.View;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.jfree.data.general.SeriesException;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;

 
public class XYSeriesEvoSuite_branch_Test   {

  ////@Test
  public void test00()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      
      int int0 = xYSeries0.hashCode();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals((-2146069898), int0);
  }

  ////@Test
  public void test01()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      
      double double0 = 0.0;
      int int0 = 0;
      int int1 = ImageObserver.ALLBITS;
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      xYSeries0.add((double) int0, (Number) double0);
      assertFalse(int0 == int1);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int1, (Number) int1);
      assertFalse(int1 == int0);
      assertNull(xYDataItem0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add(double0, (double) int1, boolean0);
      assertFalse(int1 == int0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      
      int int2 = xYSeries0.hashCode();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(3, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals((-81666217), int2);
  }

  @Test
  public void test02()  throws Throwable  {
      double double0 = 0.0;
      XYDataItem xYDataItem0 = new XYDataItem(double0, double0);
      assertNotNull(xYDataItem0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      
      int int0 = Integer.MAX_VALUE;
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      
      boolean boolean0 = xYSeries0.equals((Object) xYSeries1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertTrue(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      int int0 = PaintEvent.PAINT_FIRST;
      assertEquals(800, int0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int0);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertFalse(boolean1);
  }

  @Test
  public void test04()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int0, boolean0);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(1, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertFalse(boolean1);
  }

  @Test
  public void test05()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(boolean0 == boolean1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(boolean1);
  }

  @Test
  public void test06()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      boolean boolean1 = xYSeries0.getAutoSort();
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertTrue(boolean1);
      
      boolean boolean2 = xYSeries0.equals((Object) boolean1);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertFalse(boolean2);
  }

  @Test
  public void test07()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      
      XYSeries xYSeries1 = new XYSeries((Comparable) int0, boolean0);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNotNull(xYSeries1);
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAutoSort());
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAutoSort());
      assertFalse(boolean1);
  }

  @Test
  public void test08()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.add((double) int0, (double) int0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test
  public void test09()  throws Throwable  {
      double double0 = (-5323.807688068991);
      XYDataItem xYDataItem0 = new XYDataItem(double0, double0);
      assertNotNull(xYDataItem0);
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      boolean boolean0 = xYDataItem0.equals((Object) xYDatasetTableModel0);
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      
      int int0 = xYSeries0.indexOf((Number) double0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals((-1), int0);
      
      Number number0 = null;
      xYSeries0.add((double) int0, number0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = View.Y_AXIS;
      assertEquals(1, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2, xYSeries0.getItemCount());
  }

  @Test
  public void test11()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int0 = 0;
      xYSeries0.setMaximumItemCount(int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      int int1 = ImageObserver.ALLBITS;
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int1, (Number) int0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = View.Y_AXIS;
      assertEquals(1, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNotNull(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1.0, xYDataItem0.getXValue(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      int int0 = ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED;
      assertEquals(20, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      
      Number number0 = null;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
      }
  }

  @Test
  public void test14()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) string0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      
      float float0 = Component.RIGHT_ALIGNMENT;
      assertEquals(1.0F, float0, 0.01F);
      
      // Undeclared exception!
      try {
        xYSeries0.update((Number) float0, (Number) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = 1.0
         //
      }
  }

  @Test
  public void test15()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int0 = View.Y_AXIS;
      assertEquals(1, int0);
      
      xYSeries0.add((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      
      xYSeries0.update((Number) int0, (Number) int0);
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
  }

  ////@Test
  public void test16()  throws Throwable  {
      long long0 = (-16L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      
      String string0 = fixedMillisecond0.toString();
      assertNotNull(string0);
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", string0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) string0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      
      int int0 = 3569;
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) long0);
      assertNull(xYDataItem0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      
      xYSeries0.clear();
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
  }

  @Test
  public void test17()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      
      xYSeries0.clear();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
  }

  @Test
  public void test18()  throws Throwable  {
      String string0 = AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("verticalAlignment", string0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) string0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      
      int int0 = (-25);
      // Undeclared exception!
      try {
        xYSeries0.delete(int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      
      int int1 = 1070;
      assertFalse(int1 == int0);
      
      xYSeries0.delete(int1, int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test
  public void test20()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      
      double double0 = 0.0;
      int int0 = 0;
      xYSeries0.setMaximumItemCount(int0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      
      xYSeries0.add(double0, (Number) int0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
  }

  @Test
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      
      int int0 = View.Y_AXIS;
      assertEquals(1, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertNull(xYDataItem0);
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      
      // Undeclared exception!
      try {
        xYSeries0.add((double) int0, (double) int0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  ////@Test
  public void test22()  throws Throwable  {
      int int0 = 6;
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      
      boolean boolean1 = xYSeries0.getAllowDuplicateXValues();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertTrue(boolean1);
      
      int int1 = xYSeries0.hashCode();
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals((-2146069926), int1);
      
      xYSeries0.add((double) int0, (double) int1, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(int1 == int0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
  }

  ////@Test
  public void test23()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, boolean0, boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertNotNull(xYSeries0);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      double double0 = (-2975.7936474);
      xYSeries0.add(double0, (Number) double0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.add(double0, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test24()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((Number) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      xYSeries0.setMaximumItemCount(int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
  }

  @Test
  public void test25()  throws Throwable  {
      double double0 = (-5323.807688068991);
      XYDataItem xYDataItem0 = new XYDataItem(double0, double0);
      assertNotNull(xYDataItem0);
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      
      XYDatasetTableModel xYDatasetTableModel0 = new XYDatasetTableModel();
      assertNotNull(xYDatasetTableModel0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      
      boolean boolean0 = xYDataItem0.equals((Object) xYDatasetTableModel0);
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      assertFalse(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      
      xYSeries0.add(xYDataItem0, boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYDatasetTableModel0.getRowCount());
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertNotNull(doubleArray0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals((-5323.807688068991), xYDataItem0.getYValue(), 0.01D);
      assertEquals((-5323.807688068991), xYDataItem0.getXValue(), 0.01D);
  }

  @Test
  public void test26()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      
      int int0 = 0;
      int int1 = ImageObserver.ALLBITS;
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int1, (Number) int0);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(xYDataItem0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  ////@Test
  public void test27()  throws Throwable  {
      long long0 = (-16L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      
      String string0 = fixedMillisecond0.toString();
      assertNotNull(string0);
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", string0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) string0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals((-16L), fixedMillisecond0.getSerialIndex());
      assertEquals((-16L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-16L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-16L), fixedMillisecond0.getFirstMillisecond());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test28()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      
      List list0 = xYSeries0.getItems();
      assertNotNull(list0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
  }

  @Test
  public void test29()  throws Throwable  {
      String string0 = AbstractButton.SELECTED_ICON_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("selectedIcon", string0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertNotNull(xYSeries1);
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = 6;
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0);
      assertNotNull(xYSeries0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.remove((Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test31()  throws Throwable  {
      double double0 = 0.0;
      XYDataItem xYDataItem0 = new XYDataItem(double0, double0);
      assertNotNull(xYDataItem0);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) xYDataItem0);
      assertNotNull(xYSeries0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try {
        xYSeries0.updateByIndex(int0, (Number) double0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
      }
  }
}
