/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:21:52 GMT 2014
 */

package org.jfree.data.xy;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.accessibility.AccessibleContext;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.Second;
import org.jfree.data.time.Week;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYSeries;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class XYSeriesEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = false;
      assertFalse(boolean1 == boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean1);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      
      int int0 = xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAutoSort());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertEquals((-2146069898), int0);
  }

  @Test
  public void test01()  throws Throwable  {
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(0, xYSeries0.getItemCount());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_KP_UP;
      //  // Unstable assertion: assertEquals(224, int0);
      
      boolean boolean0 = true;
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(1, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (Number) int0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(2, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(3, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      int int1 = xYSeries0.hashCode();
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1392292799999L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595199999L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(1391990400000L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      //  // Unstable assertion: assertEquals(true, xYSeries0.getAutoSort());
      //  // Unstable assertion: assertEquals(3, xYSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, xYSeries0.isEmpty());
      //  // Unstable assertion: assertNull(xYSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals((-572496540), int1);
  }

  @Test
  public void test02()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int0 = 1517;
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      XYDataItem xYDataItem0 = xYSeries1.addOrUpdate((double) int0, (double) int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNull(xYDataItem0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      boolean boolean0 = xYSeries0.equals((Object) xYSeries1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      String string0 = MockJFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("fileSelectionChanged", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNotNull(xYSeries0);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) string0);
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotNull(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      boolean boolean1 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(0, xYSeries1.getItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(boolean1);
  }

  @Test
  public void test04()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(week0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertNotNull(xYSeries0);
      
      boolean boolean0 = false;
      boolean boolean1 = xYSeries0.getAutoSort();
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) boolean0, boolean1);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotNull(xYSeries1);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean0 == boolean1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      
      boolean boolean2 = xYSeries0.equals((Object) xYSeries1);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean0 == boolean2);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(boolean2);
  }

  @Test
  public void test05()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      int int0 = 1517;
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      
      boolean boolean0 = xYSeries0.equals((Object) xYSeries1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(true, xYSeries1.getAutoSort());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertTrue(xYSeries0.equals((Object)xYSeries1));
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0);
  }

  @Test
  public void test06()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(mockDate0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getInstance();
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(zoneInfo0);
      
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(second0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(xYSeries0);
      
      int int0 = 766;
      int int1 = (-2407);
      int int2 = ActionEvent.META_MASK;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4, int2);
      
      xYSeries0.add((double) int2, (Number) int2, boolean0);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      XYSeries xYSeries1 = xYSeries0.createCopy(int0, int1);
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(21, second0.getSecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(true, xYSeries1.isEmpty());
      assertNull(xYSeries1.getDescription());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertNotNull(xYSeries1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
  }

  @Test
  public void test07()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      Quarter quarter0 = new Quarter((Date) mockDate0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertNotNull(quarter0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) quarter0, boolean0, boolean0);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertNotNull(xYSeries0);
      
      int int0 = 438;
      int int1 = ActionEvent.META_MASK;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      xYSeries0.add((double) int0, (Number) int1, boolean0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      
      // Undeclared exception!
      try {
        XYSeries xYSeries1 = xYSeries0.createCopy(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 438, Size: 1
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(week0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_KP_UP;
      assertEquals(224, int0);
      
      Number number0 = null;
      boolean boolean0 = true;
      xYSeries0.add((double) int0, number0, boolean0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test09()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(mockDate0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getInstance();
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertNotNull(second0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, boolean0);
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_PAUSE;
      assertEquals(19, int0);
      
      boolean boolean1 = xYSeries0.equals((Object) simpleDateFormat0);
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      
      double double0 = 7.637572809489089;
      int int1 = 3;
      assertFalse(int1 == int0);
      
      XYSeries xYSeries1 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotNull(xYSeries1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
      
      XYDataItem xYDataItem0 = xYSeries1.addOrUpdate((Number) int1, (Number) int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(1, xYSeries1.getItemCount());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertNotSame(xYSeries1, xYSeries0);
      assertNull(xYDataItem0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
      assertFalse(int1 == int0);
      
      xYSeries1.add(double0, (double) int0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
      
      xYSeries1.setMaximumItemCount(int1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(2, xYSeries1.getItemCount());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertTrue(boolean0 == boolean1);
      assertFalse(int1 == int0);
      
      xYSeries1.add((double) int0, (Number) int0, boolean1);
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(3, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertNotSame(xYSeries0, xYSeries1);
      assertNotSame(xYSeries1, xYSeries0);
      assertFalse(xYSeries0.equals((Object)xYSeries1));
      assertTrue(boolean1 == boolean0);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
      
      XYDataItem xYDataItem1 = xYSeries1.addOrUpdate((double) int1, (double) int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertEquals(3, xYSeries1.getMaximumItemCount());
      assertEquals(false, xYSeries1.isEmpty());
      assertEquals(3, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertNull(xYSeries1.getDescription());
      assertEquals(false, xYSeries1.getAllowDuplicateXValues());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertNotSame(xYSeries1, xYSeries0);
      assertNull(xYDataItem1);
      assertFalse(xYSeries1.equals((Object)xYSeries0));
      assertFalse(int0 == int1);
      assertTrue(boolean0 == boolean1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test10()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean0);
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      double double0 = 0.0;
      xYSeries0.add(double0, double0);
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(double0, double0);
      assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNotNull(xYDataItem0);
  }

  @Test
  public void test11()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0, boolean0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      int int0 = xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals((-2146069897), int0);
      
      Number number0 = null;
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.addOrUpdate(number0, (Number) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'x' argument.
         //
      }
  }

  @Test
  public void test12()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableRowDescriptionChanged", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      
      int int0 = xYSeries0.hashCode();
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals((-2146069926), int0);
      
      // Undeclared exception!
      try {
        xYSeries0.update((Number) int0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No observation for x = -2146069926
         //
      }
  }

  @Test
  public void test13()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableRowDescriptionChanged", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertNotNull(xYSeries0);
      
      double double0 = 964.245209003;
      xYSeries0.add(double0, (Number) double0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.update((Number) double0, (Number) double0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
  }

  @Test
  public void test14()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(millisecond0);
      
      double double0 = 0.3621301658692;
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertNotNull(xYSeries0);
      
      xYSeries0.add(double0, (Number) double0, boolean0);
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      
      xYSeries0.clear();
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
  }

  @Test
  public void test15()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getInstance();
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertNotNull(simpleDateFormat0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(zoneInfo0);
      
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(second0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) second0, boolean0, boolean0);
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals("GMT", zoneInfo0.getID());
      assertNotNull(xYSeries0);
      
      xYSeries0.clear();
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(21, second0.getSecond());
      assertEquals(1392409281000L, second0.getFirstMillisecond());
      assertEquals(1392409281999L, second0.getLastMillisecond());
      assertEquals(1392409281499L, second0.getMiddleMillisecond());
      assertEquals(3601570881L, second0.getSerialIndex());
      assertEquals("GMT", zoneInfo0.getID());
  }

  @Test
  public void test16()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertNotNull(week0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_KP_UP;
      assertEquals(224, int0);
      
      // Undeclared exception!
      try {
        xYSeries0.delete(int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 224, Size: 0
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(2014, week0.getYearValue());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_KP_UP;
      assertEquals(224, int0);
      
      int int1 = xYSeries0.hashCode();
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertFalse(int1 == int0);
      assertEquals((-2146777178), int1);
      
      xYSeries0.delete(int0, int1);
      assertEquals(true, xYSeries0.getAutoSort());
      assertNull(xYSeries0.getDescription());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2014, week0.getYearValue());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
  }

  @Test
  public void test18()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertNotNull(mockDate0);
      
      SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)DateFormat.getInstance();
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertNotNull(simpleDateFormat0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_PAUSE;
      assertEquals(19, int0);
      
      boolean boolean1 = xYSeries0.equals((Object) simpleDateFormat0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean1);
      
      int int1 = 3;
      assertFalse(int1 == int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int1, (Number) int0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYDataItem0);
      assertFalse(int1 == int0);
      assertTrue(boolean0 == boolean1);
      assertFalse(int0 == int1);
      
      xYSeries0.add((double) int0, (double) int0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertTrue(boolean0 == boolean1);
      assertFalse(int0 == int1);
      
      xYSeries0.setMaximumItemCount(int1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(3, xYSeries0.getMaximumItemCount());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(int1 == int0);
      assertTrue(boolean0 == boolean1);
      
      xYSeries0.add((double) int0, (Number) int0, boolean1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(3, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, simpleDateFormat0.isLenient());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean0 == boolean1);
      assertFalse(int0 == int1);
      
      xYSeries0.add((double) int1, (double) int1);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(3, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertFalse(int1 == int0);
      assertTrue(boolean0 == boolean1);
  }

  @Test
  public void test19()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(millisecond0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertNotNull(xYSeries0);
      
      double double0 = 0.0;
      xYSeries0.add(double0, double0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      int int0 = 0;
      int int1 = ActionEvent.META_MASK;
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      // Undeclared exception!
      try {
        xYSeries0.add((double) int0, (Number) int1, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertNotNull(week0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_KP_UP;
      assertEquals(224, int0);
      
      double double0 = (-557.5);
      boolean boolean0 = true;
      xYSeries0.add((double) int0, (Number) double0, boolean0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      
      xYSeries0.add(double0, (Number) int0);
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      
      xYSeries0.add(double0, (Number) double0, boolean0);
      assertEquals(3, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(7, week0.getWeek());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
  }

  @Test
  public void test21()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      assertEquals(128, int0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) int0, boolean0, boolean1);
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertNotNull(xYSeries0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((double) int0, (double) int0);
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertNull(xYDataItem0);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try {
        xYSeries0.add((Number) int0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // X-value already exists.
         //
      }
  }

  @Test
  public void test22()  throws Throwable  {
      String string0 = AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED;
      assertNotNull(string0);
      assertEquals("accessibleTableRowDescriptionChanged", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertNotNull(xYSeries0);
      
      int int0 = xYSeries0.hashCode();
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals((-2146069926), int0);
      
      xYSeries0.add((double) int0, (Number) int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      xYSeries0.setMaximumItemCount(int1);
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertFalse(int1 == int0);
  }

  @Test
  public void test23()  throws Throwable  {
      Week week0 = new Week();
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertNotNull(week0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) week0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_KP_UP;
      assertEquals(224, int0);
      
      boolean boolean0 = true;
      xYSeries0.add((double) int0, (Number) int0, boolean0);
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      
      double[][] doubleArray0 = xYSeries0.toArray();
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(7, week0.getWeek());
      assertEquals(1392292799999L, week0.getMiddleMillisecond());
      assertEquals(2014, week0.getYearValue());
      assertEquals(106749L, week0.getSerialIndex());
      assertEquals(1391990400000L, week0.getFirstMillisecond());
      assertEquals(1392595199999L, week0.getLastMillisecond());
      assertNotNull(doubleArray0);
  }

  @Test
  public void test24()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(millisecond0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) millisecond0, boolean0, boolean0);
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertNotNull(xYSeries0);
      
      boolean boolean1 = xYSeries0.getAllowDuplicateXValues();
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertTrue(boolean0 == boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test
  public void test25()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(mockDate0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, boolean0);
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNotNull(xYSeries0);
      
      int int0 = KeyEvent.VK_PAUSE;
      assertEquals(19, int0);
      
      XYDataItem xYDataItem0 = xYSeries0.addOrUpdate((Number) int0, (Number) int0);
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(false, xYSeries0.isEmpty());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(1, xYSeries0.getItemCount());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(xYDataItem0);
      
      // Undeclared exception!
      try {
        xYSeries0.add(xYDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test
  public void test26()  throws Throwable  {
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0);
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertNotNull(xYSeries0);
      
      int int0 = xYSeries0.getMaximumItemCount();
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test
  public void test27()  throws Throwable  {
      String string0 = MockJFileChooser.FILE_SELECTION_MODE_CHANGED_PROPERTY;
      assertNotNull(string0);
      assertEquals("fileSelectionChanged", string0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) string0, boolean0, boolean0);
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNotNull(xYSeries0);
      
      List list0 = xYSeries0.getItems();
      assertEquals(false, xYSeries0.getAllowDuplicateXValues());
      assertNull(xYSeries0.getDescription());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test
  public void test28()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(millisecond0);
      
      MockDate mockDate0 = (MockDate)millisecond0.getStart();
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(mockDate0);
      
      boolean boolean0 = false;
      XYSeries xYSeries0 = new XYSeries((Comparable) mockDate0, boolean0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotNull(xYSeries0);
      
      XYSeries xYSeries1 = (XYSeries)xYSeries0.clone();
      assertEquals(true, xYSeries1.getAllowDuplicateXValues());
      assertNull(xYSeries1.getDescription());
      assertEquals(0, xYSeries1.getItemCount());
      assertEquals(true, xYSeries1.getNotify());
      assertEquals(false, xYSeries1.getAutoSort());
      assertEquals(2147483647, xYSeries1.getMaximumItemCount());
      assertEquals(true, xYSeries1.isEmpty());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(true, xYSeries0.isEmpty());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(false, xYSeries0.getAutoSort());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertNotSame(xYSeries1, xYSeries0);
      assertNotSame(xYSeries0, xYSeries1);
      assertNotNull(xYSeries1);
      assertTrue(xYSeries1.equals((Object)xYSeries0));
      assertTrue(xYSeries0.equals((Object)xYSeries1));
  }

  @Test
  public void test29()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      assertEquals(128, int0);
      
      boolean boolean0 = true;
      XYSeries xYSeries0 = new XYSeries((Comparable) boolean0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(0, xYSeries0.getItemCount());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(true, xYSeries0.isEmpty());
      assertNotNull(xYSeries0);
      
      // Undeclared exception!
      try {
        XYDataItem xYDataItem0 = xYSeries0.remove((Number) int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test30()  throws Throwable  {
      int int0 = SwingConstants.RIGHT;
      assertEquals(4, int0);
      
      XYSeries xYSeries0 = new XYSeries((Comparable) int0);
      assertEquals(true, xYSeries0.getAutoSort());
      assertEquals(true, xYSeries0.isEmpty());
      assertNull(xYSeries0.getDescription());
      assertEquals(true, xYSeries0.getAllowDuplicateXValues());
      assertEquals(true, xYSeries0.getNotify());
      assertEquals(0, xYSeries0.getItemCount());
      assertEquals(2147483647, xYSeries0.getMaximumItemCount());
      assertNotNull(xYSeries0);
      
      // Undeclared exception!
      try {
        xYSeries0.updateByIndex(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
      }
  }
}
