/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:41:24 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.image.ImageObserver;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.TimeZone;
import javax.swing.DefaultBoundedRangeModel;
import javax.swing.JInternalFrame;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.SerialDate;
import org.jfree.data.time.SpreadsheetDate;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00() {}
//   @Test(timeout = 4000)
//   public void test00()  throws Throwable  {
//       Hour hour0 = new Hour();
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       
//       MockDate mockDate0 = (MockDate)hour0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       Class<FixedMillisecond> class0 = FixedMillisecond.class;
//       Day day0 = hour0.getDay();
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       
//       int int0 = Calendar.ALL_STYLES;
//       //  // Unstable assertion: assertEquals(0, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       
//       int int1 = timeSeries0.hashCode();
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals((-1867178489), int1);
//   }

  //@Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      assertEquals(1, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = timeSeries0.hashCode();
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(359697985, int1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      assertEquals(1, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Class<Minute> class0 = Minute.class;
      boolean boolean0 = timeSeries0.equals((Object) class0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      SpinnerDateModel spinnerDateModel0 = new SpinnerDateModel();
      //  // Unstable assertion: assertNotNull(spinnerDateModel0);
      
      Date date0 = spinnerDateModel0.getDate();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:41:16 GMT 2014", date0.toString());
      
      Month month0 = new Month(date0);
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals(1418731195146L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1417391995147L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(12, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24180L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070395146L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:41:16 GMT 2014", date0.toString());
      
      Month month1 = (Month)month0.next();
      //  // Unstable assertion: assertNotNull(month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertEquals(24181L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1422748799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2015, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1420070400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1421409599999L, month1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1418731195146L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1417391995147L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(12, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24180L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1420070395146L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:41:16 GMT 2014", date0.toString());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month1, (RegularTimePeriod) month0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test04() {}
//   @Test(timeout = 4000)
//   public void test04()  throws Throwable  {
//       Class<TimeSeriesDataItem> class0 = TimeSeriesDataItem.class;
//       Second second0 = new Second();
//       //  // Unstable assertion: assertNotNull(second0);
//       //  // Unstable assertion: assertEquals(26, second0.getSecond());
//       //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
//       
//       Minute minute0 = second0.getMinute();
//       //  // Unstable assertion: assertNotNull(minute0);
//       //  // Unstable assertion: assertEquals(26, second0.getSecond());
//       //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       MockDate mockDate0 = (MockDate)minute0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals(26, second0.getSecond());
//       //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       String string0 = "You are attempting to add an observation for ";
//       ZoneInfo zoneInfo0 = (ZoneInfo)TimeZone.getTimeZone(string0);
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) mockDate0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(26, second0.getSecond());
//       //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNull(regularTimePeriod0);
//       //  // Unstable assertion: assertEquals(26, second0.getSecond());
//       //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:00 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
//       //  // Unstable assertion: assertEquals(21, minute0.getMinute());
//       //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, regularTimePeriod0);
//        //  fail("Expecting exception: IllegalArgumentException");
//        // Unstable assertion
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'end' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = (-50);
      String string0 = "#";
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("#", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("#", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      assertNotNull(defaultBoundedRangeModel0);
      
      String string0 = defaultBoundedRangeModel0.toString();
      assertNotNull(string0);
      assertEquals("javax.swing.DefaultBoundedRangeModel[value=0, extent=0, min=0, max=100, adj=false]", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      
      int int0 = 44;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "Mjg]Q-?2iIA{@Q7\\";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0);
      assertNotNull(jInternalFrame0);
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      
      String string1 = jInternalFrame0.getUIClassID();
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      assertEquals("InternalFrameUI", string1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1);
      assertNotNull(timeSeries0);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, jInternalFrame0.isShowing());
      assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      assertEquals(false, jInternalFrame0.isValid());
      assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      assertEquals(false, jInternalFrame0.isFontSet());
      assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      assertEquals(false, jInternalFrame0.isLightweight());
      assertEquals(false, jInternalFrame0.isCursorSet());
      assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      assertEquals(false, jInternalFrame0.isVisible());
      assertEquals(true, jInternalFrame0.isBackgroundSet());
      assertEquals(false, jInternalFrame0.isDisplayable());
      assertEquals(true, jInternalFrame0.isEnabled());
      assertEquals(2, jInternalFrame0.countComponents());
      assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      assertEquals(false, jInternalFrame0.isForegroundSet());
      assertEquals(2, jInternalFrame0.getComponentCount());
      
      int int0 = ImageObserver.ALLBITS;
      assertEquals(32, int0);
      
      int int1 = (-1269);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      //  // Unstable assertion: assertNotNull(defaultBoundedRangeModel0);
      
      String string0 = defaultBoundedRangeModel0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("javax.swing.DefaultBoundedRangeModel[value=0, extent=0, min=0, max=100, adj=false]", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      
      int int0 = timeSeries0.getIndex((RegularTimePeriod) quarter0);
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals((-1), int0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "DIGq>9NShJR";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = (-2182);
      int int1 = (-5547);
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Mjg]Q-?2iIA{@Q7\\";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0);
      //  // Unstable assertion: assertNotNull(jInternalFrame0);
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      
      String string1 = jInternalFrame0.getUIClassID();
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals("InternalFrameUI", string1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      int int0 = ImageObserver.ALLBITS;
      //  // Unstable assertion: assertEquals(32, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      timeSeries0.add(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.delete((RegularTimePeriod) day0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      
      Second second0 = millisecond0.getSecond();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      
      timeSeries0.delete((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      //  // Unstable assertion: assertNotNull(defaultBoundedRangeModel0);
      
      String string0 = defaultBoundedRangeModel0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("javax.swing.DefaultBoundedRangeModel[value=0, extent=0, min=0, max=100, adj=false]", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) long0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "Mjg]Q-?2iIA{@Q7\\";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0);
      //  // Unstable assertion: assertNotNull(jInternalFrame0);
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      
      String string1 = jInternalFrame0.getUIClassID();
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals("InternalFrameUI", string1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      int int0 = ImageObserver.ALLBITS;
      //  // Unstable assertion: assertEquals(32, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      timeSeries0.add(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "Mjg'Q-?2iIA{@Q7\\";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0);
      //  // Unstable assertion: assertNotNull(jInternalFrame0);
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      
      String string1 = jInternalFrame0.getUIClassID();
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals("InternalFrameUI", string1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      
      int int0 = ImageObserver.ALLBITS;
      //  // Unstable assertion: assertEquals(32, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      
      timeSeries0.add(timeSeriesDataItem0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      assertNotNull(defaultBoundedRangeModel0);
      
      String string0 = defaultBoundedRangeModel0.toString();
      assertNotNull(string0);
      assertEquals("javax.swing.DefaultBoundedRangeModel[value=0, extent=0, min=0, max=100, adj=false]", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      long long0 = timeSeries0.getMaximumItemAge();
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, long0);
      
      long long1 = (-3293L);
      assertFalse(long1 == long0);
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems(long1, boolean0);
      assertFalse(long1 == long0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      // Undeclared exception!
      try {
        timeSeries0.removeAgedItems(long0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      //  // Unstable assertion: assertEquals(1, int0);
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Day day1 = (Day)day0.next();
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) day1, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      
      int int0 = timeSeries0.getMaximumItemCount();
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      timeSeries1.setMaximumItemCount(int1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      
      int int0 = timeSeries0.getMaximumItemCount();
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
  }

  @Test(timeout = 4000)
  public void test20() {}
//   @Test(timeout = 4000)
//   public void test20()  throws Throwable  {
//       Hour hour0 = new Hour();
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       
//       MockDate mockDate0 = (MockDate)hour0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       Class<FixedMillisecond> class0 = FixedMillisecond.class;
//       Day day0 = hour0.getDay();
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       int int0 = Calendar.ALL_STYLES;
//       //  // Unstable assertion: assertEquals(0, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       timeSeries0.update((RegularTimePeriod) hour0, (Number) int0);
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//   }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) millisecond0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = timeSeries0.getMaximumItemCount();
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period Fri Feb 14 19:59:55 GMT 2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test(timeout = 4000)
  public void test23() {}
//   @Test(timeout = 4000)
//   public void test23()  throws Throwable  {
//       long long0 = (-13L);
//       Class<LinkedList> class0 = LinkedList.class;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) long0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       Day day0 = new Day();
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       
//       MockDate mockDate0 = (MockDate)day0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Thu Feb 13 23:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       
//       SimpleDateFormat simpleDateFormat0 = (SimpleDateFormat)Day.DATE_FORMAT;
//       //  // Unstable assertion: assertNotNull(simpleDateFormat0);
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toLocalizedPattern());
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toPattern());
//       //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
//       
//       ZoneInfo zoneInfo0 = (ZoneInfo)simpleDateFormat0.getTimeZone();
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toLocalizedPattern());
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toPattern());
//       //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
//       //  // Unstable assertion: assertEquals("}=-T8ej__:", zoneInfo0.getID());
//       
//       Hour hour0 = new Hour((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals("Thu Feb 13 23:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toLocalizedPattern());
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toPattern());
//       //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
//       //  // Unstable assertion: assertEquals(1000415L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392335999999L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392332400000L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392334199999L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(13, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals("}=-T8ej__:", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) hour0, (Number) long0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals("Thu Feb 13 23:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toLocalizedPattern());
//       //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleDateFormat0.toPattern());
//       //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
//       //  // Unstable assertion: assertEquals(1000415L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392335999999L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392332400000L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392334199999L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(13, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(23, hour0.getHour());
//       //  // Unstable assertion: assertEquals("}=-T8ej__:", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       
//       boolean boolean0 = false;
//       // Undeclared exception!
//       try {
//         timeSeries0.add(timeSeriesDataItem0, boolean0);
//        //  fail("Expecting exception: IllegalArgumentException");
//        // Unstable assertion
//       } catch(IllegalArgumentException e) {
//          //
//          // Null 'item' argument.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) quarter0);
      //  // Unstable assertion: assertNull(number0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = ImageObserver.HEIGHT;
      assertEquals(2, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem(regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) second0, (RegularTimePeriod) second0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      int int0 = timeSeries0.getMaximumItemCount();
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(Integer.MAX_VALUE, int0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) hour0, (Number) int0, boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      int int0 = 0;
      Second second0 = millisecond0.getSecond();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      int int0 = 0;
      Second second0 = millisecond0.getSecond();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test29() {}
//   @Test(timeout = 4000)
//   public void test29()  throws Throwable  {
//       Hour hour0 = new Hour();
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       MockDate mockDate0 = (MockDate)hour0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       Class<FixedMillisecond> class0 = FixedMillisecond.class;
//       Day day0 = hour0.getDay();
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       int int0 = Calendar.ALL_STYLES;
//       //  // Unstable assertion: assertEquals(0, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       //  // Unstable assertion: assertNotNull(fixedMillisecond0);
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.getDataItem((RegularTimePeriod) fixedMillisecond0);
//       //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//   }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Class<Hour> class0 = Hour.class;
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      boolean boolean0 = false;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) hour0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "org.jfree.data.time.RegulMrTiTePeriMd";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      long long0 = (-6L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      assertEquals(1, int0);
      
      Class<Object> class0 = Object.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.setMaximumItemAge((long) int0);
      assertEquals(1L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      int int0 = 0;
      Second second0 = millisecond0.getSecond();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409286499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409286000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409286999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte) (-3);
      String string0 = "";
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) byteArray0[2], string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("", timeSeries0.getDomainDescription());
      assertEquals("", timeSeries0.getRangeDescription());
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount((int) byte0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test35() {}
//   @Test(timeout = 4000)
//   public void test35()  throws Throwable  {
//       Hour hour0 = new Hour();
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       
//       MockDate mockDate0 = (MockDate)hour0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       
//       Class<FixedMillisecond> class0 = FixedMillisecond.class;
//       Day day0 = hour0.getDay();
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       
//       int int0 = Calendar.ALL_STYLES;
//       //  // Unstable assertion: assertEquals(0, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       
//       Integer integer0 = (Integer)timeSeries0.getValue((RegularTimePeriod) day0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(0, (int)integer0);
//   }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      assertNotNull(defaultBoundedRangeModel0);
      
      String string0 = defaultBoundedRangeModel0.toString();
      assertNotNull(string0);
      assertEquals("javax.swing.DefaultBoundedRangeModel[value=0, extent=0, min=0, max=100, adj=false]", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "";
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      
      Class<Hour> class0 = Hour.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
      
      List list0 = timeSeries0.getItems();
      //  // Unstable assertion: assertNotNull(list0);
      //  // Unstable assertion: assertEquals(true, list0.isEmpty());
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(3601570886L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282146L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281147L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281646L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(26, second0.getSecond());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultBoundedRangeModel defaultBoundedRangeModel0 = new DefaultBoundedRangeModel();
      //  // Unstable assertion: assertNotNull(defaultBoundedRangeModel0);
      
      String string0 = defaultBoundedRangeModel0.toString();
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals("javax.swing.DefaultBoundedRangeModel[value=0, extent=0, min=0, max=100, adj=false]", string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertNotNull(quarter0);
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      
      int int0 = timeSeries0.getIndex((RegularTimePeriod) quarter0);
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals((-1), int0);
      
      boolean boolean0 = true;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) quarter0, (double) long0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(1388534395147L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1396310395146L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422395146L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-873);
      String string0 = "";
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertNotNull(hour0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (double) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.xy.XYDatasetTableModel.
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "Mjg'Q-?2iIA{@Q7\\";
      JInternalFrame jInternalFrame0 = new JInternalFrame(string0);
      //  // Unstable assertion: assertNotNull(jInternalFrame0);
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      
      String string1 = jInternalFrame0.getUIClassID();
      //  // Unstable assertion: assertNotNull(string1);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals("InternalFrameUI", string1);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      int int0 = ImageObserver.ALLBITS;
      //  // Unstable assertion: assertEquals(32, int0);
      
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertNotSame(string0, string1);
      //  // Unstable assertion: assertNotSame(string1, string0);
      //  // Unstable assertion: assertFalse(string0.equals((Object)string1));
      //  // Unstable assertion: assertFalse(string1.equals((Object)string0));
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.countComponents());
      //  // Unstable assertion: assertEquals(2, jInternalFrame0.getComponentCount());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isShowing());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isForegroundSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isVisible());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isValid());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFontSet());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(true, jInternalFrame0.isEnabled());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isLightweight());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, jInternalFrame0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Millisecond millisecond0 = new Millisecond();
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) millisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      String string0 = "(-mGT-f h`{";
      timeSeries0.setDomainDescription(string0);
      //  // Unstable assertion: assertEquals(3601570886173L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(173L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("(-mGT-f h`{", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       Hour hour0 = new Hour();
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       MockDate mockDate0 = (MockDate)hour0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       Class<FixedMillisecond> class0 = FixedMillisecond.class;
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       
//       int int0 = Calendar.ALL_STYLES;
//       //  // Unstable assertion: assertEquals(0, int0);
//       
//       // Undeclared exception!
//       try {
//         timeSeries0.update(int0, (Number) int0);
//        //  fail("Expecting exception: IndexOutOfBoundsException");
//        // Unstable assertion
//       } catch(IndexOutOfBoundsException e) {
//          //
//          // Index: 0, Size: 0
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      Class<Year> class1 = Year.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) string0, (Class) class1);
      assertNotNull(timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45() {}
//   @Test(timeout = 4000)
//   public void test45()  throws Throwable  {
//       Hour hour0 = new Hour();
//       //  // Unstable assertion: assertNotNull(hour0);
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       
//       MockDate mockDate0 = (MockDate)hour0.getStart();
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       SpreadsheetDate spreadsheetDate0 = (SpreadsheetDate)SerialDate.createInstance((Date) mockDate0);
//       //  // Unstable assertion: assertNotNull(spreadsheetDate0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       Class<FixedMillisecond> class0 = FixedMillisecond.class;
//       Day day0 = hour0.getDay();
//       //  // Unstable assertion: assertNotNull(day0);
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       
//       String string0 = null;
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) spreadsheetDate0, string0, string0, (Class) class0);
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       int int0 = Calendar.ALL_STYLES;
//       //  // Unstable assertion: assertEquals(0, int0);
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
//       //  // Unstable assertion: assertNull(timeSeriesDataItem0);
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
//       //  // Unstable assertion: assertNotNull(timeSeries1);
//       //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
//       //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
//       //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
//       //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
//       //  // Unstable assertion: assertEquals(41684, spreadsheetDate0.toSerial());
//       //  // Unstable assertion: assertEquals(14, spreadsheetDate0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(6, spreadsheetDate0.getDayOfWeek());
//       //  // Unstable assertion: assertEquals(2014, spreadsheetDate0.getYYYY());
//       //  // Unstable assertion: assertEquals(2, spreadsheetDate0.getMonth());
//       //  // Unstable assertion: assertNull(spreadsheetDate0.getDescription());
//       //  // Unstable assertion: assertEquals(1392409795146L, hour0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(20, hour0.getHour());
//       //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, hour0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, hour0.getYear());
//       //  // Unstable assertion: assertEquals(1392411595146L, hour0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1392407995147L, hour0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries1.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       //  // Unstable assertion: assertNull(timeSeries1.getDomainDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
//       //  // Unstable assertion: assertNull(timeSeries1.getDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1392422395146L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1392379195146L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1392335995147L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2, day0.getMonth());
//       //  // Unstable assertion: assertEquals("Fri Feb 14 19:59:55 GMT 2014", mockDate0.toString());
//   }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = SwingConstants.TOP;
      assertEquals(1, int0);
      
      String string0 = "rw<Ra6p`B&.";
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("rw<Ra6p`B&.", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("rw<Ra6p`B&.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.setRangeDescription(string0);
      assertEquals("rw<Ra6p`B&.", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("rw<Ra6p`B&.", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
  }
}
