/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:30:44 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Event;
import java.awt.GridBagConstraints;
import java.awt.geom.Rectangle2D;
import java.awt.image.ImageObserver;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day1 = (Day)timeSeries0.getNextTimePeriod();
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      
      timeSeries0.add((RegularTimePeriod) day1, (double) int0);
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-166536318), int1);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertNotSame(day0, day1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals(1771378901, int1);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-235124495), int0);
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "jrVx";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, double0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      
      long long0 = timeSeries0.getMaximumItemAge();
      //  // Unstable assertion: assertEquals(9223372036854775807L, long0);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) long0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem1);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "jrVx";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, double0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test(timeout = 4000)
  public void test05() {}
//   @Test(timeout = 4000)
//   public void test05()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       String string0 = "The 'data' array must have length == 2.";
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
//       assertNotNull(timeSeries1);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertTrue(timeSeries0.equals((Object)timeSeries1));
//       assertTrue(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//       
//       timeSeries0.setDomainDescription(string0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("The 'data' array must have length == 2.", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries0, timeSeries1);
//       
//       boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
//       assertFalse(boolean0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("The 'data' array must have length == 2.", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertNotSame(timeSeries0, timeSeries1);
//       assertNotSame(timeSeries1, timeSeries0);
//   }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      Day day1 = (Day)timeSeries0.getNextTimePeriod();
      //  // Unstable assertion: assertNotNull(day1);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day1);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = ">]o IQ ";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Month month0 = new Month();
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals(1393631998848L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212798849L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      
      Month month1 = (Month)month0.next();
      //  // Unstable assertion: assertNotNull(month1);
      //  // Unstable assertion: assertEquals(1393631998848L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212798849L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632000000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3, month1.getMonth());
      //  // Unstable assertion: assertEquals(24171L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1396310399999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1394971199999L, month1.getMiddleMillisecond());
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertNotSame(month1, month0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month1, (RegularTimePeriod) month0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = (-831L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getSerialIndex());
      
      String string0 = null;
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getSerialIndex());
      
      int int0 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-1552657834), int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getSerialIndex());
      
      MockDate mockDate0 = new MockDate((long) int0);
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Sun Dec 14 00:42:22 GMT 1969", mockDate0.toString());
      
      Class<RegularTimePeriod> class1 = RegularTimePeriod.class;
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("$Q9wKH&}*", zoneInfo0.getID());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class1, (Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      //  // Unstable assertion: assertEquals("$Q9wKH&}*", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals((-831L), fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Sun Dec 14 00:42:22 GMT 1969", mockDate0.toString());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ") no> re6coised.";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = 15;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotNull(timeSeries1);
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertNotNull(month0);
      //  // Unstable assertion: assertEquals(1391212798849L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631998848L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422398848L, month0.getMiddleMillisecond());
      
      String string0 = null;
      Class<Week> class0 = Week.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1391212798849L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393631998848L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422398848L, month0.getMiddleMillisecond());
      
      int int0 = 0;
      int int1 = (-3137);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleDateFormat simpleDateFormat0 = new SimpleDateFormat();
      //  // Unstable assertion: assertNotNull(simpleDateFormat0);
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      
      Date date0 = simpleDateFormat0.get2DigitYearStart();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 16:30:36 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("$Q9wKH&}*", zoneInfo0.getID());
      
      Second second0 = new Second(date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 16:30:36 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("$Q9wKH&}*", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals((-1106292564151L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(37, second0.getSecond());
      //  // Unstable assertion: assertEquals(1102869037L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106292563152L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106292563652L), second0.getMiddleMillisecond());
      
      Class<Second> class0 = Second.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Tue Dec 11 16:30:36 GMT 1934", date0.toString());
      //  // Unstable assertion: assertEquals("$Q9wKH&}*", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(true, simpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toPattern());
      //  // Unstable assertion: assertEquals("dd/MM/yy HH:mm", simpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals((-1106292564151L), second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(37, second0.getSecond());
      //  // Unstable assertion: assertEquals(1102869037L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals((-1106292563152L), second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals((-1106292563652L), second0.getMiddleMillisecond());
      
      int int0 = (-3856);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = ImageObserver.HEIGHT;
      assertEquals(2, int0);
      
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int1 = 1014;
      assertFalse(int1 == int0);
      
      int int2 = 274;
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try {
        timeSeries0.delete(int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "jrVx";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      
      double double0 = 1.5;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, double0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) minute0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test15() {}
//   @Test(timeout = 4000)
//   public void test15()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       long long0 = fixedMillisecond0.getSerialIndex();
//       assertEquals(1392409281320L, long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       timeSeries0.clear();
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//   }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertEquals("ToolTipText", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.clear();
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      long long0 = fixedMillisecond0.getSerialIndex();
      //  // Unstable assertion: assertEquals(1392409281320L, long0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      //  // Unstable assertion: assertEquals(300, (int)integer0);
      
      boolean boolean0 = timeSeries0.equals((Object) integer0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertEquals("ToolTipText", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = 0;
      Week week0 = new Week(int0, int0);
      assertNotNull(week0);
      assertEquals(0, week0.getYearValue());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(0, week0.getYearValue());
      assertEquals((-62168256000000L), week0.getFirstMillisecond());
      assertEquals((-62167953600001L), week0.getMiddleMillisecond());
      assertEquals(0, week0.getWeek());
      assertEquals(0L, week0.getSerialIndex());
      assertEquals((-62167651200001L), week0.getLastMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
      //  // Unstable assertion: assertNotNull(fixedMillisecond0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      long long0 = fixedMillisecond0.getSerialIndex();
      //  // Unstable assertion: assertEquals(1392409281320L, long0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems(long0, boolean0);
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = JComponent.TOOL_TIP_TEXT_KEY;
      assertEquals("ToolTipText", string0);
      assertNotNull(string0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = 0;
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = SwingConstants.NORTH_WEST;
      //  // Unstable assertion: assertEquals(8, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = ImageObserver.WIDTH;
      assertEquals(1, int0);
      
      String string0 = "}Y\\dF\\4=sX";
      Class<Month> class0 = Month.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("}Y\\dF\\4=sX", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("}Y\\dF\\4=sX", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = SwingConstants.NORTH_WEST;
      //  // Unstable assertion: assertEquals(8, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      
      TimeSeries timeSeries1 = new TimeSeries((Comparable) minute0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      TimeSeries timeSeries2 = timeSeries0.addAndOrUpdate(timeSeries1);
      //  // Unstable assertion: assertNotNull(timeSeries2);
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = Event.BACK_SPACE;
      //  // Unstable assertion: assertEquals(8, int0);
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test25() {}
//   @Test(timeout = 4000)
//   public void test25()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       long long0 = fixedMillisecond0.getSerialIndex();
//       assertEquals(1392409281320L, long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       
//       timeSeries0.update((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//   }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = ") no> re6coised.";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = 15;
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) day0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (double) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      //  // Unstable assertion: assertEquals(0, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Year year0 = new Year();
      //  // Unstable assertion: assertNotNull(year0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302398848L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534398849L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070398848L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1404302398848L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534398849L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1420070398848L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Class<Second> class0 = Second.class;
      long long0 = (-4L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-4L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-4L), fixedMillisecond0.getSerialIndex());
      assertEquals((-4L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-4L), fixedMillisecond0.getFirstMillisecond());
      
      String string0 = "I";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("I", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("I", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
      assertNull(number0);
      assertEquals((-4L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-4L), fixedMillisecond0.getSerialIndex());
      assertEquals((-4L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-4L), fixedMillisecond0.getFirstMillisecond());
      assertEquals("I", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("I", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "jrEx";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("jrEx", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("jrEx", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      
      Hour hour0 = Hour.parseHour(string0);
      assertNull(hour0);
      
      // Undeclared exception!
      try {
        int int0 = timeSeries0.getIndex((RegularTimePeriod) hour0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      int int0 = Rectangle2D.OUT_RIGHT;
      //  // Unstable assertion: assertEquals(4, int0);
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries1.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      
      Class<Minute> class0 = Minute.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = Rectangle2D.OUT_RIGHT;
      //  // Unstable assertion: assertEquals(4, int0);
      
      Minute minute0 = second0.getMinute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409319999L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409260000L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertNotNull(collection0);
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33() {}
//   @Test(timeout = 4000)
//   public void test33()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       long long0 = fixedMillisecond0.getSerialIndex();
//       assertEquals(1392409281320L, long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       Collection collection0 = timeSeries0.getTimePeriods();
//       assertNotNull(collection0);
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//   }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (Number) int0, boolean0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) day0);
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "jrVx";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      
      Second second0 = new Second();
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) second0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("jrVx", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1392409280849L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(22, second0.getSecond());
      //  // Unstable assertion: assertEquals(3601570882L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409281348L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281848L, second0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "R";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      
      long long0 = (-9L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) day0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
      
      int int0 = GridBagConstraints.FIRST_LINE_END;
      //  // Unstable assertion: assertEquals(24, int0);
      
      timeSeries0.setMaximumItemAge((long) int0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(24L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1392379198848L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392335998849L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422398848L, day0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = SwingConstants.NORTH_WEST;
      //  // Unstable assertion: assertEquals(8, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int1 = 0;
      //  // Unstable assertion: assertFalse(int1 == int0);
      
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int1);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      
      timeSeries0.setMaximumItemCount(int1);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertNotNull(minute0);
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409318848L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409288848L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409258849L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      
      int int0 = (-2972);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test40() {}
//   @Test(timeout = 4000)
//   public void test40()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       long long0 = fixedMillisecond0.getSerialIndex();
//       assertEquals(1392409281320L, long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       
//       Long long1 = (Long)timeSeries0.getValue((RegularTimePeriod) fixedMillisecond0);
//       assertEquals(1392409281320L, (long)long1);
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//   }

  @Test(timeout = 4000)
  public void test41() {}
//   @Test(timeout = 4000)
//   public void test41()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       
//       List list0 = timeSeries0.getItems();
//       assertNotNull(list0);
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(true, list0.isEmpty());
//       assertEquals(0, list0.size());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//   }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Class<Second> class0 = Second.class;
      long long0 = (-4L);
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertNotNull(fixedMillisecond0);
      assertEquals((-4L), fixedMillisecond0.getSerialIndex());
      assertEquals((-4L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-4L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-4L), fixedMillisecond0.getLastMillisecond());
      
      String string0 = "I";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("I", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("I", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) fixedMillisecond0, (Number) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.FixedMillisecond, but the TimeSeries is expecting an instance of org.jfree.data.time.Second.
         //
      }
  }

  @Test(timeout = 4000)
  public void test43() {}
//   @Test(timeout = 4000)
//   public void test43()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       long long0 = fixedMillisecond0.getSerialIndex();
//       assertEquals(1392409281320L, long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       
//       int int0 = 22;
//       // Undeclared exception!
//       try {
//         timeSeries0.update(int0, (Number) long0);
//         fail("Expecting exception: IndexOutOfBoundsException");
//       
//       } catch(IndexOutOfBoundsException e) {
//          //
//          // Index: 22, Size: 0
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test44() {}
//   @Test(timeout = 4000)
//   public void test44()  throws Throwable  {
//       FixedMillisecond fixedMillisecond0 = new FixedMillisecond();
//       assertNotNull(fixedMillisecond0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       long long0 = fixedMillisecond0.getSerialIndex();
//       assertEquals(1392409281320L, long0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       
//       TimeSeries timeSeries0 = new TimeSeries((Comparable) fixedMillisecond0);
//       assertNotNull(timeSeries0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(true, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals(0, timeSeries0.getItemCount());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       
//       TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
//       assertNull(timeSeriesDataItem0);
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       
//       TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) fixedMillisecond0, (RegularTimePeriod) fixedMillisecond0);
//       assertNotNull(timeSeries1);
//       assertEquals(true, timeSeries1.getNotify());
//       assertEquals(2147483647, timeSeries1.getMaximumItemCount());
//       assertEquals("Time", timeSeries1.getDomainDescription());
//       assertNull(timeSeries1.getDescription());
//       assertEquals(true, timeSeries1.isEmpty());
//       assertEquals(0, timeSeries1.getItemCount());
//       assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
//       assertEquals("Value", timeSeries1.getRangeDescription());
//       assertEquals(1392409281320L, fixedMillisecond0.getSerialIndex());
//       assertEquals(1392409281320L, fixedMillisecond0.getFirstMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getLastMillisecond());
//       assertEquals(1392409281320L, fixedMillisecond0.getMiddleMillisecond());
//       assertEquals(false, timeSeries0.isEmpty());
//       assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       assertEquals(true, timeSeries0.getNotify());
//       assertEquals("Value", timeSeries0.getRangeDescription());
//       assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       assertEquals("Time", timeSeries0.getDomainDescription());
//       assertNull(timeSeries0.getDescription());
//       assertEquals(1, timeSeries0.getItemCount());
//       assertFalse(timeSeries1.equals((Object)timeSeries0));
//       assertFalse(timeSeries0.equals((Object)timeSeries1));
//       assertNotSame(timeSeries1, timeSeries0);
//       assertNotSame(timeSeries0, timeSeries1);
//   }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "R";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.setRangeDescription(string0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("R", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
  }
}
