/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:20:05 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Adjustable;
import java.awt.event.KeyEvent;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.TimeZone;
import javax.swing.SpinnerDateModel;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.FixedMillisecond;
import org.jfree.data.time.Hour;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Week;
import org.jfree.data.time.Year;
import org.jfree.data.xy.XYDataItem;
import org.jfree.data.xy.XYDatasetTableModel;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 59;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      Month month1 = (Month)month0.previous();
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1389873599999L, month1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeriesDataItem timeSeriesDataItem1 = timeSeries0.addOrUpdate((RegularTimePeriod) month1, (double) int0);
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1389873599999L, month1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem1);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(928236151, int1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      byte byte0 = (byte) (-6);
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) byte0, boolean0);
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2051457020, int1);
  }

  //@Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      assertEquals(0, int0);
      
      String string0 = null;
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals((-957834513), int1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      byte byte0 = (byte)15;
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) byte0, boolean0);
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      boolean boolean1 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 59;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertFalse(boolean0);
  }

  //@Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = KeyEvent.VK_ALT;
      assertEquals(18, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      Week week0 = new Week(int0, int0);
      assertEquals(18, week0.getYearValue());
      assertEquals((-61588857600000L), week0.getFirstMillisecond());
      assertEquals((-61588555200001L), week0.getMiddleMillisecond());
      assertEquals((-61588252800001L), week0.getLastMillisecond());
      assertEquals(972L, week0.getSerialIndex());
      assertEquals(18, week0.getWeek());
      assertNotNull(week0);
      
      boolean boolean0 = timeSeries0.equals((Object) week0);
      assertEquals(18, week0.getYearValue());
      assertEquals((-61588857600000L), week0.getFirstMillisecond());
      assertEquals((-61588555200001L), week0.getMiddleMillisecond());
      assertEquals((-61588252800001L), week0.getLastMillisecond());
      assertEquals(972L, week0.getSerialIndex());
      assertEquals(18, week0.getWeek());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      byte byte0 = (byte) (-6);
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) byte0, boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) month0);
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      timeSeriesDataItem0.setValue((Number) byte0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      boolean boolean1 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 59;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      Month month1 = (Month)month0.previous();
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1389873599999L, month1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(month1);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month1, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(month1, month0);
      //  // Unstable assertion: assertNotSame(month0, month1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(month1.equals((Object)month0));
      //  // Unstable assertion: assertFalse(month0.equals((Object)month1));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1388534400000L, month1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1391212799999L, month1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month1.getYearValue());
      //  // Unstable assertion: assertEquals(1, month1.getMonth());
      //  // Unstable assertion: assertEquals(1389873599999L, month1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(24169L, month1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test08() {}
//   @Test(timeout = 4000)
//   public void test08()  throws Throwable  {
//       int int0 = 2968;
//       ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
//       //  // Unstable assertion: assertEquals("\\am$xl=R)^", zoneInfo0.getID());
//       //  // Unstable assertion: assertNotNull(zoneInfo0);
//       
//       DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertEquals("\\am$xl=R)^", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
//       //  // Unstable assertion: assertEquals(2967, dynamicTimeSeriesCollection0.getNewestIndex());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
//       //  // Unstable assertion: assertNotNull(dynamicTimeSeriesCollection0);
//       
//       int int1 = 41;
//       Comparable comparable0 = dynamicTimeSeriesCollection0.getSeriesKey(int1);
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertEquals("\\am$xl=R)^", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
//       //  // Unstable assertion: assertEquals(2967, dynamicTimeSeriesCollection0.getNewestIndex());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
//       //  // Unstable assertion: assertNotNull(comparable0);
//       //  // Unstable assertion: assertEquals("", comparable0);
//       
//       TimeSeries timeSeries0 = new TimeSeries(comparable0);
//       //  // Unstable assertion: assertFalse(int0 == int1);
//       //  // Unstable assertion: assertFalse(int1 == int0);
//       //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
//       //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
//       //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
//       //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
//       //  // Unstable assertion: assertNull(timeSeries0.getDescription());
//       //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
//       //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
//       //  // Unstable assertion: assertEquals("\\am$xl=R)^", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
//       //  // Unstable assertion: assertEquals(2967, dynamicTimeSeriesCollection0.getNewestIndex());
//       //  // Unstable assertion: assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
//       //  // Unstable assertion: assertNotNull(timeSeries0);
//       
//       Year year0 = new Year();
//       //  // Unstable assertion: assertEquals(1388534401130L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1420070401129L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1404302401129L, year0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(year0);
//       
//       MockDate mockDate0 = (MockDate)year0.getStart();
//       //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals(1388534401130L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1420070401129L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1404302401129L, year0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(mockDate0);
//       
//       Day day0 = new Day((Date) mockDate0, (TimeZone) zoneInfo0);
//       //  // Unstable assertion: assertEquals(41640L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1388620801129L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1388534401130L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1388577601129L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("\\am$xl=R)^", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(1388534401130L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1420070401129L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1404302401129L, year0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(day0);
//       
//       Day day1 = (Day)day0.next();
//       //  // Unstable assertion: assertNotSame(day0, day1);
//       //  // Unstable assertion: assertNotSame(day1, day0);
//       //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
//       //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
//       //  // Unstable assertion: assertEquals(41640L, day0.getSerialIndex());
//       //  // Unstable assertion: assertEquals(1, day0.getMonth());
//       //  // Unstable assertion: assertEquals(2014, day0.getYear());
//       //  // Unstable assertion: assertEquals(1388620801129L, day0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, day0.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1388534401130L, day0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1388577601129L, day0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("Wed Jan 01 00:00:01 GMT 2014", mockDate0.toString());
//       //  // Unstable assertion: assertEquals("\\am$xl=R)^", zoneInfo0.getID());
//       //  // Unstable assertion: assertEquals(1388663999999L, day1.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals(1388707199999L, day1.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(1, day1.getMonth());
//       //  // Unstable assertion: assertEquals(41641L, day1.getSerialIndex());
//       //  // Unstable assertion: assertEquals(2, day1.getDayOfMonth());
//       //  // Unstable assertion: assertEquals(1388620800000L, day1.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(2014, day1.getYear());
//       //  // Unstable assertion: assertEquals(1388534401130L, year0.getFirstMillisecond());
//       //  // Unstable assertion: assertEquals(1420070401129L, year0.getLastMillisecond());
//       //  // Unstable assertion: assertEquals(2014, year0.getYear());
//       //  // Unstable assertion: assertEquals(1404302401129L, year0.getMiddleMillisecond());
//       //  // Unstable assertion: assertEquals("2014", year0.toString());
//       //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
//       //  // Unstable assertion: assertNotNull(day1);
//       
//       // Undeclared exception!
//       try {
//         TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
//        //  fail("Expecting exception: IllegalArgumentException");
//        // Unstable assertion
//       } catch(IllegalArgumentException e) {
//          //
//          // Requires start on or before end.
//          //
//       }
//   }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      Month month1 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'end' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      Class<Quarter> class0 = Quarter.class;
      RegularTimePeriod regularTimePeriod0 = null;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = 1872L;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertNotNull(timeSeries0);
      
      int int0 = (-164);
      int int1 = 0;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  //@Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Class<FixedMillisecond> class0 = FixedMillisecond.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, (Class) class0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      int int0 = (-454);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      int int1 = 0;
      // Undeclared exception!
      try {
        timeSeries0.delete(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = Adjustable.HORIZONTAL;
      //  // Unstable assertion: assertEquals(0, int0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) int0, (Number) int0);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      //  // Unstable assertion: assertNotNull(xYDataItem0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) xYDataItem0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409291129L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409321129L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409261130L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertNotNull(minute0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409291129L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409321129L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409261130L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.delete((RegularTimePeriod) minute0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409291129L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409321129L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409261130L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409281629L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281130L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282129L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(second0);
      
      Class<XYDatasetTableModel> class0 = XYDatasetTableModel.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) second0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392409281629L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281130L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282129L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      timeSeries0.delete((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392409281629L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392409281130L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409282129L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = KeyEvent.VK_ALT;
      //  // Unstable assertion: assertEquals(18, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      timeSeries0.clear();
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      timeSeries0.clear();
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 965;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(1392409281130L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282129L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281629L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) second0, (Number) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392409281130L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282129L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281629L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 59;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 383;
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertEquals(1392422401129L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310401129L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534401130L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(quarter0);
      
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = false;
      Year year0 = quarter0.getYear();
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310401129L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534401130L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(year0);
      
      timeSeries0.add((RegularTimePeriod) year0, (Number) int0);
      //  // Unstable assertion: assertEquals(2014, year0.getYear());
      //  // Unstable assertion: assertEquals("2014", year0.toString());
      //  // Unstable assertion: assertEquals(1388534400000L, year0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1404302399999L, year0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1420070399999L, year0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014L, year0.getSerialIndex());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1392422401129L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1396310401129L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534401130L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 965;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = KeyEvent.VK_ALT;
      //  // Unstable assertion: assertEquals(18, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = true;
      long long0 = 0L;
      timeSeries0.setMaximumItemAge(long0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day1 = (Day)day0.next();
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day1);
      
      timeSeries0.add((RegularTimePeriod) day1, (double) int0, boolean0);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(0L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = (-14L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 3L;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNotNull(timeSeries0);
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, (double) long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      byte byte0 = (byte) (-6);
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) byte0, boolean0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNotNull(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      byte byte0 = (byte) (-6);
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (double) byte0, boolean0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      int int1 = SwingConstants.NORTH_EAST;
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(2, int1);
      
      timeSeries0.update((RegularTimePeriod) month0, (Number) int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(month0);
      
      int int0 = SwingConstants.NORTH_EAST;
      //  // Unstable assertion: assertEquals(2, int0);
      
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) month0, (Number) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = (-14L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int0 = 0;
      timeSeries0.setMaximumItemCount(int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (double) long0, boolean0);
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = KeyEvent.VK_ALT;
      //  // Unstable assertion: assertEquals(18, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = true;
      Day day1 = (Day)day0.next();
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(day1);
      
      timeSeries0.add((RegularTimePeriod) day1, (double) int0, boolean0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertNotSame(day1, day0);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertFalse(day1.equals((Object)day0));
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392422400000L, day1.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392465599999L, day1.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392508799999L, day1.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day1.getMonth());
      //  // Unstable assertion: assertEquals(41685L, day1.getSerialIndex());
      //  // Unstable assertion: assertEquals(15, day1.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day1.getYear());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      //  // Unstable assertion: assertNotSame(day0, day1);
      //  // Unstable assertion: assertFalse(day0.equals((Object)day1));
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = KeyEvent.VK_ALT;
      //  // Unstable assertion: assertEquals(18, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Hour hour0 = new Hour();
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertNotNull(hour0);
      
      Day day0 = hour0.getDay();
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      //  // Unstable assertion: assertNotNull(day0);
      
      boolean boolean0 = true;
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(14, hour0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392408001130L, hour0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, hour0.getYear());
      //  // Unstable assertion: assertEquals(2, hour0.getMonth());
      //  // Unstable assertion: assertEquals(1392411601129L, hour0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409801129L, hour0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1000436L, hour0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, hour0.getHour());
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14--2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = SwingConstants.CENTER;
      //  // Unstable assertion: assertEquals(0, int0);
      
      String string0 = null;
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Week week0 = new Week();
      //  // Unstable assertion: assertEquals(1392292801129L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595201129L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401130L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(week0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) week0, (double) int0);
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1392292801129L, week0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392595201129L, week0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, week0.getYearValue());
      //  // Unstable assertion: assertEquals(106749L, week0.getSerialIndex());
      //  // Unstable assertion: assertEquals(7, week0.getWeek());
      //  // Unstable assertion: assertEquals(1391990401130L, week0.getFirstMillisecond());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 965;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Second second0 = new Second();
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281629L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282129L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281130L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertNotNull(second0);
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals(20, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392409281629L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601570880L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392409282129L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392409281130L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertEquals(1392409291129L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409261130L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409321129L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(minute0);
      
      String string0 = "0YvF7t";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) minute0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1392409291129L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409261130L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409321129L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Minute minute1 = Minute.parseMinute(string0);
      //  // Unstable assertion: assertNull(minute1);
      
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) minute1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 59;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) month0, (double) int0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries2);
      
      Collection collection0 = timeSeries2.getTimePeriodsUniqueToOtherSeries(timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries2, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries2);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries2.equals((Object)timeSeries1));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries2));
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries2));
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals(0, timeSeries2.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries2.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries2.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries2.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries2.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  //@Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = (-2);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(359697985, int1);
      
      SpinnerDateModel spinnerDateModel0 = new SpinnerDateModel();
      //  // Unstable assertion: assertNotNull(spinnerDateModel0);
      
      Date date0 = spinnerDateModel0.getDate();
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      boolean boolean0 = false;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Day day0 = (Day)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(12, day0.getMonth());
      //  // Unstable assertion: assertEquals(1418256000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1418299199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1418342399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(11, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41984L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(12, day0.getMonth());
      //  // Unstable assertion: assertEquals(1418256000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1418299199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1418342399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(11, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41984L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      
      timeSeries0.add(timeSeriesDataItem0, boolean0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(12, day0.getMonth());
      //  // Unstable assertion: assertEquals(1418256000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1418299199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1418342399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(11, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(41984L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  //@Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = (-2);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(359697985, int1);
      
      SpinnerDateModel spinnerDateModel0 = new SpinnerDateModel();
      //  // Unstable assertion: assertNotNull(spinnerDateModel0);
      
      Date date0 = spinnerDateModel0.getDate();
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertNotNull(date0);
      
      boolean boolean0 = false;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(int0, int0, int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      
      ZoneInfo zoneInfo0 = (ZoneInfo)mockGregorianCalendar0.getTimeZone();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      
      Day day0 = (Day)RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(11, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(12, day0.getMonth());
      //  // Unstable assertion: assertEquals(1418299199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1418256000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1418342399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41984L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotNull(day0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = new TimeSeriesDataItem((RegularTimePeriod) day0, (Number) int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(11, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(12, day0.getMonth());
      //  // Unstable assertion: assertEquals(1418299199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1418256000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1418342399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41984L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotNull(timeSeriesDataItem0);
      
      timeSeries0.add(timeSeriesDataItem0, boolean0);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("GMT", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Thu Dec 11 16:19:56 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals(11, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(12, day0.getMonth());
      //  // Unstable assertion: assertEquals(1418299199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1418256000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1418342399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(41984L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=?,YEAR=-2,MONTH=-2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = Adjustable.HORIZONTAL;
      //  // Unstable assertion: assertEquals(0, int0);
      
      XYDataItem xYDataItem0 = new XYDataItem((Number) int0, (Number) int0);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      //  // Unstable assertion: assertNotNull(xYDataItem0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) xYDataItem0, (Class) class0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Minute minute0 = new Minute();
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409261130L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409291129L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409321129L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertNotNull(minute0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) minute0);
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(60026181L, minute0.getSerialIndex());
      //  // Unstable assertion: assertEquals(21, minute0.getMinute());
      //  // Unstable assertion: assertEquals(1392409261130L, minute0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392409291129L, minute0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(20, minute0.getHourValue());
      //  // Unstable assertion: assertEquals(1392409321129L, minute0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getXValue(), 0.01D);
      //  // Unstable assertion: assertEquals(0.0, xYDataItem0.getYValue(), 0.01D);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = (-1521);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge((long) int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = (-14L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      int int0 = 0;
      FixedMillisecond fixedMillisecond0 = new FixedMillisecond(long0);
      assertEquals((-14L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-14L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-14L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-14L), fixedMillisecond0.getSerialIndex());
      assertNotNull(fixedMillisecond0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) fixedMillisecond0, (Number) long0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals((-14L), fixedMillisecond0.getLastMillisecond());
      assertEquals((-14L), fixedMillisecond0.getMiddleMillisecond());
      assertEquals((-14L), fixedMillisecond0.getFirstMillisecond());
      assertEquals((-14L), fixedMillisecond0.getSerialIndex());
      assertNull(timeSeriesDataItem0);
      
      timeSeries0.setMaximumItemCount(int0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-536);
      String string0 = null;
      Class<String> class0 = String.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNull(timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = KeyEvent.VK_ALT;
      //  // Unstable assertion: assertEquals(18, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      boolean boolean0 = false;
      Day day0 = new Day();
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertNotNull(day0);
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) day0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422401129L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392336001130L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379201129L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(18.0, (double)double0, 0.01D);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 383;
      Quarter quarter0 = new Quarter();
      //  // Unstable assertion: assertEquals(1, quarter0.getQuarter());
      //  // Unstable assertion: assertEquals(1396310401129L, quarter0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1388534401130L, quarter0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, quarter0.getYearValue());
      //  // Unstable assertion: assertEquals(1392422401129L, quarter0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(8057L, quarter0.getSerialIndex());
      //  // Unstable assertion: assertNotNull(quarter0);
      
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) quarter0, (double) int0);
       //  fail("Expecting exception: RuntimeException");
       // Unstable assertion
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Quarter, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = 965;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNotNull(timeSeries0);
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertNotNull(timeSeries1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      List list0 = timeSeries0.getItems();
      assertEquals(0, list0.size());
      assertEquals(true, list0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-2);
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(timeSeries0);
      
      String string0 = timeSeries0.getRangeDescription();
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNotNull(string0);
      assertEquals("Value", string0);
      
      timeSeries0.setDomainDescription(string0);
      assertEquals("Value", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 965;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertNotNull(timeSeries0);
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 965, Size: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-1544);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries0);
      
      Month month0 = new Month();
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertNotNull(month0);
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertNotNull(timeSeries1);
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertTrue(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertTrue(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals("Time", timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Value", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(1393632001129L, month0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1391212801130L, month0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(2014, month0.getYearValue());
      //  // Unstable assertion: assertEquals(24170L, month0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422401129L, month0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2, month0.getMonth());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = (-1555);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNotNull(timeSeries0);
      
      String string0 = "Z;\"qTO@";
      timeSeries0.setRangeDescription(string0);
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Z;\"qTO@", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }
}
