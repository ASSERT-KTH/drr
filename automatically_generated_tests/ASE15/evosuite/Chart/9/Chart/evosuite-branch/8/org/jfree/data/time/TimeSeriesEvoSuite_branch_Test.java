/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 17:02:48 GMT 2014
 */

package org.jfree.data.time;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.color.ICC_Profile;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import javax.swing.Box;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;

import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Day;
import org.jfree.data.time.Millisecond;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Month;
import org.jfree.data.time.Quarter;
import org.jfree.data.time.RegularTimePeriod;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesDataItem;
import org.jfree.data.time.Year;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

 
public class TimeSeriesEvoSuite_branch_Test   {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = (-2899);
      String string0 = null;
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      MockDate mockDate0 = (MockDate)day0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      
      Millisecond millisecond0 = (Millisecond)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601583999999L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(999L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) int0);
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601583999999L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(999L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      int int1 = timeSeries0.hashCode();
      //  // Unstable assertion: assertEquals((-1517068856), int1);
      //  // Unstable assertion: assertFalse(int0 == int1);
      //  // Unstable assertion: assertFalse(int1 == int0);
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-2899);
      String string0 = null;
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int1 = timeSeries0.hashCode();
      assertEquals((-957834513), int1);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertNull(timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries1.setMaximumItemCount(int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      
      String string0 = "UlI[1,MDt";
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      assertNotNull(timeSeries0);
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      Class<String> class0 = String.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) quarter0, string0, string0, (Class) class0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("UlI[1,MDt", timeSeries1.getDomainDescription());
      assertEquals("UlI[1,MDt", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      
      boolean boolean0 = timeSeries0.equals((Object) timeSeries1);
      assertFalse(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals("UlI[1,MDt", timeSeries1.getDomainDescription());
      assertEquals("UlI[1,MDt", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 532;
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      
      TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertFalse(boolean0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)day0.getStart();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      int int1 = (-1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      assertFalse(int2 == int0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int2, int2, int2, int2, int2, int1, int1, int2, int0);
      assertNotNull(simpleTimeZone0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("FW H%9UwN2Ev.", simpleTimeZone0.getID());
      assertEquals(-1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=FW H%9UwN2Ev.,offset=-1,dstSavings=1178815570,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=4,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Day day1 = (Day)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertNotNull(day1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(2, day1.getMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(2014, day1.getYear());
      assertEquals(1392249600001L, day1.getFirstMillisecond());
      assertEquals(1392292800000L, day1.getMiddleMillisecond());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(1392336000000L, day1.getLastMillisecond());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("FW H%9UwN2Ev.", simpleTimeZone0.getID());
      assertEquals(-1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=FW H%9UwN2Ev.,offset=-1,dstSavings=1178815570,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=4,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day1, (RegularTimePeriod) day0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(false, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(2, day1.getMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(2014, day1.getYear());
      assertEquals(1392249600001L, day1.getFirstMillisecond());
      assertEquals(1392292800000L, day1.getMiddleMillisecond());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(1392336000000L, day1.getLastMillisecond());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("FW H%9UwN2Ev.", simpleTimeZone0.getID());
      assertEquals(-1, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=FW H%9UwN2Ev.,offset=-1,dstSavings=1178815570,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=4,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) month0, (RegularTimePeriod) month0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries1.isEmpty());
      assertNull(timeSeries1.getDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = (-1276);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      
      Millisecond millisecond0 = new Millisecond();
      assertNotNull(millisecond0);
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      Millisecond millisecond1 = (Millisecond)millisecond0.next();
      assertNotSame(millisecond1, millisecond0);
      assertNotSame(millisecond0, millisecond1);
      assertNotNull(millisecond1);
      assertFalse(millisecond1.equals((Object)millisecond0));
      assertFalse(millisecond0.equals((Object)millisecond1));
      assertEquals(1392409281321L, millisecond1.getFirstMillisecond());
      assertEquals(321L, millisecond1.getMillisecond());
      assertEquals(1392409281321L, millisecond1.getMiddleMillisecond());
      assertEquals(1392409281321L, millisecond1.getLastMillisecond());
      assertEquals(3601570881321L, millisecond1.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getFirstMillisecond());
      assertEquals(3601570881320L, millisecond0.getSerialIndex());
      assertEquals(1392409281320L, millisecond0.getLastMillisecond());
      assertEquals(1392409281320L, millisecond0.getMiddleMillisecond());
      assertEquals(320L, millisecond0.getMillisecond());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) millisecond1, (RegularTimePeriod) millisecond0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start on or before end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = KeyEvent.VK_ROMAN_CHARACTERS;
      assertEquals(245, int0);
      
      String string0 = "_Hu";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("_Hu", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("_Hu", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      RegularTimePeriod regularTimePeriod0 = null;
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(regularTimePeriod0, regularTimePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'start' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy((RegularTimePeriod) day0, (RegularTimePeriod) day0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3;
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      
      int int1 = (-12);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      int int1 = (-418);
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.createCopy(int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start >= 0.
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) quarter0);
      assertNotNull(timeSeries0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      int int0 = (-489);
      int int1 = timeSeries0.hashCode();
      assertEquals((-235125336), int1);
      assertFalse(int1 == int0);
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1, quarter0.getQuarter());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      // Undeclared exception!
      try {
        timeSeries0.delete(int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires start <= end.
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = (-3882L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      
      Day day0 = minute0.getDay();
      assertNotNull(day0);
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day0, (Number) long0, boolean0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      timeSeries0.delete((RegularTimePeriod) day0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(21, minute0.getMinute());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = null;
      String string1 = "Um>Ad";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1, string1, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      
      MockDate mockDate0 = (MockDate)day0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(1392422399999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601583999L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      timeSeries0.delete((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals(1392422399999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601583999L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      String string0 = "d/@\\(x=&[ZzTfs";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      double double0 = 0.0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, double0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.clear();
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "]l;VXEwQhlEg~^R}";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.clear();
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = (-2899);
      String string0 = null;
      String string1 = "Um>Ad";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string1, string1, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries0.getDomainDescription());
      
      boolean boolean0 = timeSeries0.getNotify();
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries0.getDomainDescription());
      
      Class<Millisecond> class1 = Millisecond.class;
      TimeSeries timeSeries1 = new TimeSeries((Comparable) int0, string0, string1, (Class) class1);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotNull(timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertNull(timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      MockDate mockDate0 = (MockDate)day0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      
      Millisecond millisecond0 = (Millisecond)RegularTimePeriod.createInstance((Class) class1, (Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(999L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601583999999L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getFirstMillisecond());
      
      timeSeries1.add((RegularTimePeriod) millisecond0, (double) int0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertNull(timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(1, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(false, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(999L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(3601583999999L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getFirstMillisecond());
      
      timeSeries1.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertNotSame(timeSeries1, timeSeries0);
      //  // Unstable assertion: assertNotSame(timeSeries0, timeSeries1);
      //  // Unstable assertion: assertFalse(timeSeries1.equals((Object)timeSeries0));
      //  // Unstable assertion: assertFalse(timeSeries0.equals((Object)timeSeries1));
      //  // Unstable assertion: assertNull(timeSeries1.getDomainDescription());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries1.getRangeDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries1.getNotify());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(0, timeSeries1.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries1.getDescription());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries1.isEmpty());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Um>Ad", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = ImageObserver.ABORT;
      assertEquals(128, int0);
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      Quarter quarter0 = new Quarter();
      assertNotNull(quarter0);
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      
      Year year0 = quarter0.getYear();
      assertNotNull(year0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) year0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      assertEquals("2014", year0.toString());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1388534400000L, quarter0.getFirstMillisecond());
      assertEquals(1396310399999L, quarter0.getLastMillisecond());
      assertEquals(2014, quarter0.getYearValue());
      assertEquals(1392422399999L, quarter0.getMiddleMillisecond());
      assertEquals(8057L, quarter0.getSerialIndex());
      assertEquals(1, quarter0.getQuarter());
      
      boolean boolean0 = true;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(1, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      
      String string0 = "]l;VXEwQhlEg~^R}";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = 0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      //  // Unstable assertion: assertNull(timeSeriesDataItem0);
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems((long) int0, boolean0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = (-3882L);
      TimeSeries timeSeries0 = new TimeSeries((Comparable) long0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      boolean boolean0 = false;
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      timeSeries0.removeAgedItems(long0, boolean0);
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      
      String string1 = timeSeries0.getDomainDescription();
      assertEquals("Time", string1);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      MockDate mockDate0 = (MockDate)day0.getStart();
      assertNotNull(mockDate0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNotSame(string0, string1);
      assertNull(timeSeriesDataItem0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      
      int int1 = 0;
      assertFalse(int1 == int0);
      
      timeSeries0.setMaximumItemAge((long) int1);
      assertNotSame(string0, string1);
      assertFalse(int1 == int0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      
      int int2 = 1;
      assertFalse(int2 == int0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int0, string1, int1, int1, int1, int1, int1, int2, int2, int1, int2);
      assertNotSame(string1, string0);
      assertNotSame(string0, string1);
      assertNotNull(simpleTimeZone0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(1178815570, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Time", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Time,offset=1178815570,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=2,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      
      Day day1 = (Day)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertNotSame(string1, string0);
      assertNotSame(day0, day1);
      assertNotSame(string0, string1);
      assertNotSame(day1, day0);
      assertNotNull(day1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(day0.equals((Object)day1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(day1.equals((Object)day0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(1178815570, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Time", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Time,offset=1178815570,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=2,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1392280384430L, day1.getFirstMillisecond());
      assertEquals(1392366784429L, day1.getLastMillisecond());
      assertEquals(41697L, day1.getSerialIndex());
      assertEquals(2, day1.getMonth());
      assertEquals(2014, day1.getYear());
      assertEquals(27, day1.getDayOfMonth());
      assertEquals(1392323584429L, day1.getMiddleMillisecond());
      
      boolean boolean0 = false;
      timeSeries0.add((RegularTimePeriod) day1, (double) int2, boolean0);
      assertNotSame(string1, string0);
      assertNotSame(day0, day1);
      assertNotSame(string0, string1);
      assertNotSame(day1, day0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(day0.equals((Object)day1));
      assertFalse(string0.equals((Object)string1));
      assertFalse(day1.equals((Object)day0));
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(1178815570, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Time", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=Time,offset=1178815570,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=2,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(0L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(1392280384430L, day1.getFirstMillisecond());
      assertEquals(1392366784429L, day1.getLastMillisecond());
      assertEquals(41697L, day1.getSerialIndex());
      assertEquals(2, day1.getMonth());
      assertEquals(2014, day1.getYear());
      assertEquals(27, day1.getDayOfMonth());
      assertEquals(1392323584429L, day1.getMiddleMillisecond());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      timeSeries0.setMaximumItemCount(int0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Minute minute0 = new Minute();
      assertNotNull(minute0);
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) minute0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(1392409319999L, minute0.getLastMillisecond());
      assertEquals(1392409260000L, minute0.getFirstMillisecond());
      assertEquals(20, minute0.getHourValue());
      assertEquals(21, minute0.getMinute());
      assertEquals(60026181L, minute0.getSerialIndex());
      assertEquals(1392409289999L, minute0.getMiddleMillisecond());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "<)/&,,\\J";
      Class<Integer> class0 = Integer.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals("Time", timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals("Value", timeSeries0.getRangeDescription());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      
      Box box0 = Box.createHorizontalBox();
      //  // Unstable assertion: assertNotNull(box0);
      //  // Unstable assertion: assertEquals(false, box0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, box0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, box0.isEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, box0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, box0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, box0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isShowing());
      //  // Unstable assertion: assertEquals(false, box0.isLightweight());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(0, box0.countComponents());
      //  // Unstable assertion: assertEquals(false, box0.isValid());
      //  // Unstable assertion: assertEquals(false, box0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, box0.isVisible());
      //  // Unstable assertion: assertEquals(true, box0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isFontSet());
      //  // Unstable assertion: assertEquals(false, box0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(0, box0.getComponentCount());
      
      Locale locale0 = box0.getLocale();
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals(false, box0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, box0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, box0.isEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, box0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, box0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, box0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isShowing());
      //  // Unstable assertion: assertEquals(false, box0.isLightweight());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(0, box0.countComponents());
      //  // Unstable assertion: assertEquals(false, box0.isValid());
      //  // Unstable assertion: assertEquals(false, box0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, box0.isVisible());
      //  // Unstable assertion: assertEquals(true, box0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isFontSet());
      //  // Unstable assertion: assertEquals(false, box0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(0, box0.getComponentCount());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((TimeZone) zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"(\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(false, box0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, box0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, box0.isEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, box0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, box0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, box0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isShowing());
      //  // Unstable assertion: assertEquals(false, box0.isLightweight());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(0, box0.countComponents());
      //  // Unstable assertion: assertEquals(false, box0.isValid());
      //  // Unstable assertion: assertEquals(false, box0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, box0.isVisible());
      //  // Unstable assertion: assertEquals(true, box0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isFontSet());
      //  // Unstable assertion: assertEquals(false, box0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(0, box0.getComponentCount());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      
      Date date0 = mockGregorianCalendar0.getTime();
      //  // Unstable assertion: assertNotNull(date0);
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"(\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(false, box0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, box0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, box0.isEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, box0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, box0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, box0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isShowing());
      //  // Unstable assertion: assertEquals(false, box0.isLightweight());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(0, box0.countComponents());
      //  // Unstable assertion: assertEquals(false, box0.isValid());
      //  // Unstable assertion: assertEquals(false, box0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, box0.isVisible());
      //  // Unstable assertion: assertEquals(true, box0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isFontSet());
      //  // Unstable assertion: assertEquals(false, box0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(0, box0.getComponentCount());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      
      RegularTimePeriod regularTimePeriod0 = RegularTimePeriod.createInstance((Class) class0, date0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNull(regularTimePeriod0);
      //  // Unstable assertion: assertEquals(2, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"(\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=2,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertEquals(true, mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(4, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals(false, box0.isForegroundSet());
      //  // Unstable assertion: assertEquals(false, box0.isPreferredSizeSet());
      //  // Unstable assertion: assertEquals(true, box0.isEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isCursorSet());
      //  // Unstable assertion: assertEquals(false, box0.isFocusCycleRoot());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertEquals(false, box0.isDisplayable());
      //  // Unstable assertion: assertEquals(false, box0.isMinimumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isMaximumSizeSet());
      //  // Unstable assertion: assertEquals(false, box0.isShowing());
      //  // Unstable assertion: assertEquals(false, box0.isLightweight());
      //  // Unstable assertion: assertEquals(false, box0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(0, box0.countComponents());
      //  // Unstable assertion: assertEquals(false, box0.isValid());
      //  // Unstable assertion: assertEquals(false, box0.getIgnoreRepaint());
      //  // Unstable assertion: assertEquals(true, box0.isVisible());
      //  // Unstable assertion: assertEquals(true, box0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(false, box0.isFontSet());
      //  // Unstable assertion: assertEquals(false, box0.isBackgroundSet());
      //  // Unstable assertion: assertEquals(0, box0.getComponentCount());
      //  // Unstable assertion: assertEquals("en_GB", locale0.toString());
      //  // Unstable assertion: assertEquals("GBR", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("eng", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("en", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("GB", locale0.getCountry());
      
      double double0 = 4460.0;
      // Undeclared exception!
      try {
        TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate(regularTimePeriod0, double0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      String string0 = "]l;VXEwQhlEg~^RY";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      int int0 = 4;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNull(timeSeriesDataItem0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
      
      TimeSeries timeSeries2 = timeSeries1.addAndOrUpdate(timeSeries0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries1, timeSeries2);
      assertNotSame(timeSeries2, timeSeries0);
      assertNotSame(timeSeries2, timeSeries1);
      assertNotSame(timeSeries0, timeSeries2);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries2);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertFalse(timeSeries1.equals((Object)timeSeries2));
      assertFalse(timeSeries2.equals((Object)timeSeries0));
      assertFalse(timeSeries2.equals((Object)timeSeries1));
      assertFalse(timeSeries0.equals((Object)timeSeries2));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertNull(timeSeries1.getDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(false, timeSeries1.isEmpty());
      assertEquals(1, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Time", timeSeries2.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries2.getMaximumItemAge());
      assertEquals("Value", timeSeries2.getRangeDescription());
      assertEquals(2147483647, timeSeries2.getMaximumItemCount());
      assertEquals(true, timeSeries2.getNotify());
      assertEquals(true, timeSeries2.isEmpty());
      assertNull(timeSeries2.getDescription());
      assertEquals(0, timeSeries2.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(1, timeSeries0.getItemCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      String string0 = "]l;VXEwQhlEg~^RY";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      
      int int0 = 4;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2014, day0.getYear());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      // Undeclared exception!
      try {
        TimeSeries timeSeries1 = timeSeries0.addAndOrUpdate(timeSeries0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      timeSeries0.update((RegularTimePeriod) day0, (Number) int0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      assertNotNull(timeSeries0);
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      
      int int0 = ICC_Profile.icHdrModel;
      assertEquals(52, int0);
      
      // Undeclared exception!
      try {
        timeSeries0.update((RegularTimePeriod) month0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // TimeSeries.update(TimePeriod, Number):  period does not exist.
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      
      int int0 = 0;
      boolean boolean0 = true;
      timeSeries0.setMaximumItemCount(int0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      
      timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      
      boolean boolean0 = timeSeries0.equals((Object) class0);
      assertFalse(boolean0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      MockDate mockDate0 = (MockDate)day0.getStart();
      assertNotNull(mockDate0);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int1 = (-1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      assertFalse(int2 == int0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(int1, string0, int2, int2, int2, int2, int2, int1, int1, int2, int0);
      assertNotNull(simpleTimeZone0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals(-1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("FW H%9UwN2Ev.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=FW H%9UwN2Ev.,offset=-1,dstSavings=1178815570,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=4,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Day day1 = (Day)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) simpleTimeZone0);
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertNotNull(day1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(-1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("FW H%9UwN2Ev.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=FW H%9UwN2Ev.,offset=-1,dstSavings=1178815570,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=4,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1392336000000L, day1.getLastMillisecond());
      assertEquals(1392249600001L, day1.getFirstMillisecond());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(1392292800000L, day1.getMiddleMillisecond());
      assertEquals(2014, day1.getYear());
      assertEquals(2, day1.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      
      timeSeries0.add((RegularTimePeriod) day1, (double) int1, boolean0);
      assertNotSame(day1, day0);
      assertNotSame(day0, day1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(day1.equals((Object)day0));
      assertFalse(day0.equals((Object)day1));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertEquals("Fri Feb 14 00:00:00 GMT 2014", mockDate0.toString());
      assertEquals(-1, simpleTimeZone0.getRawOffset());
      assertEquals(false, simpleTimeZone0.useDaylightTime());
      assertEquals("FW H%9UwN2Ev.", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=FW H%9UwN2Ev.,offset=-1,dstSavings=1178815570,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=4,endMonth=0,endDay=1,endDayOfWeek=1,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1392336000000L, day1.getLastMillisecond());
      assertEquals(1392249600001L, day1.getFirstMillisecond());
      assertEquals(13, day1.getDayOfMonth());
      assertEquals(41683L, day1.getSerialIndex());
      assertEquals(1392292800000L, day1.getMiddleMillisecond());
      assertEquals(2014, day1.getYear());
      assertEquals(2, day1.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2, day0.getMonth());
      assertEquals(2, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      String string0 = "d/@\\(x=&[ZzTfs";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Number number0 = timeSeries0.getValue((RegularTimePeriod) day0);
      assertNull(number0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      
      String string0 = "P";
      Day day0 = Day.parseDay(string0);
      assertNull(day0);
      
      // Undeclared exception!
      try {
        int int1 = timeSeries0.getIndex((RegularTimePeriod) day0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'period' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      String string0 = "]l;VXEwQhlEg~^RY";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      int int0 = 4;
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNull(timeSeriesDataItem0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Collection collection0 = timeSeries1.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(collection0);
      assertFalse(timeSeries0.equals((Object)timeSeries1));
      assertFalse(timeSeries1.equals((Object)timeSeries0));
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertNull(timeSeries1.getDescription());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      
      String string0 = "]l;VXEwQhlEg~^RY";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = 4;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(14, day0.getDayOfMonth());
      
      Collection collection0 = timeSeries0.getTimePeriodsUniqueToOtherSeries(timeSeries0);
      assertNotNull(collection0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Collection collection0 = timeSeries0.getTimePeriods();
      assertNotNull(collection0);
      assertEquals(true, timeSeries0.getNotify());
      assertNull(timeSeries0.getDescription());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1172;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      Year year0 = new Year();
      assertNotNull(year0);
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.getDataItem((RegularTimePeriod) year0);
      assertNull(timeSeriesDataItem0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("2014", year0.toString());
      assertEquals(1420070399999L, year0.getLastMillisecond());
      assertEquals(1388534400000L, year0.getFirstMillisecond());
      assertEquals(2014, year0.getYear());
      assertEquals(2014L, year0.getSerialIndex());
      assertEquals(1404302399999L, year0.getMiddleMillisecond());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      
      long long0 = (-2445L);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemAge(long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'periods' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      
      int int0 = 0;
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (double) int0);
      assertNull(timeSeriesDataItem0);
      assertNull(timeSeries0.getDescription());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      
      timeSeries0.setMaximumItemCount(int0);
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getMaximumItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) boolean0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = (-1);
      // Undeclared exception!
      try {
        timeSeries0.setMaximumItemCount(int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative 'maximum' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-2899);
      String string0 = null;
      Class<Millisecond> class0 = Millisecond.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, string0, string0, (Class) class0);
      //  // Unstable assertion: assertNotNull(timeSeries0);
      //  // Unstable assertion: assertEquals(0, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(true, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      
      Day day0 = new Day();
      //  // Unstable assertion: assertNotNull(day0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      
      MockDate mockDate0 = (MockDate)day0.getEnd();
      //  // Unstable assertion: assertNotNull(mockDate0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      ZoneInfo zoneInfo0 = (ZoneInfo)RegularTimePeriod.DEFAULT_TIME_ZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      
      Second second0 = new Second((Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(second0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601583999L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392422399499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      Millisecond millisecond0 = (Millisecond)RegularTimePeriod.createInstance((Class) class0, (Date) mockDate0, (TimeZone) zoneInfo0);
      //  // Unstable assertion: assertNotNull(millisecond0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(999L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601583999999L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      timeSeries0.add((RegularTimePeriod) millisecond0, (double) int0);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(999L, millisecond0.getMillisecond());
      //  // Unstable assertion: assertEquals(3601583999999L, millisecond0.getSerialIndex());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, millisecond0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
      
      Double double0 = (Double)timeSeries0.getValue((RegularTimePeriod) second0);
      //  // Unstable assertion: assertEquals((-2899.0), (double)double0, 0.01D);
      //  // Unstable assertion: assertEquals(2, day0.getMonth());
      //  // Unstable assertion: assertEquals(1392379199999L, day0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392336000000L, day0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, day0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(2014, day0.getYear());
      //  // Unstable assertion: assertEquals(41684L, day0.getSerialIndex());
      //  // Unstable assertion: assertEquals(14, day0.getDayOfMonth());
      //  // Unstable assertion: assertEquals(1392422399000L, second0.getFirstMillisecond());
      //  // Unstable assertion: assertEquals(3601583999L, second0.getSerialIndex());
      //  // Unstable assertion: assertEquals(59, second0.getSecond());
      //  // Unstable assertion: assertEquals(1392422399499L, second0.getMiddleMillisecond());
      //  // Unstable assertion: assertEquals(1392422399999L, second0.getLastMillisecond());
      //  // Unstable assertion: assertEquals(true, timeSeries0.getNotify());
      //  // Unstable assertion: assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      //  // Unstable assertion: assertEquals(1, timeSeries0.getItemCount());
      //  // Unstable assertion: assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      //  // Unstable assertion: assertEquals(false, timeSeries0.isEmpty());
      //  // Unstable assertion: assertNull(timeSeries0.getRangeDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDomainDescription());
      //  // Unstable assertion: assertNull(timeSeries0.getDescription());
      //  // Unstable assertion: assertEquals("(", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("Fri Feb 14 23:59:59 GMT 2014", mockDate0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      // Undeclared exception!
      try {
        RegularTimePeriod regularTimePeriod0 = timeSeries0.getNextTimePeriod();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      
      TimeSeries timeSeries1 = (TimeSeries)timeSeries0.clone();
      assertNotSame(timeSeries0, timeSeries1);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(2, month0.getMonth());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertNull(timeSeries1.getDescription());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Month month0 = new Month();
      assertNotNull(month0);
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      
      TimeSeries timeSeries0 = new TimeSeries((Comparable) month0);
      assertNotNull(timeSeries0);
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      List list0 = timeSeries0.getItems();
      assertNotNull(list0);
      assertEquals(1392422399999L, month0.getMiddleMillisecond());
      assertEquals(1391212800000L, month0.getFirstMillisecond());
      assertEquals(24170L, month0.getSerialIndex());
      assertEquals(2, month0.getMonth());
      assertEquals(2014, month0.getYearValue());
      assertEquals(1393631999999L, month0.getLastMillisecond());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(2014, day0.getYear());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (double) int0, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are attempting to add an observation for the time period 14-February-2014 but the series already contains an observation for that time period. Duplicates are not permitted.  Try using the addOrUpdate() method.
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(2014, day0.getYear());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      
      String string0 = "]l;VXEwQhlEg~^R}";
      Class<Year> class0 = Year.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      int int0 = 0;
      // Undeclared exception!
      try {
        timeSeries0.add((RegularTimePeriod) day0, (Number) int0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // You are trying to add data where the time period class is org.jfree.data.time.Day, but the TimeSeries is expecting an instance of org.jfree.data.time.Year.
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      
      timeSeries0.setDomainDescription(string0);
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(0, timeSeries0.getItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals("FW H%9UwN2Ev.", timeSeries0.getDomainDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 532;
      Class<Quarter> class0 = Quarter.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      
      // Undeclared exception!
      try {
        timeSeries0.update(int0, (Number) int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 532, Size: 0
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      
      Day day0 = new Day();
      assertNotNull(day0);
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      int int0 = ICC_Profile.icSigSpaceFCLR;
      assertEquals(1178815570, int0);
      
      TimeSeriesDataItem timeSeriesDataItem0 = timeSeries0.addOrUpdate((RegularTimePeriod) day0, (Number) int0);
      assertNull(timeSeriesDataItem0);
      assertEquals(true, timeSeries0.getNotify());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(1, timeSeries0.getItemCount());
      assertEquals(false, timeSeries0.isEmpty());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(41684L, day0.getSerialIndex());
      assertEquals(1392422399999L, day0.getLastMillisecond());
      assertEquals(1392336000000L, day0.getFirstMillisecond());
      assertEquals(2, day0.getMonth());
      assertEquals(14, day0.getDayOfMonth());
      assertEquals(2014, day0.getYear());
      assertEquals(1392379199999L, day0.getMiddleMillisecond());
      
      // Undeclared exception!
      try {
        timeSeries0.add(timeSeriesDataItem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'item' argument.
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 0;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) int0);
      assertNotNull(timeSeries0);
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      TimeSeries timeSeries1 = timeSeries0.createCopy(int0, int0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertNotNull(timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      
      boolean boolean0 = timeSeries1.equals((Object) timeSeries0);
      assertTrue(boolean0);
      assertNotSame(timeSeries1, timeSeries0);
      assertNotSame(timeSeries0, timeSeries1);
      assertTrue(timeSeries1.equals((Object)timeSeries0));
      assertTrue(timeSeries0.equals((Object)timeSeries1));
      assertEquals(9223372036854775807L, timeSeries1.getMaximumItemAge());
      assertNull(timeSeries1.getDescription());
      assertEquals("Time", timeSeries1.getDomainDescription());
      assertEquals(0, timeSeries1.getItemCount());
      assertEquals(2147483647, timeSeries1.getMaximumItemCount());
      assertEquals("Value", timeSeries1.getRangeDescription());
      assertEquals(true, timeSeries1.isEmpty());
      assertEquals(true, timeSeries1.getNotify());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertNull(timeSeries0.getDescription());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.getNotify());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "FW H%9UwN2Ev.";
      Class<Day> class0 = Day.class;
      TimeSeries timeSeries0 = new TimeSeries((Comparable) string0, (Class) class0);
      assertNotNull(timeSeries0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals("Value", timeSeries0.getRangeDescription());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
      
      timeSeries0.setRangeDescription(string0);
      assertNull(timeSeries0.getDescription());
      assertEquals(2147483647, timeSeries0.getMaximumItemCount());
      assertEquals("FW H%9UwN2Ev.", timeSeries0.getRangeDescription());
      assertEquals(0, timeSeries0.getItemCount());
      assertEquals("Time", timeSeries0.getDomainDescription());
      assertEquals(9223372036854775807L, timeSeries0.getMaximumItemAge());
      assertEquals(true, timeSeries0.isEmpty());
      assertEquals(true, timeSeries0.getNotify());
  }
}
