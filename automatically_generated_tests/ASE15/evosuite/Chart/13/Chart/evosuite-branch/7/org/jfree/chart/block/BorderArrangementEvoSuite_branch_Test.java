/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:51:33 GMT 2014
 */

package org.jfree.chart.block;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.Rectangle2D;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JLayeredPane;
import javax.swing.SwingConstants;
import javax.swing.plaf.FontUIResource;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.EmptyBlock;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.statistics.DefaultMultiValueCategoryDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.time.TimeTableXYDataset;
import org.junit.runner.RunWith;

 
public class BorderArrangementEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(boolean0);
  }

  @Test
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertEquals(400, (int)integer0);
      
      boolean boolean0 = borderArrangement0.equals((Object) integer0);
      assertFalse(boolean0);
  }

  @Test
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      
      String string0 = "4NYZA=$(<?%g:\\";
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      assertNotNull(jCheckBoxMenuItem0);
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      
      FontUIResource fontUIResource0 = (FontUIResource)jCheckBoxMenuItem0.getFont();
      assertNotNull(fontUIResource0);
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(1, fontUIResource0.getStyle());
      
      LabelBlock labelBlock0 = new LabelBlock(string0, (Font) fontUIResource0);
      assertNotNull(labelBlock0);
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getID());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(1, fontUIResource0.getStyle());
      
      Object object0 = null;
      borderArrangement1.add((Block) labelBlock0, object0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertEquals(false, jCheckBoxMenuItem0.isCursorSet());
      assertEquals(false, jCheckBoxMenuItem0.isPreferredSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.isVisible());
      assertEquals(false, jCheckBoxMenuItem0.isDisplayable());
      assertEquals(true, jCheckBoxMenuItem0.isBackgroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusCycleRoot());
      assertEquals(true, jCheckBoxMenuItem0.isForegroundSet());
      assertEquals(false, jCheckBoxMenuItem0.isLightweight());
      assertEquals(false, jCheckBoxMenuItem0.isShowing());
      assertEquals(0, jCheckBoxMenuItem0.getComponentCount());
      assertEquals(true, jCheckBoxMenuItem0.isFontSet());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(true, jCheckBoxMenuItem0.isEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isMaximumSizeSet());
      assertEquals(true, jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(false, jCheckBoxMenuItem0.isValid());
      assertEquals(false, jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertEquals(false, jCheckBoxMenuItem0.getIgnoreRepaint());
      assertEquals(false, jCheckBoxMenuItem0.isMinimumSizeSet());
      assertEquals(0, jCheckBoxMenuItem0.countComponents());
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      assertNull(labelBlock0.getID());
      assertEquals(12, fontUIResource0.getSize());
      assertEquals(12.0F, fontUIResource0.getSize2D(), 0.01F);
      assertEquals(false, fontUIResource0.hasLayoutAttributes());
      assertEquals(false, fontUIResource0.isTransformed());
      assertEquals(false, fontUIResource0.hasUniformLineMetrics());
      assertEquals(false, fontUIResource0.isItalic());
      assertEquals("javax.swing.plaf.FontUIResource[family=Dialog,name=Dialog,style=bold,size=12]", fontUIResource0.toString());
      assertEquals(false, fontUIResource0.isPlain());
      assertEquals(true, fontUIResource0.isBold());
      assertEquals("Dialog", fontUIResource0.getName());
      assertEquals(1, fontUIResource0.getStyle());
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(boolean0);
  }

  @Test
  public void test03()  throws Throwable  {
      double double0 = (-17.785707986);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.width, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-17.785707986), emptyBlock0.getHeight(), 0.01D);
      assertEquals((-17.785707986), emptyBlock0.getWidth(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-17.785707986), emptyBlock0.getHeight(), 0.01D);
      assertEquals((-17.785707986), emptyBlock0.getWidth(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Range range0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals((-17.785707986), rectangleConstraint0.getWidth(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeFF(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals((-17.785707986), size2D0.width, 0.01D);
      assertEquals((-17.785707986), size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals((-17.785707986), rectangleConstraint0.getWidth(), 0.01D);
  }

  @Test
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      int int0 = 121;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      borderArrangement0.add((Block) blockContainer0, (Object) graphics2D0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      boolean boolean0 = false;
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
  }

  @Test
  public void test05()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      
      Range range0 = new Range(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = (-17.785707986);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.width, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals((-17.785707986), emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-17.785707986), emptyBlock0.getWidth(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals((-17.785707986), emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-17.785707986), emptyBlock0.getWidth(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      DefaultMultiValueCategoryDataset defaultMultiValueCategoryDataset0 = new DefaultMultiValueCategoryDataset();
      assertNotNull(defaultMultiValueCategoryDataset0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      
      boolean boolean0 = true;
      Range range0 = defaultMultiValueCategoryDataset0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0, defaultMultiValueCategoryDataset0.getRowCount());
      assertEquals(0, defaultMultiValueCategoryDataset0.getColumnCount());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test08()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangle2D_Double0.width);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
  }

  @Test
  public void test09()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(rectangle2D_Double0.y, rectangle2D_Double0.height);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(rectangleEdge1);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge1.toString());
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge1.toString());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(rectangle2D_Double0.height, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test10()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangle2D_Double0.width);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.y, rectangle2D_Double0.y);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      
      RectangleEdge rectangleEdge0 = null;
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = blockContainer0.arrange(graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      double double0 = (-17.785707986);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertNotNull(rectangle2D_Double0);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.width, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-17.785707986), emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals((-17.785707986), emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals((-17.785707986), rectangle2D_Double0.x, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.height, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.y, 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.width, 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals((-17.785707986), emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals((-17.785707986), emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals((-17.785707986), rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals((-35.571415972), rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals((-26.678561978999998), rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      
      BlockContainer blockContainer0 = null;
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.LEFT;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.LEFT", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      EmptyBlock emptyBlock0 = new EmptyBlock(rectangle2D_Double0.height, rectangle2D_Double0.height);
      assertNotNull(emptyBlock0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleEdge rectangleEdge0 = RectangleEdge.TOP;
      assertNotNull(rectangleEdge0);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      borderArrangement0.add((Block) emptyBlock0, (Object) rectangleEdge0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, emptyBlock0.getWidth(), 0.01D);
      assertNull(emptyBlock0.getID());
      assertEquals(0.0, emptyBlock0.getHeight(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, emptyBlock0.getContentXOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge0.toString());
      
      Size2D size2D0 = borderArrangement0.arrangeNN(blockContainer0, graphics2D0);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
  }

  @Test
  public void test15()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      int int0 = SwingConstants.NEXT;
      assertEquals(12, int0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) int0);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      boolean boolean0 = false;
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(boolean0);
      assertNull(range0);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedHeight();
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      Range range0 = new Range(rectangle2D_Double0.y, rectangle2D_Double0.height);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(rectangle2D_Double0.height, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(0.0, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLength(), 0.01D);
      assertEquals(0.0, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
  }

  @Test
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      int int0 = 121;
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(int0, int0);
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      borderArrangement0.add((Block) blockContainer0, (Object) graphics2D0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      
      boolean boolean0 = false;
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      assertNotNull(range0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(120, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      double double0 = (-2.147483648E9);
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, double0);
      assertNotNull(rectangleConstraint0);
      assertEquals((-2.147483648E9), rectangleConstraint0.getWidth(), 0.01D);
      assertEquals((-2.147483648E9), rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals((-2.147483648E9), rectangleConstraint0.getWidth(), 0.01D);
      assertEquals((-2.147483648E9), rectangleConstraint0.getHeight(), 0.01D);
      assertEquals((-2.147483648E9), rectangleConstraint1.getWidth(), 0.01D);
      assertEquals((-2.147483648E9), rectangleConstraint1.getHeight(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test19()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNotNull(blockContainer0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      TimeTableXYDataset timeTableXYDataset0 = new TimeTableXYDataset();
      assertNotNull(timeTableXYDataset0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      boolean boolean0 = false;
      Range range0 = timeTableXYDataset0.getDomainBounds(boolean0);
      assertNull(range0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, range0);
      assertNotNull(rectangleConstraint0);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotNull(rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(0, timeTableXYDataset0.getItemCount());
      assertEquals(0, timeTableXYDataset0.getSeriesCount());
      assertEquals(false, timeTableXYDataset0.getDomainIsPointsInTime());
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test20()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
  }
}
