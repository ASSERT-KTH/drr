/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 11 16:30:20 GMT 2014
 */

package org.jfree.chart.block;

import static org.junit.Assert.*;
import org.junit.Test;
import java.awt.Event;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.geom.Rectangle2D;
import javax.swing.JLayeredPane;
import javax.swing.JTextField;
import javax.swing.SwingConstants;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
 import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.mock.java.lang.MockRuntimeException;
import org.jfree.chart.block.Arrangement;
import org.jfree.chart.block.Block;
import org.jfree.chart.block.BlockContainer;
import org.jfree.chart.block.BorderArrangement;
import org.jfree.chart.block.LabelBlock;
import org.jfree.chart.block.RectangleConstraint;
import org.jfree.chart.util.RectangleEdge;
import org.jfree.chart.util.Size2D;
import org.jfree.data.Range;
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
import org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.junit.runner.RunWith;

 
public class BorderArrangementEvoSuite_branch_Test   {

  @Test
  public void test00()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      Object object0 = null;
      borderArrangement0.add((Block) blockContainer0, object0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(boolean0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test
  public void test01()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertNotNull(blockContainer0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertFalse(boolean0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
  }

  @Test
  public void test02()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertFalse(boolean0);
      assertFalse(borderArrangement0.equals((Object)borderArrangement1));
      assertFalse(borderArrangement1.equals((Object)borderArrangement0));
  }

  @Test
  public void test03()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BorderArrangement borderArrangement1 = new BorderArrangement();
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
      assertNotNull(borderArrangement1);
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement1);
      assertNotSame(borderArrangement0, borderArrangement1);
      assertNotSame(borderArrangement1, borderArrangement0);
      assertTrue(boolean0);
      assertTrue(borderArrangement0.equals((Object)borderArrangement1));
      assertTrue(borderArrangement1.equals((Object)borderArrangement0));
  }

  @Test
  public void test04()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      
      boolean boolean0 = borderArrangement0.equals((Object) integer0);
      assertFalse(boolean0);
  }

  @Test
  public void test05()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      Object object0 = null;
      borderArrangement0.add((Block) blockContainer0, object0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      
      boolean boolean0 = borderArrangement0.equals((Object) borderArrangement0);
      assertTrue(boolean0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = 1;
      Event event0 = new Event((Object) rectangleEdge0, int0, (Object) rectangleEdge0);
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(event0);
      assertEquals(1, event0.id);
      assertEquals(0, event0.y);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.key);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(event0.x, event0.y);
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(1, event0.id);
      assertEquals(0, event0.y);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.key);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(range0);
      assertEquals(1, event0.id);
      assertEquals(0, event0.y);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.key);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(size2D0);
      assertEquals(1, event0.id);
      assertEquals(0, event0.y);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.key);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
  }

  @Test
  public void test06()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotNull(rectangleEdge1);
      
      int int0 = 1;
      boolean boolean0 = rectangleEdge0.equals((Object) rectangle2D_Double0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertFalse(boolean0);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      
      Event event0 = new Event((Object) rectangleEdge1, int0, (Object) rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotNull(event0);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(event0.x, event0.key);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
  }

  @Test
  public void test07()  throws Throwable  {
      double double0 = 0.0;
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      Object object0 = null;
      borderArrangement0.add((Block) blockContainer0, object0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(double0, double0, double0, double0);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeFN(blockContainer0, graphics2D0, rectangle2D_Double0.width);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test08()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      String string0 = "@GCNP}E";
      LabelBlock labelBlock0 = new LabelBlock(string0);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      assertNotNull(labelBlock0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      blockContainer0.add((Block) labelBlock0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(false, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getID());
      assertEquals(0.0, labelBlock0.getContentXOffset(), 0.01D);
      assertNull(labelBlock0.getToolTipText());
      assertEquals(0.0, labelBlock0.getHeight(), 0.01D);
      assertNull(labelBlock0.getURLText());
      assertEquals(0.0, labelBlock0.getContentYOffset(), 0.01D);
      assertEquals(0.0, labelBlock0.getWidth(), 0.01D);
      
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrangeFR(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test
  public void test09()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(rectangleEdge1);
      
      int int0 = 1;
      boolean boolean0 = rectangleEdge0.equals((Object) rectangle2D_Double0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertFalse(boolean0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      Event event0 = new Event((Object) rectangleEdge1, int0, (Object) rectangleEdge1);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(event0);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(event0.x, event0.key);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(range0);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((double) int0, range0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(rectangleConstraint0);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.TOP,arg=RectangleEdge.TOP]", event0.toString());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(1.0, size2D0.getWidth(), 0.01D);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(size2D0);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0, event0.key);
      assertEquals(0, event0.modifiers);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(1.0, size2D0.width, 0.01D);
  }

  @Test
  public void test10()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNotNull(blockContainer0);
      
      Object object0 = null;
      borderArrangement0.add((Block) blockContainer0, object0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test11()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
  }

  @Test
  public void test12()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals("RectangleEdge.TOP", rectangleEdge1.toString());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = RectangleConstraint.NONE;
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0.0, size2D0.width, 0.01D);
  }

  @Test
  public void test13()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = 1;
      boolean boolean0 = rectangleEdge0.equals((Object) rectangle2D_Double0);
      assertFalse(boolean0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      Event event0 = new Event((Object) rectangleEdge0, int0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(false, event0.controlDown());
      assertNotNull(event0);
      assertEquals(0, event0.modifiers);
      assertEquals(0, event0.key);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(event0.x, event0.key);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(false, event0.controlDown());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, event0.modifiers);
      assertEquals(0, event0.key);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(false, event0.controlDown());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(range0);
      assertEquals(0, event0.modifiers);
      assertEquals(0, event0.key);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      
      Graphics2D graphics2D0 = null;
      Size2D size2D0 = borderArrangement0.arrangeRR(blockContainer0, range0, range0, graphics2D0);
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(0.0, size2D0.getWidth(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(false, event0.metaDown());
      assertEquals(false, event0.shiftDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(false, event0.controlDown());
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0, event0.modifiers);
      assertEquals(0, event0.key);
      assertEquals(1, event0.id);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(0, event0.x);
      assertEquals(0, event0.y);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
  }

  @Test
  public void test14()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.BOTTOM;
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      int int0 = 1;
      boolean boolean0 = rectangleEdge0.equals((Object) rectangle2D_Double0);
      assertFalse(boolean0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      
      Event event0 = new Event((Object) rectangleEdge0, int0, (Object) rectangleEdge0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertNotNull(event0);
      assertEquals(0, event0.key);
      assertEquals(0, event0.y);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(1, event0.id);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      
      DynamicTimeSeriesCollection dynamicTimeSeriesCollection0 = new DynamicTimeSeriesCollection(event0.x, event0.key);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertNotNull(dynamicTimeSeriesCollection0);
      assertEquals(0, event0.key);
      assertEquals(0, event0.y);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(1, event0.id);
      
      Range range0 = dynamicTimeSeriesCollection0.getRangeBounds(boolean0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(range0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0, event0.key);
      assertEquals(0, event0.y);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(1, event0.id);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((double) int0, range0);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(rectangleConstraint0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0, event0.key);
      assertEquals(0, event0.y);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(1, event0.id);
      
      Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals("RectangleEdge.BOTTOM", rectangleEdge0.toString());
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(1.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, size2D0.getHeight(), 0.01D);
      assertEquals(1.0, size2D0.getWidth(), 0.01D);
      assertEquals(0, dynamicTimeSeriesCollection0.getPosition());
      assertEquals(0, dynamicTimeSeriesCollection0.getSeriesCount());
      assertEquals(0, dynamicTimeSeriesCollection0.getOldestIndex());
      assertEquals(-1, dynamicTimeSeriesCollection0.getNewestIndex());
      assertEquals(false, event0.shiftDown());
      assertEquals(false, event0.controlDown());
      assertEquals(false, event0.metaDown());
      assertEquals("java.awt.Event[id=1,x=0,y=0,target=RectangleEdge.BOTTOM,arg=RectangleEdge.BOTTOM]", event0.toString());
      assertEquals(0.0, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertNotNull(size2D0);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(1.0, size2D0.width, 0.01D);
      assertEquals(0.0, size2D0.height, 0.01D);
      assertEquals(0, event0.key);
      assertEquals(0, event0.y);
      assertEquals(0, event0.x);
      assertEquals(0, event0.modifiers);
      assertEquals(0L, event0.when);
      assertEquals(0, event0.clickCount);
      assertEquals(1, event0.id);
  }

  @Test
  public void test15()  throws Throwable  {
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertNotNull(rectangle2D_Double0);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      String string0 = "Invalid bounds";
      JTextField jTextField0 = new JTextField(string0);
      assertEquals(false, jTextField0.isFocusCycleRoot());
      assertEquals(false, jTextField0.isMaximumSizeSet());
      assertEquals(0, jTextField0.countComponents());
      assertEquals(true, jTextField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextField0.isFontSet());
      assertEquals(false, jTextField0.getIgnoreRepaint());
      assertEquals(false, jTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jTextField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextField0.isEnabled());
      assertEquals(false, jTextField0.isDisplayable());
      assertEquals(false, jTextField0.isLightweight());
      assertEquals(false, jTextField0.isValid());
      assertEquals(false, jTextField0.isShowing());
      assertEquals(true, jTextField0.isForegroundSet());
      assertEquals(false, jTextField0.isMinimumSizeSet());
      assertEquals(true, jTextField0.isBackgroundSet());
      assertEquals(false, jTextField0.isPreferredSizeSet());
      assertEquals(0, jTextField0.getComponentCount());
      assertEquals(true, jTextField0.isCursorSet());
      assertEquals(true, jTextField0.isVisible());
      assertNotNull(jTextField0);
      
      Point point0 = jTextField0.location();
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(false, jTextField0.isFocusCycleRoot());
      assertEquals(false, jTextField0.isMaximumSizeSet());
      assertEquals(0, jTextField0.countComponents());
      assertEquals(true, jTextField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextField0.isFontSet());
      assertEquals(false, jTextField0.getIgnoreRepaint());
      assertEquals(false, jTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jTextField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextField0.isEnabled());
      assertEquals(false, jTextField0.isDisplayable());
      assertEquals(false, jTextField0.isLightweight());
      assertEquals(false, jTextField0.isValid());
      assertEquals(false, jTextField0.isShowing());
      assertEquals(true, jTextField0.isForegroundSet());
      assertEquals(false, jTextField0.isMinimumSizeSet());
      assertEquals(true, jTextField0.isBackgroundSet());
      assertEquals(false, jTextField0.isPreferredSizeSet());
      assertEquals(0, jTextField0.getComponentCount());
      assertEquals(true, jTextField0.isCursorSet());
      assertEquals(true, jTextField0.isVisible());
      assertNotNull(point0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint((double) point0.y, rectangle2D_Double0.y);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, jTextField0.isFocusCycleRoot());
      assertEquals(false, jTextField0.isMaximumSizeSet());
      assertEquals(0, jTextField0.countComponents());
      assertEquals(true, jTextField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextField0.isFontSet());
      assertEquals(false, jTextField0.getIgnoreRepaint());
      assertEquals(false, jTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jTextField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextField0.isEnabled());
      assertEquals(false, jTextField0.isDisplayable());
      assertEquals(false, jTextField0.isLightweight());
      assertEquals(false, jTextField0.isValid());
      assertEquals(false, jTextField0.isShowing());
      assertEquals(true, jTextField0.isForegroundSet());
      assertEquals(false, jTextField0.isMinimumSizeSet());
      assertEquals(true, jTextField0.isBackgroundSet());
      assertEquals(false, jTextField0.isPreferredSizeSet());
      assertEquals(0, jTextField0.getComponentCount());
      assertEquals(true, jTextField0.isCursorSet());
      assertEquals(true, jTextField0.isVisible());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertNotNull(rectangleConstraint0);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertEquals("java.awt.Point[x=0,y=0]", point0.toString());
      assertEquals(0.0, point0.getX(), 0.01D);
      assertEquals(0.0, point0.getY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMinY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxY(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getCenterX(), 0.01D);
      assertEquals(0.0, rectangle2D_Double0.getMaxX(), 0.01D);
      assertEquals(false, jTextField0.isFocusCycleRoot());
      assertEquals(false, jTextField0.isMaximumSizeSet());
      assertEquals(0, jTextField0.countComponents());
      assertEquals(true, jTextField0.getFocusTraversalKeysEnabled());
      assertEquals(true, jTextField0.isFontSet());
      assertEquals(false, jTextField0.getIgnoreRepaint());
      assertEquals(false, jTextField0.isFocusTraversalPolicySet());
      assertEquals(false, jTextField0.isFocusTraversalPolicyProvider());
      assertEquals(true, jTextField0.isEnabled());
      assertEquals(false, jTextField0.isDisplayable());
      assertEquals(false, jTextField0.isLightweight());
      assertEquals(false, jTextField0.isValid());
      assertEquals(false, jTextField0.isShowing());
      assertEquals(true, jTextField0.isForegroundSet());
      assertEquals(false, jTextField0.isMinimumSizeSet());
      assertEquals(true, jTextField0.isBackgroundSet());
      assertEquals(false, jTextField0.isPreferredSizeSet());
      assertEquals(0, jTextField0.getComponentCount());
      assertEquals(true, jTextField0.isCursorSet());
      assertEquals(true, jTextField0.isVisible());
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getWidth(), 0.01D);
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertNotNull(rectangleConstraint1);
      assertEquals(0, point0.x);
      assertEquals(0, point0.y);
      assertEquals(0.0, rectangle2D_Double0.height, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.x, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.y, 0.01D);
      assertEquals(0.0, rectangle2D_Double0.width, 0.01D);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test16()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      double double0 = 2953.13;
      DefaultBoxAndWhiskerCategoryDataset defaultBoxAndWhiskerCategoryDataset0 = new DefaultBoxAndWhiskerCategoryDataset();
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertNotNull(defaultBoxAndWhiskerCategoryDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerCategoryDataset0.getRangeBounds(boolean0);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertNotNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(double0, range0);
      assertEquals(2953.13, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      RectangleConstraint rectangleConstraint1 = rectangleConstraint0.toUnconstrainedWidth();
      assertNotSame(rectangleConstraint1, rectangleConstraint0);
      assertNotSame(rectangleConstraint0, rectangleConstraint1);
      assertEquals(2953.13, rectangleConstraint1.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint1.getHeight(), 0.01D);
      assertEquals(2953.13, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(0.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getRowCount());
      assertEquals(0, defaultBoxAndWhiskerCategoryDataset0.getColumnCount());
      assertEquals(Double.NaN, range0.getLowerBound(), 0.01D);
      assertEquals(Double.NaN, range0.getCentralValue(), 0.01D);
      assertEquals(Double.NaN, range0.getUpperBound(), 0.01D);
      assertEquals(Double.NaN, range0.getLength(), 0.01D);
      assertFalse(rectangleConstraint1.equals((Object)rectangleConstraint0));
      assertFalse(rectangleConstraint0.equals((Object)rectangleConstraint1));
      assertNotNull(rectangleConstraint1);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test17()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer();
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertNotNull(blockContainer0);
      
      Graphics2D graphics2D0 = null;
      int int0 = SwingConstants.NORTH_EAST;
      assertEquals(2, int0);
      
      DefaultBoxAndWhiskerXYDataset defaultBoxAndWhiskerXYDataset0 = new DefaultBoxAndWhiskerXYDataset((Comparable) int0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(defaultBoxAndWhiskerXYDataset0);
      
      boolean boolean0 = true;
      Range range0 = defaultBoxAndWhiskerXYDataset0.getRangeBounds(boolean0);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNull(range0);
      
      RectangleConstraint rectangleConstraint0 = new RectangleConstraint(range0, (double) int0);
      assertEquals(0.0, rectangleConstraint0.getWidth(), 0.01D);
      assertEquals(2.0, rectangleConstraint0.getHeight(), 0.01D);
      assertEquals(1, defaultBoxAndWhiskerXYDataset0.getSeriesCount());
      assertEquals(1.5, defaultBoxAndWhiskerXYDataset0.getOutlierCoefficient(), 0.01D);
      assertEquals(2.0, defaultBoxAndWhiskerXYDataset0.getFaroutCoefficient(), 0.01D);
      assertNotNull(rectangleConstraint0);
      
      // Undeclared exception!
      try {
        Size2D size2D0 = borderArrangement0.arrange(blockContainer0, graphics2D0, rectangleConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Not implemented.
         //
      }
  }

  @Test
  public void test18()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      BlockContainer blockContainer0 = new BlockContainer((Arrangement) borderArrangement0);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertNotNull(blockContainer0);
      
      RectangleEdge rectangleEdge0 = RectangleEdge.RIGHT;
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertNotNull(rectangleEdge0);
      
      RectangleEdge rectangleEdge1 = RectangleEdge.opposite(rectangleEdge0);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
      assertNotNull(rectangleEdge1);
      
      borderArrangement0.add((Block) blockContainer0, (Object) rectangleEdge1);
      assertNotSame(rectangleEdge1, rectangleEdge0);
      assertNotSame(rectangleEdge0, rectangleEdge1);
      assertEquals(0.0, blockContainer0.getContentYOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getContentXOffset(), 0.01D);
      assertEquals(0.0, blockContainer0.getWidth(), 0.01D);
      assertNull(blockContainer0.getID());
      assertEquals(0.0, blockContainer0.getHeight(), 0.01D);
      assertEquals(true, blockContainer0.isEmpty());
      assertEquals("RectangleEdge.LEFT", rectangleEdge1.toString());
      assertEquals("RectangleEdge.RIGHT", rectangleEdge0.toString());
      assertFalse(rectangleEdge1.equals((Object)rectangleEdge0));
      assertFalse(rectangleEdge0.equals((Object)rectangleEdge1));
  }

  @Test
  public void test19()  throws Throwable  {
      BorderArrangement borderArrangement0 = new BorderArrangement();
      assertNotNull(borderArrangement0);
      
      borderArrangement0.clear();
  }
}
